
# 1 "LCDNokia5110.c"

# 13 "C:\Program Files (x86)\Microchip\xc8\v1.44\include\stdint.h"
typedef signed char int8_t;

# 20
typedef signed int int16_t;

# 28
typedef signed short long int int24_t;

# 36
typedef signed long int int32_t;

# 43
typedef unsigned char uint8_t;

# 49
typedef unsigned int uint16_t;

# 56
typedef unsigned short long int uint24_t;

# 63
typedef unsigned long int uint32_t;

# 71
typedef signed char int_least8_t;

# 78
typedef signed int int_least16_t;

# 90
typedef signed short long int int_least24_t;

# 98
typedef signed long int int_least32_t;

# 105
typedef unsigned char uint_least8_t;

# 111
typedef unsigned int uint_least16_t;

# 121
typedef unsigned short long int uint_least24_t;

# 128
typedef unsigned long int uint_least32_t;

# 137
typedef signed char int_fast8_t;

# 144
typedef signed int int_fast16_t;

# 156
typedef signed short long int int_fast24_t;

# 164
typedef signed long int int_fast32_t;

# 171
typedef unsigned char uint_fast8_t;

# 177
typedef unsigned int uint_fast16_t;

# 187
typedef unsigned short long int uint_fast24_t;

# 194
typedef unsigned long int uint_fast32_t;

# 200
typedef int32_t intmax_t;




typedef uint32_t uintmax_t;




typedef int16_t intptr_t;




typedef uint16_t uintptr_t;

# 7 "GPIO.h"
typedef enum
{
CLK_8MHZ,
CLK_4MHZ,
CLK_2MHZ,
CLK_1MHZ,
CLK_500KHZ,
CLK_250KHZ,
CLK_125KHZ,
CLK_31KHZ
} GPIO_SourceClk;

# 21
typedef enum
{
GPIO_INPUT,
GPIO_OUTPUT
} GPIO_state;

# 29
typedef enum
{
GPIO_A,
GPIO_B,
GPIO_C
} GPIO_portNameType;

typedef enum
{
GPIO_DIGITAL,
GPIO_ANALOG
} GPIO_analogType;

void GPIO_sourceClock(GPIO_SourceClk clk);

void GPIO_dataDirectionPIN
(GPIO_portNameType portName, uint8_t pin, GPIO_state state);

void GPIO_dataDirectionPORT
(GPIO_portNameType portName, GPIO_state state);

void GPIO_analogSelector
(GPIO_analogType type, uint8_t pin);

void GPIO_setPIN
(GPIO_portNameType portName, uint8_t pin);

void GPIO_clearPIN
(GPIO_portNameType portName, uint8_t pin);

void delay(uint32_t delay);

# 7 "SPI.h"
typedef enum
{
SPI_LOW_POLARITY,
SPI_HIGH_POLARITY
} SPI_PolarityType;


typedef enum
{
SPI_LOW_PHASE,
SPI_HIGH_PHASE
} SPI_PhaseType;

typedef enum
{
SPI_SERIAL_CLK4,
SPI_SERIAL_CLK16,
SPI_SERIAL_CLK64
} SPI_SerialClk;

# 29
typedef struct
{
SPI_PolarityType SPI_Polarity;
SPI_PhaseType SPI_Phase;
SPI_SerialClk SPI_Clk;
} SPI_ConfigType;

void SPI_init(const SPI_ConfigType* SPI_Config);

int8_t SPI_write(uint8_t data);

uint8_t SPI_read(void);

# 17 "LCDNokia5110.h"
typedef struct
{
uint8_t numberDigits;
uint8_t realDigit[7];
}formatASCII;


void LCDNokia_init(void);

# 29
void LCDNokia_writeByte(uint8_t, uint8_t);

void LCDNokia_clear(void);

# 35
void LCDNokia_gotoXY(uint8_t x, uint8_t y);

void LCDNokia_bitmap(const uint8_t*);

void LCDNokia_sendChar(uint8_t);

void LCDNokia_sendString(uint8_t*);

void LCD_delay(void);


void LCDNokia_printValue(uint32_t value);

void LCDNokia_printFloatValue(float value);

# 7 "LCDNokia5110.c"
static const uint8_t ASCII[][5] =
{
{0x00, 0x00, 0x00, 0x00, 0x00}
,{0x00, 0x00, 0x5f, 0x00, 0x00}
,{0x00, 0x07, 0x00, 0x07, 0x00}
,{0x14, 0x7f, 0x14, 0x7f, 0x14}
,{0x24, 0x2a, 0x7f, 0x2a, 0x12}
,{0x23, 0x13, 0x08, 0x64, 0x62}
,{0x36, 0x49, 0x55, 0x22, 0x50}
,{0x00, 0x05, 0x03, 0x00, 0x00}
,{0x00, 0x1c, 0x22, 0x41, 0x00}
,{0x00, 0x41, 0x22, 0x1c, 0x00}
,{0x14, 0x08, 0x3e, 0x08, 0x14}
,{0x08, 0x08, 0x3e, 0x08, 0x08}
,{0x00, 0x50, 0x30, 0x00, 0x00}
,{0x08, 0x08, 0x08, 0x08, 0x08}
,{0x00, 0x60, 0x60, 0x00, 0x00}
,{0x20, 0x10, 0x08, 0x04, 0x02}
,{0x3e, 0x51, 0x49, 0x45, 0x3e}
,{0x00, 0x42, 0x7f, 0x40, 0x00}
,{0x42, 0x61, 0x51, 0x49, 0x46}
,{0x21, 0x41, 0x45, 0x4b, 0x31}
,{0x18, 0x14, 0x12, 0x7f, 0x10}
,{0x27, 0x45, 0x45, 0x45, 0x39}
,{0x3c, 0x4a, 0x49, 0x49, 0x30}
,{0x01, 0x71, 0x09, 0x05, 0x03}
,{0x36, 0x49, 0x49, 0x49, 0x36}
,{0x06, 0x49, 0x49, 0x29, 0x1e}
,{0x00, 0x36, 0x36, 0x00, 0x00}
,{0x00, 0x56, 0x36, 0x00, 0x00}
,{0x08, 0x14, 0x22, 0x41, 0x00}
,{0x14, 0x14, 0x14, 0x14, 0x14}
,{0x00, 0x41, 0x22, 0x14, 0x08}
,{0x02, 0x01, 0x51, 0x09, 0x06}
,{0x32, 0x49, 0x79, 0x41, 0x3e}
,{0x7e, 0x11, 0x11, 0x11, 0x7e}
,{0x7f, 0x49, 0x49, 0x49, 0x36}
,{0x3e, 0x41, 0x41, 0x41, 0x22}
,{0x7f, 0x41, 0x41, 0x22, 0x1c}
,{0x7f, 0x49, 0x49, 0x49, 0x41}
,{0x7f, 0x09, 0x09, 0x09, 0x01}
,{0x3e, 0x41, 0x49, 0x49, 0x7a}
,{0x7f, 0x08, 0x08, 0x08, 0x7f}
,{0x00, 0x41, 0x7f, 0x41, 0x00}
,{0x20, 0x40, 0x41, 0x3f, 0x01}
,{0x7f, 0x08, 0x14, 0x22, 0x41}
,{0x7f, 0x40, 0x40, 0x40, 0x40}
,{0x7f, 0x02, 0x0c, 0x02, 0x7f}
,{0x7f, 0x04, 0x08, 0x10, 0x7f}
,{0x3e, 0x41, 0x41, 0x41, 0x3e}
,{0x7f, 0x09, 0x09, 0x09, 0x06}
,{0x3e, 0x41, 0x51, 0x21, 0x5e}
,{0x7f, 0x09, 0x19, 0x29, 0x46}
,{0x46, 0x49, 0x49, 0x49, 0x31}
,{0x01, 0x01, 0x7f, 0x01, 0x01}
,{0x3f, 0x40, 0x40, 0x40, 0x3f}
,{0x1f, 0x20, 0x40, 0x20, 0x1f}
,{0x3f, 0x40, 0x38, 0x40, 0x3f}
,{0x63, 0x14, 0x08, 0x14, 0x63}
,{0x07, 0x08, 0x70, 0x08, 0x07}
,{0x61, 0x51, 0x49, 0x45, 0x43}
,{0x00, 0x7f, 0x41, 0x41, 0x00}
,{0x02, 0x04, 0x08, 0x10, 0x20}
,{0x00, 0x41, 0x41, 0x7f, 0x00}
,{0x04, 0x02, 0x01, 0x02, 0x04}
,{0x40, 0x40, 0x40, 0x40, 0x40}
,{0x00, 0x01, 0x02, 0x04, 0x00}
,{0x20, 0x54, 0x54, 0x54, 0x78}
,{0x7f, 0x48, 0x44, 0x44, 0x38}
,{0x38, 0x44, 0x44, 0x44, 0x20}
,{0x38, 0x44, 0x44, 0x48, 0x7f}
,{0x38, 0x54, 0x54, 0x54, 0x18}
,{0x08, 0x7e, 0x09, 0x01, 0x02}
,{0x0c, 0x52, 0x52, 0x52, 0x3e}
,{0x7f, 0x08, 0x04, 0x04, 0x78}
,{0x00, 0x44, 0x7d, 0x40, 0x00}
,{0x20, 0x40, 0x44, 0x3d, 0x00}
,{0x7f, 0x10, 0x28, 0x44, 0x00}
,{0x00, 0x41, 0x7f, 0x40, 0x00}
,{0x7c, 0x04, 0x18, 0x04, 0x78}
,{0x7c, 0x08, 0x04, 0x04, 0x78}
,{0x38, 0x44, 0x44, 0x44, 0x38}
,{0x7c, 0x14, 0x14, 0x14, 0x08}
,{0x08, 0x14, 0x14, 0x18, 0x7c}
,{0x7c, 0x08, 0x04, 0x04, 0x08}
,{0x48, 0x54, 0x54, 0x54, 0x20}
,{0x04, 0x3f, 0x44, 0x40, 0x20}
,{0x3c, 0x40, 0x40, 0x20, 0x7c}
,{0x1c, 0x20, 0x40, 0x20, 0x1c}
,{0x3c, 0x40, 0x30, 0x40, 0x3c}
,{0x44, 0x28, 0x10, 0x28, 0x44}
,{0x0c, 0x50, 0x50, 0x50, 0x3c}
,{0x44, 0x64, 0x54, 0x4c, 0x44}
,{0x00, 0x08, 0x36, 0x41, 0x00}
,{0x00, 0x00, 0x7f, 0x00, 0x00}
,{0x00, 0x41, 0x36, 0x08, 0x00}
,{0x10, 0x08, 0x08, 0x10, 0x08}
,{0x78, 0x46, 0x41, 0x46, 0x78}
};


void LCDNokia_init(void)
{

GPIO_dataDirectionPIN(GPIO_B, 2, GPIO_OUTPUT);
GPIO_dataDirectionPIN(GPIO_B, 1, GPIO_OUTPUT);

GPIO_clearPIN(GPIO_B, 1);
LCD_delay();
GPIO_setPIN(GPIO_B, 1);

LCDNokia_writeByte(0, 0x21);
delay(1000);
LCDNokia_writeByte(0, 0xC0);
delay(1000);
LCDNokia_writeByte(0, 0x07);
delay(1000);
LCDNokia_writeByte(0, 0x13);

delay(1000);
LCDNokia_writeByte(0, 0x20);
delay(1000);
LCDNokia_writeByte(0, 0x0D);
delay(1000);
}

void LCDNokia_bitmap(const uint8_t* my_array)
{
uint16_t index = 0;

for (index = 0 ; index < (84 * 48 / 8); index++)
{
LCDNokia_writeByte(1, *(my_array + index));
}
}

void LCDNokia_writeByte(uint8_t DataOrCmd, uint8_t data)
{
if(DataOrCmd)
{
GPIO_setPIN(GPIO_B, 2);
}
else
{
GPIO_clearPIN(GPIO_B, 2);
}

SPI_write(data);
}

void LCDNokia_sendChar(uint8_t character)
{
uint16_t index = 0;

LCDNokia_writeByte(1, 0x00);

for (index = 0; index < 5; index++)
{
LCDNokia_writeByte(1, ASCII[character - 0x20][index]);

# 169
}

LCDNokia_writeByte(1, 0x00);
}

void LCDNokia_sendString(uint8_t *characters)
{
while (*characters)
{
LCDNokia_sendChar(*characters++);
}
}

void LCDNokia_clear(void)
{
uint16_t index = 0;

for (index = 0; index < (84 * 48 / 8); index++)
{
LCDNokia_writeByte(1, 0x00);
}

LCDNokia_gotoXY(0, 0);
}

void LCDNokia_gotoXY(uint8_t x, uint8_t y)
{
LCDNokia_writeByte(0, 0x80 | x);
LCDNokia_writeByte(0, 0x40 | y);
}

void LCD_delay(void)
{
uint32_t counter;

for(counter = 0; counter < 100000; counter++)
{
}
}

void LCDNokia_printValue(uint32_t value)
{

formatASCII real_Value;

uint8_t temp_digit;

uint8_t counter;

const uint8_t zero = 48;

real_Value.numberDigits = 0;


if(value != 0)
{
while(value > 0)
{

temp_digit = value % 10;

temp_digit = '0' + temp_digit;

real_Value.realDigit[real_Value.numberDigits] = temp_digit;

value /= 10;

real_Value.numberDigits++;
}


for(counter = real_Value.numberDigits; counter != 0 ; counter--)
{
LCDNokia_sendChar(real_Value.realDigit[counter-1]);
}
}
else
{
LCDNokia_sendChar(zero);
}
}

void LCDNokia_printFloatValue(float value)
{

const uint8_t wordPoint = 46;
const uint8_t numZero = 48;

float tmp_Float;

uint8_t part_Float;
uint32_t part_Int;


tmp_Float = value - (uint8_t)value;

tmp_Float *= 100;

part_Float = (uint8_t)tmp_Float;

part_Int = (uint8_t)value;


if(part_Float < 10)
{
LCDNokia_printValue(part_Int);
LCDNokia_sendChar(wordPoint);

LCDNokia_sendChar(numZero);
LCDNokia_printValue(part_Float);
}

if(part_Float >= 10)
{
LCDNokia_printValue(part_Int);
LCDNokia_sendChar(wordPoint);
LCDNokia_printValue(part_Float);
}
}

