

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Wed May 30 01:03:07 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F2331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1
    40                           	psect	text30,global,reloc=2,class=CODE,delta=1
    41                           	psect	text31,global,reloc=2,class=CODE,delta=1
    42                           	psect	text32,global,reloc=2,class=CODE,delta=1
    43                           	psect	text33,global,reloc=2,class=CODE,delta=1
    44                           	psect	text34,global,reloc=2,class=CODE,delta=1
    45                           	psect	text35,global,reloc=2,class=CODE,delta=1
    46                           	psect	text36,global,reloc=2,class=CODE,delta=1
    47                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    50  0000                     
    51                           ; Version 1.44
    52                           ; Generated 14/09/2017 GMT
    53                           ; 
    54                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    55                           ; All rights reserved.
    56                           ; 
    57                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    58                           ; 
    59                           ; Redistribution and use in source and binary forms, with or without modification, are
    60                           ; permitted provided that the following conditions are met:
    61                           ; 
    62                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    63                           ;        conditions and the following disclaimer.
    64                           ; 
    65                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    66                           ;        of conditions and the following disclaimer in the documentation and/or other
    67                           ;        materials provided with the distribution.
    68                           ; 
    69                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    70                           ;        software without specific prior written permission.
    71                           ; 
    72                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    73                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    74                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    75                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    76                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    77                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    78                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    79                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    80                           ; 
    81                           ; 
    82                           ; Code-generator required, PIC18F2331 Definitions
    83                           ; 
    84                           ; SFR Addresses
    85  0000                     
    86                           	psect	smallconst
    87  000300                     __psmallconst:
    88                           	opt stack 0
    89  000300  00                 	db	0
    90  000301                     _StateProgram:
    91                           	opt stack 0
    92  000301  B4                 	db	low _stateMainMenu
    93  000302  07                 	db	high _stateMainMenu
    94  000303  B4                 	db	low _statePower1
    95  000304  06                 	db	high _statePower1
    96  000305  5C                 	db	low _statePower2
    97  000306  06                 	db	high _statePower2
    98  000307  04                 	db	low _stateRmsVI
    99  000308  06                 	db	high _stateRmsVI
   100  000309  64                 	db	low _statePowerFactor
   101  00030A  07                 	db	high _statePowerFactor
   102  00030B  AC                 	db	low _statePhaseAngle
   103  00030C  05                 	db	high _statePhaseAngle
   104  00030D  54                 	db	low _stateFrequency
   105  00030E  05                 	db	high _stateFrequency
   106  00030F  0C                 	db	low _stateTemperature
   107  000310  07                 	db	high _stateTemperature
   108  000311                     __end_of_StateProgram:
   109                           	opt stack 0
   110  000311                     _phasesPower1:
   111                           	opt stack 0
   112  000311  D2                 	db	low _typesPower1
   113  000312  09                 	db	high _typesPower1
   114  000313  BC                 	db	low _phPower1
   115  000314  09                 	db	high _phPower1
   116  000315  E8                 	db	low _vectorPower1
   117  000316  09                 	db	high _vectorPower1
   118  000317  A6                 	db	low _exitPower1
   119  000318  09                 	db	high _exitPower1
   120  000319                     __end_of_phasesPower1:
   121                           	opt stack 0
   122  000319                     _phasesPhaseAngle:
   123                           	opt stack 0
   124  000319  14                 	db	low _phPhaseAngle
   125  00031A  0A                 	db	high _phPhaseAngle
   126  00031B  2A                 	db	low _viPhaseAngle
   127  00031C  0A                 	db	high _viPhaseAngle
   128  00031D  FE                 	db	low _exitPhaseAngle
   129  00031E  09                 	db	high _exitPhaseAngle
   130  00031F                     __end_of_phasesPhaseAngle:
   131                           	opt stack 0
   132  00031F                     _phasesRmsVI:
   133                           	opt stack 0
   134  00031F  4E                 	db	low _phRmsVI
   135  000320  09                 	db	high _phRmsVI
   136  000321  38                 	db	low _neutralRmsVI
   137  000322  09                 	db	high _neutralRmsVI
   138  000323  22                 	db	low _exitRmsVI
   139  000324  09                 	db	high _exitRmsVI
   140  000325                     __end_of_phasesRmsVI:
   141                           	opt stack 0
   142  000325                     _phasesPower2:
   143                           	opt stack 0
   144  000325  7A                 	db	low _fhPower2
   145  000326  09                 	db	high _fhPower2
   146  000327  90                 	db	low _phPower2
   147  000328  09                 	db	high _phPower2
   148  000329  64                 	db	low _exitPower2
   149  00032A  09                 	db	high _exitPower2
   150  00032B                     __end_of_phasesPower2:
   151                           	opt stack 0
   152  00032B                     _phasesMainMenu:
   153                           	opt stack 0
   154  00032B  8C                 	db	low _initialLoad
   155  00032C  0A                 	db	high _initialLoad
   156  00032D  7A                 	db	low _generalView
   157  00032E  0A                 	db	high _generalView
   158  00032F  9E                 	db	low _viewMenu
   159  000330  0A                 	db	high _viewMenu
   160  000331                     __end_of_phasesMainMenu:
   161                           	opt stack 0
   162  000331                     _phasesTemperature:
   163                           	opt stack 0
   164  000331  DC                 	db	low _showTemperature
   165  000332  08                 	db	high _showTemperature
   166  000333  0C                 	db	low _exitTemperature
   167  000334  09                 	db	high _exitTemperature
   168  000335                     __end_of_phasesTemperature:
   169                           	opt stack 0
   170  000335                     _phasesFrequency:
   171                           	opt stack 0
   172  000335  F4                 	db	low _showFrequency
   173  000336  08                 	db	high _showFrequency
   174  000337  40                 	db	low _exitFrequency
   175  000338  0A                 	db	high _exitFrequency
   176  000339                     __end_of_phasesFrequency:
   177                           	opt stack 0
   178  000339                     _phasesPowerFactor:
   179                           	opt stack 0
   180  000339  68                 	db	low _phPowerFactor
   181  00033A  0A                 	db	high _phPowerFactor
   182  00033B  56                 	db	low _exitPowerFactor
   183  00033C  0A                 	db	high _exitPowerFactor
   184  00033D                     __end_of_phasesPowerFactor:
   185                           	opt stack 0
   186  00033D                     _SPI_Config:
   187                           	opt stack 0
   188  00033D  00                 	db	0
   189  00033E  00                 	db	0
   190  00033F  00                 	db	0
   191  000340                     __end_of_SPI_Config:
   192                           	opt stack 0
   193  0000                     _TXREG	set	4013
   194  0000                     _SPBRG	set	4015
   195  0000                     _BAUDCTLbits	set	4010
   196  0000                     _RCSTAbits	set	4011
   197  0000                     _TXSTAbits	set	4012
   198  0000                     _SSPBUF	set	4041
   199  0000                     _TRISCbits	set	3988
   200  0000                     _SSPSTATbits	set	4039
   201  0000                     _SSPCONbits	set	4038
   202  0000                     _SSPCON	set	4038
   203  0000                     _SSPSTAT	set	4039
   204  0000                     _ANSEL0	set	4024
   205  0000                     _TRISC	set	3988
   206  0000                     _TRISB	set	3987
   207  0000                     _TRISA	set	3986
   208  0000                     _OSCCON	set	4051
   209  000340  00                 	db	0	; dummy byte at the end
   210  0000                     
   211                           ; #config settings
   212                           
   213                           	psect	cinit
   214  0008BA                     __pcinit:
   215                           	opt stack 0
   216  0008BA                     start_initialization:
   217                           	opt stack 0
   218  0008BA                     __initialization:
   219                           	opt stack 0
   220                           
   221                           ; Clear objects allocated to BANK0 (12 bytes)
   222  0008BA  EE00  F060         	lfsr	0,__pbssBANK0
   223  0008BE  0E0C               	movlw	12
   224  0008C0                     clear_0:
   225  0008C0  6AEE               	clrf	postinc0,c
   226  0008C2  06E8               	decf	wreg,f,c
   227  0008C4  E1FD               	bnz	clear_0
   228                           
   229                           ; Clear objects allocated to COMRAM (83 bytes)
   230  0008C6  EE00  F001         	lfsr	0,__pbssCOMRAM
   231  0008CA  0E53               	movlw	83
   232  0008CC                     clear_1:
   233  0008CC  6AEE               	clrf	postinc0,c
   234  0008CE  06E8               	decf	wreg,f,c
   235  0008D0  E1FD               	bnz	clear_1
   236  0008D2                     end_of_initialization:
   237                           	opt stack 0
   238  0008D2                     __end_of__initialization:
   239                           	opt stack 0
   240  0008D2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   241  0008D4  6EF8               	movwf	tblptru,c
   242  0008D6  0100               	movlb	0
   243  0008D8  EF7D  F002         	goto	_main	;jump to C main() function
   244                           tblptru	equ	0xFF8
   245                           postinc0	equ	0xFEE
   246                           wreg	equ	0xFE8
   247                           
   248                           	psect	bssCOMRAM
   249  000001                     __pbssCOMRAM:
   250                           	opt stack 0
   251  000001                     expBASE10@value:
   252                           	opt stack 0
   253  000001                     	ds	4
   254  000005                     exitPhaseAngle@currentPhaseAngle3:
   255                           	opt stack 0
   256  000005                     	ds	3
   257  000008                     viPhaseAngle@currentPhaseAngle2:
   258                           	opt stack 0
   259  000008                     	ds	3
   260  00000B                     phPhaseAngle@currentPhaseAngle1:
   261                           	opt stack 0
   262  00000B                     	ds	3
   263  00000E                     exitRmsVI@currentRms3:
   264                           	opt stack 0
   265  00000E                     	ds	3
   266  000011                     neutralRmsVI@currentRms2:
   267                           	opt stack 0
   268  000011                     	ds	3
   269  000014                     phRmsVI@currentRms1:
   270                           	opt stack 0
   271  000014                     	ds	3
   272  000017                     exitPower2@currentPower2_3:
   273                           	opt stack 0
   274  000017                     	ds	3
   275  00001A                     phPower2@currentPower2_2:
   276                           	opt stack 0
   277  00001A                     	ds	3
   278  00001D                     fhPower2@currentPower2_1:
   279                           	opt stack 0
   280  00001D                     	ds	3
   281  000020                     exitPower1@currentPower1_4:
   282                           	opt stack 0
   283  000020                     	ds	3
   284  000023                     vectorPower1@currentPower1_3:
   285                           	opt stack 0
   286  000023                     	ds	3
   287  000026                     phPower1@currentPower1_2:
   288                           	opt stack 0
   289  000026                     	ds	3
   290  000029                     typesPower1@currentPower1_1:
   291                           	opt stack 0
   292  000029                     	ds	3
   293  00002C                     stateTemperature@phaseTemperature:
   294                           	opt stack 0
   295  00002C                     	ds	3
   296  00002F                     stateFrequency@phaseFrequency:
   297                           	opt stack 0
   298  00002F                     	ds	3
   299  000032                     statePhaseAngle@phasePhaseAngle:
   300                           	opt stack 0
   301  000032                     	ds	3
   302  000035                     stateRmsVI@phaseRmsVI:
   303                           	opt stack 0
   304  000035                     	ds	3
   305  000038                     statePower2@phasePower2:
   306                           	opt stack 0
   307  000038                     	ds	3
   308  00003B                     statePower1@phasePower1:
   309                           	opt stack 0
   310  00003B                     	ds	3
   311  00003E                     exitPowerFactor@currentPowerFactor2:
   312                           	opt stack 0
   313  00003E                     	ds	2
   314  000040                     phPowerFactor@currentPowerFactor1:
   315                           	opt stack 0
   316  000040                     	ds	2
   317  000042                     viewMenu@currentMainMenu3:
   318                           	opt stack 0
   319  000042                     	ds	2
   320  000044                     generalView@currentMainMenu2:
   321                           	opt stack 0
   322  000044                     	ds	2
   323  000046                     initialLoad@currentMainMenu1:
   324                           	opt stack 0
   325  000046                     	ds	2
   326  000048                     statePowerFactor@phasePowerFactor:
   327                           	opt stack 0
   328  000048                     	ds	2
   329  00004A                     stateMainMenu@phaseMain:
   330                           	opt stack 0
   331  00004A                     	ds	2
   332  00004C                     stateTemperature@phase:
   333                           	opt stack 0
   334  00004C                     	ds	1
   335  00004D                     stateFrequency@phase:
   336                           	opt stack 0
   337  00004D                     	ds	1
   338  00004E                     statePhaseAngle@phase:
   339                           	opt stack 0
   340  00004E                     	ds	1
   341  00004F                     statePowerFactor@phase:
   342                           	opt stack 0
   343  00004F                     	ds	1
   344  000050                     stateRmsVI@phase:
   345                           	opt stack 0
   346  000050                     	ds	1
   347  000051                     statePower2@phase:
   348                           	opt stack 0
   349  000051                     	ds	1
   350  000052                     statePower1@phase:
   351                           	opt stack 0
   352  000052                     	ds	1
   353  000053                     stateMainMenu@phase:
   354                           	opt stack 0
   355  000053                     	ds	1
   356                           tblptru	equ	0xFF8
   357                           postinc0	equ	0xFEE
   358                           wreg	equ	0xFE8
   359                           
   360                           	psect	bssBANK0
   361  000060                     __pbssBANK0:
   362                           	opt stack 0
   363  000060                     exitTemperature@currentTemperature2:
   364                           	opt stack 0
   365  000060                     	ds	3
   366  000063                     showTemperature@currentTemperature1:
   367                           	opt stack 0
   368  000063                     	ds	3
   369  000066                     exitFrequency@currentFrequency2:
   370                           	opt stack 0
   371  000066                     	ds	3
   372  000069                     showFrequency@currentFrequency1:
   373                           	opt stack 0
   374  000069                     	ds	3
   375                           tblptru	equ	0xFF8
   376                           postinc0	equ	0xFEE
   377                           wreg	equ	0xFE8
   378                           
   379                           	psect	cstackCOMRAM
   380  000054                     __pcstackCOMRAM:
   381                           	opt stack 0
   382  000054                     ?_initialLoad:
   383                           	opt stack 0
   384  000054                     ?_generalView:
   385                           	opt stack 0
   386  000054                     ?_viewMenu:
   387                           	opt stack 0
   388  000054                     ?_phPowerFactor:
   389                           	opt stack 0
   390  000054                     ?_exitPowerFactor:
   391                           	opt stack 0
   392  000054                     ?_typesPower1:
   393                           	opt stack 0
   394  000054                     ?_phPower1:
   395                           	opt stack 0
   396  000054                     ?_vectorPower1:
   397                           	opt stack 0
   398  000054                     ?_exitPower1:
   399                           	opt stack 0
   400  000054                     ?_fhPower2:
   401                           	opt stack 0
   402  000054                     ?_phPower2:
   403                           	opt stack 0
   404  000054                     ?_exitPower2:
   405                           	opt stack 0
   406  000054                     ?_phRmsVI:
   407                           	opt stack 0
   408  000054                     ?_neutralRmsVI:
   409                           	opt stack 0
   410  000054                     ?_exitRmsVI:
   411                           	opt stack 0
   412  000054                     ?_phPhaseAngle:
   413                           	opt stack 0
   414  000054                     ?_viPhaseAngle:
   415                           	opt stack 0
   416  000054                     ?_exitPhaseAngle:
   417                           	opt stack 0
   418  000054                     ?_showFrequency:
   419                           	opt stack 0
   420  000054                     ?_exitFrequency:
   421                           	opt stack 0
   422  000054                     ?_showTemperature:
   423                           	opt stack 0
   424  000054                     ?_exitTemperature:
   425                           	opt stack 0
   426  000054                     GPIO_sourceClock@clk:
   427                           	opt stack 0
   428  000054                     GPIO_dataDirectionPIN@pin:
   429                           	opt stack 0
   430  000054                     SPI_enableClock@cpol:
   431                           	opt stack 0
   432  000054                     SPI_enablePins@serial:
   433                           	opt stack 0
   434  000054                     initialLoad@data:
   435                           	opt stack 0
   436  000054                     generalView@data:
   437                           	opt stack 0
   438  000054                     viewMenu@data:
   439                           	opt stack 0
   440  000054                     phPowerFactor@data:
   441                           	opt stack 0
   442  000054                     exitPowerFactor@data:
   443                           	opt stack 0
   444  000054                     typesPower1@data:
   445                           	opt stack 0
   446  000054                     phPower1@data:
   447                           	opt stack 0
   448  000054                     vectorPower1@data:
   449                           	opt stack 0
   450  000054                     exitPower1@data:
   451                           	opt stack 0
   452  000054                     fhPower2@data:
   453                           	opt stack 0
   454  000054                     phPower2@data:
   455                           	opt stack 0
   456  000054                     exitPower2@data:
   457                           	opt stack 0
   458  000054                     phRmsVI@data:
   459                           	opt stack 0
   460  000054                     neutralRmsVI@data:
   461                           	opt stack 0
   462  000054                     exitRmsVI@data:
   463                           	opt stack 0
   464  000054                     phPhaseAngle@data:
   465                           	opt stack 0
   466  000054                     viPhaseAngle@data:
   467                           	opt stack 0
   468  000054                     exitPhaseAngle@data:
   469                           	opt stack 0
   470  000054                     showFrequency@data:
   471                           	opt stack 0
   472  000054                     exitFrequency@data:
   473                           	opt stack 0
   474  000054                     showTemperature@data:
   475                           	opt stack 0
   476  000054                     exitTemperature@data:
   477                           	opt stack 0
   478                           
   479                           ; 3 bytes @ 0x0
   480  000054                     	ds	1
   481  000055                     GPIO_dataDirectionPIN@state:
   482                           	opt stack 0
   483  000055                     SPI_enableClock@phase:
   484                           	opt stack 0
   485                           
   486                           ; 1 bytes @ 0x1
   487  000055                     	ds	1
   488  000056                     ??_GPIO_dataDirectionPIN:
   489  000056                     SPI_init@SPI_Config:
   490                           	opt stack 0
   491  000056                     stateMainMenu@mainMenuFunctions:
   492                           	opt stack 0
   493  000056                     statePowerFactor@powerFactorFunctions:
   494                           	opt stack 0
   495                           
   496                           ; 2 bytes @ 0x2
   497  000056                     	ds	1
   498  000057                     statePower1@power1Functions:
   499                           	opt stack 0
   500  000057                     statePower2@power2Functions:
   501                           	opt stack 0
   502  000057                     stateRmsVI@rmsVIFunctions:
   503                           	opt stack 0
   504  000057                     statePhaseAngle@phaseAngleFunctions:
   505                           	opt stack 0
   506  000057                     stateFrequency@frequencyFunctions:
   507                           	opt stack 0
   508  000057                     stateTemperature@temperatureFunctions:
   509                           	opt stack 0
   510                           
   511                           ; 2 bytes @ 0x3
   512  000057                     	ds	1
   513  000058                     ??_SPI_init:
   514  000058                     GPIO_dataDirectionPIN@portName:
   515                           	opt stack 0
   516                           
   517                           ; 1 bytes @ 0x4
   518  000058                     	ds	1
   519  000059                     UART_init@baudRate:
   520                           	opt stack 0
   521                           
   522                           ; 2 bytes @ 0x5
   523  000059                     	ds	2
   524  00005B                     ??_UART_init:
   525                           
   526                           ; 1 bytes @ 0x7
   527  00005B                     	ds	2
   528  00005D                     main@mainFunctions:
   529                           	opt stack 0
   530                           
   531                           ; 2 bytes @ 0x9
   532  00005D                     	ds	2
   533  00005F                     main@currentState:
   534                           	opt stack 0
   535                           
   536                           ; 1 bytes @ 0xB
   537  00005F                     	ds	1
   538                           tblptru	equ	0xFF8
   539                           postinc0	equ	0xFEE
   540                           wreg	equ	0xFE8
   541                           
   542 ;;
   543 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   544 ;;
   545 ;; *************** function _main *****************
   546 ;; Defined at:
   547 ;;		line 25 in file "main.c"
   548 ;; Parameters:    Size  Location     Type
   549 ;;		None
   550 ;; Auto vars:     Size  Location     Type
   551 ;;  mainFunction    2    9[COMRAM] PTR FTN()enum E3139
   552 ;;		 -> stateTemperature(1), stateFrequency(1), statePhaseAngle(1), statePowerFactor(1), 
   553 ;;		 -> stateRmsVI(1), statePower2(1), statePower1(1), stateMainMenu(1), 
   554 ;;  currentState    1   11[COMRAM] enum E3139
   555 ;; Return value:  Size  Location     Type
   556 ;;                  1    wreg      void 
   557 ;; Registers used:
   558 ;;		wreg, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   559 ;; Tracked objects:
   560 ;;		On entry : 0/0
   561 ;;		On exit  : 0/0
   562 ;;		Unchanged: 0/0
   563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   564 ;;      Params:         0       0       0       0
   565 ;;      Locals:         3       0       0       0
   566 ;;      Temps:          0       0       0       0
   567 ;;      Totals:         3       0       0       0
   568 ;;Total ram usage:        3 bytes
   569 ;; Hardware stack levels required when called:    2
   570 ;; This function calls:
   571 ;;		_GPIO_sourceClock
   572 ;;		_SPI_init
   573 ;;		_UART_init
   574 ;;		_stateFrequency
   575 ;;		_stateMainMenu
   576 ;;		_statePhaseAngle
   577 ;;		_statePower1
   578 ;;		_statePower2
   579 ;;		_statePowerFactor
   580 ;;		_stateRmsVI
   581 ;;		_stateTemperature
   582 ;; This function is called by:
   583 ;;		Startup code after reset
   584 ;; This function uses a non-reentrant model
   585 ;;
   586                           
   587                           	psect	text0
   588  0004FA                     __ptext0:
   589                           	opt stack 0
   590  0004FA                     _main:
   591                           	opt stack 29
   592                           
   593                           ;main.c: 28: States_MenuType currentState = MAIN_MENU;
   594                           
   595                           ;incstack = 0
   596  0004FA  0E00               	movlw	0
   597  0004FC  6E5F               	movwf	main@currentState,c
   598                           
   599                           ;main.c: 29: States_MenuType(*mainFunctions)(void);
   600                           ;main.c: 32: GPIO_sourceClock(CLK_8MHZ);
   601  0004FE  0E00               	movlw	0
   602  000500  EC4D  F002         	call	_GPIO_sourceClock
   603                           
   604                           ;main.c: 35: SPI_init(&SPI_Config);
   605  000504  0E3D               	movlw	low _SPI_Config
   606  000506  6E56               	movwf	SPI_init@SPI_Config,c
   607  000508  0E03               	movlw	high _SPI_Config
   608  00050A  6E57               	movwf	SPI_init@SPI_Config+1,c
   609  00050C  EC02  F004         	call	_SPI_init	;wreg free
   610                           
   611                           ;main.c: 36: UART_init(BD_9600);
   612  000510  0E25               	movlw	37
   613  000512  6E5A               	movwf	UART_init@baudRate+1,c
   614  000514  0E80               	movlw	128
   615  000516  6E59               	movwf	UART_init@baudRate,c
   616  000518  EC0F  F002         	call	_UART_init	;wreg free
   617  00051C                     
   618                           ;main.c: 39: {
   619                           ;main.c: 41: mainFunctions = StateProgram[currentState].stateFunction;
   620  00051C  505F               	movf	main@currentState,w,c
   621  00051E  0D02               	mullw	2
   622  000520  0E01               	movlw	low _StateProgram
   623  000522  24F3               	addwf	prodl,w,c
   624  000524  6EF6               	movwf	tblptrl,c
   625  000526  0E03               	movlw	high _StateProgram
   626  000528  20F4               	addwfc	prodh,w,c
   627  00052A  6EF7               	movwf	tblptrh,c
   628  00052C                     	if	0	;There are less than 3 active tblptr bytes
   629  00052C                     	endif
   630  00052C  0009               	tblrd		*+
   631  00052E  CFF5 F05D          	movff	tablat,main@mainFunctions
   632  000532  000A               	tblrd		*-
   633  000534  CFF5 F05E          	movff	tablat,main@mainFunctions+1
   634                           
   635                           ;main.c: 42: currentState = mainFunctions();
   636  000538  D801               	call	u498
   637  00053A  D00A               	goto	u499
   638  00053C                     u498:
   639  00053C  0005               	push	
   640  00053E  6EFA               	movwf	pclath,c
   641  000540  505D               	movf	main@mainFunctions,w,c
   642  000542  6EFD               	movwf	tosl,c
   643  000544  505E               	movf	main@mainFunctions+1,w,c
   644  000546  6EFE               	movwf	tosh,c
   645  000548  50F8               	movf	tblptru,w,c
   646  00054A  6EFF               	movwf	tosu,c
   647  00054C  50FA               	movf	pclath,w,c
   648  00054E  0012               	return		;indir
   649  000550                     u499:
   650  000550  6E5F               	movwf	main@currentState,c
   651                           
   652                           ;main.c: 43: }
   653  000552  D7E4               	goto	l31
   654  000554                     __end_of_main:
   655                           	opt stack 0
   656                           tosu	equ	0xFFF
   657                           tosh	equ	0xFFE
   658                           tosl	equ	0xFFD
   659                           pclath	equ	0xFFA
   660                           tblptru	equ	0xFF8
   661                           tblptrh	equ	0xFF7
   662                           tblptrl	equ	0xFF6
   663                           tablat	equ	0xFF5
   664                           prodh	equ	0xFF4
   665                           prodl	equ	0xFF3
   666                           postinc0	equ	0xFEE
   667                           wreg	equ	0xFE8
   668                           
   669 ;; *************** function _stateFrequency *****************
   670 ;; Defined at:
   671 ;;		line 169 in file "States.c"
   672 ;; Parameters:    Size  Location     Type
   673 ;;		None
   674 ;; Auto vars:     Size  Location     Type
   675 ;;  frequencyFun    2    3[COMRAM] PTR FTN(struct .,)struct
   676 ;;		 -> exitFrequency(3), showFrequency(3), 
   677 ;; Return value:  Size  Location     Type
   678 ;;                  1    wreg      enum E3139
   679 ;; Registers used:
   680 ;;		wreg, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   681 ;; Tracked objects:
   682 ;;		On entry : 0/0
   683 ;;		On exit  : 0/0
   684 ;;		Unchanged: 0/0
   685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   686 ;;      Params:         0       0       0       0
   687 ;;      Locals:         2       0       0       0
   688 ;;      Temps:          0       0       0       0
   689 ;;      Totals:         2       0       0       0
   690 ;;Total ram usage:        2 bytes
   691 ;; Hardware stack levels used:    1
   692 ;; Hardware stack levels required when called:    1
   693 ;; This function calls:
   694 ;;		_exitFrequency
   695 ;;		_showFrequency
   696 ;; This function is called by:
   697 ;;		_main
   698 ;; This function uses a non-reentrant model
   699 ;;
   700                           
   701                           	psect	text1
   702  000554                     __ptext1:
   703                           	opt stack 0
   704  000554                     _stateFrequency:
   705                           	opt stack 29
   706                           
   707                           ;States.c: 172: static PhaseStateFrequency_Type phase = SHOW_FREQUENCY;
   708                           ;States.c: 173: static PhaseFrequency_Type phaseFrequency;
   709                           ;States.c: 174: PhaseFrequency_Type(*frequencyFunctions)(PhaseFrequency_Type);
   710                           ;States.c: 175: phaseFrequency.stateMain = FREQUENCY;
   711                           
   712                           ;incstack = 0
   713  000554  0E06               	movlw	6
   714  000556  6E31               	movwf	stateFrequency@phaseFrequency+2,c
   715                           
   716                           ;States.c: 178: frequencyFunctions = phasesFrequency[phase].PhaseFrequency;
   717  000558  504D               	movf	stateFrequency@phase,w,c
   718  00055A  0D02               	mullw	2
   719  00055C  0E35               	movlw	low _phasesFrequency
   720  00055E  24F3               	addwf	prodl,w,c
   721  000560  6EF6               	movwf	tblptrl,c
   722  000562  0E03               	movlw	high _phasesFrequency
   723  000564  20F4               	addwfc	prodh,w,c
   724  000566  6EF7               	movwf	tblptrh,c
   725  000568                     	if	0	;There are less than 3 active tblptr bytes
   726  000568                     	endif
   727  000568  0009               	tblrd		*+
   728  00056A  CFF5 F057          	movff	tablat,stateFrequency@frequencyFunctions
   729  00056E  000A               	tblrd		*-
   730  000570  CFF5 F058          	movff	tablat,stateFrequency@frequencyFunctions+1
   731                           
   732                           ;States.c: 179: phaseFrequency = frequencyFunctions(phaseFrequency);
   733  000574  C02F  F054         	movff	stateFrequency@phaseFrequency,exitFrequency@data
   734  000578  C030  F055         	movff	stateFrequency@phaseFrequency+1,exitFrequency@data+1
   735  00057C  C031  F056         	movff	stateFrequency@phaseFrequency+2,exitFrequency@data+2
   736  000580  D801               	call	u478
   737  000582  D00A               	goto	u479
   738  000584                     u478:
   739  000584  0005               	push	
   740  000586  6EFA               	movwf	pclath,c
   741  000588  5057               	movf	stateFrequency@frequencyFunctions,w,c
   742  00058A  6EFD               	movwf	tosl,c
   743  00058C  5058               	movf	stateFrequency@frequencyFunctions+1,w,c
   744  00058E  6EFE               	movwf	tosh,c
   745  000590  50F8               	movf	tblptru,w,c
   746  000592  6EFF               	movwf	tosu,c
   747  000594  50FA               	movf	pclath,w,c
   748  000596  0012               	return		;indir
   749  000598                     u479:
   750  000598  C054  F02F         	movff	?_exitFrequency,stateFrequency@phaseFrequency
   751  00059C  C055  F030         	movff	?_exitFrequency+1,stateFrequency@phaseFrequency+1
   752  0005A0  C056  F031         	movff	?_exitFrequency+2,stateFrequency@phaseFrequency+2
   753                           
   754                           ;States.c: 182: phase = phaseFrequency.phaseState;
   755  0005A4  C030  F04D         	movff	stateFrequency@phaseFrequency+1,stateFrequency@phase
   756                           
   757                           ;States.c: 183: return (phaseFrequency.stateMain);
   758  0005A8  5031               	movf	stateFrequency@phaseFrequency+2,w,c
   759  0005AA  0012               	return	
   760  0005AC                     __end_of_stateFrequency:
   761                           	opt stack 0
   762                           tosu	equ	0xFFF
   763                           tosh	equ	0xFFE
   764                           tosl	equ	0xFFD
   765                           pclath	equ	0xFFA
   766                           tblptru	equ	0xFF8
   767                           tblptrh	equ	0xFF7
   768                           tblptrl	equ	0xFF6
   769                           tablat	equ	0xFF5
   770                           prodh	equ	0xFF4
   771                           prodl	equ	0xFF3
   772                           postinc0	equ	0xFEE
   773                           wreg	equ	0xFE8
   774                           
   775 ;; *************** function _statePhaseAngle *****************
   776 ;; Defined at:
   777 ;;		line 152 in file "States.c"
   778 ;; Parameters:    Size  Location     Type
   779 ;;		None
   780 ;; Auto vars:     Size  Location     Type
   781 ;;  phaseAngleFu    2    3[COMRAM] PTR FTN(struct .,)struct
   782 ;;		 -> exitPhaseAngle(3), viPhaseAngle(3), phPhaseAngle(3), 
   783 ;; Return value:  Size  Location     Type
   784 ;;                  1    wreg      enum E3139
   785 ;; Registers used:
   786 ;;		wreg, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   787 ;; Tracked objects:
   788 ;;		On entry : 0/0
   789 ;;		On exit  : 0/0
   790 ;;		Unchanged: 0/0
   791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   792 ;;      Params:         0       0       0       0
   793 ;;      Locals:         2       0       0       0
   794 ;;      Temps:          0       0       0       0
   795 ;;      Totals:         2       0       0       0
   796 ;;Total ram usage:        2 bytes
   797 ;; Hardware stack levels used:    1
   798 ;; Hardware stack levels required when called:    1
   799 ;; This function calls:
   800 ;;		_exitPhaseAngle
   801 ;;		_phPhaseAngle
   802 ;;		_viPhaseAngle
   803 ;; This function is called by:
   804 ;;		_main
   805 ;; This function uses a non-reentrant model
   806 ;;
   807                           
   808                           	psect	text2
   809  0005AC                     __ptext2:
   810                           	opt stack 0
   811  0005AC                     _statePhaseAngle:
   812                           	opt stack 29
   813                           
   814                           ;States.c: 155: static PhaseStatePhaseAngle_Type phase = PHASES_PA;
   815                           ;States.c: 156: static PhasePhaseAngle_Type phasePhaseAngle;
   816                           ;States.c: 157: PhasePhaseAngle_Type(*phaseAngleFunctions)(PhasePhaseAngle_Type);
   817                           ;States.c: 158: phasePhaseAngle.stateMain = PHASE_ANGLE;
   818                           
   819                           ;incstack = 0
   820  0005AC  0E05               	movlw	5
   821  0005AE  6E34               	movwf	statePhaseAngle@phasePhaseAngle+2,c
   822                           
   823                           ;States.c: 161: phaseAngleFunctions = phasesPhaseAngle[phase].PhasePhaseAngle;
   824  0005B0  504E               	movf	statePhaseAngle@phase,w,c
   825  0005B2  0D02               	mullw	2
   826  0005B4  0E19               	movlw	low _phasesPhaseAngle
   827  0005B6  24F3               	addwf	prodl,w,c
   828  0005B8  6EF6               	movwf	tblptrl,c
   829  0005BA  0E03               	movlw	high _phasesPhaseAngle
   830  0005BC  20F4               	addwfc	prodh,w,c
   831  0005BE  6EF7               	movwf	tblptrh,c
   832  0005C0                     	if	0	;There are less than 3 active tblptr bytes
   833  0005C0                     	endif
   834  0005C0  0009               	tblrd		*+
   835  0005C2  CFF5 F057          	movff	tablat,statePhaseAngle@phaseAngleFunctions
   836  0005C6  000A               	tblrd		*-
   837  0005C8  CFF5 F058          	movff	tablat,statePhaseAngle@phaseAngleFunctions+1
   838                           
   839                           ;States.c: 162: phasePhaseAngle = phaseAngleFunctions(phasePhaseAngle);
   840  0005CC  C032  F054         	movff	statePhaseAngle@phasePhaseAngle,exitPhaseAngle@data
   841  0005D0  C033  F055         	movff	statePhaseAngle@phasePhaseAngle+1,exitPhaseAngle@data+1
   842  0005D4  C034  F056         	movff	statePhaseAngle@phasePhaseAngle+2,exitPhaseAngle@data+2
   843  0005D8  D801               	call	u468
   844  0005DA  D00A               	goto	u469
   845  0005DC                     u468:
   846  0005DC  0005               	push	
   847  0005DE  6EFA               	movwf	pclath,c
   848  0005E0  5057               	movf	statePhaseAngle@phaseAngleFunctions,w,c
   849  0005E2  6EFD               	movwf	tosl,c
   850  0005E4  5058               	movf	statePhaseAngle@phaseAngleFunctions+1,w,c
   851  0005E6  6EFE               	movwf	tosh,c
   852  0005E8  50F8               	movf	tblptru,w,c
   853  0005EA  6EFF               	movwf	tosu,c
   854  0005EC  50FA               	movf	pclath,w,c
   855  0005EE  0012               	return		;indir
   856  0005F0                     u469:
   857  0005F0  C054  F032         	movff	?_exitPhaseAngle,statePhaseAngle@phasePhaseAngle
   858  0005F4  C055  F033         	movff	?_exitPhaseAngle+1,statePhaseAngle@phasePhaseAngle+1
   859  0005F8  C056  F034         	movff	?_exitPhaseAngle+2,statePhaseAngle@phasePhaseAngle+2
   860                           
   861                           ;States.c: 165: phase = phasePhaseAngle.phaseState;
   862  0005FC  C033  F04E         	movff	statePhaseAngle@phasePhaseAngle+1,statePhaseAngle@phase
   863                           
   864                           ;States.c: 166: return (phasePhaseAngle.stateMain);
   865  000600  5034               	movf	statePhaseAngle@phasePhaseAngle+2,w,c
   866  000602  0012               	return	
   867  000604                     __end_of_statePhaseAngle:
   868                           	opt stack 0
   869                           tosu	equ	0xFFF
   870                           tosh	equ	0xFFE
   871                           tosl	equ	0xFFD
   872                           pclath	equ	0xFFA
   873                           tblptru	equ	0xFF8
   874                           tblptrh	equ	0xFF7
   875                           tblptrl	equ	0xFF6
   876                           tablat	equ	0xFF5
   877                           prodh	equ	0xFF4
   878                           prodl	equ	0xFF3
   879                           postinc0	equ	0xFEE
   880                           wreg	equ	0xFE8
   881                           
   882 ;; *************** function _statePowerFactor *****************
   883 ;; Defined at:
   884 ;;		line 135 in file "States.c"
   885 ;; Parameters:    Size  Location     Type
   886 ;;		None
   887 ;; Auto vars:     Size  Location     Type
   888 ;;  powerFactorF    2    2[COMRAM] PTR FTN(struct .,)struct
   889 ;;		 -> exitPowerFactor(2), phPowerFactor(2), 
   890 ;; Return value:  Size  Location     Type
   891 ;;                  1    wreg      enum E3139
   892 ;; Registers used:
   893 ;;		wreg, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   894 ;; Tracked objects:
   895 ;;		On entry : 0/0
   896 ;;		On exit  : 0/0
   897 ;;		Unchanged: 0/0
   898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   899 ;;      Params:         0       0       0       0
   900 ;;      Locals:         2       0       0       0
   901 ;;      Temps:          0       0       0       0
   902 ;;      Totals:         2       0       0       0
   903 ;;Total ram usage:        2 bytes
   904 ;; Hardware stack levels used:    1
   905 ;; Hardware stack levels required when called:    1
   906 ;; This function calls:
   907 ;;		_exitPowerFactor
   908 ;;		_phPowerFactor
   909 ;; This function is called by:
   910 ;;		_main
   911 ;; This function uses a non-reentrant model
   912 ;;
   913                           
   914                           	psect	text3
   915  000764                     __ptext3:
   916                           	opt stack 0
   917  000764                     _statePowerFactor:
   918                           	opt stack 29
   919                           
   920                           ;States.c: 138: static PhaseStatePowerFactor_Type phase = PHASES_PF;
   921                           ;States.c: 139: static PhasePowerFactor_Type phasePowerFactor;
   922                           ;States.c: 140: PhasePowerFactor_Type(*powerFactorFunctions)(PhasePowerFactor_Type);
   923                           ;States.c: 141: phasePowerFactor.stateMain = POWER_FACTOR;
   924                           
   925                           ;incstack = 0
   926  000764  0E04               	movlw	4
   927  000766  6E49               	movwf	statePowerFactor@phasePowerFactor+1,c
   928                           
   929                           ;States.c: 144: powerFactorFunctions = phasesPowerFactor[phase].PhasePowerFactor;
   930  000768  504F               	movf	statePowerFactor@phase,w,c
   931  00076A  0D02               	mullw	2
   932  00076C  0E39               	movlw	low _phasesPowerFactor
   933  00076E  24F3               	addwf	prodl,w,c
   934  000770  6EF6               	movwf	tblptrl,c
   935  000772  0E03               	movlw	high _phasesPowerFactor
   936  000774  20F4               	addwfc	prodh,w,c
   937  000776  6EF7               	movwf	tblptrh,c
   938  000778                     	if	0	;There are less than 3 active tblptr bytes
   939  000778                     	endif
   940  000778  0009               	tblrd		*+
   941  00077A  CFF5 F056          	movff	tablat,statePowerFactor@powerFactorFunctions
   942  00077E  000A               	tblrd		*-
   943  000780  CFF5 F057          	movff	tablat,statePowerFactor@powerFactorFunctions+1
   944                           
   945                           ;States.c: 145: phasePowerFactor = powerFactorFunctions(phasePowerFactor);
   946  000784  C048  F054         	movff	statePowerFactor@phasePowerFactor,exitPowerFactor@data
   947  000788  C049  F055         	movff	statePowerFactor@phasePowerFactor+1,exitPowerFactor@data+1
   948  00078C  D801               	call	u458
   949  00078E  D00A               	goto	u459
   950  000790                     u458:
   951  000790  0005               	push	
   952  000792  6EFA               	movwf	pclath,c
   953  000794  5056               	movf	statePowerFactor@powerFactorFunctions,w,c
   954  000796  6EFD               	movwf	tosl,c
   955  000798  5057               	movf	statePowerFactor@powerFactorFunctions+1,w,c
   956  00079A  6EFE               	movwf	tosh,c
   957  00079C  50F8               	movf	tblptru,w,c
   958  00079E  6EFF               	movwf	tosu,c
   959  0007A0  50FA               	movf	pclath,w,c
   960  0007A2  0012               	return		;indir
   961  0007A4                     u459:
   962  0007A4  C054  F048         	movff	?_exitPowerFactor,statePowerFactor@phasePowerFactor
   963  0007A8  C055  F049         	movff	?_exitPowerFactor+1,statePowerFactor@phasePowerFactor+1
   964                           
   965                           ;States.c: 148: phase = phasePowerFactor.phaseState;
   966  0007AC  C048  F04F         	movff	statePowerFactor@phasePowerFactor,statePowerFactor@phase
   967                           
   968                           ;States.c: 149: return (phasePowerFactor.stateMain);
   969  0007B0  5049               	movf	statePowerFactor@phasePowerFactor+1,w,c
   970  0007B2  0012               	return	
   971  0007B4                     __end_of_statePowerFactor:
   972                           	opt stack 0
   973                           tosu	equ	0xFFF
   974                           tosh	equ	0xFFE
   975                           tosl	equ	0xFFD
   976                           pclath	equ	0xFFA
   977                           tblptru	equ	0xFF8
   978                           tblptrh	equ	0xFF7
   979                           tblptrl	equ	0xFF6
   980                           tablat	equ	0xFF5
   981                           prodh	equ	0xFF4
   982                           prodl	equ	0xFF3
   983                           postinc0	equ	0xFEE
   984                           wreg	equ	0xFE8
   985                           
   986 ;; *************** function _stateRmsVI *****************
   987 ;; Defined at:
   988 ;;		line 118 in file "States.c"
   989 ;; Parameters:    Size  Location     Type
   990 ;;		None
   991 ;; Auto vars:     Size  Location     Type
   992 ;;  rmsVIFunctio    2    3[COMRAM] PTR FTN(struct .,)struct
   993 ;;		 -> exitRmsVI(3), neutralRmsVI(3), phRmsVI(3), 
   994 ;; Return value:  Size  Location     Type
   995 ;;                  1    wreg      enum E3139
   996 ;; Registers used:
   997 ;;		wreg, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   998 ;; Tracked objects:
   999 ;;		On entry : 0/0
  1000 ;;		On exit  : 0/0
  1001 ;;		Unchanged: 0/0
  1002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1003 ;;      Params:         0       0       0       0
  1004 ;;      Locals:         2       0       0       0
  1005 ;;      Temps:          0       0       0       0
  1006 ;;      Totals:         2       0       0       0
  1007 ;;Total ram usage:        2 bytes
  1008 ;; Hardware stack levels used:    1
  1009 ;; Hardware stack levels required when called:    1
  1010 ;; This function calls:
  1011 ;;		_exitRmsVI
  1012 ;;		_neutralRmsVI
  1013 ;;		_phRmsVI
  1014 ;; This function is called by:
  1015 ;;		_main
  1016 ;; This function uses a non-reentrant model
  1017 ;;
  1018                           
  1019                           	psect	text4
  1020  000604                     __ptext4:
  1021                           	opt stack 0
  1022  000604                     _stateRmsVI:
  1023                           	opt stack 29
  1024                           
  1025                           ;States.c: 121: static PhaseStateRmsVI_Type phase = PHASES_RMSVI;
  1026                           ;States.c: 122: static PhaseRmsVI_Type phaseRmsVI;
  1027                           ;States.c: 123: PhaseRmsVI_Type(*rmsVIFunctions)(PhaseRmsVI_Type);
  1028                           ;States.c: 124: phaseRmsVI.stateMain = RMS_VI;
  1029                           
  1030                           ;incstack = 0
  1031  000604  0E03               	movlw	3
  1032  000606  6E37               	movwf	stateRmsVI@phaseRmsVI+2,c
  1033                           
  1034                           ;States.c: 127: rmsVIFunctions = phasesRmsVI[phase].PhaseRmsVI;
  1035  000608  5050               	movf	stateRmsVI@phase,w,c
  1036  00060A  0D02               	mullw	2
  1037  00060C  0E1F               	movlw	low _phasesRmsVI
  1038  00060E  24F3               	addwf	prodl,w,c
  1039  000610  6EF6               	movwf	tblptrl,c
  1040  000612  0E03               	movlw	high _phasesRmsVI
  1041  000614  20F4               	addwfc	prodh,w,c
  1042  000616  6EF7               	movwf	tblptrh,c
  1043  000618                     	if	0	;There are less than 3 active tblptr bytes
  1044  000618                     	endif
  1045  000618  0009               	tblrd		*+
  1046  00061A  CFF5 F057          	movff	tablat,stateRmsVI@rmsVIFunctions
  1047  00061E  000A               	tblrd		*-
  1048  000620  CFF5 F058          	movff	tablat,stateRmsVI@rmsVIFunctions+1
  1049                           
  1050                           ;States.c: 128: phaseRmsVI = rmsVIFunctions(phaseRmsVI);
  1051  000624  C035  F054         	movff	stateRmsVI@phaseRmsVI,exitRmsVI@data
  1052  000628  C036  F055         	movff	stateRmsVI@phaseRmsVI+1,exitRmsVI@data+1
  1053  00062C  C037  F056         	movff	stateRmsVI@phaseRmsVI+2,exitRmsVI@data+2
  1054  000630  D801               	call	u448
  1055  000632  D00A               	goto	u449
  1056  000634                     u448:
  1057  000634  0005               	push	
  1058  000636  6EFA               	movwf	pclath,c
  1059  000638  5057               	movf	stateRmsVI@rmsVIFunctions,w,c
  1060  00063A  6EFD               	movwf	tosl,c
  1061  00063C  5058               	movf	stateRmsVI@rmsVIFunctions+1,w,c
  1062  00063E  6EFE               	movwf	tosh,c
  1063  000640  50F8               	movf	tblptru,w,c
  1064  000642  6EFF               	movwf	tosu,c
  1065  000644  50FA               	movf	pclath,w,c
  1066  000646  0012               	return		;indir
  1067  000648                     u449:
  1068  000648  C054  F035         	movff	?_exitRmsVI,stateRmsVI@phaseRmsVI
  1069  00064C  C055  F036         	movff	?_exitRmsVI+1,stateRmsVI@phaseRmsVI+1
  1070  000650  C056  F037         	movff	?_exitRmsVI+2,stateRmsVI@phaseRmsVI+2
  1071                           
  1072                           ;States.c: 131: phase = phaseRmsVI.phaseState;
  1073  000654  C036  F050         	movff	stateRmsVI@phaseRmsVI+1,stateRmsVI@phase
  1074                           
  1075                           ;States.c: 132: return (phaseRmsVI.stateMain);
  1076  000658  5037               	movf	stateRmsVI@phaseRmsVI+2,w,c
  1077  00065A  0012               	return	
  1078  00065C                     __end_of_stateRmsVI:
  1079                           	opt stack 0
  1080                           tosu	equ	0xFFF
  1081                           tosh	equ	0xFFE
  1082                           tosl	equ	0xFFD
  1083                           pclath	equ	0xFFA
  1084                           tblptru	equ	0xFF8
  1085                           tblptrh	equ	0xFF7
  1086                           tblptrl	equ	0xFF6
  1087                           tablat	equ	0xFF5
  1088                           prodh	equ	0xFF4
  1089                           prodl	equ	0xFF3
  1090                           postinc0	equ	0xFEE
  1091                           wreg	equ	0xFE8
  1092                           
  1093 ;; *************** function _statePower2 *****************
  1094 ;; Defined at:
  1095 ;;		line 101 in file "States.c"
  1096 ;; Parameters:    Size  Location     Type
  1097 ;;		None
  1098 ;; Auto vars:     Size  Location     Type
  1099 ;;  power2Functi    2    3[COMRAM] PTR FTN(struct .,)struct
  1100 ;;		 -> exitPower2(3), phPower2(3), fhPower2(3), 
  1101 ;; Return value:  Size  Location     Type
  1102 ;;                  1    wreg      enum E3139
  1103 ;; Registers used:
  1104 ;;		wreg, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1105 ;; Tracked objects:
  1106 ;;		On entry : 0/0
  1107 ;;		On exit  : 0/0
  1108 ;;		Unchanged: 0/0
  1109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1110 ;;      Params:         0       0       0       0
  1111 ;;      Locals:         2       0       0       0
  1112 ;;      Temps:          0       0       0       0
  1113 ;;      Totals:         2       0       0       0
  1114 ;;Total ram usage:        2 bytes
  1115 ;; Hardware stack levels used:    1
  1116 ;; Hardware stack levels required when called:    1
  1117 ;; This function calls:
  1118 ;;		_exitPower2
  1119 ;;		_fhPower2
  1120 ;;		_phPower2
  1121 ;; This function is called by:
  1122 ;;		_main
  1123 ;; This function uses a non-reentrant model
  1124 ;;
  1125                           
  1126                           	psect	text5
  1127  00065C                     __ptext5:
  1128                           	opt stack 0
  1129  00065C                     _statePower2:
  1130                           	opt stack 29
  1131                           
  1132                           ;States.c: 104: static PhaseStatePower2_Type phase = FH_POWER2;
  1133                           ;States.c: 105: static PhasePower2_Type phasePower2;
  1134                           ;States.c: 106: PhasePower2_Type(*power2Functions)(PhasePower2_Type);
  1135                           ;States.c: 107: phasePower2.stateMain = POWER_2;
  1136                           
  1137                           ;incstack = 0
  1138  00065C  0E02               	movlw	2
  1139  00065E  6E3A               	movwf	statePower2@phasePower2+2,c
  1140                           
  1141                           ;States.c: 110: power2Functions = phasesPower2[phase].PhasePower2;
  1142  000660  5051               	movf	statePower2@phase,w,c
  1143  000662  0D02               	mullw	2
  1144  000664  0E25               	movlw	low _phasesPower2
  1145  000666  24F3               	addwf	prodl,w,c
  1146  000668  6EF6               	movwf	tblptrl,c
  1147  00066A  0E03               	movlw	high _phasesPower2
  1148  00066C  20F4               	addwfc	prodh,w,c
  1149  00066E  6EF7               	movwf	tblptrh,c
  1150  000670                     	if	0	;There are less than 3 active tblptr bytes
  1151  000670                     	endif
  1152  000670  0009               	tblrd		*+
  1153  000672  CFF5 F057          	movff	tablat,statePower2@power2Functions
  1154  000676  000A               	tblrd		*-
  1155  000678  CFF5 F058          	movff	tablat,statePower2@power2Functions+1
  1156                           
  1157                           ;States.c: 111: phasePower2 = power2Functions(phasePower2);
  1158  00067C  C038  F054         	movff	statePower2@phasePower2,exitPower2@data
  1159  000680  C039  F055         	movff	statePower2@phasePower2+1,exitPower2@data+1
  1160  000684  C03A  F056         	movff	statePower2@phasePower2+2,exitPower2@data+2
  1161  000688  D801               	call	u438
  1162  00068A  D00A               	goto	u439
  1163  00068C                     u438:
  1164  00068C  0005               	push	
  1165  00068E  6EFA               	movwf	pclath,c
  1166  000690  5057               	movf	statePower2@power2Functions,w,c
  1167  000692  6EFD               	movwf	tosl,c
  1168  000694  5058               	movf	statePower2@power2Functions+1,w,c
  1169  000696  6EFE               	movwf	tosh,c
  1170  000698  50F8               	movf	tblptru,w,c
  1171  00069A  6EFF               	movwf	tosu,c
  1172  00069C  50FA               	movf	pclath,w,c
  1173  00069E  0012               	return		;indir
  1174  0006A0                     u439:
  1175  0006A0  C054  F038         	movff	?_exitPower2,statePower2@phasePower2
  1176  0006A4  C055  F039         	movff	?_exitPower2+1,statePower2@phasePower2+1
  1177  0006A8  C056  F03A         	movff	?_exitPower2+2,statePower2@phasePower2+2
  1178                           
  1179                           ;States.c: 114: phase = phasePower2.phaseState;
  1180  0006AC  C039  F051         	movff	statePower2@phasePower2+1,statePower2@phase
  1181                           
  1182                           ;States.c: 115: return (phasePower2.stateMain);
  1183  0006B0  503A               	movf	statePower2@phasePower2+2,w,c
  1184  0006B2  0012               	return	
  1185  0006B4                     __end_of_statePower2:
  1186                           	opt stack 0
  1187                           tosu	equ	0xFFF
  1188                           tosh	equ	0xFFE
  1189                           tosl	equ	0xFFD
  1190                           pclath	equ	0xFFA
  1191                           tblptru	equ	0xFF8
  1192                           tblptrh	equ	0xFF7
  1193                           tblptrl	equ	0xFF6
  1194                           tablat	equ	0xFF5
  1195                           prodh	equ	0xFF4
  1196                           prodl	equ	0xFF3
  1197                           postinc0	equ	0xFEE
  1198                           wreg	equ	0xFE8
  1199                           
  1200 ;; *************** function _statePower1 *****************
  1201 ;; Defined at:
  1202 ;;		line 84 in file "States.c"
  1203 ;; Parameters:    Size  Location     Type
  1204 ;;		None
  1205 ;; Auto vars:     Size  Location     Type
  1206 ;;  power1Functi    2    3[COMRAM] PTR FTN(struct .,)struct
  1207 ;;		 -> exitPower1(3), vectorPower1(3), phPower1(3), typesPower1(3), 
  1208 ;; Return value:  Size  Location     Type
  1209 ;;                  1    wreg      enum E3139
  1210 ;; Registers used:
  1211 ;;		wreg, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1212 ;; Tracked objects:
  1213 ;;		On entry : 0/0
  1214 ;;		On exit  : 0/0
  1215 ;;		Unchanged: 0/0
  1216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1217 ;;      Params:         0       0       0       0
  1218 ;;      Locals:         2       0       0       0
  1219 ;;      Temps:          0       0       0       0
  1220 ;;      Totals:         2       0       0       0
  1221 ;;Total ram usage:        2 bytes
  1222 ;; Hardware stack levels used:    1
  1223 ;; Hardware stack levels required when called:    1
  1224 ;; This function calls:
  1225 ;;		_exitPower1
  1226 ;;		_phPower1
  1227 ;;		_typesPower1
  1228 ;;		_vectorPower1
  1229 ;; This function is called by:
  1230 ;;		_main
  1231 ;; This function uses a non-reentrant model
  1232 ;;
  1233                           
  1234                           	psect	text6
  1235  0006B4                     __ptext6:
  1236                           	opt stack 0
  1237  0006B4                     _statePower1:
  1238                           	opt stack 29
  1239                           
  1240                           ;States.c: 87: static PhaseStatePower1_Type phase = TYPES_POWER1;
  1241                           ;States.c: 88: static PhasePower1_Type phasePower1;
  1242                           ;States.c: 89: PhasePower1_Type(*power1Functions)(PhasePower1_Type);
  1243                           ;States.c: 90: phasePower1.stateMain = POWER_1;
  1244                           
  1245                           ;incstack = 0
  1246  0006B4  0E01               	movlw	1
  1247  0006B6  6E3D               	movwf	statePower1@phasePower1+2,c
  1248                           
  1249                           ;States.c: 93: power1Functions = phasesPower1[phase].PhasePower1;
  1250  0006B8  5052               	movf	statePower1@phase,w,c
  1251  0006BA  0D02               	mullw	2
  1252  0006BC  0E11               	movlw	low _phasesPower1
  1253  0006BE  24F3               	addwf	prodl,w,c
  1254  0006C0  6EF6               	movwf	tblptrl,c
  1255  0006C2  0E03               	movlw	high _phasesPower1
  1256  0006C4  20F4               	addwfc	prodh,w,c
  1257  0006C6  6EF7               	movwf	tblptrh,c
  1258  0006C8                     	if	0	;There are less than 3 active tblptr bytes
  1259  0006C8                     	endif
  1260  0006C8  0009               	tblrd		*+
  1261  0006CA  CFF5 F057          	movff	tablat,statePower1@power1Functions
  1262  0006CE  000A               	tblrd		*-
  1263  0006D0  CFF5 F058          	movff	tablat,statePower1@power1Functions+1
  1264                           
  1265                           ;States.c: 94: phasePower1 = power1Functions(phasePower1);
  1266  0006D4  C03B  F054         	movff	statePower1@phasePower1,exitPower1@data
  1267  0006D8  C03C  F055         	movff	statePower1@phasePower1+1,exitPower1@data+1
  1268  0006DC  C03D  F056         	movff	statePower1@phasePower1+2,exitPower1@data+2
  1269  0006E0  D801               	call	u428
  1270  0006E2  D00A               	goto	u429
  1271  0006E4                     u428:
  1272  0006E4  0005               	push	
  1273  0006E6  6EFA               	movwf	pclath,c
  1274  0006E8  5057               	movf	statePower1@power1Functions,w,c
  1275  0006EA  6EFD               	movwf	tosl,c
  1276  0006EC  5058               	movf	statePower1@power1Functions+1,w,c
  1277  0006EE  6EFE               	movwf	tosh,c
  1278  0006F0  50F8               	movf	tblptru,w,c
  1279  0006F2  6EFF               	movwf	tosu,c
  1280  0006F4  50FA               	movf	pclath,w,c
  1281  0006F6  0012               	return		;indir
  1282  0006F8                     u429:
  1283  0006F8  C054  F03B         	movff	?_exitPower1,statePower1@phasePower1
  1284  0006FC  C055  F03C         	movff	?_exitPower1+1,statePower1@phasePower1+1
  1285  000700  C056  F03D         	movff	?_exitPower1+2,statePower1@phasePower1+2
  1286                           
  1287                           ;States.c: 97: phase = phasePower1.phaseState;
  1288  000704  C03C  F052         	movff	statePower1@phasePower1+1,statePower1@phase
  1289                           
  1290                           ;States.c: 98: return (phasePower1.stateMain);
  1291  000708  503D               	movf	statePower1@phasePower1+2,w,c
  1292  00070A  0012               	return	
  1293  00070C                     __end_of_statePower1:
  1294                           	opt stack 0
  1295                           tosu	equ	0xFFF
  1296                           tosh	equ	0xFFE
  1297                           tosl	equ	0xFFD
  1298                           pclath	equ	0xFFA
  1299                           tblptru	equ	0xFF8
  1300                           tblptrh	equ	0xFF7
  1301                           tblptrl	equ	0xFF6
  1302                           tablat	equ	0xFF5
  1303                           prodh	equ	0xFF4
  1304                           prodl	equ	0xFF3
  1305                           postinc0	equ	0xFEE
  1306                           wreg	equ	0xFE8
  1307                           
  1308 ;; *************** function _stateMainMenu *****************
  1309 ;; Defined at:
  1310 ;;		line 67 in file "States.c"
  1311 ;; Parameters:    Size  Location     Type
  1312 ;;		None
  1313 ;; Auto vars:     Size  Location     Type
  1314 ;;  mainMenuFunc    2    2[COMRAM] PTR FTN(struct .,)struct
  1315 ;;		 -> viewMenu(2), generalView(2), initialLoad(2), 
  1316 ;; Return value:  Size  Location     Type
  1317 ;;                  1    wreg      enum E3139
  1318 ;; Registers used:
  1319 ;;		wreg, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1320 ;; Tracked objects:
  1321 ;;		On entry : 0/0
  1322 ;;		On exit  : 0/0
  1323 ;;		Unchanged: 0/0
  1324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1325 ;;      Params:         0       0       0       0
  1326 ;;      Locals:         2       0       0       0
  1327 ;;      Temps:          0       0       0       0
  1328 ;;      Totals:         2       0       0       0
  1329 ;;Total ram usage:        2 bytes
  1330 ;; Hardware stack levels used:    1
  1331 ;; Hardware stack levels required when called:    1
  1332 ;; This function calls:
  1333 ;;		_generalView
  1334 ;;		_initialLoad
  1335 ;;		_viewMenu
  1336 ;; This function is called by:
  1337 ;;		_main
  1338 ;; This function uses a non-reentrant model
  1339 ;;
  1340                           
  1341                           	psect	text7
  1342  0007B4                     __ptext7:
  1343                           	opt stack 0
  1344  0007B4                     _stateMainMenu:
  1345                           	opt stack 29
  1346                           
  1347                           ;States.c: 70: static PhaseStateMenu_Type phase = INITIAL_LOAD;
  1348                           ;States.c: 71: static PhaseMainMenu_Type phaseMain;
  1349                           ;States.c: 72: PhaseMainMenu_Type(*mainMenuFunctions)(PhaseMainMenu_Type);
  1350                           ;States.c: 73: phaseMain.stateMain = MAIN_MENU;
  1351                           
  1352                           ;incstack = 0
  1353  0007B4  0E00               	movlw	0
  1354  0007B6  6E4B               	movwf	stateMainMenu@phaseMain+1,c
  1355                           
  1356                           ;States.c: 76: mainMenuFunctions = phasesMainMenu[phase].PhaseMainMenu;
  1357  0007B8  5053               	movf	stateMainMenu@phase,w,c
  1358  0007BA  0D02               	mullw	2
  1359  0007BC  0E2B               	movlw	low _phasesMainMenu
  1360  0007BE  24F3               	addwf	prodl,w,c
  1361  0007C0  6EF6               	movwf	tblptrl,c
  1362  0007C2  0E03               	movlw	high _phasesMainMenu
  1363  0007C4  20F4               	addwfc	prodh,w,c
  1364  0007C6  6EF7               	movwf	tblptrh,c
  1365  0007C8                     	if	0	;There are less than 3 active tblptr bytes
  1366  0007C8                     	endif
  1367  0007C8  0009               	tblrd		*+
  1368  0007CA  CFF5 F056          	movff	tablat,stateMainMenu@mainMenuFunctions
  1369  0007CE  000A               	tblrd		*-
  1370  0007D0  CFF5 F057          	movff	tablat,stateMainMenu@mainMenuFunctions+1
  1371                           
  1372                           ;States.c: 77: phaseMain = mainMenuFunctions(phaseMain);
  1373  0007D4  C04A  F054         	movff	stateMainMenu@phaseMain,viewMenu@data
  1374  0007D8  C04B  F055         	movff	stateMainMenu@phaseMain+1,viewMenu@data+1
  1375  0007DC  D801               	call	u418
  1376  0007DE  D00A               	goto	u419
  1377  0007E0                     u418:
  1378  0007E0  0005               	push	
  1379  0007E2  6EFA               	movwf	pclath,c
  1380  0007E4  5056               	movf	stateMainMenu@mainMenuFunctions,w,c
  1381  0007E6  6EFD               	movwf	tosl,c
  1382  0007E8  5057               	movf	stateMainMenu@mainMenuFunctions+1,w,c
  1383  0007EA  6EFE               	movwf	tosh,c
  1384  0007EC  50F8               	movf	tblptru,w,c
  1385  0007EE  6EFF               	movwf	tosu,c
  1386  0007F0  50FA               	movf	pclath,w,c
  1387  0007F2  0012               	return		;indir
  1388  0007F4                     u419:
  1389  0007F4  C054  F04A         	movff	?_viewMenu,stateMainMenu@phaseMain
  1390  0007F8  C055  F04B         	movff	?_viewMenu+1,stateMainMenu@phaseMain+1
  1391                           
  1392                           ;States.c: 80: phase = phaseMain.phaseState;
  1393  0007FC  C04A  F053         	movff	stateMainMenu@phaseMain,stateMainMenu@phase
  1394                           
  1395                           ;States.c: 81: return (phaseMain.stateMain);
  1396  000800  504B               	movf	stateMainMenu@phaseMain+1,w,c
  1397  000802  0012               	return	
  1398  000804                     __end_of_stateMainMenu:
  1399                           	opt stack 0
  1400                           tosu	equ	0xFFF
  1401                           tosh	equ	0xFFE
  1402                           tosl	equ	0xFFD
  1403                           pclath	equ	0xFFA
  1404                           tblptru	equ	0xFF8
  1405                           tblptrh	equ	0xFF7
  1406                           tblptrl	equ	0xFF6
  1407                           tablat	equ	0xFF5
  1408                           prodh	equ	0xFF4
  1409                           prodl	equ	0xFF3
  1410                           postinc0	equ	0xFEE
  1411                           wreg	equ	0xFE8
  1412                           
  1413 ;; *************** function _stateTemperature *****************
  1414 ;; Defined at:
  1415 ;;		line 186 in file "States.c"
  1416 ;; Parameters:    Size  Location     Type
  1417 ;;		None
  1418 ;; Auto vars:     Size  Location     Type
  1419 ;;  temperatureF    2    3[COMRAM] PTR FTN(struct .,)struct
  1420 ;;		 -> exitTemperature(3), showTemperature(3), 
  1421 ;; Return value:  Size  Location     Type
  1422 ;;                  1    wreg      enum E3139
  1423 ;; Registers used:
  1424 ;;		wreg, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1425 ;; Tracked objects:
  1426 ;;		On entry : 0/0
  1427 ;;		On exit  : 0/0
  1428 ;;		Unchanged: 0/0
  1429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1430 ;;      Params:         0       0       0       0
  1431 ;;      Locals:         2       0       0       0
  1432 ;;      Temps:          0       0       0       0
  1433 ;;      Totals:         2       0       0       0
  1434 ;;Total ram usage:        2 bytes
  1435 ;; Hardware stack levels used:    1
  1436 ;; Hardware stack levels required when called:    1
  1437 ;; This function calls:
  1438 ;;		_exitTemperature
  1439 ;;		_showTemperature
  1440 ;; This function is called by:
  1441 ;;		_main
  1442 ;; This function uses a non-reentrant model
  1443 ;;
  1444                           
  1445                           	psect	text8
  1446  00070C                     __ptext8:
  1447                           	opt stack 0
  1448  00070C                     _stateTemperature:
  1449                           	opt stack 29
  1450                           
  1451                           ;States.c: 189: static PhaseStateTemperature_Type phase = SHOW_TEMPERATURE;
  1452                           ;States.c: 190: static PhaseTemperature_Type phaseTemperature;
  1453                           ;States.c: 191: PhaseTemperature_Type(*temperatureFunctions)(PhaseTemperature_Type);
  1454                           ;States.c: 192: phaseTemperature.stateMain = TEMPERATURE;
  1455                           
  1456                           ;incstack = 0
  1457  00070C  0E07               	movlw	7
  1458  00070E  6E2E               	movwf	stateTemperature@phaseTemperature+2,c
  1459                           
  1460                           ;States.c: 195: temperatureFunctions = phasesTemperature[phase].PhaseTemperature;
  1461  000710  504C               	movf	stateTemperature@phase,w,c
  1462  000712  0D02               	mullw	2
  1463  000714  0E31               	movlw	low _phasesTemperature
  1464  000716  24F3               	addwf	prodl,w,c
  1465  000718  6EF6               	movwf	tblptrl,c
  1466  00071A  0E03               	movlw	high _phasesTemperature
  1467  00071C  20F4               	addwfc	prodh,w,c
  1468  00071E  6EF7               	movwf	tblptrh,c
  1469  000720                     	if	0	;There are less than 3 active tblptr bytes
  1470  000720                     	endif
  1471  000720  0009               	tblrd		*+
  1472  000722  CFF5 F057          	movff	tablat,stateTemperature@temperatureFunctions
  1473  000726  000A               	tblrd		*-
  1474  000728  CFF5 F058          	movff	tablat,stateTemperature@temperatureFunctions+1
  1475                           
  1476                           ;States.c: 196: phaseTemperature = temperatureFunctions(phaseTemperature);
  1477  00072C  C02C  F054         	movff	stateTemperature@phaseTemperature,exitTemperature@data
  1478  000730  C02D  F055         	movff	stateTemperature@phaseTemperature+1,exitTemperature@data+1
  1479  000734  C02E  F056         	movff	stateTemperature@phaseTemperature+2,exitTemperature@data+2
  1480  000738  D801               	call	u488
  1481  00073A  D00A               	goto	u489
  1482  00073C                     u488:
  1483  00073C  0005               	push	
  1484  00073E  6EFA               	movwf	pclath,c
  1485  000740  5057               	movf	stateTemperature@temperatureFunctions,w,c
  1486  000742  6EFD               	movwf	tosl,c
  1487  000744  5058               	movf	stateTemperature@temperatureFunctions+1,w,c
  1488  000746  6EFE               	movwf	tosh,c
  1489  000748  50F8               	movf	tblptru,w,c
  1490  00074A  6EFF               	movwf	tosu,c
  1491  00074C  50FA               	movf	pclath,w,c
  1492  00074E  0012               	return		;indir
  1493  000750                     u489:
  1494  000750  C054  F02C         	movff	?_exitTemperature,stateTemperature@phaseTemperature
  1495  000754  C055  F02D         	movff	?_exitTemperature+1,stateTemperature@phaseTemperature+1
  1496  000758  C056  F02E         	movff	?_exitTemperature+2,stateTemperature@phaseTemperature+2
  1497                           
  1498                           ;States.c: 199: phase = phaseTemperature.phaseState;
  1499  00075C  C02D  F04C         	movff	stateTemperature@phaseTemperature+1,stateTemperature@phase
  1500                           
  1501                           ;States.c: 200: return (phaseTemperature.stateMain);
  1502  000760  502E               	movf	stateTemperature@phaseTemperature+2,w,c
  1503  000762  0012               	return	
  1504  000764                     __end_of_stateTemperature:
  1505                           	opt stack 0
  1506                           tosu	equ	0xFFF
  1507                           tosh	equ	0xFFE
  1508                           tosl	equ	0xFFD
  1509                           pclath	equ	0xFFA
  1510                           tblptru	equ	0xFF8
  1511                           tblptrh	equ	0xFF7
  1512                           tblptrl	equ	0xFF6
  1513                           tablat	equ	0xFF5
  1514                           prodh	equ	0xFF4
  1515                           prodl	equ	0xFF3
  1516                           postinc0	equ	0xFEE
  1517                           wreg	equ	0xFE8
  1518                           
  1519 ;; *************** function _exitTemperature *****************
  1520 ;; Defined at:
  1521 ;;		line 259 in file "Phases.c"
  1522 ;; Parameters:    Size  Location     Type
  1523 ;;  data            3    0[COMRAM] struct .
  1524 ;; Auto vars:     Size  Location     Type
  1525 ;;		None
  1526 ;; Return value:  Size  Location     Type
  1527 ;;                  3    0[COMRAM] struct .
  1528 ;; Registers used:
  1529 ;;		None
  1530 ;; Tracked objects:
  1531 ;;		On entry : 0/0
  1532 ;;		On exit  : 0/0
  1533 ;;		Unchanged: 0/0
  1534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1535 ;;      Params:         3       0       0       0
  1536 ;;      Locals:         0       0       0       0
  1537 ;;      Temps:          0       0       0       0
  1538 ;;      Totals:         3       0       0       0
  1539 ;;Total ram usage:        3 bytes
  1540 ;; Hardware stack levels used:    1
  1541 ;; This function calls:
  1542 ;;		Nothing
  1543 ;; This function is called by:
  1544 ;;		_stateTemperature
  1545 ;; This function uses a non-reentrant model
  1546 ;;
  1547                           
  1548                           	psect	text9
  1549  00090C                     __ptext9:
  1550                           	opt stack 0
  1551  00090C                     _exitTemperature:
  1552                           	opt stack 29
  1553                           
  1554                           ;Phases.c: 262: static PhaseTemperature_Type currentTemperature2;
  1555                           ;Phases.c: 265: currentTemperature2.phaseState = data.phaseState;
  1556                           
  1557                           ;incstack = 0
  1558  00090C  C055  F061         	movff	exitTemperature@data+1,exitTemperature@currentTemperature2+1
  1559                           
  1560                           ;Phases.c: 266: currentTemperature2.stateMain = data.stateMain;
  1561  000910  C056  F062         	movff	exitTemperature@data+2,exitTemperature@currentTemperature2+2
  1562                           
  1563                           ;Phases.c: 268: return (currentTemperature2);
  1564  000914  C060  F054         	movff	exitTemperature@currentTemperature2,?_exitTemperature
  1565  000918  C061  F055         	movff	exitTemperature@currentTemperature2+1,?_exitTemperature+1
  1566  00091C  C062  F056         	movff	exitTemperature@currentTemperature2+2,?_exitTemperature+2
  1567  000920  0012               	return		;funcret
  1568  000922                     __end_of_exitTemperature:
  1569                           	opt stack 0
  1570                           tosu	equ	0xFFF
  1571                           tosh	equ	0xFFE
  1572                           tosl	equ	0xFFD
  1573                           pclath	equ	0xFFA
  1574                           tblptru	equ	0xFF8
  1575                           tblptrh	equ	0xFF7
  1576                           tblptrl	equ	0xFF6
  1577                           tablat	equ	0xFF5
  1578                           prodh	equ	0xFF4
  1579                           prodl	equ	0xFF3
  1580                           postinc0	equ	0xFEE
  1581                           wreg	equ	0xFE8
  1582                           
  1583 ;; *************** function _showTemperature *****************
  1584 ;; Defined at:
  1585 ;;		line 247 in file "Phases.c"
  1586 ;; Parameters:    Size  Location     Type
  1587 ;;  data            3    0[COMRAM] struct .
  1588 ;; Auto vars:     Size  Location     Type
  1589 ;;		None
  1590 ;; Return value:  Size  Location     Type
  1591 ;;                  3    0[COMRAM] struct .
  1592 ;; Registers used:
  1593 ;;		wreg, status,2
  1594 ;; Tracked objects:
  1595 ;;		On entry : 0/0
  1596 ;;		On exit  : 0/0
  1597 ;;		Unchanged: 0/0
  1598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1599 ;;      Params:         3       0       0       0
  1600 ;;      Locals:         0       0       0       0
  1601 ;;      Temps:          0       0       0       0
  1602 ;;      Totals:         3       0       0       0
  1603 ;;Total ram usage:        3 bytes
  1604 ;; Hardware stack levels used:    1
  1605 ;; This function calls:
  1606 ;;		Nothing
  1607 ;; This function is called by:
  1608 ;;		_stateTemperature
  1609 ;; This function uses a non-reentrant model
  1610 ;;
  1611                           
  1612                           	psect	text10
  1613  0008DC                     __ptext10:
  1614                           	opt stack 0
  1615  0008DC                     _showTemperature:
  1616                           	opt stack 29
  1617                           
  1618                           ;Phases.c: 250: static PhaseTemperature_Type currentTemperature1;
  1619                           ;Phases.c: 253: currentTemperature1.phaseState = EXIT_TEMPERATURE;
  1620                           
  1621                           ;incstack = 0
  1622  0008DC  0E01               	movlw	1
  1623  0008DE  0100               	movlb	0	; () banked
  1624  0008E0  6F64               	movwf	(showTemperature@currentTemperature1+1)& (0+255),b
  1625                           
  1626                           ; BSR set to: 0
  1627                           ;Phases.c: 254: currentTemperature1.stateMain = data.stateMain;
  1628  0008E2  C056  F065         	movff	showTemperature@data+2,showTemperature@currentTemperature1+2
  1629                           
  1630                           ; BSR set to: 0
  1631                           ;Phases.c: 256: return (currentTemperature1);
  1632  0008E6  C063  F054         	movff	showTemperature@currentTemperature1,?_showTemperature
  1633  0008EA  C064  F055         	movff	showTemperature@currentTemperature1+1,?_showTemperature+1
  1634  0008EE  C065  F056         	movff	showTemperature@currentTemperature1+2,?_showTemperature+2
  1635  0008F2  0012               	return	
  1636  0008F4                     __end_of_showTemperature:
  1637                           	opt stack 0
  1638                           tosu	equ	0xFFF
  1639                           tosh	equ	0xFFE
  1640                           tosl	equ	0xFFD
  1641                           pclath	equ	0xFFA
  1642                           tblptru	equ	0xFF8
  1643                           tblptrh	equ	0xFF7
  1644                           tblptrl	equ	0xFF6
  1645                           tablat	equ	0xFF5
  1646                           prodh	equ	0xFF4
  1647                           prodl	equ	0xFF3
  1648                           postinc0	equ	0xFEE
  1649                           wreg	equ	0xFE8
  1650                           
  1651 ;; *************** function _exitRmsVI *****************
  1652 ;; Defined at:
  1653 ;;		line 151 in file "Phases.c"
  1654 ;; Parameters:    Size  Location     Type
  1655 ;;  data            3    0[COMRAM] struct .
  1656 ;; Auto vars:     Size  Location     Type
  1657 ;;		None
  1658 ;; Return value:  Size  Location     Type
  1659 ;;                  3    0[COMRAM] struct .
  1660 ;; Registers used:
  1661 ;;		None
  1662 ;; Tracked objects:
  1663 ;;		On entry : 0/0
  1664 ;;		On exit  : 0/0
  1665 ;;		Unchanged: 0/0
  1666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1667 ;;      Params:         3       0       0       0
  1668 ;;      Locals:         0       0       0       0
  1669 ;;      Temps:          0       0       0       0
  1670 ;;      Totals:         3       0       0       0
  1671 ;;Total ram usage:        3 bytes
  1672 ;; Hardware stack levels used:    1
  1673 ;; This function calls:
  1674 ;;		Nothing
  1675 ;; This function is called by:
  1676 ;;		_stateRmsVI
  1677 ;; This function uses a non-reentrant model
  1678 ;;
  1679                           
  1680                           	psect	text11
  1681  000922                     __ptext11:
  1682                           	opt stack 0
  1683  000922                     _exitRmsVI:
  1684                           	opt stack 29
  1685                           
  1686                           ;Phases.c: 154: static PhaseRmsVI_Type currentRms3;
  1687                           ;Phases.c: 157: currentRms3.phaseState = data.phaseState;
  1688                           
  1689                           ; BSR set to: 0
  1690                           ;incstack = 0
  1691  000922  C055  F00F         	movff	exitRmsVI@data+1,exitRmsVI@currentRms3+1
  1692                           
  1693                           ;Phases.c: 158: currentRms3.stateMain = data.stateMain;
  1694  000926  C056  F010         	movff	exitRmsVI@data+2,exitRmsVI@currentRms3+2
  1695                           
  1696                           ;Phases.c: 160: return (currentRms3);
  1697  00092A  C00E  F054         	movff	exitRmsVI@currentRms3,?_exitRmsVI
  1698  00092E  C00F  F055         	movff	exitRmsVI@currentRms3+1,?_exitRmsVI+1
  1699  000932  C010  F056         	movff	exitRmsVI@currentRms3+2,?_exitRmsVI+2
  1700  000936  0012               	return		;funcret
  1701  000938                     __end_of_exitRmsVI:
  1702                           	opt stack 0
  1703                           tosu	equ	0xFFF
  1704                           tosh	equ	0xFFE
  1705                           tosl	equ	0xFFD
  1706                           pclath	equ	0xFFA
  1707                           tblptru	equ	0xFF8
  1708                           tblptrh	equ	0xFF7
  1709                           tblptrl	equ	0xFF6
  1710                           tablat	equ	0xFF5
  1711                           prodh	equ	0xFF4
  1712                           prodl	equ	0xFF3
  1713                           postinc0	equ	0xFEE
  1714                           wreg	equ	0xFE8
  1715                           
  1716 ;; *************** function _neutralRmsVI *****************
  1717 ;; Defined at:
  1718 ;;		line 139 in file "Phases.c"
  1719 ;; Parameters:    Size  Location     Type
  1720 ;;  data            3    0[COMRAM] struct .
  1721 ;; Auto vars:     Size  Location     Type
  1722 ;;		None
  1723 ;; Return value:  Size  Location     Type
  1724 ;;                  3    0[COMRAM] struct .
  1725 ;; Registers used:
  1726 ;;		wreg, status,2
  1727 ;; Tracked objects:
  1728 ;;		On entry : 0/0
  1729 ;;		On exit  : 0/0
  1730 ;;		Unchanged: 0/0
  1731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1732 ;;      Params:         3       0       0       0
  1733 ;;      Locals:         0       0       0       0
  1734 ;;      Temps:          0       0       0       0
  1735 ;;      Totals:         3       0       0       0
  1736 ;;Total ram usage:        3 bytes
  1737 ;; Hardware stack levels used:    1
  1738 ;; This function calls:
  1739 ;;		Nothing
  1740 ;; This function is called by:
  1741 ;;		_stateRmsVI
  1742 ;; This function uses a non-reentrant model
  1743 ;;
  1744                           
  1745                           	psect	text12
  1746  000938                     __ptext12:
  1747                           	opt stack 0
  1748  000938                     _neutralRmsVI:
  1749                           	opt stack 29
  1750                           
  1751                           ;Phases.c: 142: static PhaseRmsVI_Type currentRms2;
  1752                           ;Phases.c: 145: currentRms2.phaseState = EXIT_RMSVI;
  1753                           
  1754                           ;incstack = 0
  1755  000938  0E02               	movlw	2
  1756  00093A  6E12               	movwf	neutralRmsVI@currentRms2+1,c
  1757                           
  1758                           ;Phases.c: 146: currentRms2.stateMain = data.stateMain;
  1759  00093C  C056  F013         	movff	neutralRmsVI@data+2,neutralRmsVI@currentRms2+2
  1760                           
  1761                           ;Phases.c: 148: return (currentRms2);
  1762  000940  C011  F054         	movff	neutralRmsVI@currentRms2,?_neutralRmsVI
  1763  000944  C012  F055         	movff	neutralRmsVI@currentRms2+1,?_neutralRmsVI+1
  1764  000948  C013  F056         	movff	neutralRmsVI@currentRms2+2,?_neutralRmsVI+2
  1765  00094C  0012               	return	
  1766  00094E                     __end_of_neutralRmsVI:
  1767                           	opt stack 0
  1768                           tosu	equ	0xFFF
  1769                           tosh	equ	0xFFE
  1770                           tosl	equ	0xFFD
  1771                           pclath	equ	0xFFA
  1772                           tblptru	equ	0xFF8
  1773                           tblptrh	equ	0xFF7
  1774                           tblptrl	equ	0xFF6
  1775                           tablat	equ	0xFF5
  1776                           prodh	equ	0xFF4
  1777                           prodl	equ	0xFF3
  1778                           postinc0	equ	0xFEE
  1779                           wreg	equ	0xFE8
  1780                           
  1781 ;; *************** function _phRmsVI *****************
  1782 ;; Defined at:
  1783 ;;		line 127 in file "Phases.c"
  1784 ;; Parameters:    Size  Location     Type
  1785 ;;  data            3    0[COMRAM] struct .
  1786 ;; Auto vars:     Size  Location     Type
  1787 ;;		None
  1788 ;; Return value:  Size  Location     Type
  1789 ;;                  3    0[COMRAM] struct .
  1790 ;; Registers used:
  1791 ;;		wreg, status,2
  1792 ;; Tracked objects:
  1793 ;;		On entry : 0/0
  1794 ;;		On exit  : 0/0
  1795 ;;		Unchanged: 0/0
  1796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1797 ;;      Params:         3       0       0       0
  1798 ;;      Locals:         0       0       0       0
  1799 ;;      Temps:          0       0       0       0
  1800 ;;      Totals:         3       0       0       0
  1801 ;;Total ram usage:        3 bytes
  1802 ;; Hardware stack levels used:    1
  1803 ;; This function calls:
  1804 ;;		Nothing
  1805 ;; This function is called by:
  1806 ;;		_stateRmsVI
  1807 ;; This function uses a non-reentrant model
  1808 ;;
  1809                           
  1810                           	psect	text13
  1811  00094E                     __ptext13:
  1812                           	opt stack 0
  1813  00094E                     _phRmsVI:
  1814                           	opt stack 29
  1815                           
  1816                           ;Phases.c: 130: static PhaseRmsVI_Type currentRms1;
  1817                           ;Phases.c: 133: currentRms1.phaseState = NEUTRAL_RMSVI;
  1818                           
  1819                           ;incstack = 0
  1820  00094E  0E01               	movlw	1
  1821  000950  6E15               	movwf	phRmsVI@currentRms1+1,c
  1822                           
  1823                           ;Phases.c: 134: currentRms1.stateMain = data.stateMain;
  1824  000952  C056  F016         	movff	phRmsVI@data+2,phRmsVI@currentRms1+2
  1825                           
  1826                           ;Phases.c: 136: return (currentRms1);
  1827  000956  C014  F054         	movff	phRmsVI@currentRms1,?_phRmsVI
  1828  00095A  C015  F055         	movff	phRmsVI@currentRms1+1,?_phRmsVI+1
  1829  00095E  C016  F056         	movff	phRmsVI@currentRms1+2,?_phRmsVI+2
  1830  000962  0012               	return	
  1831  000964                     __end_of_phRmsVI:
  1832                           	opt stack 0
  1833                           tosu	equ	0xFFF
  1834                           tosh	equ	0xFFE
  1835                           tosl	equ	0xFFD
  1836                           pclath	equ	0xFFA
  1837                           tblptru	equ	0xFF8
  1838                           tblptrh	equ	0xFF7
  1839                           tblptrl	equ	0xFF6
  1840                           tablat	equ	0xFF5
  1841                           prodh	equ	0xFF4
  1842                           prodl	equ	0xFF3
  1843                           postinc0	equ	0xFEE
  1844                           wreg	equ	0xFE8
  1845                           
  1846 ;; *************** function _exitPowerFactor *****************
  1847 ;; Defined at:
  1848 ;;		line 175 in file "Phases.c"
  1849 ;; Parameters:    Size  Location     Type
  1850 ;;  data            2    0[COMRAM] struct .
  1851 ;; Auto vars:     Size  Location     Type
  1852 ;;		None
  1853 ;; Return value:  Size  Location     Type
  1854 ;;                  2    0[COMRAM] struct .
  1855 ;; Registers used:
  1856 ;;		None
  1857 ;; Tracked objects:
  1858 ;;		On entry : 0/0
  1859 ;;		On exit  : 0/0
  1860 ;;		Unchanged: 0/0
  1861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1862 ;;      Params:         2       0       0       0
  1863 ;;      Locals:         0       0       0       0
  1864 ;;      Temps:          0       0       0       0
  1865 ;;      Totals:         2       0       0       0
  1866 ;;Total ram usage:        2 bytes
  1867 ;; Hardware stack levels used:    1
  1868 ;; This function calls:
  1869 ;;		Nothing
  1870 ;; This function is called by:
  1871 ;;		_statePowerFactor
  1872 ;; This function uses a non-reentrant model
  1873 ;;
  1874                           
  1875                           	psect	text14
  1876  000A56                     __ptext14:
  1877                           	opt stack 0
  1878  000A56                     _exitPowerFactor:
  1879                           	opt stack 29
  1880                           
  1881                           ;Phases.c: 178: static PhasePowerFactor_Type currentPowerFactor2;
  1882                           ;Phases.c: 181: currentPowerFactor2.phaseState = data.phaseState;
  1883                           
  1884                           ;incstack = 0
  1885  000A56  C054  F03E         	movff	exitPowerFactor@data,exitPowerFactor@currentPowerFactor2
  1886                           
  1887                           ;Phases.c: 182: currentPowerFactor2.stateMain = data.stateMain;
  1888  000A5A  C055  F03F         	movff	exitPowerFactor@data+1,exitPowerFactor@currentPowerFactor2+1
  1889                           
  1890                           ;Phases.c: 184: return (currentPowerFactor2);
  1891  000A5E  C03E  F054         	movff	exitPowerFactor@currentPowerFactor2,?_exitPowerFactor
  1892  000A62  C03F  F055         	movff	exitPowerFactor@currentPowerFactor2+1,?_exitPowerFactor+1
  1893  000A66  0012               	return		;funcret
  1894  000A68                     __end_of_exitPowerFactor:
  1895                           	opt stack 0
  1896                           tosu	equ	0xFFF
  1897                           tosh	equ	0xFFE
  1898                           tosl	equ	0xFFD
  1899                           pclath	equ	0xFFA
  1900                           tblptru	equ	0xFF8
  1901                           tblptrh	equ	0xFF7
  1902                           tblptrl	equ	0xFF6
  1903                           tablat	equ	0xFF5
  1904                           prodh	equ	0xFF4
  1905                           prodl	equ	0xFF3
  1906                           postinc0	equ	0xFEE
  1907                           wreg	equ	0xFE8
  1908                           
  1909 ;; *************** function _phPowerFactor *****************
  1910 ;; Defined at:
  1911 ;;		line 163 in file "Phases.c"
  1912 ;; Parameters:    Size  Location     Type
  1913 ;;  data            2    0[COMRAM] struct .
  1914 ;; Auto vars:     Size  Location     Type
  1915 ;;		None
  1916 ;; Return value:  Size  Location     Type
  1917 ;;                  2    0[COMRAM] struct .
  1918 ;; Registers used:
  1919 ;;		wreg, status,2
  1920 ;; Tracked objects:
  1921 ;;		On entry : 0/0
  1922 ;;		On exit  : 0/0
  1923 ;;		Unchanged: 0/0
  1924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1925 ;;      Params:         2       0       0       0
  1926 ;;      Locals:         0       0       0       0
  1927 ;;      Temps:          0       0       0       0
  1928 ;;      Totals:         2       0       0       0
  1929 ;;Total ram usage:        2 bytes
  1930 ;; Hardware stack levels used:    1
  1931 ;; This function calls:
  1932 ;;		Nothing
  1933 ;; This function is called by:
  1934 ;;		_statePowerFactor
  1935 ;; This function uses a non-reentrant model
  1936 ;;
  1937                           
  1938                           	psect	text15
  1939  000A68                     __ptext15:
  1940                           	opt stack 0
  1941  000A68                     _phPowerFactor:
  1942                           	opt stack 29
  1943                           
  1944                           ;Phases.c: 166: static PhasePowerFactor_Type currentPowerFactor1;
  1945                           ;Phases.c: 169: currentPowerFactor1.phaseState = EXIT_PF;
  1946                           
  1947                           ;incstack = 0
  1948  000A68  0E01               	movlw	1
  1949  000A6A  6E40               	movwf	phPowerFactor@currentPowerFactor1,c
  1950                           
  1951                           ;Phases.c: 170: currentPowerFactor1.stateMain = data.stateMain;
  1952  000A6C  C055  F041         	movff	phPowerFactor@data+1,phPowerFactor@currentPowerFactor1+1
  1953                           
  1954                           ;Phases.c: 172: return (currentPowerFactor1);
  1955  000A70  C040  F054         	movff	phPowerFactor@currentPowerFactor1,?_phPowerFactor
  1956  000A74  C041  F055         	movff	phPowerFactor@currentPowerFactor1+1,?_phPowerFactor+1
  1957  000A78  0012               	return	
  1958  000A7A                     __end_of_phPowerFactor:
  1959                           	opt stack 0
  1960                           tosu	equ	0xFFF
  1961                           tosh	equ	0xFFE
  1962                           tosl	equ	0xFFD
  1963                           pclath	equ	0xFFA
  1964                           tblptru	equ	0xFF8
  1965                           tblptrh	equ	0xFF7
  1966                           tblptrl	equ	0xFF6
  1967                           tablat	equ	0xFF5
  1968                           prodh	equ	0xFF4
  1969                           prodl	equ	0xFF3
  1970                           postinc0	equ	0xFEE
  1971                           wreg	equ	0xFE8
  1972                           
  1973 ;; *************** function _exitPower2 *****************
  1974 ;; Defined at:
  1975 ;;		line 115 in file "Phases.c"
  1976 ;; Parameters:    Size  Location     Type
  1977 ;;  data            3    0[COMRAM] struct .
  1978 ;; Auto vars:     Size  Location     Type
  1979 ;;		None
  1980 ;; Return value:  Size  Location     Type
  1981 ;;                  3    0[COMRAM] struct .
  1982 ;; Registers used:
  1983 ;;		None
  1984 ;; Tracked objects:
  1985 ;;		On entry : 0/0
  1986 ;;		On exit  : 0/0
  1987 ;;		Unchanged: 0/0
  1988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1989 ;;      Params:         3       0       0       0
  1990 ;;      Locals:         0       0       0       0
  1991 ;;      Temps:          0       0       0       0
  1992 ;;      Totals:         3       0       0       0
  1993 ;;Total ram usage:        3 bytes
  1994 ;; Hardware stack levels used:    1
  1995 ;; This function calls:
  1996 ;;		Nothing
  1997 ;; This function is called by:
  1998 ;;		_statePower2
  1999 ;; This function uses a non-reentrant model
  2000 ;;
  2001                           
  2002                           	psect	text16
  2003  000964                     __ptext16:
  2004                           	opt stack 0
  2005  000964                     _exitPower2:
  2006                           	opt stack 29
  2007                           
  2008                           ;Phases.c: 118: static PhasePower2_Type currentPower2_3;
  2009                           ;Phases.c: 121: currentPower2_3.phaseState = data.phaseState;
  2010                           
  2011                           ;incstack = 0
  2012  000964  C055  F018         	movff	exitPower2@data+1,exitPower2@currentPower2_3+1
  2013                           
  2014                           ;Phases.c: 122: currentPower2_3.stateMain = data.stateMain;
  2015  000968  C056  F019         	movff	exitPower2@data+2,exitPower2@currentPower2_3+2
  2016                           
  2017                           ;Phases.c: 124: return (currentPower2_3);
  2018  00096C  C017  F054         	movff	exitPower2@currentPower2_3,?_exitPower2
  2019  000970  C018  F055         	movff	exitPower2@currentPower2_3+1,?_exitPower2+1
  2020  000974  C019  F056         	movff	exitPower2@currentPower2_3+2,?_exitPower2+2
  2021  000978  0012               	return		;funcret
  2022  00097A                     __end_of_exitPower2:
  2023                           	opt stack 0
  2024                           tosu	equ	0xFFF
  2025                           tosh	equ	0xFFE
  2026                           tosl	equ	0xFFD
  2027                           pclath	equ	0xFFA
  2028                           tblptru	equ	0xFF8
  2029                           tblptrh	equ	0xFF7
  2030                           tblptrl	equ	0xFF6
  2031                           tablat	equ	0xFF5
  2032                           prodh	equ	0xFF4
  2033                           prodl	equ	0xFF3
  2034                           postinc0	equ	0xFEE
  2035                           wreg	equ	0xFE8
  2036                           
  2037 ;; *************** function _fhPower2 *****************
  2038 ;; Defined at:
  2039 ;;		line 91 in file "Phases.c"
  2040 ;; Parameters:    Size  Location     Type
  2041 ;;  data            3    0[COMRAM] struct .
  2042 ;; Auto vars:     Size  Location     Type
  2043 ;;		None
  2044 ;; Return value:  Size  Location     Type
  2045 ;;                  3    0[COMRAM] struct .
  2046 ;; Registers used:
  2047 ;;		wreg, status,2
  2048 ;; Tracked objects:
  2049 ;;		On entry : 0/0
  2050 ;;		On exit  : 0/0
  2051 ;;		Unchanged: 0/0
  2052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2053 ;;      Params:         3       0       0       0
  2054 ;;      Locals:         0       0       0       0
  2055 ;;      Temps:          0       0       0       0
  2056 ;;      Totals:         3       0       0       0
  2057 ;;Total ram usage:        3 bytes
  2058 ;; Hardware stack levels used:    1
  2059 ;; This function calls:
  2060 ;;		Nothing
  2061 ;; This function is called by:
  2062 ;;		_statePower2
  2063 ;; This function uses a non-reentrant model
  2064 ;;
  2065                           
  2066                           	psect	text17
  2067  00097A                     __ptext17:
  2068                           	opt stack 0
  2069  00097A                     _fhPower2:
  2070                           	opt stack 29
  2071                           
  2072                           ;Phases.c: 94: static PhasePower2_Type currentPower2_1;
  2073                           ;Phases.c: 97: currentPower2_1.phaseState = PHASES_POWER2;
  2074                           
  2075                           ;incstack = 0
  2076  00097A  0E01               	movlw	1
  2077  00097C  6E1E               	movwf	fhPower2@currentPower2_1+1,c
  2078                           
  2079                           ;Phases.c: 98: currentPower2_1.stateMain = data.stateMain;
  2080  00097E  C056  F01F         	movff	fhPower2@data+2,fhPower2@currentPower2_1+2
  2081                           
  2082                           ;Phases.c: 100: return (currentPower2_1);
  2083  000982  C01D  F054         	movff	fhPower2@currentPower2_1,?_fhPower2
  2084  000986  C01E  F055         	movff	fhPower2@currentPower2_1+1,?_fhPower2+1
  2085  00098A  C01F  F056         	movff	fhPower2@currentPower2_1+2,?_fhPower2+2
  2086  00098E  0012               	return	
  2087  000990                     __end_of_fhPower2:
  2088                           	opt stack 0
  2089                           tosu	equ	0xFFF
  2090                           tosh	equ	0xFFE
  2091                           tosl	equ	0xFFD
  2092                           pclath	equ	0xFFA
  2093                           tblptru	equ	0xFF8
  2094                           tblptrh	equ	0xFF7
  2095                           tblptrl	equ	0xFF6
  2096                           tablat	equ	0xFF5
  2097                           prodh	equ	0xFF4
  2098                           prodl	equ	0xFF3
  2099                           postinc0	equ	0xFEE
  2100                           wreg	equ	0xFE8
  2101                           
  2102 ;; *************** function _phPower2 *****************
  2103 ;; Defined at:
  2104 ;;		line 103 in file "Phases.c"
  2105 ;; Parameters:    Size  Location     Type
  2106 ;;  data            3    0[COMRAM] struct .
  2107 ;; Auto vars:     Size  Location     Type
  2108 ;;		None
  2109 ;; Return value:  Size  Location     Type
  2110 ;;                  3    0[COMRAM] struct .
  2111 ;; Registers used:
  2112 ;;		wreg, status,2
  2113 ;; Tracked objects:
  2114 ;;		On entry : 0/0
  2115 ;;		On exit  : 0/0
  2116 ;;		Unchanged: 0/0
  2117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2118 ;;      Params:         3       0       0       0
  2119 ;;      Locals:         0       0       0       0
  2120 ;;      Temps:          0       0       0       0
  2121 ;;      Totals:         3       0       0       0
  2122 ;;Total ram usage:        3 bytes
  2123 ;; Hardware stack levels used:    1
  2124 ;; This function calls:
  2125 ;;		Nothing
  2126 ;; This function is called by:
  2127 ;;		_statePower2
  2128 ;; This function uses a non-reentrant model
  2129 ;;
  2130                           
  2131                           	psect	text18
  2132  000990                     __ptext18:
  2133                           	opt stack 0
  2134  000990                     _phPower2:
  2135                           	opt stack 29
  2136                           
  2137                           ;Phases.c: 106: static PhasePower2_Type currentPower2_2;
  2138                           ;Phases.c: 109: currentPower2_2.phaseState = EXIT_POWER2;
  2139                           
  2140                           ;incstack = 0
  2141  000990  0E02               	movlw	2
  2142  000992  6E1B               	movwf	phPower2@currentPower2_2+1,c
  2143                           
  2144                           ;Phases.c: 110: currentPower2_2.stateMain = data.stateMain;
  2145  000994  C056  F01C         	movff	phPower2@data+2,phPower2@currentPower2_2+2
  2146                           
  2147                           ;Phases.c: 112: return (currentPower2_2);
  2148  000998  C01A  F054         	movff	phPower2@currentPower2_2,?_phPower2
  2149  00099C  C01B  F055         	movff	phPower2@currentPower2_2+1,?_phPower2+1
  2150  0009A0  C01C  F056         	movff	phPower2@currentPower2_2+2,?_phPower2+2
  2151  0009A4  0012               	return	
  2152  0009A6                     __end_of_phPower2:
  2153                           	opt stack 0
  2154                           tosu	equ	0xFFF
  2155                           tosh	equ	0xFFE
  2156                           tosl	equ	0xFFD
  2157                           pclath	equ	0xFFA
  2158                           tblptru	equ	0xFF8
  2159                           tblptrh	equ	0xFF7
  2160                           tblptrl	equ	0xFF6
  2161                           tablat	equ	0xFF5
  2162                           prodh	equ	0xFF4
  2163                           prodl	equ	0xFF3
  2164                           postinc0	equ	0xFEE
  2165                           wreg	equ	0xFE8
  2166                           
  2167 ;; *************** function _exitPower1 *****************
  2168 ;; Defined at:
  2169 ;;		line 79 in file "Phases.c"
  2170 ;; Parameters:    Size  Location     Type
  2171 ;;  data            3    0[COMRAM] struct .
  2172 ;; Auto vars:     Size  Location     Type
  2173 ;;		None
  2174 ;; Return value:  Size  Location     Type
  2175 ;;                  3    0[COMRAM] struct .
  2176 ;; Registers used:
  2177 ;;		None
  2178 ;; Tracked objects:
  2179 ;;		On entry : 0/0
  2180 ;;		On exit  : 0/0
  2181 ;;		Unchanged: 0/0
  2182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2183 ;;      Params:         3       0       0       0
  2184 ;;      Locals:         0       0       0       0
  2185 ;;      Temps:          0       0       0       0
  2186 ;;      Totals:         3       0       0       0
  2187 ;;Total ram usage:        3 bytes
  2188 ;; Hardware stack levels used:    1
  2189 ;; This function calls:
  2190 ;;		Nothing
  2191 ;; This function is called by:
  2192 ;;		_statePower1
  2193 ;; This function uses a non-reentrant model
  2194 ;;
  2195                           
  2196                           	psect	text19
  2197  0009A6                     __ptext19:
  2198                           	opt stack 0
  2199  0009A6                     _exitPower1:
  2200                           	opt stack 29
  2201                           
  2202                           ;Phases.c: 82: static PhasePower1_Type currentPower1_4;
  2203                           ;Phases.c: 85: currentPower1_4.phaseState = data.phaseState;
  2204                           
  2205                           ;incstack = 0
  2206  0009A6  C055  F021         	movff	exitPower1@data+1,exitPower1@currentPower1_4+1
  2207                           
  2208                           ;Phases.c: 86: currentPower1_4.stateMain = data.stateMain;
  2209  0009AA  C056  F022         	movff	exitPower1@data+2,exitPower1@currentPower1_4+2
  2210                           
  2211                           ;Phases.c: 88: return (currentPower1_4);
  2212  0009AE  C020  F054         	movff	exitPower1@currentPower1_4,?_exitPower1
  2213  0009B2  C021  F055         	movff	exitPower1@currentPower1_4+1,?_exitPower1+1
  2214  0009B6  C022  F056         	movff	exitPower1@currentPower1_4+2,?_exitPower1+2
  2215  0009BA  0012               	return		;funcret
  2216  0009BC                     __end_of_exitPower1:
  2217                           	opt stack 0
  2218                           tosu	equ	0xFFF
  2219                           tosh	equ	0xFFE
  2220                           tosl	equ	0xFFD
  2221                           pclath	equ	0xFFA
  2222                           tblptru	equ	0xFF8
  2223                           tblptrh	equ	0xFF7
  2224                           tblptrl	equ	0xFF6
  2225                           tablat	equ	0xFF5
  2226                           prodh	equ	0xFF4
  2227                           prodl	equ	0xFF3
  2228                           postinc0	equ	0xFEE
  2229                           wreg	equ	0xFE8
  2230                           
  2231 ;; *************** function _phPower1 *****************
  2232 ;; Defined at:
  2233 ;;		line 55 in file "Phases.c"
  2234 ;; Parameters:    Size  Location     Type
  2235 ;;  data            3    0[COMRAM] struct .
  2236 ;; Auto vars:     Size  Location     Type
  2237 ;;		None
  2238 ;; Return value:  Size  Location     Type
  2239 ;;                  3    0[COMRAM] struct .
  2240 ;; Registers used:
  2241 ;;		wreg, status,2
  2242 ;; Tracked objects:
  2243 ;;		On entry : 0/0
  2244 ;;		On exit  : 0/0
  2245 ;;		Unchanged: 0/0
  2246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2247 ;;      Params:         3       0       0       0
  2248 ;;      Locals:         0       0       0       0
  2249 ;;      Temps:          0       0       0       0
  2250 ;;      Totals:         3       0       0       0
  2251 ;;Total ram usage:        3 bytes
  2252 ;; Hardware stack levels used:    1
  2253 ;; This function calls:
  2254 ;;		Nothing
  2255 ;; This function is called by:
  2256 ;;		_statePower1
  2257 ;; This function uses a non-reentrant model
  2258 ;;
  2259                           
  2260                           	psect	text20
  2261  0009BC                     __ptext20:
  2262                           	opt stack 0
  2263  0009BC                     _phPower1:
  2264                           	opt stack 29
  2265                           
  2266                           ;Phases.c: 58: static PhasePower1_Type currentPower1_2;
  2267                           ;Phases.c: 61: currentPower1_2.phaseState = VECTOR_POWER1;
  2268                           
  2269                           ;incstack = 0
  2270  0009BC  0E02               	movlw	2
  2271  0009BE  6E27               	movwf	phPower1@currentPower1_2+1,c
  2272                           
  2273                           ;Phases.c: 62: currentPower1_2.stateMain = data.stateMain;
  2274  0009C0  C056  F028         	movff	phPower1@data+2,phPower1@currentPower1_2+2
  2275                           
  2276                           ;Phases.c: 64: return (currentPower1_2);
  2277  0009C4  C026  F054         	movff	phPower1@currentPower1_2,?_phPower1
  2278  0009C8  C027  F055         	movff	phPower1@currentPower1_2+1,?_phPower1+1
  2279  0009CC  C028  F056         	movff	phPower1@currentPower1_2+2,?_phPower1+2
  2280  0009D0  0012               	return	
  2281  0009D2                     __end_of_phPower1:
  2282                           	opt stack 0
  2283                           tosu	equ	0xFFF
  2284                           tosh	equ	0xFFE
  2285                           tosl	equ	0xFFD
  2286                           pclath	equ	0xFFA
  2287                           tblptru	equ	0xFF8
  2288                           tblptrh	equ	0xFF7
  2289                           tblptrl	equ	0xFF6
  2290                           tablat	equ	0xFF5
  2291                           prodh	equ	0xFF4
  2292                           prodl	equ	0xFF3
  2293                           postinc0	equ	0xFEE
  2294                           wreg	equ	0xFE8
  2295                           
  2296 ;; *************** function _typesPower1 *****************
  2297 ;; Defined at:
  2298 ;;		line 43 in file "Phases.c"
  2299 ;; Parameters:    Size  Location     Type
  2300 ;;  data            3    0[COMRAM] struct .
  2301 ;; Auto vars:     Size  Location     Type
  2302 ;;		None
  2303 ;; Return value:  Size  Location     Type
  2304 ;;                  3    0[COMRAM] struct .
  2305 ;; Registers used:
  2306 ;;		wreg, status,2
  2307 ;; Tracked objects:
  2308 ;;		On entry : 0/0
  2309 ;;		On exit  : 0/0
  2310 ;;		Unchanged: 0/0
  2311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2312 ;;      Params:         3       0       0       0
  2313 ;;      Locals:         0       0       0       0
  2314 ;;      Temps:          0       0       0       0
  2315 ;;      Totals:         3       0       0       0
  2316 ;;Total ram usage:        3 bytes
  2317 ;; Hardware stack levels used:    1
  2318 ;; This function calls:
  2319 ;;		Nothing
  2320 ;; This function is called by:
  2321 ;;		_statePower1
  2322 ;; This function uses a non-reentrant model
  2323 ;;
  2324                           
  2325                           	psect	text21
  2326  0009D2                     __ptext21:
  2327                           	opt stack 0
  2328  0009D2                     _typesPower1:
  2329                           	opt stack 29
  2330                           
  2331                           ;Phases.c: 46: static PhasePower1_Type currentPower1_1;
  2332                           ;Phases.c: 49: currentPower1_1.phaseState = PHASES_POWER1;
  2333                           
  2334                           ;incstack = 0
  2335  0009D2  0E01               	movlw	1
  2336  0009D4  6E2A               	movwf	typesPower1@currentPower1_1+1,c
  2337                           
  2338                           ;Phases.c: 50: currentPower1_1.stateMain = data.stateMain;
  2339  0009D6  C056  F02B         	movff	typesPower1@data+2,typesPower1@currentPower1_1+2
  2340                           
  2341                           ;Phases.c: 52: return (currentPower1_1);
  2342  0009DA  C029  F054         	movff	typesPower1@currentPower1_1,?_typesPower1
  2343  0009DE  C02A  F055         	movff	typesPower1@currentPower1_1+1,?_typesPower1+1
  2344  0009E2  C02B  F056         	movff	typesPower1@currentPower1_1+2,?_typesPower1+2
  2345  0009E6  0012               	return	
  2346  0009E8                     __end_of_typesPower1:
  2347                           	opt stack 0
  2348                           tosu	equ	0xFFF
  2349                           tosh	equ	0xFFE
  2350                           tosl	equ	0xFFD
  2351                           pclath	equ	0xFFA
  2352                           tblptru	equ	0xFF8
  2353                           tblptrh	equ	0xFF7
  2354                           tblptrl	equ	0xFF6
  2355                           tablat	equ	0xFF5
  2356                           prodh	equ	0xFF4
  2357                           prodl	equ	0xFF3
  2358                           postinc0	equ	0xFEE
  2359                           wreg	equ	0xFE8
  2360                           
  2361 ;; *************** function _vectorPower1 *****************
  2362 ;; Defined at:
  2363 ;;		line 67 in file "Phases.c"
  2364 ;; Parameters:    Size  Location     Type
  2365 ;;  data            3    0[COMRAM] struct .
  2366 ;; Auto vars:     Size  Location     Type
  2367 ;;		None
  2368 ;; Return value:  Size  Location     Type
  2369 ;;                  3    0[COMRAM] struct .
  2370 ;; Registers used:
  2371 ;;		wreg, status,2
  2372 ;; Tracked objects:
  2373 ;;		On entry : 0/0
  2374 ;;		On exit  : 0/0
  2375 ;;		Unchanged: 0/0
  2376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2377 ;;      Params:         3       0       0       0
  2378 ;;      Locals:         0       0       0       0
  2379 ;;      Temps:          0       0       0       0
  2380 ;;      Totals:         3       0       0       0
  2381 ;;Total ram usage:        3 bytes
  2382 ;; Hardware stack levels used:    1
  2383 ;; This function calls:
  2384 ;;		Nothing
  2385 ;; This function is called by:
  2386 ;;		_statePower1
  2387 ;; This function uses a non-reentrant model
  2388 ;;
  2389                           
  2390                           	psect	text22
  2391  0009E8                     __ptext22:
  2392                           	opt stack 0
  2393  0009E8                     _vectorPower1:
  2394                           	opt stack 29
  2395                           
  2396                           ;Phases.c: 70: static PhasePower1_Type currentPower1_3;
  2397                           ;Phases.c: 73: currentPower1_3.phaseState = EXIT_POWER1;
  2398                           
  2399                           ;incstack = 0
  2400  0009E8  0E03               	movlw	3
  2401  0009EA  6E24               	movwf	vectorPower1@currentPower1_3+1,c
  2402                           
  2403                           ;Phases.c: 74: currentPower1_3.stateMain = data.stateMain;
  2404  0009EC  C056  F025         	movff	vectorPower1@data+2,vectorPower1@currentPower1_3+2
  2405                           
  2406                           ;Phases.c: 76: return (currentPower1_3);
  2407  0009F0  C023  F054         	movff	vectorPower1@currentPower1_3,?_vectorPower1
  2408  0009F4  C024  F055         	movff	vectorPower1@currentPower1_3+1,?_vectorPower1+1
  2409  0009F8  C025  F056         	movff	vectorPower1@currentPower1_3+2,?_vectorPower1+2
  2410  0009FC  0012               	return	
  2411  0009FE                     __end_of_vectorPower1:
  2412                           	opt stack 0
  2413                           tosu	equ	0xFFF
  2414                           tosh	equ	0xFFE
  2415                           tosl	equ	0xFFD
  2416                           pclath	equ	0xFFA
  2417                           tblptru	equ	0xFF8
  2418                           tblptrh	equ	0xFF7
  2419                           tblptrl	equ	0xFF6
  2420                           tablat	equ	0xFF5
  2421                           prodh	equ	0xFF4
  2422                           prodl	equ	0xFF3
  2423                           postinc0	equ	0xFEE
  2424                           wreg	equ	0xFE8
  2425                           
  2426 ;; *************** function _exitPhaseAngle *****************
  2427 ;; Defined at:
  2428 ;;		line 211 in file "Phases.c"
  2429 ;; Parameters:    Size  Location     Type
  2430 ;;  data            3    0[COMRAM] struct .
  2431 ;; Auto vars:     Size  Location     Type
  2432 ;;		None
  2433 ;; Return value:  Size  Location     Type
  2434 ;;                  3    0[COMRAM] struct .
  2435 ;; Registers used:
  2436 ;;		None
  2437 ;; Tracked objects:
  2438 ;;		On entry : 0/0
  2439 ;;		On exit  : 0/0
  2440 ;;		Unchanged: 0/0
  2441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2442 ;;      Params:         3       0       0       0
  2443 ;;      Locals:         0       0       0       0
  2444 ;;      Temps:          0       0       0       0
  2445 ;;      Totals:         3       0       0       0
  2446 ;;Total ram usage:        3 bytes
  2447 ;; Hardware stack levels used:    1
  2448 ;; This function calls:
  2449 ;;		Nothing
  2450 ;; This function is called by:
  2451 ;;		_statePhaseAngle
  2452 ;; This function uses a non-reentrant model
  2453 ;;
  2454                           
  2455                           	psect	text23
  2456  0009FE                     __ptext23:
  2457                           	opt stack 0
  2458  0009FE                     _exitPhaseAngle:
  2459                           	opt stack 29
  2460                           
  2461                           ;Phases.c: 214: static PhasePhaseAngle_Type currentPhaseAngle3;
  2462                           ;Phases.c: 217: currentPhaseAngle3.phaseState = data.phaseState;
  2463                           
  2464                           ;incstack = 0
  2465  0009FE  C055  F006         	movff	exitPhaseAngle@data+1,exitPhaseAngle@currentPhaseAngle3+1
  2466                           
  2467                           ;Phases.c: 218: currentPhaseAngle3.stateMain = data.stateMain;
  2468  000A02  C056  F007         	movff	exitPhaseAngle@data+2,exitPhaseAngle@currentPhaseAngle3+2
  2469                           
  2470                           ;Phases.c: 220: return (currentPhaseAngle3);
  2471  000A06  C005  F054         	movff	exitPhaseAngle@currentPhaseAngle3,?_exitPhaseAngle
  2472  000A0A  C006  F055         	movff	exitPhaseAngle@currentPhaseAngle3+1,?_exitPhaseAngle+1
  2473  000A0E  C007  F056         	movff	exitPhaseAngle@currentPhaseAngle3+2,?_exitPhaseAngle+2
  2474  000A12  0012               	return		;funcret
  2475  000A14                     __end_of_exitPhaseAngle:
  2476                           	opt stack 0
  2477                           tosu	equ	0xFFF
  2478                           tosh	equ	0xFFE
  2479                           tosl	equ	0xFFD
  2480                           pclath	equ	0xFFA
  2481                           tblptru	equ	0xFF8
  2482                           tblptrh	equ	0xFF7
  2483                           tblptrl	equ	0xFF6
  2484                           tablat	equ	0xFF5
  2485                           prodh	equ	0xFF4
  2486                           prodl	equ	0xFF3
  2487                           postinc0	equ	0xFEE
  2488                           wreg	equ	0xFE8
  2489                           
  2490 ;; *************** function _phPhaseAngle *****************
  2491 ;; Defined at:
  2492 ;;		line 187 in file "Phases.c"
  2493 ;; Parameters:    Size  Location     Type
  2494 ;;  data            3    0[COMRAM] struct .
  2495 ;; Auto vars:     Size  Location     Type
  2496 ;;		None
  2497 ;; Return value:  Size  Location     Type
  2498 ;;                  3    0[COMRAM] struct .
  2499 ;; Registers used:
  2500 ;;		wreg, status,2
  2501 ;; Tracked objects:
  2502 ;;		On entry : 0/0
  2503 ;;		On exit  : 0/0
  2504 ;;		Unchanged: 0/0
  2505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2506 ;;      Params:         3       0       0       0
  2507 ;;      Locals:         0       0       0       0
  2508 ;;      Temps:          0       0       0       0
  2509 ;;      Totals:         3       0       0       0
  2510 ;;Total ram usage:        3 bytes
  2511 ;; Hardware stack levels used:    1
  2512 ;; This function calls:
  2513 ;;		Nothing
  2514 ;; This function is called by:
  2515 ;;		_statePhaseAngle
  2516 ;; This function uses a non-reentrant model
  2517 ;;
  2518                           
  2519                           	psect	text24
  2520  000A14                     __ptext24:
  2521                           	opt stack 0
  2522  000A14                     _phPhaseAngle:
  2523                           	opt stack 29
  2524                           
  2525                           ;Phases.c: 190: static PhasePhaseAngle_Type currentPhaseAngle1;
  2526                           ;Phases.c: 193: currentPhaseAngle1.phaseState = VI_PA;
  2527                           
  2528                           ;incstack = 0
  2529  000A14  0E01               	movlw	1
  2530  000A16  6E0C               	movwf	phPhaseAngle@currentPhaseAngle1+1,c
  2531                           
  2532                           ;Phases.c: 194: currentPhaseAngle1.stateMain = data.stateMain;
  2533  000A18  C056  F00D         	movff	phPhaseAngle@data+2,phPhaseAngle@currentPhaseAngle1+2
  2534                           
  2535                           ;Phases.c: 196: return (currentPhaseAngle1);
  2536  000A1C  C00B  F054         	movff	phPhaseAngle@currentPhaseAngle1,?_phPhaseAngle
  2537  000A20  C00C  F055         	movff	phPhaseAngle@currentPhaseAngle1+1,?_phPhaseAngle+1
  2538  000A24  C00D  F056         	movff	phPhaseAngle@currentPhaseAngle1+2,?_phPhaseAngle+2
  2539  000A28  0012               	return	
  2540  000A2A                     __end_of_phPhaseAngle:
  2541                           	opt stack 0
  2542                           tosu	equ	0xFFF
  2543                           tosh	equ	0xFFE
  2544                           tosl	equ	0xFFD
  2545                           pclath	equ	0xFFA
  2546                           tblptru	equ	0xFF8
  2547                           tblptrh	equ	0xFF7
  2548                           tblptrl	equ	0xFF6
  2549                           tablat	equ	0xFF5
  2550                           prodh	equ	0xFF4
  2551                           prodl	equ	0xFF3
  2552                           postinc0	equ	0xFEE
  2553                           wreg	equ	0xFE8
  2554                           
  2555 ;; *************** function _viPhaseAngle *****************
  2556 ;; Defined at:
  2557 ;;		line 199 in file "Phases.c"
  2558 ;; Parameters:    Size  Location     Type
  2559 ;;  data            3    0[COMRAM] struct .
  2560 ;; Auto vars:     Size  Location     Type
  2561 ;;		None
  2562 ;; Return value:  Size  Location     Type
  2563 ;;                  3    0[COMRAM] struct .
  2564 ;; Registers used:
  2565 ;;		wreg, status,2
  2566 ;; Tracked objects:
  2567 ;;		On entry : 0/0
  2568 ;;		On exit  : 0/0
  2569 ;;		Unchanged: 0/0
  2570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2571 ;;      Params:         3       0       0       0
  2572 ;;      Locals:         0       0       0       0
  2573 ;;      Temps:          0       0       0       0
  2574 ;;      Totals:         3       0       0       0
  2575 ;;Total ram usage:        3 bytes
  2576 ;; Hardware stack levels used:    1
  2577 ;; This function calls:
  2578 ;;		Nothing
  2579 ;; This function is called by:
  2580 ;;		_statePhaseAngle
  2581 ;; This function uses a non-reentrant model
  2582 ;;
  2583                           
  2584                           	psect	text25
  2585  000A2A                     __ptext25:
  2586                           	opt stack 0
  2587  000A2A                     _viPhaseAngle:
  2588                           	opt stack 29
  2589                           
  2590                           ;Phases.c: 202: static PhasePhaseAngle_Type currentPhaseAngle2;
  2591                           ;Phases.c: 205: currentPhaseAngle2.phaseState = EXIT_PA;
  2592                           
  2593                           ;incstack = 0
  2594  000A2A  0E02               	movlw	2
  2595  000A2C  6E09               	movwf	viPhaseAngle@currentPhaseAngle2+1,c
  2596                           
  2597                           ;Phases.c: 206: currentPhaseAngle2.stateMain = data.stateMain;
  2598  000A2E  C056  F00A         	movff	viPhaseAngle@data+2,viPhaseAngle@currentPhaseAngle2+2
  2599                           
  2600                           ;Phases.c: 208: return (currentPhaseAngle2);
  2601  000A32  C008  F054         	movff	viPhaseAngle@currentPhaseAngle2,?_viPhaseAngle
  2602  000A36  C009  F055         	movff	viPhaseAngle@currentPhaseAngle2+1,?_viPhaseAngle+1
  2603  000A3A  C00A  F056         	movff	viPhaseAngle@currentPhaseAngle2+2,?_viPhaseAngle+2
  2604  000A3E  0012               	return	
  2605  000A40                     __end_of_viPhaseAngle:
  2606                           	opt stack 0
  2607                           tosu	equ	0xFFF
  2608                           tosh	equ	0xFFE
  2609                           tosl	equ	0xFFD
  2610                           pclath	equ	0xFFA
  2611                           tblptru	equ	0xFF8
  2612                           tblptrh	equ	0xFF7
  2613                           tblptrl	equ	0xFF6
  2614                           tablat	equ	0xFF5
  2615                           prodh	equ	0xFF4
  2616                           prodl	equ	0xFF3
  2617                           postinc0	equ	0xFEE
  2618                           wreg	equ	0xFE8
  2619                           
  2620 ;; *************** function _generalView *****************
  2621 ;; Defined at:
  2622 ;;		line 19 in file "Phases.c"
  2623 ;; Parameters:    Size  Location     Type
  2624 ;;  data            2    0[COMRAM] struct .
  2625 ;; Auto vars:     Size  Location     Type
  2626 ;;		None
  2627 ;; Return value:  Size  Location     Type
  2628 ;;                  2    0[COMRAM] struct .
  2629 ;; Registers used:
  2630 ;;		wreg, status,2
  2631 ;; Tracked objects:
  2632 ;;		On entry : 0/0
  2633 ;;		On exit  : 0/0
  2634 ;;		Unchanged: 0/0
  2635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2636 ;;      Params:         2       0       0       0
  2637 ;;      Locals:         0       0       0       0
  2638 ;;      Temps:          0       0       0       0
  2639 ;;      Totals:         2       0       0       0
  2640 ;;Total ram usage:        2 bytes
  2641 ;; Hardware stack levels used:    1
  2642 ;; This function calls:
  2643 ;;		Nothing
  2644 ;; This function is called by:
  2645 ;;		_stateMainMenu
  2646 ;; This function uses a non-reentrant model
  2647 ;;
  2648                           
  2649                           	psect	text26
  2650  000A7A                     __ptext26:
  2651                           	opt stack 0
  2652  000A7A                     _generalView:
  2653                           	opt stack 29
  2654                           
  2655                           ;Phases.c: 22: static PhaseMainMenu_Type currentMainMenu2;
  2656                           ;Phases.c: 25: currentMainMenu2.phaseState = VIEW_MENU;
  2657                           
  2658                           ;incstack = 0
  2659  000A7A  0E02               	movlw	2
  2660  000A7C  6E44               	movwf	generalView@currentMainMenu2,c
  2661                           
  2662                           ;Phases.c: 26: currentMainMenu2.stateMain = data.stateMain;
  2663  000A7E  C055  F045         	movff	generalView@data+1,generalView@currentMainMenu2+1
  2664                           
  2665                           ;Phases.c: 28: return (currentMainMenu2);
  2666  000A82  C044  F054         	movff	generalView@currentMainMenu2,?_generalView
  2667  000A86  C045  F055         	movff	generalView@currentMainMenu2+1,?_generalView+1
  2668  000A8A  0012               	return	
  2669  000A8C                     __end_of_generalView:
  2670                           	opt stack 0
  2671                           tosu	equ	0xFFF
  2672                           tosh	equ	0xFFE
  2673                           tosl	equ	0xFFD
  2674                           pclath	equ	0xFFA
  2675                           tblptru	equ	0xFF8
  2676                           tblptrh	equ	0xFF7
  2677                           tblptrl	equ	0xFF6
  2678                           tablat	equ	0xFF5
  2679                           prodh	equ	0xFF4
  2680                           prodl	equ	0xFF3
  2681                           postinc0	equ	0xFEE
  2682                           wreg	equ	0xFE8
  2683                           
  2684 ;; *************** function _initialLoad *****************
  2685 ;; Defined at:
  2686 ;;		line 4 in file "Phases.c"
  2687 ;; Parameters:    Size  Location     Type
  2688 ;;  data            2    0[COMRAM] struct .
  2689 ;; Auto vars:     Size  Location     Type
  2690 ;;		None
  2691 ;; Return value:  Size  Location     Type
  2692 ;;                  2    0[COMRAM] struct .
  2693 ;; Registers used:
  2694 ;;		wreg, status,2
  2695 ;; Tracked objects:
  2696 ;;		On entry : 0/0
  2697 ;;		On exit  : 0/0
  2698 ;;		Unchanged: 0/0
  2699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2700 ;;      Params:         2       0       0       0
  2701 ;;      Locals:         0       0       0       0
  2702 ;;      Temps:          0       0       0       0
  2703 ;;      Totals:         2       0       0       0
  2704 ;;Total ram usage:        2 bytes
  2705 ;; Hardware stack levels used:    1
  2706 ;; This function calls:
  2707 ;;		Nothing
  2708 ;; This function is called by:
  2709 ;;		_stateMainMenu
  2710 ;; This function uses a non-reentrant model
  2711 ;;
  2712                           
  2713                           	psect	text27
  2714  000A8C                     __ptext27:
  2715                           	opt stack 0
  2716  000A8C                     _initialLoad:
  2717                           	opt stack 29
  2718                           
  2719                           ;Phases.c: 7: static PhaseMainMenu_Type currentMainMenu1;
  2720                           ;Phases.c: 13: currentMainMenu1.phaseState = GENERAL_VIEW;
  2721                           
  2722                           ;incstack = 0
  2723  000A8C  0E01               	movlw	1
  2724  000A8E  6E46               	movwf	initialLoad@currentMainMenu1,c
  2725                           
  2726                           ;Phases.c: 14: currentMainMenu1.stateMain = data.stateMain;
  2727  000A90  C055  F047         	movff	initialLoad@data+1,initialLoad@currentMainMenu1+1
  2728                           
  2729                           ;Phases.c: 16: return (currentMainMenu1);
  2730  000A94  C046  F054         	movff	initialLoad@currentMainMenu1,?_initialLoad
  2731  000A98  C047  F055         	movff	initialLoad@currentMainMenu1+1,?_initialLoad+1
  2732  000A9C  0012               	return	
  2733  000A9E                     __end_of_initialLoad:
  2734                           	opt stack 0
  2735                           tosu	equ	0xFFF
  2736                           tosh	equ	0xFFE
  2737                           tosl	equ	0xFFD
  2738                           pclath	equ	0xFFA
  2739                           tblptru	equ	0xFF8
  2740                           tblptrh	equ	0xFF7
  2741                           tblptrl	equ	0xFF6
  2742                           tablat	equ	0xFF5
  2743                           prodh	equ	0xFF4
  2744                           prodl	equ	0xFF3
  2745                           postinc0	equ	0xFEE
  2746                           wreg	equ	0xFE8
  2747                           
  2748 ;; *************** function _viewMenu *****************
  2749 ;; Defined at:
  2750 ;;		line 31 in file "Phases.c"
  2751 ;; Parameters:    Size  Location     Type
  2752 ;;  data            2    0[COMRAM] struct .
  2753 ;; Auto vars:     Size  Location     Type
  2754 ;;		None
  2755 ;; Return value:  Size  Location     Type
  2756 ;;                  2    0[COMRAM] struct .
  2757 ;; Registers used:
  2758 ;;		None
  2759 ;; Tracked objects:
  2760 ;;		On entry : 0/0
  2761 ;;		On exit  : 0/0
  2762 ;;		Unchanged: 0/0
  2763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2764 ;;      Params:         2       0       0       0
  2765 ;;      Locals:         0       0       0       0
  2766 ;;      Temps:          0       0       0       0
  2767 ;;      Totals:         2       0       0       0
  2768 ;;Total ram usage:        2 bytes
  2769 ;; Hardware stack levels used:    1
  2770 ;; This function calls:
  2771 ;;		Nothing
  2772 ;; This function is called by:
  2773 ;;		_stateMainMenu
  2774 ;; This function uses a non-reentrant model
  2775 ;;
  2776                           
  2777                           	psect	text28
  2778  000A9E                     __ptext28:
  2779                           	opt stack 0
  2780  000A9E                     _viewMenu:
  2781                           	opt stack 29
  2782                           
  2783                           ;Phases.c: 34: static PhaseMainMenu_Type currentMainMenu3;
  2784                           ;Phases.c: 37: currentMainMenu3.phaseState = data.phaseState;
  2785                           
  2786                           ;incstack = 0
  2787  000A9E  C054  F042         	movff	viewMenu@data,viewMenu@currentMainMenu3
  2788                           
  2789                           ;Phases.c: 38: currentMainMenu3.stateMain = data.stateMain;
  2790  000AA2  C055  F043         	movff	viewMenu@data+1,viewMenu@currentMainMenu3+1
  2791                           
  2792                           ;Phases.c: 40: return (currentMainMenu3);
  2793  000AA6  C042  F054         	movff	viewMenu@currentMainMenu3,?_viewMenu
  2794  000AAA  C043  F055         	movff	viewMenu@currentMainMenu3+1,?_viewMenu+1
  2795  000AAE  0012               	return		;funcret
  2796  000AB0                     __end_of_viewMenu:
  2797                           	opt stack 0
  2798                           tosu	equ	0xFFF
  2799                           tosh	equ	0xFFE
  2800                           tosl	equ	0xFFD
  2801                           pclath	equ	0xFFA
  2802                           tblptru	equ	0xFF8
  2803                           tblptrh	equ	0xFF7
  2804                           tblptrl	equ	0xFF6
  2805                           tablat	equ	0xFF5
  2806                           prodh	equ	0xFF4
  2807                           prodl	equ	0xFF3
  2808                           postinc0	equ	0xFEE
  2809                           wreg	equ	0xFE8
  2810                           
  2811 ;; *************** function _exitFrequency *****************
  2812 ;; Defined at:
  2813 ;;		line 235 in file "Phases.c"
  2814 ;; Parameters:    Size  Location     Type
  2815 ;;  data            3    0[COMRAM] struct .
  2816 ;; Auto vars:     Size  Location     Type
  2817 ;;		None
  2818 ;; Return value:  Size  Location     Type
  2819 ;;                  3    0[COMRAM] struct .
  2820 ;; Registers used:
  2821 ;;		None
  2822 ;; Tracked objects:
  2823 ;;		On entry : 0/0
  2824 ;;		On exit  : 0/0
  2825 ;;		Unchanged: 0/0
  2826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2827 ;;      Params:         3       0       0       0
  2828 ;;      Locals:         0       0       0       0
  2829 ;;      Temps:          0       0       0       0
  2830 ;;      Totals:         3       0       0       0
  2831 ;;Total ram usage:        3 bytes
  2832 ;; Hardware stack levels used:    1
  2833 ;; This function calls:
  2834 ;;		Nothing
  2835 ;; This function is called by:
  2836 ;;		_stateFrequency
  2837 ;; This function uses a non-reentrant model
  2838 ;;
  2839                           
  2840                           	psect	text29
  2841  000A40                     __ptext29:
  2842                           	opt stack 0
  2843  000A40                     _exitFrequency:
  2844                           	opt stack 29
  2845                           
  2846                           ;Phases.c: 238: static PhaseFrequency_Type currentFrequency2;
  2847                           ;Phases.c: 241: currentFrequency2.phaseState = data.phaseState;
  2848                           
  2849                           ;incstack = 0
  2850  000A40  C055  F067         	movff	exitFrequency@data+1,exitFrequency@currentFrequency2+1
  2851                           
  2852                           ;Phases.c: 242: currentFrequency2.stateMain = data.stateMain;
  2853  000A44  C056  F068         	movff	exitFrequency@data+2,exitFrequency@currentFrequency2+2
  2854                           
  2855                           ;Phases.c: 244: return (currentFrequency2);
  2856  000A48  C066  F054         	movff	exitFrequency@currentFrequency2,?_exitFrequency
  2857  000A4C  C067  F055         	movff	exitFrequency@currentFrequency2+1,?_exitFrequency+1
  2858  000A50  C068  F056         	movff	exitFrequency@currentFrequency2+2,?_exitFrequency+2
  2859  000A54  0012               	return		;funcret
  2860  000A56                     __end_of_exitFrequency:
  2861                           	opt stack 0
  2862                           tosu	equ	0xFFF
  2863                           tosh	equ	0xFFE
  2864                           tosl	equ	0xFFD
  2865                           pclath	equ	0xFFA
  2866                           tblptru	equ	0xFF8
  2867                           tblptrh	equ	0xFF7
  2868                           tblptrl	equ	0xFF6
  2869                           tablat	equ	0xFF5
  2870                           prodh	equ	0xFF4
  2871                           prodl	equ	0xFF3
  2872                           postinc0	equ	0xFEE
  2873                           wreg	equ	0xFE8
  2874                           
  2875 ;; *************** function _showFrequency *****************
  2876 ;; Defined at:
  2877 ;;		line 223 in file "Phases.c"
  2878 ;; Parameters:    Size  Location     Type
  2879 ;;  data            3    0[COMRAM] struct .
  2880 ;; Auto vars:     Size  Location     Type
  2881 ;;		None
  2882 ;; Return value:  Size  Location     Type
  2883 ;;                  3    0[COMRAM] struct .
  2884 ;; Registers used:
  2885 ;;		wreg, status,2
  2886 ;; Tracked objects:
  2887 ;;		On entry : 0/0
  2888 ;;		On exit  : 0/0
  2889 ;;		Unchanged: 0/0
  2890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2891 ;;      Params:         3       0       0       0
  2892 ;;      Locals:         0       0       0       0
  2893 ;;      Temps:          0       0       0       0
  2894 ;;      Totals:         3       0       0       0
  2895 ;;Total ram usage:        3 bytes
  2896 ;; Hardware stack levels used:    1
  2897 ;; This function calls:
  2898 ;;		Nothing
  2899 ;; This function is called by:
  2900 ;;		_stateFrequency
  2901 ;; This function uses a non-reentrant model
  2902 ;;
  2903                           
  2904                           	psect	text30
  2905  0008F4                     __ptext30:
  2906                           	opt stack 0
  2907  0008F4                     _showFrequency:
  2908                           	opt stack 29
  2909                           
  2910                           ;Phases.c: 226: static PhaseFrequency_Type currentFrequency1;
  2911                           ;Phases.c: 229: currentFrequency1.phaseState = EXIT_FREQUENCY;
  2912                           
  2913                           ;incstack = 0
  2914  0008F4  0E01               	movlw	1
  2915  0008F6  0100               	movlb	0	; () banked
  2916  0008F8  6F6A               	movwf	(showFrequency@currentFrequency1+1)& (0+255),b
  2917                           
  2918                           ; BSR set to: 0
  2919                           ;Phases.c: 230: currentFrequency1.stateMain = data.stateMain;
  2920  0008FA  C056  F06B         	movff	showFrequency@data+2,showFrequency@currentFrequency1+2
  2921                           
  2922                           ; BSR set to: 0
  2923                           ;Phases.c: 232: return (currentFrequency1);
  2924  0008FE  C069  F054         	movff	showFrequency@currentFrequency1,?_showFrequency
  2925  000902  C06A  F055         	movff	showFrequency@currentFrequency1+1,?_showFrequency+1
  2926  000906  C06B  F056         	movff	showFrequency@currentFrequency1+2,?_showFrequency+2
  2927  00090A  0012               	return	
  2928  00090C                     __end_of_showFrequency:
  2929                           	opt stack 0
  2930                           tosu	equ	0xFFF
  2931                           tosh	equ	0xFFE
  2932                           tosl	equ	0xFFD
  2933                           pclath	equ	0xFFA
  2934                           tblptru	equ	0xFF8
  2935                           tblptrh	equ	0xFF7
  2936                           tblptrl	equ	0xFF6
  2937                           tablat	equ	0xFF5
  2938                           prodh	equ	0xFF4
  2939                           prodl	equ	0xFF3
  2940                           postinc0	equ	0xFEE
  2941                           wreg	equ	0xFE8
  2942                           
  2943 ;; *************** function _UART_init *****************
  2944 ;; Defined at:
  2945 ;;		line 11 in file "UART.c"
  2946 ;; Parameters:    Size  Location     Type
  2947 ;;  baudRate        2    5[COMRAM] enum E3061
  2948 ;; Auto vars:     Size  Location     Type
  2949 ;;		None
  2950 ;; Return value:  Size  Location     Type
  2951 ;;                  1    wreg      void 
  2952 ;; Registers used:
  2953 ;;		wreg, status,2, status,0, cstack
  2954 ;; Tracked objects:
  2955 ;;		On entry : 0/0
  2956 ;;		On exit  : 0/0
  2957 ;;		Unchanged: 0/0
  2958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2959 ;;      Params:         2       0       0       0
  2960 ;;      Locals:         0       0       0       0
  2961 ;;      Temps:          2       0       0       0
  2962 ;;      Totals:         4       0       0       0
  2963 ;;Total ram usage:        4 bytes
  2964 ;; Hardware stack levels used:    1
  2965 ;; Hardware stack levels required when called:    1
  2966 ;; This function calls:
  2967 ;;		_GPIO_dataDirectionPIN
  2968 ;; This function is called by:
  2969 ;;		_main
  2970 ;; This function uses a non-reentrant model
  2971 ;;
  2972                           
  2973                           	psect	text31
  2974  00041E                     __ptext31:
  2975                           	opt stack 0
  2976  00041E                     _UART_init:
  2977                           	opt stack 29
  2978                           
  2979                           ;UART.c: 13: GPIO_dataDirectionPIN(GPIO_C, 6, GPIO_OUTPUT);
  2980                           
  2981                           ; BSR set to: 0
  2982                           ;incstack = 0
  2983  00041E  0E06               	movlw	6
  2984  000420  6E54               	movwf	GPIO_dataDirectionPIN@pin,c
  2985  000422  0E01               	movlw	1
  2986  000424  6E55               	movwf	GPIO_dataDirectionPIN@state,c
  2987  000426  0E02               	movlw	2
  2988  000428  ECA1  F001         	call	_GPIO_dataDirectionPIN
  2989                           
  2990                           ;UART.c: 14: GPIO_dataDirectionPIN(GPIO_C, 7, GPIO_INPUT);
  2991  00042C  0E07               	movlw	7
  2992  00042E  6E54               	movwf	GPIO_dataDirectionPIN@pin,c
  2993  000430  0E00               	movlw	0
  2994  000432  6E55               	movwf	GPIO_dataDirectionPIN@state,c
  2995  000434  0E02               	movlw	2
  2996  000436  ECA1  F001         	call	_GPIO_dataDirectionPIN
  2997                           
  2998                           ;UART.c: 17: TXSTAbits.SYNC = 0;
  2999  00043A  98AC               	bcf	4012,4,c	;volatile
  3000                           
  3001                           ;UART.c: 19: TXSTAbits.TX9 = 0;
  3002  00043C  9CAC               	bcf	4012,6,c	;volatile
  3003                           
  3004                           ;UART.c: 21: TXSTAbits.TXEN = 1;
  3005  00043E  8AAC               	bsf	4012,5,c	;volatile
  3006                           
  3007                           ;UART.c: 24: RCSTAbits.RX9 = 0;
  3008  000440  9CAB               	bcf	4011,6,c	;volatile
  3009                           
  3010                           ;UART.c: 26: RCSTAbits.CREN = 1;
  3011  000442  88AB               	bsf	4011,4,c	;volatile
  3012                           
  3013                           ;UART.c: 28: RCSTAbits.SPEN = 1;
  3014  000444  8EAB               	bsf	4011,7,c	;volatile
  3015                           
  3016                           ;UART.c: 31: BAUDCTLbits.BRG16 = 0;
  3017  000446  96AA               	bcf	4010,3,c	;volatile
  3018                           
  3019                           ;UART.c: 33: TXSTAbits.BRGH = 0;
  3020  000448  94AC               	bcf	4012,2,c	;volatile
  3021                           
  3022                           ;UART.c: 35: switch(baudRate)
  3023  00044A  D009               	goto	l176
  3024  00044C                     
  3025                           ;UART.c: 38: SPBRG = (103);
  3026  00044C  0E67               	movlw	103
  3027  00044E  6EAF               	movwf	4015,c	;volatile
  3028                           
  3029                           ;UART.c: 39: break;
  3030  000450  0012               	return	
  3031  000452                     
  3032                           ;UART.c: 41: SPBRG = (51);
  3033  000452  0E33               	movlw	51
  3034  000454  6EAF               	movwf	4015,c	;volatile
  3035                           
  3036                           ;UART.c: 42: break;
  3037  000456  0012               	return	
  3038  000458                     
  3039                           ;UART.c: 44: SPBRG = (12);
  3040  000458  0E0C               	movlw	12
  3041  00045A  6EAF               	movwf	4015,c	;volatile
  3042                           
  3043                           ;UART.c: 48: }
  3044                           
  3045                           ;UART.c: 47: break;
  3046                           
  3047                           ;UART.c: 46: default:
  3048                           
  3049                           ;UART.c: 45: break;
  3050  00045C  0012               	return	
  3051  00045E                     l176:
  3052  00045E  C059  F05B         	movff	UART_init@baudRate,??_UART_init
  3053  000462  C05A  F05C         	movff	UART_init@baudRate+1,??_UART_init+1
  3054                           
  3055                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
  3056                           ; Switch size 1, requested type "space"
  3057                           ; Number of cases is 3, Range of values is 4 to 37
  3058                           ; switch strategies available:
  3059                           ; Name         Instructions Cycles
  3060                           ; simple_byte           10     6 (average)
  3061                           ;	Chosen strategy is simple_byte
  3062  000466  505C               	movf	??_UART_init+1,w,c
  3063  000468  0A04               	xorlw	4	; case 4
  3064  00046A  B4D8               	btfsc	status,2,c
  3065  00046C  D007               	goto	l1868
  3066  00046E  0A0D               	xorlw	13	; case 9
  3067  000470  B4D8               	btfsc	status,2,c
  3068  000472  D009               	goto	l1870
  3069  000474  0A2C               	xorlw	44	; case 37
  3070  000476  A4D8               	btfss	status,2,c
  3071  000478  0012               	return	
  3072  00047A  D00A               	goto	l1872
  3073  00047C                     l1868:
  3074                           
  3075                           ; Switch size 1, requested type "space"
  3076                           ; Number of cases is 1, Range of values is 176 to 176
  3077                           ; switch strategies available:
  3078                           ; Name         Instructions Cycles
  3079                           ; simple_byte            4     3 (average)
  3080                           ;	Chosen strategy is simple_byte
  3081  00047C  505B               	movf	??_UART_init,w,c
  3082  00047E  0AB0               	xorlw	176	; case 176
  3083  000480  A4D8               	btfss	status,2,c
  3084  000482  0012               	return	
  3085  000484  D7E3               	goto	l177
  3086  000486                     l1870:
  3087                           
  3088                           ; Switch size 1, requested type "space"
  3089                           ; Number of cases is 1, Range of values is 96 to 96
  3090                           ; switch strategies available:
  3091                           ; Name         Instructions Cycles
  3092                           ; simple_byte            4     3 (average)
  3093                           ;	Chosen strategy is simple_byte
  3094  000486  505B               	movf	??_UART_init,w,c
  3095  000488  0A60               	xorlw	96	; case 96
  3096  00048A  A4D8               	btfss	status,2,c
  3097  00048C  0012               	return	
  3098  00048E  D7E1               	goto	l179
  3099  000490                     l1872:
  3100                           
  3101                           ; Switch size 1, requested type "space"
  3102                           ; Number of cases is 1, Range of values is 128 to 128
  3103                           ; switch strategies available:
  3104                           ; Name         Instructions Cycles
  3105                           ; simple_byte            4     3 (average)
  3106                           ;	Chosen strategy is simple_byte
  3107  000490  505B               	movf	??_UART_init,w,c
  3108  000492  0A80               	xorlw	128	; case 128
  3109  000494  A4D8               	btfss	status,2,c
  3110  000496  0012               	return	
  3111  000498  D7DF               	goto	l180
  3112  00049A                     __end_of_UART_init:
  3113                           	opt stack 0
  3114                           tosu	equ	0xFFF
  3115                           tosh	equ	0xFFE
  3116                           tosl	equ	0xFFD
  3117                           pclath	equ	0xFFA
  3118                           tblptru	equ	0xFF8
  3119                           tblptrh	equ	0xFF7
  3120                           tblptrl	equ	0xFF6
  3121                           tablat	equ	0xFF5
  3122                           prodh	equ	0xFF4
  3123                           prodl	equ	0xFF3
  3124                           postinc0	equ	0xFEE
  3125                           wreg	equ	0xFE8
  3126                           status	equ	0xFD8
  3127                           
  3128 ;; *************** function _GPIO_dataDirectionPIN *****************
  3129 ;; Defined at:
  3130 ;;		line 51 in file "GPIO.c"
  3131 ;; Parameters:    Size  Location     Type
  3132 ;;  portName        1    wreg     enum E3075
  3133 ;;  pin             1    0[COMRAM] unsigned char 
  3134 ;;  state           1    1[COMRAM] enum E3071
  3135 ;; Auto vars:     Size  Location     Type
  3136 ;;  portName        1    4[COMRAM] enum E3075
  3137 ;; Return value:  Size  Location     Type
  3138 ;;                  1    wreg      void 
  3139 ;; Registers used:
  3140 ;;		wreg, status,2, status,0
  3141 ;; Tracked objects:
  3142 ;;		On entry : 0/0
  3143 ;;		On exit  : 0/0
  3144 ;;		Unchanged: 0/0
  3145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3146 ;;      Params:         2       0       0       0
  3147 ;;      Locals:         1       0       0       0
  3148 ;;      Temps:          2       0       0       0
  3149 ;;      Totals:         5       0       0       0
  3150 ;;Total ram usage:        5 bytes
  3151 ;; Hardware stack levels used:    1
  3152 ;; This function calls:
  3153 ;;		Nothing
  3154 ;; This function is called by:
  3155 ;;		_UART_init
  3156 ;; This function uses a non-reentrant model
  3157 ;;
  3158                           
  3159                           	psect	text32
  3160  000342                     __ptext32:
  3161                           	opt stack 0
  3162  000342                     _GPIO_dataDirectionPIN:
  3163                           	opt stack 29
  3164                           
  3165                           ;incstack = 0
  3166                           ;GPIO_dataDirectionPIN@portName stored from wreg
  3167  000342  6E58               	movwf	GPIO_dataDirectionPIN@portName,c
  3168                           
  3169                           ;GPIO.c: 54: switch(state)
  3170  000344  D064               	goto	l60
  3171  000346                     
  3172                           ;GPIO.c: 60: TRISA |= 1<<pin;
  3173  000346  C054  F056         	movff	GPIO_dataDirectionPIN@pin,??_GPIO_dataDirectionPIN
  3174  00034A  0E01               	movlw	1
  3175  00034C  6E57               	movwf	(??_GPIO_dataDirectionPIN+1)& (0+255),c
  3176  00034E  2A56               	incf	??_GPIO_dataDirectionPIN,f,c
  3177  000350  D002               	goto	u354
  3178  000352                     u355:
  3179  000352  90D8               	bcf	status,0,c
  3180  000354  3657               	rlcf	??_GPIO_dataDirectionPIN+1,f,c
  3181  000356                     u354:
  3182  000356  2E56               	decfsz	??_GPIO_dataDirectionPIN,f,c
  3183  000358  D7FC               	goto	u355
  3184  00035A  5057               	movf	??_GPIO_dataDirectionPIN+1,w,c
  3185  00035C  1292               	iorwf	3986,f,c	;volatile
  3186                           
  3187                           ;GPIO.c: 61: break;
  3188  00035E  0012               	return	
  3189  000360                     
  3190                           ;GPIO.c: 63: TRISB |= 1<<pin;
  3191  000360  C054  F056         	movff	GPIO_dataDirectionPIN@pin,??_GPIO_dataDirectionPIN
  3192  000364  0E01               	movlw	1
  3193  000366  6E57               	movwf	(??_GPIO_dataDirectionPIN+1)& (0+255),c
  3194  000368  2A56               	incf	??_GPIO_dataDirectionPIN,f,c
  3195  00036A  D002               	goto	u364
  3196  00036C                     u365:
  3197  00036C  90D8               	bcf	status,0,c
  3198  00036E  3657               	rlcf	??_GPIO_dataDirectionPIN+1,f,c
  3199  000370                     u364:
  3200  000370  2E56               	decfsz	??_GPIO_dataDirectionPIN,f,c
  3201  000372  D7FC               	goto	u365
  3202  000374  5057               	movf	??_GPIO_dataDirectionPIN+1,w,c
  3203  000376  1293               	iorwf	3987,f,c	;volatile
  3204                           
  3205                           ;GPIO.c: 64: break;
  3206  000378  0012               	return	
  3207  00037A                     
  3208                           ;GPIO.c: 66: TRISC |= 1<<pin;
  3209  00037A  C054  F056         	movff	GPIO_dataDirectionPIN@pin,??_GPIO_dataDirectionPIN
  3210  00037E  0E01               	movlw	1
  3211  000380  6E57               	movwf	(??_GPIO_dataDirectionPIN+1)& (0+255),c
  3212  000382  2A56               	incf	??_GPIO_dataDirectionPIN,f,c
  3213  000384  D002               	goto	u374
  3214  000386                     u375:
  3215  000386  90D8               	bcf	status,0,c
  3216  000388  3657               	rlcf	??_GPIO_dataDirectionPIN+1,f,c
  3217  00038A                     u374:
  3218  00038A  2E56               	decfsz	??_GPIO_dataDirectionPIN,f,c
  3219  00038C  D7FC               	goto	u375
  3220  00038E  5057               	movf	??_GPIO_dataDirectionPIN+1,w,c
  3221  000390  1294               	iorwf	3988,f,c	;volatile
  3222                           
  3223                           ;GPIO.c: 70: }
  3224                           
  3225                           ;GPIO.c: 69: break;
  3226                           
  3227                           ;GPIO.c: 68: default:
  3228                           
  3229                           ;GPIO.c: 67: break;
  3230  000392  0012               	return	
  3231  000394  5058               	movf	GPIO_dataDirectionPIN@portName,w,c
  3232                           
  3233                           ; Switch size 1, requested type "space"
  3234                           ; Number of cases is 3, Range of values is 0 to 2
  3235                           ; switch strategies available:
  3236                           ; Name         Instructions Cycles
  3237                           ; simple_byte           10     6 (average)
  3238                           ;	Chosen strategy is simple_byte
  3239  000396  0A00               	xorlw	0	; case 0
  3240  000398  B4D8               	btfsc	status,2,c
  3241  00039A  D7D5               	goto	l63
  3242  00039C  0A01               	xorlw	1	; case 1
  3243  00039E  B4D8               	btfsc	status,2,c
  3244  0003A0  D7DF               	goto	l65
  3245  0003A2  0A03               	xorlw	3	; case 2
  3246  0003A4  A4D8               	btfss	status,2,c
  3247                           
  3248                           ;GPIO.c: 71: break;
  3249  0003A6  0012               	return	
  3250  0003A8  D7E8               	goto	l66
  3251  0003AA                     
  3252                           ;GPIO.c: 76: TRISA &= (0<<pin);
  3253  0003AA  C054  F056         	movff	GPIO_dataDirectionPIN@pin,??_GPIO_dataDirectionPIN
  3254  0003AE  0E00               	movlw	0
  3255  0003B0  6E57               	movwf	(??_GPIO_dataDirectionPIN+1)& (0+255),c
  3256  0003B2  2A56               	incf	??_GPIO_dataDirectionPIN,f,c
  3257  0003B4  D002               	goto	u384
  3258  0003B6                     u385:
  3259  0003B6  90D8               	bcf	status,0,c
  3260  0003B8  3657               	rlcf	??_GPIO_dataDirectionPIN+1,f,c
  3261  0003BA                     u384:
  3262  0003BA  2E56               	decfsz	??_GPIO_dataDirectionPIN,f,c
  3263  0003BC  D7FC               	goto	u385
  3264  0003BE  5057               	movf	??_GPIO_dataDirectionPIN+1,w,c
  3265  0003C0  1692               	andwf	3986,f,c	;volatile
  3266                           
  3267                           ;GPIO.c: 77: break;
  3268  0003C2  0012               	return	
  3269  0003C4                     
  3270                           ;GPIO.c: 79: TRISB &= (0<<pin);
  3271  0003C4  C054  F056         	movff	GPIO_dataDirectionPIN@pin,??_GPIO_dataDirectionPIN
  3272  0003C8  0E00               	movlw	0
  3273  0003CA  6E57               	movwf	(??_GPIO_dataDirectionPIN+1)& (0+255),c
  3274  0003CC  2A56               	incf	??_GPIO_dataDirectionPIN,f,c
  3275  0003CE  D002               	goto	u394
  3276  0003D0                     u395:
  3277  0003D0  90D8               	bcf	status,0,c
  3278  0003D2  3657               	rlcf	??_GPIO_dataDirectionPIN+1,f,c
  3279  0003D4                     u394:
  3280  0003D4  2E56               	decfsz	??_GPIO_dataDirectionPIN,f,c
  3281  0003D6  D7FC               	goto	u395
  3282  0003D8  5057               	movf	??_GPIO_dataDirectionPIN+1,w,c
  3283  0003DA  1693               	andwf	3987,f,c	;volatile
  3284                           
  3285                           ;GPIO.c: 80: break;
  3286  0003DC  0012               	return	
  3287  0003DE                     
  3288                           ;GPIO.c: 82: TRISC &= (0<<pin);
  3289  0003DE  C054  F056         	movff	GPIO_dataDirectionPIN@pin,??_GPIO_dataDirectionPIN
  3290  0003E2  0E00               	movlw	0
  3291  0003E4  6E57               	movwf	(??_GPIO_dataDirectionPIN+1)& (0+255),c
  3292  0003E6  2A56               	incf	??_GPIO_dataDirectionPIN,f,c
  3293  0003E8  D002               	goto	u404
  3294  0003EA                     u405:
  3295  0003EA  90D8               	bcf	status,0,c
  3296  0003EC  3657               	rlcf	??_GPIO_dataDirectionPIN+1,f,c
  3297  0003EE                     u404:
  3298  0003EE  2E56               	decfsz	??_GPIO_dataDirectionPIN,f,c
  3299  0003F0  D7FC               	goto	u405
  3300  0003F2  5057               	movf	??_GPIO_dataDirectionPIN+1,w,c
  3301  0003F4  1694               	andwf	3988,f,c	;volatile
  3302                           
  3303                           ;GPIO.c: 86: }
  3304                           
  3305                           ;GPIO.c: 85: break;
  3306                           
  3307                           ;GPIO.c: 84: default:
  3308                           
  3309                           ;GPIO.c: 83: break;
  3310  0003F6  0012               	return	
  3311  0003F8  5058               	movf	GPIO_dataDirectionPIN@portName,w,c
  3312                           
  3313                           ; Switch size 1, requested type "space"
  3314                           ; Number of cases is 3, Range of values is 0 to 2
  3315                           ; switch strategies available:
  3316                           ; Name         Instructions Cycles
  3317                           ; simple_byte           10     6 (average)
  3318                           ;	Chosen strategy is simple_byte
  3319  0003FA  0A00               	xorlw	0	; case 0
  3320  0003FC  B4D8               	btfsc	status,2,c
  3321  0003FE  D7D5               	goto	l71
  3322  000400  0A01               	xorlw	1	; case 1
  3323  000402  B4D8               	btfsc	status,2,c
  3324  000404  D7DF               	goto	l73
  3325  000406  0A03               	xorlw	3	; case 2
  3326  000408  A4D8               	btfss	status,2,c
  3327                           
  3328                           ;GPIO.c: 90: }
  3329                           
  3330                           ;GPIO.c: 89: break;
  3331                           
  3332                           ;GPIO.c: 88: default:
  3333                           
  3334                           ;GPIO.c: 87: break;
  3335  00040A  0012               	return	
  3336  00040C  D7E8               	goto	l74
  3337  00040E                     l60:
  3338  00040E  5055               	movf	GPIO_dataDirectionPIN@state,w,c
  3339                           
  3340                           ; Switch size 1, requested type "space"
  3341                           ; Number of cases is 2, Range of values is 0 to 1
  3342                           ; switch strategies available:
  3343                           ; Name         Instructions Cycles
  3344                           ; simple_byte            7     4 (average)
  3345                           ;	Chosen strategy is simple_byte
  3346  000410  0A00               	xorlw	0	; case 0
  3347  000412  B4D8               	btfsc	status,2,c
  3348  000414  D7BF               	goto	l62
  3349  000416  0A01               	xorlw	1	; case 1
  3350  000418  A4D8               	btfss	status,2,c
  3351  00041A  0012               	return	
  3352  00041C  D7ED               	goto	l70
  3353  00041E                     __end_of_GPIO_dataDirectionPIN:
  3354                           	opt stack 0
  3355                           tosu	equ	0xFFF
  3356                           tosh	equ	0xFFE
  3357                           tosl	equ	0xFFD
  3358                           pclath	equ	0xFFA
  3359                           tblptru	equ	0xFF8
  3360                           tblptrh	equ	0xFF7
  3361                           tblptrl	equ	0xFF6
  3362                           tablat	equ	0xFF5
  3363                           prodh	equ	0xFF4
  3364                           prodl	equ	0xFF3
  3365                           postinc0	equ	0xFEE
  3366                           wreg	equ	0xFE8
  3367                           status	equ	0xFD8
  3368                           
  3369 ;; *************** function _SPI_init *****************
  3370 ;; Defined at:
  3371 ;;		line 76 in file "SPI.c"
  3372 ;; Parameters:    Size  Location     Type
  3373 ;;  SPI_Config      2    2[COMRAM] PTR const struct .
  3374 ;;		 -> SPI_Config(3), 
  3375 ;; Auto vars:     Size  Location     Type
  3376 ;;		None
  3377 ;; Return value:  Size  Location     Type
  3378 ;;                  1    wreg      void 
  3379 ;; Registers used:
  3380 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3381 ;; Tracked objects:
  3382 ;;		On entry : 0/0
  3383 ;;		On exit  : 0/0
  3384 ;;		Unchanged: 0/0
  3385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3386 ;;      Params:         2       0       0       0
  3387 ;;      Locals:         0       0       0       0
  3388 ;;      Temps:          2       0       0       0
  3389 ;;      Totals:         4       0       0       0
  3390 ;;Total ram usage:        4 bytes
  3391 ;; Hardware stack levels used:    1
  3392 ;; Hardware stack levels required when called:    1
  3393 ;; This function calls:
  3394 ;;		_SPI_enableClock
  3395 ;;		_SPI_enablePins
  3396 ;; This function is called by:
  3397 ;;		_main
  3398 ;; This function uses a non-reentrant model
  3399 ;;
  3400                           
  3401                           	psect	text33
  3402  000804                     __ptext33:
  3403                           	opt stack 0
  3404  000804                     _SPI_init:
  3405                           	opt stack 29
  3406                           
  3407                           ;SPI.c: 78: SPI_enableClock(SPI_Config->SPI_Polarity, SPI_Config->SPI_Phase);
  3408                           
  3409                           ;incstack = 0
  3410  000804  0E01               	movlw	1
  3411  000806  2456               	addwf	SPI_init@SPI_Config,w,c
  3412  000808  6E58               	movwf	??_SPI_init& (0+255),c
  3413  00080A  0E00               	movlw	0
  3414  00080C  2057               	addwfc	SPI_init@SPI_Config+1,w,c
  3415  00080E  6E59               	movwf	(??_SPI_init+1)& (0+255),c
  3416  000810  C058  FFF6         	movff	??_SPI_init,tblptrl
  3417  000814  C059  FFF7         	movff	??_SPI_init+1,tblptrh
  3418  000818                     	if	0	;tblptru may be non-zero
  3419  000818                     	endif
  3420  000818                     	if	0	;tblptru may be non-zero
  3421  000818                     	endif
  3422  000818  0008               	tblrd		*
  3423  00081A  CFF5 F054          	movff	tablat,SPI_enableClock@cpol
  3424  00081E  C056  FFF6         	movff	SPI_init@SPI_Config,tblptrl
  3425  000822  C057  FFF7         	movff	SPI_init@SPI_Config+1,tblptrh
  3426  000826                     	if	0	;tblptru may be non-zero
  3427  000826                     	endif
  3428  000826                     	if	0	;tblptru may be non-zero
  3429  000826                     	endif
  3430  000826  0008               	tblrd		*
  3431  000828  50F5               	movf	tablat,w,c
  3432  00082A  EC26  F004         	call	_SPI_enableClock
  3433                           
  3434                           ;SPI.c: 79: SPI_enablePins(SPI_Config->SPI_Clk);
  3435  00082E  0E02               	movlw	2
  3436  000830  2456               	addwf	SPI_init@SPI_Config,w,c
  3437  000832  6E58               	movwf	??_SPI_init& (0+255),c
  3438  000834  0E00               	movlw	0
  3439  000836  2057               	addwfc	SPI_init@SPI_Config+1,w,c
  3440  000838  6E59               	movwf	(??_SPI_init+1)& (0+255),c
  3441  00083A  C058  FFF6         	movff	??_SPI_init,tblptrl
  3442  00083E  C059  FFF7         	movff	??_SPI_init+1,tblptrh
  3443  000842                     	if	0	;tblptru may be non-zero
  3444  000842                     	endif
  3445  000842                     	if	0	;tblptru may be non-zero
  3446  000842                     	endif
  3447  000842  0008               	tblrd		*
  3448  000844  50F5               	movf	tablat,w,c
  3449  000846  EC45  F004         	call	_SPI_enablePins
  3450  00084A  0012               	return		;funcret
  3451  00084C                     __end_of_SPI_init:
  3452                           	opt stack 0
  3453                           tosu	equ	0xFFF
  3454                           tosh	equ	0xFFE
  3455                           tosl	equ	0xFFD
  3456                           pclath	equ	0xFFA
  3457                           tblptru	equ	0xFF8
  3458                           tblptrh	equ	0xFF7
  3459                           tblptrl	equ	0xFF6
  3460                           tablat	equ	0xFF5
  3461                           prodh	equ	0xFF4
  3462                           prodl	equ	0xFF3
  3463                           postinc0	equ	0xFEE
  3464                           wreg	equ	0xFE8
  3465                           status	equ	0xFD8
  3466                           
  3467 ;; *************** function _SPI_enablePins *****************
  3468 ;; Defined at:
  3469 ;;		line 48 in file "SPI.c"
  3470 ;; Parameters:    Size  Location     Type
  3471 ;;  serial          1    wreg     enum E3069
  3472 ;; Auto vars:     Size  Location     Type
  3473 ;;  serial          1    0[COMRAM] enum E3069
  3474 ;; Return value:  Size  Location     Type
  3475 ;;                  1    wreg      void 
  3476 ;; Registers used:
  3477 ;;		wreg, status,2, status,0
  3478 ;; Tracked objects:
  3479 ;;		On entry : 0/0
  3480 ;;		On exit  : 0/0
  3481 ;;		Unchanged: 0/0
  3482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3483 ;;      Params:         0       0       0       0
  3484 ;;      Locals:         1       0       0       0
  3485 ;;      Temps:          0       0       0       0
  3486 ;;      Totals:         1       0       0       0
  3487 ;;Total ram usage:        1 bytes
  3488 ;; Hardware stack levels used:    1
  3489 ;; This function calls:
  3490 ;;		Nothing
  3491 ;; This function is called by:
  3492 ;;		_SPI_init
  3493 ;; This function uses a non-reentrant model
  3494 ;;
  3495                           
  3496                           	psect	text34
  3497  00088A                     __ptext34:
  3498                           	opt stack 0
  3499  00088A                     _SPI_enablePins:
  3500                           	opt stack 29
  3501                           
  3502                           ;incstack = 0
  3503                           ;SPI_enablePins@serial stored from wreg
  3504  00088A  6E54               	movwf	SPI_enablePins@serial,c
  3505                           
  3506                           ;SPI.c: 50: switch(serial)
  3507  00088C  D007               	goto	l138
  3508  00088E                     
  3509                           ;SPI.c: 53: SSPCON &= (0x00);
  3510  00088E  0E00               	movlw	0
  3511  000890  6EC6               	movwf	4038,c	;volatile
  3512                           
  3513                           ;SPI.c: 54: break;
  3514  000892  D00E               	goto	l140
  3515  000894                     
  3516                           ;SPI.c: 56: SSPCON |= (0x01);
  3517  000894  80C6               	bsf	4038,0,c	;volatile
  3518                           
  3519                           ;SPI.c: 57: break;
  3520  000896  D00C               	goto	l140
  3521  000898                     
  3522                           ;SPI.c: 59: SSPCON |= (0x02);
  3523  000898  82C6               	bsf	4038,1,c	;volatile
  3524                           
  3525                           ;SPI.c: 63: }
  3526                           
  3527                           ;SPI.c: 62: break;
  3528                           
  3529                           ;SPI.c: 61: default:
  3530                           
  3531                           ;SPI.c: 60: break;
  3532  00089A  D00A               	goto	l140
  3533  00089C                     l138:
  3534  00089C  5054               	movf	SPI_enablePins@serial,w,c
  3535                           
  3536                           ; Switch size 1, requested type "space"
  3537                           ; Number of cases is 3, Range of values is 0 to 2
  3538                           ; switch strategies available:
  3539                           ; Name         Instructions Cycles
  3540                           ; simple_byte           10     6 (average)
  3541                           ;	Chosen strategy is simple_byte
  3542  00089E  0A00               	xorlw	0	; case 0
  3543  0008A0  B4D8               	btfsc	status,2,c
  3544  0008A2  D7F5               	goto	l139
  3545  0008A4  0A01               	xorlw	1	; case 1
  3546  0008A6  B4D8               	btfsc	status,2,c
  3547  0008A8  D7F5               	goto	l141
  3548  0008AA  0A03               	xorlw	3	; case 2
  3549  0008AC  B4D8               	btfsc	status,2,c
  3550  0008AE  D7F4               	goto	l142
  3551  0008B0                     l140:
  3552                           
  3553                           ;SPI.c: 66: TRISCbits.TRISC5 = 0;
  3554  0008B0  9A94               	bcf	3988,5,c	;volatile
  3555                           
  3556                           ;SPI.c: 68: TRISCbits.TRISC4 = 1;
  3557  0008B2  8894               	bsf	3988,4,c	;volatile
  3558                           
  3559                           ;SPI.c: 70: TRISCbits.TRISC7 = 0;
  3560  0008B4  9E94               	bcf	3988,7,c	;volatile
  3561                           
  3562                           ;SPI.c: 73: SSPCON |= (0x20);
  3563  0008B6  8AC6               	bsf	4038,5,c	;volatile
  3564  0008B8  0012               	return		;funcret
  3565  0008BA                     __end_of_SPI_enablePins:
  3566                           	opt stack 0
  3567                           tosu	equ	0xFFF
  3568                           tosh	equ	0xFFE
  3569                           tosl	equ	0xFFD
  3570                           pclath	equ	0xFFA
  3571                           tblptru	equ	0xFF8
  3572                           tblptrh	equ	0xFF7
  3573                           tblptrl	equ	0xFF6
  3574                           tablat	equ	0xFF5
  3575                           prodh	equ	0xFF4
  3576                           prodl	equ	0xFF3
  3577                           postinc0	equ	0xFEE
  3578                           wreg	equ	0xFE8
  3579                           status	equ	0xFD8
  3580                           
  3581 ;; *************** function _SPI_enableClock *****************
  3582 ;; Defined at:
  3583 ;;		line 14 in file "SPI.c"
  3584 ;; Parameters:    Size  Location     Type
  3585 ;;  phase           1    wreg     enum E3065
  3586 ;;  cpol            1    0[COMRAM] enum E3061
  3587 ;; Auto vars:     Size  Location     Type
  3588 ;;  phase           1    1[COMRAM] enum E3065
  3589 ;; Return value:  Size  Location     Type
  3590 ;;                  1    wreg      void 
  3591 ;; Registers used:
  3592 ;;		wreg, status,2, status,0
  3593 ;; Tracked objects:
  3594 ;;		On entry : 0/0
  3595 ;;		On exit  : 0/0
  3596 ;;		Unchanged: 0/0
  3597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3598 ;;      Params:         1       0       0       0
  3599 ;;      Locals:         1       0       0       0
  3600 ;;      Temps:          0       0       0       0
  3601 ;;      Totals:         2       0       0       0
  3602 ;;Total ram usage:        2 bytes
  3603 ;; Hardware stack levels used:    1
  3604 ;; This function calls:
  3605 ;;		Nothing
  3606 ;; This function is called by:
  3607 ;;		_SPI_init
  3608 ;; This function uses a non-reentrant model
  3609 ;;
  3610                           
  3611                           	psect	text35
  3612  00084C                     __ptext35:
  3613                           	opt stack 0
  3614  00084C                     _SPI_enableClock:
  3615                           	opt stack 29
  3616                           
  3617                           ;incstack = 0
  3618                           ;SPI_enableClock@phase stored from wreg
  3619  00084C  6E55               	movwf	SPI_enableClock@phase,c
  3620                           
  3621                           ;SPI.c: 17: SSPSTAT &= (0x3F);
  3622  00084E  0E3F               	movlw	63
  3623  000850  16C7               	andwf	4039,f,c	;volatile
  3624                           
  3625                           ;SPI.c: 18: SSPCON &= (0xC0);
  3626  000852  0EC0               	movlw	192
  3627  000854  16C6               	andwf	4038,f,c	;volatile
  3628                           
  3629                           ;SPI.c: 21: SSPSTAT |= (0x40);
  3630  000856  8CC7               	bsf	4039,6,c	;volatile
  3631                           
  3632                           ;SPI.c: 23: switch(phase)
  3633  000858  D004               	goto	l125
  3634  00085A                     l126:
  3635                           
  3636                           ;SPI.c: 26: SSPCONbits.CKP = 0;
  3637  00085A  98C6               	bcf	4038,4,c	;volatile
  3638                           
  3639                           ;SPI.c: 27: break;
  3640  00085C  D00E               	goto	l130
  3641  00085E                     l128:
  3642                           
  3643                           ;SPI.c: 29: SSPCONbits.CKP = 1;
  3644  00085E  88C6               	bsf	4038,4,c	;volatile
  3645                           
  3646                           ;SPI.c: 33: }
  3647                           
  3648                           ;SPI.c: 32: break;
  3649                           
  3650                           ;SPI.c: 31: default:
  3651                           
  3652                           ;SPI.c: 30: break;
  3653  000860  D00C               	goto	l130
  3654  000862                     l125:
  3655  000862  5055               	movf	SPI_enableClock@phase,w,c
  3656                           
  3657                           ; Switch size 1, requested type "space"
  3658                           ; Number of cases is 2, Range of values is 0 to 1
  3659                           ; switch strategies available:
  3660                           ; Name         Instructions Cycles
  3661                           ; simple_byte            7     4 (average)
  3662                           ;	Chosen strategy is simple_byte
  3663  000864  0A00               	xorlw	0	; case 0
  3664  000866  B4D8               	btfsc	status,2,c
  3665  000868  D7F8               	goto	l126
  3666  00086A  0A01               	xorlw	1	; case 1
  3667  00086C  B4D8               	btfsc	status,2,c
  3668  00086E  D7F7               	goto	l128
  3669                           
  3670                           ;SPI.c: 35: switch(cpol)
  3671  000870  D004               	goto	l130
  3672  000872                     l131:
  3673                           
  3674                           ;SPI.c: 38: SSPSTATbits.CKE = 0;
  3675  000872  9CC7               	bcf	4039,6,c	;volatile
  3676                           
  3677                           ;SPI.c: 39: break;
  3678  000874  0012               	return	
  3679  000876                     l133:
  3680                           
  3681                           ;SPI.c: 41: SSPSTATbits.CKE = 1;
  3682  000876  8CC7               	bsf	4039,6,c	;volatile
  3683                           
  3684                           ;SPI.c: 45: }
  3685                           
  3686                           ;SPI.c: 44: break;
  3687                           
  3688                           ;SPI.c: 43: default:
  3689                           
  3690                           ;SPI.c: 42: break;
  3691  000878  0012               	return	
  3692  00087A                     l130:
  3693  00087A  5054               	movf	SPI_enableClock@cpol,w,c
  3694                           
  3695                           ; Switch size 1, requested type "space"
  3696                           ; Number of cases is 2, Range of values is 0 to 1
  3697                           ; switch strategies available:
  3698                           ; Name         Instructions Cycles
  3699                           ; simple_byte            7     4 (average)
  3700                           ;	Chosen strategy is simple_byte
  3701  00087C  0A00               	xorlw	0	; case 0
  3702  00087E  B4D8               	btfsc	status,2,c
  3703  000880  D7F8               	goto	l131
  3704  000882  0A01               	xorlw	1	; case 1
  3705  000884  A4D8               	btfss	status,2,c
  3706  000886  0012               	return	
  3707  000888  D7F6               	goto	l133
  3708  00088A                     __end_of_SPI_enableClock:
  3709                           	opt stack 0
  3710                           tosu	equ	0xFFF
  3711                           tosh	equ	0xFFE
  3712                           tosl	equ	0xFFD
  3713                           pclath	equ	0xFFA
  3714                           tblptru	equ	0xFF8
  3715                           tblptrh	equ	0xFF7
  3716                           tblptrl	equ	0xFF6
  3717                           tablat	equ	0xFF5
  3718                           prodh	equ	0xFF4
  3719                           prodl	equ	0xFF3
  3720                           postinc0	equ	0xFEE
  3721                           wreg	equ	0xFE8
  3722                           status	equ	0xFD8
  3723                           
  3724 ;; *************** function _GPIO_sourceClock *****************
  3725 ;; Defined at:
  3726 ;;		line 18 in file "GPIO.c"
  3727 ;; Parameters:    Size  Location     Type
  3728 ;;  clk             1    wreg     enum E3061
  3729 ;; Auto vars:     Size  Location     Type
  3730 ;;  clk             1    0[COMRAM] enum E3061
  3731 ;; Return value:  Size  Location     Type
  3732 ;;                  1    wreg      void 
  3733 ;; Registers used:
  3734 ;;		wreg, status,2, status,0
  3735 ;; Tracked objects:
  3736 ;;		On entry : 0/0
  3737 ;;		On exit  : 0/0
  3738 ;;		Unchanged: 0/0
  3739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3740 ;;      Params:         0       0       0       0
  3741 ;;      Locals:         1       0       0       0
  3742 ;;      Temps:          0       0       0       0
  3743 ;;      Totals:         1       0       0       0
  3744 ;;Total ram usage:        1 bytes
  3745 ;; Hardware stack levels used:    1
  3746 ;; This function calls:
  3747 ;;		Nothing
  3748 ;; This function is called by:
  3749 ;;		_main
  3750 ;; This function uses a non-reentrant model
  3751 ;;
  3752                           
  3753                           	psect	text36
  3754  00049A                     __ptext36:
  3755                           	opt stack 0
  3756  00049A                     _GPIO_sourceClock:
  3757                           	opt stack 30
  3758                           
  3759                           ;incstack = 0
  3760                           ;GPIO_sourceClock@clk stored from wreg
  3761  00049A  6E54               	movwf	GPIO_sourceClock@clk,c
  3762                           
  3763                           ;GPIO.c: 20: switch(clk)
  3764  00049C  D014               	goto	l46
  3765  00049E                     
  3766                           ;GPIO.c: 23: OSCCON |= (0x70);
  3767  00049E  0E70               	movlw	112
  3768  0004A0  12D3               	iorwf	4051,f,c	;volatile
  3769                           
  3770                           ;GPIO.c: 24: break;
  3771  0004A2  0012               	return	
  3772  0004A4                     
  3773                           ;GPIO.c: 26: OSCCON |= (0x60);
  3774  0004A4  0E60               	movlw	96
  3775  0004A6  12D3               	iorwf	4051,f,c	;volatile
  3776                           
  3777                           ;GPIO.c: 27: break;
  3778  0004A8  0012               	return	
  3779  0004AA                     
  3780                           ;GPIO.c: 29: OSCCON |= (0x50);
  3781  0004AA  0E50               	movlw	80
  3782  0004AC  12D3               	iorwf	4051,f,c	;volatile
  3783                           
  3784                           ;GPIO.c: 30: break;
  3785  0004AE  0012               	return	
  3786  0004B0                     
  3787                           ;GPIO.c: 32: OSCCON |= (0x40);
  3788  0004B0  8CD3               	bsf	4051,6,c	;volatile
  3789                           
  3790                           ;GPIO.c: 33: break;
  3791  0004B2  0012               	return	
  3792  0004B4                     
  3793                           ;GPIO.c: 35: OSCCON |= (0x30);
  3794  0004B4  0E30               	movlw	48
  3795  0004B6  12D3               	iorwf	4051,f,c	;volatile
  3796                           
  3797                           ;GPIO.c: 36: break;
  3798  0004B8  0012               	return	
  3799  0004BA                     
  3800                           ;GPIO.c: 38: OSCCON |= (0x20);
  3801  0004BA  8AD3               	bsf	4051,5,c	;volatile
  3802                           
  3803                           ;GPIO.c: 39: break;
  3804  0004BC  0012               	return	
  3805  0004BE                     
  3806                           ;GPIO.c: 41: OSCCON |= (0x10);
  3807  0004BE  88D3               	bsf	4051,4,c	;volatile
  3808                           
  3809                           ;GPIO.c: 42: break;
  3810  0004C0  0012               	return	
  3811  0004C2                     
  3812                           ;GPIO.c: 44: OSCCON |= (0x00);
  3813  0004C2  50D3               	movf	4051,w,c	;volatile
  3814                           
  3815                           ;GPIO.c: 48: }
  3816                           
  3817                           ;GPIO.c: 47: break;
  3818                           
  3819                           ;GPIO.c: 46: default:
  3820                           
  3821                           ;GPIO.c: 45: break;
  3822  0004C4  0012               	return	
  3823  0004C6                     l46:
  3824  0004C6  5054               	movf	GPIO_sourceClock@clk,w,c
  3825                           
  3826                           ; Switch size 1, requested type "space"
  3827                           ; Number of cases is 8, Range of values is 0 to 7
  3828                           ; switch strategies available:
  3829                           ; Name         Instructions Cycles
  3830                           ; simple_byte           25    13 (average)
  3831                           ;	Chosen strategy is simple_byte
  3832  0004C8  0A00               	xorlw	0	; case 0
  3833  0004CA  B4D8               	btfsc	status,2,c
  3834  0004CC  D7E8               	goto	l47
  3835  0004CE  0A01               	xorlw	1	; case 1
  3836  0004D0  B4D8               	btfsc	status,2,c
  3837  0004D2  D7E8               	goto	l49
  3838  0004D4  0A03               	xorlw	3	; case 2
  3839  0004D6  B4D8               	btfsc	status,2,c
  3840  0004D8  D7E8               	goto	l50
  3841  0004DA  0A01               	xorlw	1	; case 3
  3842  0004DC  B4D8               	btfsc	status,2,c
  3843  0004DE  D7E8               	goto	l51
  3844  0004E0  0A07               	xorlw	7	; case 4
  3845  0004E2  B4D8               	btfsc	status,2,c
  3846  0004E4  D7E7               	goto	l52
  3847  0004E6  0A01               	xorlw	1	; case 5
  3848  0004E8  B4D8               	btfsc	status,2,c
  3849  0004EA  D7E7               	goto	l53
  3850  0004EC  0A03               	xorlw	3	; case 6
  3851  0004EE  B4D8               	btfsc	status,2,c
  3852  0004F0  D7E6               	goto	l54
  3853  0004F2  0A01               	xorlw	1	; case 7
  3854  0004F4  A4D8               	btfss	status,2,c
  3855  0004F6  0012               	return	
  3856  0004F8  D7E4               	goto	l55
  3857  0004FA                     __end_of_GPIO_sourceClock:
  3858                           	opt stack 0
  3859                           tosu	equ	0xFFF
  3860                           tosh	equ	0xFFE
  3861                           tosl	equ	0xFFD
  3862                           pclath	equ	0xFFA
  3863                           tblptru	equ	0xFF8
  3864                           tblptrh	equ	0xFF7
  3865                           tblptrl	equ	0xFF6
  3866                           tablat	equ	0xFF5
  3867                           prodh	equ	0xFF4
  3868                           prodl	equ	0xFF3
  3869                           postinc0	equ	0xFEE
  3870                           wreg	equ	0xFE8
  3871                           status	equ	0xFD8
  3872                           tosu	equ	0xFFF
  3873                           tosh	equ	0xFFE
  3874                           tosl	equ	0xFFD
  3875                           pclath	equ	0xFFA
  3876                           tblptru	equ	0xFF8
  3877                           tblptrh	equ	0xFF7
  3878                           tblptrl	equ	0xFF6
  3879                           tablat	equ	0xFF5
  3880                           prodh	equ	0xFF4
  3881                           prodl	equ	0xFF3
  3882                           postinc0	equ	0xFEE
  3883                           wreg	equ	0xFE8
  3884                           status	equ	0xFD8
  3885                           
  3886                           	psect	text37
  3887  000000                     __ptext37:
  3888                           	opt stack 0
  3889                           tosu	equ	0xFFF
  3890                           tosh	equ	0xFFE
  3891                           tosl	equ	0xFFD
  3892                           pclath	equ	0xFFA
  3893                           tblptru	equ	0xFF8
  3894                           tblptrh	equ	0xFF7
  3895                           tblptrl	equ	0xFF6
  3896                           tablat	equ	0xFF5
  3897                           prodh	equ	0xFF4
  3898                           prodl	equ	0xFF3
  3899                           postinc0	equ	0xFEE
  3900                           wreg	equ	0xFE8
  3901                           status	equ	0xFD8
  3902                           
  3903                           	psect	rparam
  3904  0000                     tosu	equ	0xFFF
  3905                           tosh	equ	0xFFE
  3906                           tosl	equ	0xFFD
  3907                           pclath	equ	0xFFA
  3908                           tblptru	equ	0xFF8
  3909                           tblptrh	equ	0xFF7
  3910                           tblptrl	equ	0xFF6
  3911                           tablat	equ	0xFF5
  3912                           prodh	equ	0xFF4
  3913                           prodl	equ	0xFF3
  3914                           postinc0	equ	0xFEE
  3915                           wreg	equ	0xFE8
  3916                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    63
    Data        0
    BSS         95
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     12      95
    BANK0           160      0      12
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    stateTemperature@temperatureFunctions	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitTemperature(), showTemperature(), 

    stateFrequency@frequencyFunctions	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitFrequency(), showFrequency(), 

    statePhaseAngle@phaseAngleFunctions	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitPhaseAngle(), viPhaseAngle(), phPhaseAngle(), 

    statePowerFactor@powerFactorFunctions	PTR FTN(struct .,)struct . size(2) Largest target is 2
		 -> exitPowerFactor(), phPowerFactor(), 

    stateRmsVI@rmsVIFunctions	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitRmsVI(), neutralRmsVI(), phRmsVI(), 

    statePower2@power2Functions	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitPower2(), phPower2(), fhPower2(), 

    statePower1@power1Functions	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitPower1(), vectorPower1(), phPower1(), typesPower1(), 

    stateMainMenu@mainMenuFunctions	PTR FTN(struct .,)struct . size(2) Largest target is 2
		 -> viewMenu(), generalView(), initialLoad(), 

    S847PhaseTemperature$PhaseTemperature	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitTemperature(), showTemperature(), 

    phasesTemperature.PhaseTemperature	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitTemperature(), showTemperature(), 

    S823PhaseFrequency$PhaseFrequency	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitFrequency(), showFrequency(), 

    phasesFrequency.PhaseFrequency	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitFrequency(), showFrequency(), 

    S794PhasePhaseAngle$PhasePhaseAngle	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitPhaseAngle(), viPhaseAngle(), phPhaseAngle(), 

    phasesPhaseAngle.PhasePhaseAngle	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitPhaseAngle(), viPhaseAngle(), phPhaseAngle(), 

    S769PhasePowerFactor$PhasePowerFactor	PTR FTN(struct .,)struct . size(2) Largest target is 2
		 -> exitPowerFactor(), phPowerFactor(), 

    phasesPowerFactor.PhasePowerFactor	PTR FTN(struct .,)struct . size(2) Largest target is 2
		 -> exitPowerFactor(), phPowerFactor(), 

    S741PhaseRmsVI$PhaseRmsVI	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitRmsVI(), neutralRmsVI(), phRmsVI(), 

    phasesRmsVI.PhaseRmsVI	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitRmsVI(), neutralRmsVI(), phRmsVI(), 

    S711PhasePower2$PhasePower2	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitPower2(), phPower2(), fhPower2(), 

    phasesPower2.PhasePower2	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitPower2(), phPower2(), fhPower2(), 

    S676PhasePower1$PhasePower1	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitPower1(), vectorPower1(), phPower1(), typesPower1(), 

    phasesPower1.PhasePower1	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitPower1(), vectorPower1(), phPower1(), typesPower1(), 

    S645PhaseMainMenu$PhaseMainMenu	PTR FTN(struct .,)struct . size(2) Largest target is 2
		 -> viewMenu(), generalView(), initialLoad(), 

    phasesMainMenu.PhaseMainMenu	PTR FTN(struct .,)struct . size(2) Largest target is 2
		 -> viewMenu(), generalView(), initialLoad(), 

    SPI_init@SPI_Config	PTR const struct . size(2) Largest target is 3
		 -> SPI_Config(CODE[3]), 

    main@mainFunctions	PTR FTN()enum E3139 size(2) Largest target is 1
		 -> stateTemperature(), stateFrequency(), statePhaseAngle(), statePowerFactor(), 
		 -> stateRmsVI(), statePower2(), statePower1(), stateMainMenu(), 

    S45State$stateFunction	PTR FTN()enum E3139 size(2) Largest target is 1
		 -> stateTemperature(), stateFrequency(), statePhaseAngle(), statePowerFactor(), 
		 -> stateRmsVI(), statePower2(), statePower1(), stateMainMenu(), 

    StateProgram.stateFunction	PTR FTN()enum E3139 size(2) Largest target is 1
		 -> stateTemperature(), stateFrequency(), statePhaseAngle(), statePowerFactor(), 
		 -> stateRmsVI(), statePower2(), statePower1(), stateMainMenu(), 


Critical Paths under _main in COMRAM

    _main->_UART_init
    _stateTemperature->_exitTemperature
    _stateTemperature->_showTemperature
    _stateRmsVI->_exitRmsVI
    _stateRmsVI->_neutralRmsVI
    _stateRmsVI->_phRmsVI
    _statePowerFactor->_exitPowerFactor
    _statePowerFactor->_phPowerFactor
    _statePower2->_exitPower2
    _statePower2->_fhPower2
    _statePower2->_phPower2
    _statePower1->_exitPower1
    _statePower1->_phPower1
    _statePower1->_typesPower1
    _statePower1->_vectorPower1
    _statePhaseAngle->_exitPhaseAngle
    _statePhaseAngle->_phPhaseAngle
    _statePhaseAngle->_viPhaseAngle
    _stateMainMenu->_generalView
    _stateMainMenu->_initialLoad
    _stateMainMenu->_viewMenu
    _stateFrequency->_exitFrequency
    _stateFrequency->_showFrequency
    _UART_init->_GPIO_dataDirectionPIN
    _SPI_init->_SPI_enableClock

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    2033
                                              9 COMRAM     3     3      0
                   _GPIO_sourceClock
                           _SPI_init
                          _UART_init
                     _stateFrequency *
                      _stateMainMenu *
                    _statePhaseAngle *
                        _statePower1 *
                        _statePower2 *
                   _statePowerFactor *
                         _stateRmsVI *
                   _stateTemperature *
 ---------------------------------------------------------------------------------
 (1) _stateTemperature                                     2     2      0     145
                                              3 COMRAM     2     2      0
                    _exitTemperature *
                    _showTemperature *
 ---------------------------------------------------------------------------------
 (2) _showTemperature                                      3     0      3      23
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _exitTemperature                                      3     0      3      99
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _stateRmsVI                                           2     2      0     134
                                              3 COMRAM     2     2      0
                          _exitRmsVI *
                       _neutralRmsVI *
                            _phRmsVI *
 ---------------------------------------------------------------------------------
 (2) _phRmsVI                                              3     0      3      23
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _neutralRmsVI                                         3     0      3      15
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _exitRmsVI                                            3     0      3      73
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _statePowerFactor                                     2     2      0     119
                                              2 COMRAM     2     2      0
                    _exitPowerFactor *
                      _phPowerFactor *
 ---------------------------------------------------------------------------------
 (2) _phPowerFactor                                        2     0      2      23
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _exitPowerFactor                                      2     0      2      73
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _statePower2                                          2     2      0     134
                                              3 COMRAM     2     2      0
                         _exitPower2 *
                           _fhPower2 *
                           _phPower2 *
 ---------------------------------------------------------------------------------
 (2) _phPower2                                             3     0      3      15
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _fhPower2                                             3     0      3      23
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _exitPower2                                           3     0      3      73
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _statePower1                                          2     2      0     149
                                              3 COMRAM     2     2      0
                         _exitPower1 *
                           _phPower1 *
                        _typesPower1 *
                       _vectorPower1 *
 ---------------------------------------------------------------------------------
 (2) _vectorPower1                                         3     0      3      15
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _typesPower1                                          3     0      3      23
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _phPower1                                             3     0      3      15
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _exitPower1                                           3     0      3      73
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _statePhaseAngle                                      2     2      0     134
                                              3 COMRAM     2     2      0
                     _exitPhaseAngle *
                       _phPhaseAngle *
                       _viPhaseAngle *
 ---------------------------------------------------------------------------------
 (2) _viPhaseAngle                                         3     0      3      15
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _phPhaseAngle                                         3     0      3      23
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _exitPhaseAngle                                       3     0      3      73
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _stateMainMenu                                        2     2      0     134
                                              2 COMRAM     2     2      0
                        _generalView *
                        _initialLoad *
                           _viewMenu *
 ---------------------------------------------------------------------------------
 (2) _viewMenu                                             2     0      2      73
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _initialLoad                                          2     0      2      23
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _generalView                                          2     0      2      15
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _stateFrequency                                       2     2      0     145
                                              3 COMRAM     2     2      0
                      _exitFrequency *
                      _showFrequency *
 ---------------------------------------------------------------------------------
 (2) _showFrequency                                        3     0      3      23
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _exitFrequency                                        3     0      3      99
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _UART_init                                            4     2      2     600
                                              5 COMRAM     4     2      2
              _GPIO_dataDirectionPIN
 ---------------------------------------------------------------------------------
 (2) _GPIO_dataDirectionPIN                                5     3      2     502
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _SPI_init                                             4     2      2     277
                                              2 COMRAM     4     2      2
                    _SPI_enableClock
                     _SPI_enablePins
 ---------------------------------------------------------------------------------
 (2) _SPI_enablePins                                       1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SPI_enableClock                                      2     1      1     120
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _GPIO_sourceClock                                     1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GPIO_sourceClock
   _SPI_init
     _SPI_enableClock
     _SPI_enablePins
   _UART_init
     _GPIO_dataDirectionPIN
   _stateFrequency *
     _exitFrequency *
     _showFrequency *
   _stateMainMenu *
     _generalView *
     _initialLoad *
     _viewMenu *
   _statePhaseAngle *
     _exitPhaseAngle *
     _phPhaseAngle *
     _viPhaseAngle *
   _statePower1 *
     _exitPower1 *
     _phPower1 *
     _typesPower1 *
     _vectorPower1 *
   _statePower2 *
     _exitPower2 *
     _fhPower2 *
     _phPower2 *
   _statePowerFactor *
     _exitPowerFactor *
     _phPowerFactor *
   _stateRmsVI *
     _exitRmsVI *
     _neutralRmsVI *
     _phRmsVI *
   _stateTemperature *
     _exitTemperature *
     _showTemperature *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       C       5        7.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      C      5F       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      6B       3        0.0%
DATA                 0      0      6B      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Wed May 30 01:03:07 2018

                       _stateMainMenu 07B4               __size_of_SPI_enablePins 0030  
                         _statePower1 06B4                           _statePower2 065C  
            __size_of_SPI_enableClock 003E                       ??_showFrequency 0057  
                         _SSPSTATbits 000FC7                                    l31 051C  
                                  l50 04AA                                    l51 04B0  
                                  l52 04B4                                    l60 040E  
                                  l53 04BA                                    l46 04C6  
                                  l54 04BE                                    l70 03F8  
                                  l62 0394                                    l55 04C2  
                                  l47 049E                                    l71 03AA  
                                  l63 0346                                    l49 04A4  
                                  l73 03C4                                    l65 0360  
                                  l74 03DE                                    l66 037A  
                                 l130 087A                                   l131 0872  
                                 l140 08B0                                   l133 0876  
                                 l125 0862                                   l141 0894  
                                 l126 085A                                   l142 0898  
                                 l128 085E                                   l138 089C  
                                 l139 088E                                   l180 0458  
                                 l176 045E                                   l177 044C  
                                 l179 0452                        _stateFrequency 0554  
                        viewMenu@data 0054                                   u404 03EE  
                                 u405 03EA                                   u354 0356  
                                 u418 07E0                                   u355 0352  
                                 u419 07F4                                   u364 0370  
                                 u428 06E4                                   u365 036C  
                                 u429 06F8                                   u374 038A  
                                 u438 068C                                   u375 0386  
                                 u439 06A0                                   u384 03BA  
                                 u448 0634                                   u385 03B6  
                                 u449 0648                                   u394 03D4  
                                 u458 0790                                   u395 03D0  
                                 u459 07A4                                   u468 05DC  
                                 u469 05F0                                   u478 0584  
                                 u479 0598                                   u488 073C  
                                 u489 0750                                   u498 053C  
                                 u499 0550                                   tosl 000FFD  
                                 wreg 000FE8              __size_of_showTemperature 0018  
                    phPhaseAngle@data 0054             __size_of_stateTemperature 0058  
             phPower1@currentPower1_2 0026                                  l1870 0486  
                                l1872 0490                                  l1868 047C  
                                _main 04FA    exitTemperature@currentTemperature2 0060  
                   ??_exitTemperature 0057                                  prodh 000FF4  
                                prodl 000FF3                         ?_phPhaseAngle 0054  
                                start 0000                       _statePhaseAngle 05AC  
           __size_of_statePowerFactor 0050                        ?_stateMainMenu 0054  
                        ___param_bank 000000        stateMainMenu@mainMenuFunctions 0056  
          statePower1@power1Functions 0057                    phRmsVI@currentRms1 0014  
                   ??_exitPowerFactor 0056                      viPhaseAngle@data 0054  
              __end_of_stateFrequency 05AC                                 ?_main 0054  
                               _SPBRG 000FAF                __size_of_phPowerFactor 0012  
                               _TRISA 000F92                                 _TRISB 000F93  
                               _TRISC 000F94                                 _TXREG 000FAD  
                        ?_initialLoad 0054                       generalView@data 0054  
                     __end_of_phRmsVI 0964                    __size_of_UART_init 007C  
            viewMenu@currentMainMenu3 0042                                 pclath 000FFA  
                         _typesPower1 09D2                                 tablat 000FF5  
                    __end_of_SPI_init 084C                                 status 000FD8  
                      ??_phPhaseAngle 0057               phPower2@currentPower2_2 001A  
                         phRmsVI@data 0054             __size_of_GPIO_sourceClock 0060  
                 showTemperature@data 0054                       __initialization 08BA  
                        __end_of_main 0554                       ?_stateFrequency 0054  
                              ??_main 005D                         __activetblptr 000002  
      phPhaseAngle@currentPhaseAngle1 000B                     ??_SPI_enableClock 0055  
          statePower2@power2Functions 0057                                _ANSEL0 000FB8  
      exitFrequency@currentFrequency2 0066               __end_of_statePhaseAngle 0604  
                              _OSCCON 000FD3                                _SSPCON 000FC6  
                              _SSPBUF 000FC9                      __end_of_fhPower2 0990  
                   ??_showTemperature 0057                __size_of_exitFrequency 0016  
                       _phPowerFactor 0A68                       ??_stateMainMenu 0056  
                __size_of_generalView 0012  stateTemperature@temperatureFunctions 0057  
         initialLoad@currentMainMenu1 0046                        _SPI_enablePins 088A  
                   __end_of_UART_init 049A        __size_of_GPIO_dataDirectionPIN 00DC  
       __end_of_GPIO_dataDirectionPIN 041E                      __end_of_phPower1 09D2  
                    __end_of_phPower2 09A6                                clear_0 08C0  
                              clear_1 08CC                             ??_phRmsVI 0057  
                 SPI_enableClock@cpol 0054                          __mediumconst 0000  
                    __end_of_viewMenu 0AB0                                tblptrh 000FF7  
                              tblptrl 000FF6                                tblptru 000FF8  
                    _stateTemperature 070C                            __accesstop 0060  
             __end_of__initialization 08D2                        ?_phPowerFactor 0054  
                       ___rparam_used 000001                __end_of_SPI_enablePins 08BA  
                    _statePowerFactor 0764                       stateRmsVI@phase 0050  
             neutralRmsVI@currentRms2 0011                        __pcstackCOMRAM 0054  
                        ?_statePower1 0054                          ?_statePower2 0054  
                       ?_viPhaseAngle 0054                     _phasesTemperature 0331  
                           ?_SPI_init 0056                         _exitFrequency 0A40  
                __end_of_phPhaseAngle 0A2A                       _exitTemperature 090C  
                __size_of_initialLoad 0012                          phPower1@data 0054  
                        phPower2@data 0054      exitPhaseAngle@currentPhaseAngle3 0005  
                   _phasesPowerFactor 0339                            __pbssBANK0 0060  
                    ?_statePhaseAngle 0054                      _GPIO_sourceClock 049A  
                     _exitPowerFactor 0A56                    __size_of_exitRmsVI 0016  
  statePhaseAngle@phaseAngleFunctions 0057                         ?_neutralRmsVI 0054  
                     ?_SPI_enablePins 0054                        ??_viPhaseAngle 0057  
           __end_of_phasesTemperature 0335                 __end_of_showFrequency 090C  
                      ?_exitFrequency 0054                            ??_SPI_init 0058  
                           ?_fhPower2 0054             __end_of_phasesPowerFactor 033D  
                             _SSPSTAT 000FC7                 stateTemperature@phase 004C  
                        ?_typesPower1 0054                       ??_phPowerFactor 0056  
      viPhaseAngle@currentPhaseAngle2 0008                             ?_phPower1 0054  
                           ?_phPower2 0054                        ??_neutralRmsVI 0057  
                             __Hparam 0000               __size_of_exitPhaseAngle 0016  
                             __Lparam 0000                      ??_stateFrequency 0057  
                     _SPI_enableClock 084C                    SPI_init@SPI_Config 0056  
                           ?_viewMenu 0054                statePower1@phasePower1 003B  
                        __psmallconst 0300         GPIO_dataDirectionPIN@portName 0058  
                             __pcinit 08BA               fhPower2@currentPower2_1 001D  
                          _exitPower1 09A6                            _exitPower2 0964  
                             __ramtop 0300               __end_of_exitTemperature 0922  
                             __ptext0 04FA                               __ptext1 0554  
                             __ptext2 05AC                               __ptext3 0764  
                             __ptext4 0604                               __ptext5 065C  
                             __ptext6 06B4                               __ptext7 07B4  
                             __ptext8 070C                               __ptext9 090C  
          typesPower1@currentPower1_1 0029                               _phRmsVI 094E  
                   __end_of_exitRmsVI 0938                            ??_fhPower2 0057  
                     _showTemperature 08DC                    __end_of_SPI_Config 0340  
             __end_of_exitPowerFactor 0A68                  end_of_initialization 08D2  
      showFrequency@currentFrequency1 0069                     phPowerFactor@data 0054  
                          ??_phPower1 0057                            ??_phPower2 0057  
                       __Lmediumconst 0000                         ?_vectorPower1 0054  
                SPI_enableClock@phase 0055                stateMainMenu@phaseMain 004A  
    stateFrequency@frequencyFunctions 0057                   GPIO_sourceClock@clk 0054  
                           _RCSTAbits 000FAB                            ??_viewMenu 0056  
            __end_of_stateTemperature 0764                               postinc0 000FEE  
              statePower2@phasePower2 0038                       ??_exitFrequency 0057  
               __size_of_phPhaseAngle 0016                  __size_of_statePower1 0058  
                __size_of_statePower2 0058                             _UART_init 041E  
                __end_of_phasesPower1 0319                  __end_of_phasesPower2 032B  
                exitRmsVI@currentRms3 000E              __end_of_statePowerFactor 07B4  
      statePhaseAngle@phasePhaseAngle 0032                             _TRISCbits 000F94  
                          _stateRmsVI 0604                  __end_of_viPhaseAngle 0A40  
                      ??_vectorPower1 0057                         ??_generalView 0056  
                    main@currentState 005F               __end_of_SPI_enableClock 088A  
                           _TXSTAbits 000FAC                          _phPhaseAngle 0A14  
                   exitFrequency@data 0054                 __end_of_stateMainMenu 0804  
    stateTemperature@phaseTemperature 002C                           ?_exitPower1 0054  
                         ?_exitPower2 0054                           _BAUDCTLbits 000FAA  
             __end_of_showTemperature 08F4                 _GPIO_dataDirectionPIN 0342  
        stateFrequency@phaseFrequency 002F                      ?_exitTemperature 0054  
                          ?_UART_init 0059              __end_of_GPIO_sourceClock 04FA  
                __end_of_neutralRmsVI 094E                   start_initialization 08BA  
                   __size_of_SPI_init 0048                  stateRmsVI@phaseRmsVI 0035  
                    ?_exitPowerFactor 0054              stateRmsVI@rmsVIFunctions 0057  
                    ??_SPI_enablePins 0054                      _phasesPhaseAngle 0319  
                __size_of_typesPower1 0016                        _exitPhaseAngle 09FE  
                   showFrequency@data 0054                  statePhaseAngle@phase 004E  
                 __end_of_generalView 0A8C                       initialLoad@data 0054  
         generalView@currentMainMenu2 0044                         ??_initialLoad 0056  
                         __pbssCOMRAM 0001                          fhPower2@data 0054  
                         ?_stateRmsVI 0054                     __size_of_fhPower2 0016  
                  exitPhaseAngle@data 0054                      vectorPower1@data 0054  
                    statePower1@phase 0052                      statePower2@phase 0051  
              __end_of_exitPhaseAngle 0A14                   __size_of_exitPower1 0016  
                 __size_of_exitPower2 0016                   exitPowerFactor@data 0054  
                    ?_SPI_enableClock 0054                     __size_of_phPower1 0016  
                   __size_of_phPower2 0016                  SPI_enablePins@serial 0054  
            __size_of_statePhaseAngle 0058                ?_GPIO_dataDirectionPIN 0054  
                    neutralRmsVI@data 0054                     __size_of_viewMenu 0012  
                    ?_showTemperature 0054                           ??_UART_init 005B  
                __end_of_vectorPower1 09FE                              ?_phRmsVI 0054  
                         __smallconst 0300  statePowerFactor@powerFactorFunctions 0056  
                __end_of_StateProgram 0311                 __size_of_viPhaseAngle 0016  
                           _exitRmsVI 0922                       typesPower1@data 0054  
                 __end_of_initialLoad 0A9E                           _generalView 0A7A  
                     ?_exitPhaseAngle 0054                   stateFrequency@phase 004D  
               __end_of_phPowerFactor 0A7A                __size_of_showFrequency 0018  
                        _phasesPower1 0311                          _phasesPower2 0325  
                   main@mainFunctions 005D                   __size_of_stateRmsVI 0058  
                   ?_stateTemperature 0054           vectorPower1@currentPower1_3 0023  
                 __end_of_phasesRmsVI 0325                          _viPhaseAngle 0A2A  
               __size_of_neutralRmsVI 0016                    ??_stateTemperature 0057  
    statePowerFactor@phasePowerFactor 0048                              _SPI_init 0804  
  showTemperature@currentTemperature1 0063                        expBASE10@value 0001  
                   ?_statePowerFactor 0054                            ?_exitRmsVI 0054  
                  ??_statePowerFactor 0056                       _phasesFrequency 0335  
                            __Hrparam 0000                          _neutralRmsVI 0938  
                            __Lrparam 0000                         ??_statePower1 0057  
                       ??_statePower2 0057                          ??_exitPower1 0057  
                        ??_exitPower2 0057                 __end_of_exitFrequency 0A56  
                   ??_statePhaseAngle 0057              __end_of_phasesPhaseAngle 031F  
                       _showFrequency 08F4               __size_of_stateFrequency 0058  
                   ?_GPIO_sourceClock 0054                              _fhPower2 097A  
                    __size_of_phRmsVI 0016                           _initialLoad 0A8C  
                  ??_GPIO_sourceClock 0054                              __ptext10 08DC  
                            __ptext11 0922                              __ptext20 09BC  
                            __ptext12 0938                              __ptext21 09D2  
                            __ptext13 094E                              __ptext30 08F4  
                            __ptext22 09E8                              __ptext14 0A56  
                            __ptext31 041E                              __ptext23 09FE  
                            __ptext15 0A68                              __ptext32 0342  
                            __ptext24 0A14                              __ptext16 0964  
                            __ptext33 0804                              __ptext25 0A2A  
                            __ptext17 097A                              __ptext34 088A  
                            __ptext26 0A7A                              __ptext18 0990  
                            __ptext35 084C                              __ptext27 0A8C  
                            __ptext19 09A6                              __ptext36 049A  
                            __ptext28 0A9E                              __ptext37 0000  
                            __ptext29 0A40                        exitPower1@data 0054  
                      exitPower2@data 0054      phPowerFactor@currentPowerFactor1 0040  
  exitPowerFactor@currentPowerFactor2 003E                              _phPower1 09BC  
                            _phPower2 0990                         __size_of_main 005A  
                  __end_of_exitPower1 09BC                    __end_of_exitPower2 097A  
                         _phasesRmsVI 031F                              _viewMenu 0A9E  
               __size_of_vectorPower1 0016                   exitTemperature@data 0054  
                      ?_showFrequency 0054                        _phasesMainMenu 032B  
                 __end_of_statePower1 070C                   __end_of_statePower2 06B4  
                       exitRmsVI@data 0054               __end_of_phasesFrequency 0339  
                        ??_stateRmsVI 0057                    stateMainMenu@phase 0053  
           exitPower1@currentPower1_4 0020            GPIO_dataDirectionPIN@state 0055  
            __size_of_exitTemperature 0016                __size_of_stateMainMenu 0050  
                         ??_exitRmsVI 0057                     UART_init@baudRate 0059  
                       ??_typesPower1 0057                          _vectorPower1 09E8  
            __size_of_exitPowerFactor 0012                 statePowerFactor@phase 004F  
            GPIO_dataDirectionPIN@pin 0054                          _StateProgram 0301  
             ??_GPIO_dataDirectionPIN 0056                __end_of_phasesMainMenu 0331  
                  __end_of_stateRmsVI 065C                      ??_exitPhaseAngle 0057  
                        ?_generalView 0054             exitPower2@currentPower2_3 0017  
                          _SSPCONbits 000FC6                   __end_of_typesPower1 09E8  
                          _SPI_Config 033D  
