

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Fri Jun 29 19:24:50 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F2331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1
    62                           	psect	text50,global,reloc=2,class=CODE,delta=1
    63                           	psect	text51,global,reloc=2,class=CODE,delta=1
    64                           	psect	text52,global,reloc=2,class=CODE,delta=1
    65                           	psect	text53,global,reloc=2,class=CODE,delta=1
    66                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text56,global,reloc=2,class=CODE,delta=1
    69                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text58,global,reloc=2,class=CODE,delta=1
    71                           	psect	text59,global,reloc=2,class=CODE,delta=1
    72                           	psect	text60,global,reloc=2,class=CODE,delta=1
    73                           	psect	text61,global,reloc=2,class=CODE,delta=1
    74                           	psect	text62,global,reloc=2,class=CODE,delta=1
    75                           	psect	text63,global,reloc=2,class=CODE,delta=1
    76                           	psect	text64,global,reloc=2,class=CODE,delta=1
    77                           	psect	text65,global,reloc=2,class=CODE,delta=1
    78                           	psect	text66,global,reloc=2,class=CODE,delta=1
    79                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    80                           	psect	text67,global,reloc=2,class=CODE,delta=1
    81                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    82  0000                     
    83                           ; Version 1.44
    84                           ; Generated 14/09/2017 GMT
    85                           ; 
    86                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    87                           ; All rights reserved.
    88                           ; 
    89                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    90                           ; 
    91                           ; Redistribution and use in source and binary forms, with or without modification, are
    92                           ; permitted provided that the following conditions are met:
    93                           ; 
    94                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    95                           ;        conditions and the following disclaimer.
    96                           ; 
    97                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    98                           ;        of conditions and the following disclaimer in the documentation and/or other
    99                           ;        materials provided with the distribution.
   100                           ; 
   101                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   102                           ;        software without specific prior written permission.
   103                           ; 
   104                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   105                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   106                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   107                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   108                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   109                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   110                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   111                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   112                           ; 
   113                           ; 
   114                           ; Code-generator required, PIC18F2331 Definitions
   115                           ; 
   116                           ; SFR Addresses
   117  0000                     
   118                           	psect	mediumconst
   119  0000'                    __pmediumconst:
   120                           	opt stack 0
   121  0000' 00                 	db	0
   122  0001'                    _ASCII:
   123                           	opt stack 0
   124  0001' 00                 	db	0
   125  0002' 00                 	db	0
   126  0003' 00                 	db	0
   127  0004' 00                 	db	0
   128  0005' 00                 	db	0
   129  0006' 00                 	db	0
   130  0007' 00                 	db	0
   131  0008' 5F                 	db	95
   132  0009' 00                 	db	0
   133  000A' 00                 	db	0
   134  000B' 00                 	db	0
   135  000C' 07                 	db	7
   136  000D' 00                 	db	0
   137  000E' 07                 	db	7
   138  000F' 00                 	db	0
   139  0010' 14                 	db	20
   140  0011' 7F                 	db	127
   141  0012' 14                 	db	20
   142  0013' 7F                 	db	127
   143  0014' 14                 	db	20
   144  0015' 24                 	db	36
   145  0016' 2A                 	db	42
   146  0017' 7F                 	db	127
   147  0018' 2A                 	db	42
   148  0019' 12                 	db	18
   149  001A' 23                 	db	35
   150  001B' 13                 	db	19
   151  001C' 08                 	db	8
   152  001D' 64                 	db	100
   153  001E' 62                 	db	98
   154  001F' 36                 	db	54
   155  0020' 49                 	db	73
   156  0021' 55                 	db	85
   157  0022' 22                 	db	34
   158  0023' 50                 	db	80
   159  0024' 00                 	db	0
   160  0025' 05                 	db	5
   161  0026' 03                 	db	3
   162  0027' 00                 	db	0
   163  0028' 00                 	db	0
   164  0029' 00                 	db	0
   165  002A' 1C                 	db	28
   166  002B' 22                 	db	34
   167  002C' 41                 	db	65
   168  002D' 00                 	db	0
   169  002E' 00                 	db	0
   170  002F' 41                 	db	65
   171  0030' 22                 	db	34
   172  0031' 1C                 	db	28
   173  0032' 00                 	db	0
   174  0033' 14                 	db	20
   175  0034' 08                 	db	8
   176  0035' 3E                 	db	62
   177  0036' 08                 	db	8
   178  0037' 14                 	db	20
   179  0038' 08                 	db	8
   180  0039' 08                 	db	8
   181  003A' 3E                 	db	62
   182  003B' 08                 	db	8
   183  003C' 08                 	db	8
   184  003D' 00                 	db	0
   185  003E' 50                 	db	80
   186  003F' 30                 	db	48
   187  0040' 00                 	db	0
   188  0041' 00                 	db	0
   189  0042' 08                 	db	8
   190  0043' 08                 	db	8
   191  0044' 08                 	db	8
   192  0045' 08                 	db	8
   193  0046' 08                 	db	8
   194  0047' 00                 	db	0
   195  0048' 60                 	db	96
   196  0049' 60                 	db	96
   197  004A' 00                 	db	0
   198  004B' 00                 	db	0
   199  004C' 20                 	db	32
   200  004D' 10                 	db	16
   201  004E' 08                 	db	8
   202  004F' 04                 	db	4
   203  0050' 02                 	db	2
   204  0051' 3E                 	db	62
   205  0052' 51                 	db	81
   206  0053' 49                 	db	73
   207  0054' 45                 	db	69
   208  0055' 3E                 	db	62
   209  0056' 00                 	db	0
   210  0057' 42                 	db	66
   211  0058' 7F                 	db	127
   212  0059' 40                 	db	64
   213  005A' 00                 	db	0
   214  005B' 42                 	db	66
   215  005C' 61                 	db	97
   216  005D' 51                 	db	81
   217  005E' 49                 	db	73
   218  005F' 46                 	db	70
   219  0060' 21                 	db	33
   220  0061' 41                 	db	65
   221  0062' 45                 	db	69
   222  0063' 4B                 	db	75
   223  0064' 31                 	db	49
   224  0065' 18                 	db	24
   225  0066' 14                 	db	20
   226  0067' 12                 	db	18
   227  0068' 7F                 	db	127
   228  0069' 10                 	db	16
   229  006A' 27                 	db	39
   230  006B' 45                 	db	69
   231  006C' 45                 	db	69
   232  006D' 45                 	db	69
   233  006E' 39                 	db	57
   234  006F' 3C                 	db	60
   235  0070' 4A                 	db	74
   236  0071' 49                 	db	73
   237  0072' 49                 	db	73
   238  0073' 30                 	db	48
   239  0074' 01                 	db	1
   240  0075' 71                 	db	113
   241  0076' 09                 	db	9
   242  0077' 05                 	db	5
   243  0078' 03                 	db	3
   244  0079' 36                 	db	54
   245  007A' 49                 	db	73
   246  007B' 49                 	db	73
   247  007C' 49                 	db	73
   248  007D' 36                 	db	54
   249  007E' 06                 	db	6
   250  007F' 49                 	db	73
   251  0080' 49                 	db	73
   252  0081' 29                 	db	41
   253  0082' 1E                 	db	30
   254  0083' 00                 	db	0
   255  0084' 36                 	db	54
   256  0085' 36                 	db	54
   257  0086' 00                 	db	0
   258  0087' 00                 	db	0
   259  0088' 00                 	db	0
   260  0089' 56                 	db	86
   261  008A' 36                 	db	54
   262  008B' 00                 	db	0
   263  008C' 00                 	db	0
   264  008D' 08                 	db	8
   265  008E' 14                 	db	20
   266  008F' 22                 	db	34
   267  0090' 41                 	db	65
   268  0091' 00                 	db	0
   269  0092' 14                 	db	20
   270  0093' 14                 	db	20
   271  0094' 14                 	db	20
   272  0095' 14                 	db	20
   273  0096' 14                 	db	20
   274  0097' 00                 	db	0
   275  0098' 41                 	db	65
   276  0099' 22                 	db	34
   277  009A' 14                 	db	20
   278  009B' 08                 	db	8
   279  009C' 02                 	db	2
   280  009D' 01                 	db	1
   281  009E' 51                 	db	81
   282  009F' 09                 	db	9
   283  00A0' 06                 	db	6
   284  00A1' 32                 	db	50
   285  00A2' 49                 	db	73
   286  00A3' 79                 	db	121
   287  00A4' 41                 	db	65
   288  00A5' 3E                 	db	62
   289  00A6' 7E                 	db	126
   290  00A7' 11                 	db	17
   291  00A8' 11                 	db	17
   292  00A9' 11                 	db	17
   293  00AA' 7E                 	db	126
   294  00AB' 7F                 	db	127
   295  00AC' 49                 	db	73
   296  00AD' 49                 	db	73
   297  00AE' 49                 	db	73
   298  00AF' 36                 	db	54
   299  00B0' 3E                 	db	62
   300  00B1' 41                 	db	65
   301  00B2' 41                 	db	65
   302  00B3' 41                 	db	65
   303  00B4' 22                 	db	34
   304  00B5' 7F                 	db	127
   305  00B6' 41                 	db	65
   306  00B7' 41                 	db	65
   307  00B8' 22                 	db	34
   308  00B9' 1C                 	db	28
   309  00BA' 7F                 	db	127
   310  00BB' 49                 	db	73
   311  00BC' 49                 	db	73
   312  00BD' 49                 	db	73
   313  00BE' 41                 	db	65
   314  00BF' 7F                 	db	127
   315  00C0' 09                 	db	9
   316  00C1' 09                 	db	9
   317  00C2' 09                 	db	9
   318  00C3' 01                 	db	1
   319  00C4' 3E                 	db	62
   320  00C5' 41                 	db	65
   321  00C6' 49                 	db	73
   322  00C7' 49                 	db	73
   323  00C8' 7A                 	db	122
   324  00C9' 7F                 	db	127
   325  00CA' 08                 	db	8
   326  00CB' 08                 	db	8
   327  00CC' 08                 	db	8
   328  00CD' 7F                 	db	127
   329  00CE' 00                 	db	0
   330  00CF' 41                 	db	65
   331  00D0' 7F                 	db	127
   332  00D1' 41                 	db	65
   333  00D2' 00                 	db	0
   334  00D3' 20                 	db	32
   335  00D4' 40                 	db	64
   336  00D5' 41                 	db	65
   337  00D6' 3F                 	db	63
   338  00D7' 01                 	db	1
   339  00D8' 7F                 	db	127
   340  00D9' 08                 	db	8
   341  00DA' 14                 	db	20
   342  00DB' 22                 	db	34
   343  00DC' 41                 	db	65
   344  00DD' 7F                 	db	127
   345  00DE' 40                 	db	64
   346  00DF' 40                 	db	64
   347  00E0' 40                 	db	64
   348  00E1' 40                 	db	64
   349  00E2' 7F                 	db	127
   350  00E3' 02                 	db	2
   351  00E4' 0C                 	db	12
   352  00E5' 02                 	db	2
   353  00E6' 7F                 	db	127
   354  00E7' 7F                 	db	127
   355  00E8' 04                 	db	4
   356  00E9' 08                 	db	8
   357  00EA' 10                 	db	16
   358  00EB' 7F                 	db	127
   359  00EC' 3E                 	db	62
   360  00ED' 41                 	db	65
   361  00EE' 41                 	db	65
   362  00EF' 41                 	db	65
   363  00F0' 3E                 	db	62
   364  00F1' 7F                 	db	127
   365  00F2' 09                 	db	9
   366  00F3' 09                 	db	9
   367  00F4' 09                 	db	9
   368  00F5' 06                 	db	6
   369  00F6' 3E                 	db	62
   370  00F7' 41                 	db	65
   371  00F8' 51                 	db	81
   372  00F9' 21                 	db	33
   373  00FA' 5E                 	db	94
   374  00FB' 7F                 	db	127
   375  00FC' 09                 	db	9
   376  00FD' 19                 	db	25
   377  00FE' 29                 	db	41
   378  00FF' 46                 	db	70
   379  0100' 46                 	db	70
   380  0101' 49                 	db	73
   381  0102' 49                 	db	73
   382  0103' 49                 	db	73
   383  0104' 31                 	db	49
   384  0105' 01                 	db	1
   385  0106' 01                 	db	1
   386  0107' 7F                 	db	127
   387  0108' 01                 	db	1
   388  0109' 01                 	db	1
   389  010A' 3F                 	db	63
   390  010B' 40                 	db	64
   391  010C' 40                 	db	64
   392  010D' 40                 	db	64
   393  010E' 3F                 	db	63
   394  010F' 1F                 	db	31
   395  0110' 20                 	db	32
   396  0111' 40                 	db	64
   397  0112' 20                 	db	32
   398  0113' 1F                 	db	31
   399  0114' 3F                 	db	63
   400  0115' 40                 	db	64
   401  0116' 38                 	db	56
   402  0117' 40                 	db	64
   403  0118' 3F                 	db	63
   404  0119' 63                 	db	99
   405  011A' 14                 	db	20
   406  011B' 08                 	db	8
   407  011C' 14                 	db	20
   408  011D' 63                 	db	99
   409  011E' 07                 	db	7
   410  011F' 08                 	db	8
   411  0120' 70                 	db	112
   412  0121' 08                 	db	8
   413  0122' 07                 	db	7
   414  0123' 61                 	db	97
   415  0124' 51                 	db	81
   416  0125' 49                 	db	73
   417  0126' 45                 	db	69
   418  0127' 43                 	db	67
   419  0128' 00                 	db	0
   420  0129' 7F                 	db	127
   421  012A' 41                 	db	65
   422  012B' 41                 	db	65
   423  012C' 00                 	db	0
   424  012D' 02                 	db	2
   425  012E' 04                 	db	4
   426  012F' 08                 	db	8
   427  0130' 10                 	db	16
   428  0131' 20                 	db	32
   429  0132' 00                 	db	0
   430  0133' 41                 	db	65
   431  0134' 41                 	db	65
   432  0135' 7F                 	db	127
   433  0136' 00                 	db	0
   434  0137' 04                 	db	4
   435  0138' 02                 	db	2
   436  0139' 01                 	db	1
   437  013A' 02                 	db	2
   438  013B' 04                 	db	4
   439  013C' 40                 	db	64
   440  013D' 40                 	db	64
   441  013E' 40                 	db	64
   442  013F' 40                 	db	64
   443  0140' 40                 	db	64
   444  0141' 00                 	db	0
   445  0142' 01                 	db	1
   446  0143' 02                 	db	2
   447  0144' 04                 	db	4
   448  0145' 00                 	db	0
   449  0146' 20                 	db	32
   450  0147' 54                 	db	84
   451  0148' 54                 	db	84
   452  0149' 54                 	db	84
   453  014A' 78                 	db	120
   454  014B' 7F                 	db	127
   455  014C' 48                 	db	72
   456  014D' 44                 	db	68
   457  014E' 44                 	db	68
   458  014F' 38                 	db	56
   459  0150' 38                 	db	56
   460  0151' 44                 	db	68
   461  0152' 44                 	db	68
   462  0153' 44                 	db	68
   463  0154' 20                 	db	32
   464  0155' 38                 	db	56
   465  0156' 44                 	db	68
   466  0157' 44                 	db	68
   467  0158' 48                 	db	72
   468  0159' 7F                 	db	127
   469  015A' 38                 	db	56
   470  015B' 54                 	db	84
   471  015C' 54                 	db	84
   472  015D' 54                 	db	84
   473  015E' 18                 	db	24
   474  015F' 08                 	db	8
   475  0160' 7E                 	db	126
   476  0161' 09                 	db	9
   477  0162' 01                 	db	1
   478  0163' 02                 	db	2
   479  0164' 0C                 	db	12
   480  0165' 52                 	db	82
   481  0166' 52                 	db	82
   482  0167' 52                 	db	82
   483  0168' 3E                 	db	62
   484  0169' 7F                 	db	127
   485  016A' 08                 	db	8
   486  016B' 04                 	db	4
   487  016C' 04                 	db	4
   488  016D' 78                 	db	120
   489  016E' 00                 	db	0
   490  016F' 44                 	db	68
   491  0170' 7D                 	db	125
   492  0171' 40                 	db	64
   493  0172' 00                 	db	0
   494  0173' 20                 	db	32
   495  0174' 40                 	db	64
   496  0175' 44                 	db	68
   497  0176' 3D                 	db	61
   498  0177' 00                 	db	0
   499  0178' 7F                 	db	127
   500  0179' 10                 	db	16
   501  017A' 28                 	db	40
   502  017B' 44                 	db	68
   503  017C' 00                 	db	0
   504  017D' 00                 	db	0
   505  017E' 41                 	db	65
   506  017F' 7F                 	db	127
   507  0180' 40                 	db	64
   508  0181' 00                 	db	0
   509  0182' 7C                 	db	124
   510  0183' 04                 	db	4
   511  0184' 18                 	db	24
   512  0185' 04                 	db	4
   513  0186' 78                 	db	120
   514  0187' 7C                 	db	124
   515  0188' 08                 	db	8
   516  0189' 04                 	db	4
   517  018A' 04                 	db	4
   518  018B' 78                 	db	120
   519  018C' 38                 	db	56
   520  018D' 44                 	db	68
   521  018E' 44                 	db	68
   522  018F' 44                 	db	68
   523  0190' 38                 	db	56
   524  0191' 7C                 	db	124
   525  0192' 14                 	db	20
   526  0193' 14                 	db	20
   527  0194' 14                 	db	20
   528  0195' 08                 	db	8
   529  0196' 08                 	db	8
   530  0197' 14                 	db	20
   531  0198' 14                 	db	20
   532  0199' 18                 	db	24
   533  019A' 7C                 	db	124
   534  019B' 7C                 	db	124
   535  019C' 08                 	db	8
   536  019D' 04                 	db	4
   537  019E' 04                 	db	4
   538  019F' 08                 	db	8
   539  01A0' 48                 	db	72
   540  01A1' 54                 	db	84
   541  01A2' 54                 	db	84
   542  01A3' 54                 	db	84
   543  01A4' 20                 	db	32
   544  01A5' 04                 	db	4
   545  01A6' 3F                 	db	63
   546  01A7' 44                 	db	68
   547  01A8' 40                 	db	64
   548  01A9' 20                 	db	32
   549  01AA' 3C                 	db	60
   550  01AB' 40                 	db	64
   551  01AC' 40                 	db	64
   552  01AD' 20                 	db	32
   553  01AE' 7C                 	db	124
   554  01AF' 1C                 	db	28
   555  01B0' 20                 	db	32
   556  01B1' 40                 	db	64
   557  01B2' 20                 	db	32
   558  01B3' 1C                 	db	28
   559  01B4' 3C                 	db	60
   560  01B5' 40                 	db	64
   561  01B6' 30                 	db	48
   562  01B7' 40                 	db	64
   563  01B8' 3C                 	db	60
   564  01B9' 44                 	db	68
   565  01BA' 28                 	db	40
   566  01BB' 10                 	db	16
   567  01BC' 28                 	db	40
   568  01BD' 44                 	db	68
   569  01BE' 0C                 	db	12
   570  01BF' 50                 	db	80
   571  01C0' 50                 	db	80
   572  01C1' 50                 	db	80
   573  01C2' 3C                 	db	60
   574  01C3' 44                 	db	68
   575  01C4' 64                 	db	100
   576  01C5' 54                 	db	84
   577  01C6' 4C                 	db	76
   578  01C7' 44                 	db	68
   579  01C8' 00                 	db	0
   580  01C9' 08                 	db	8
   581  01CA' 36                 	db	54
   582  01CB' 41                 	db	65
   583  01CC' 00                 	db	0
   584  01CD' 00                 	db	0
   585  01CE' 00                 	db	0
   586  01CF' 7F                 	db	127
   587  01D0' 00                 	db	0
   588  01D1' 00                 	db	0
   589  01D2' 00                 	db	0
   590  01D3' 41                 	db	65
   591  01D4' 36                 	db	54
   592  01D5' 08                 	db	8
   593  01D6' 00                 	db	0
   594  01D7' 10                 	db	16
   595  01D8' 08                 	db	8
   596  01D9' 08                 	db	8
   597  01DA' 10                 	db	16
   598  01DB' 08                 	db	8
   599  01DC' 78                 	db	120
   600  01DD' 46                 	db	70
   601  01DE' 41                 	db	65
   602  01DF' 46                 	db	70
   603  01E0' 78                 	db	120
   604  01E1'                    __end_of_ASCII:
   605                           	opt stack 0
   606  01E1'                    fundamentalEnergy@F3681:
   607                           	opt stack 0
   608  01E1' 54                 	db	84
   609  01E2' 6F                 	db	111
   610  01E3' 74                 	db	116
   611  01E4' 61                 	db	97
   612  01E5' 6C                 	db	108
   613  01E6' 20                 	db	32
   614  01E7' 46                 	db	70
   615  01E8' 6F                 	db	111
   616  01E9' 72                 	db	114
   617  01EA' 77                 	db	119
   618  01EB' 46                 	db	70
   619  01EC' 75                 	db	117
   620  01ED' 6E                 	db	110
   621  01EE' 64                 	db	100
   622  01EF' 20                 	db	32
   623  01F0' 45                 	db	69
   624  01F1' 3A                 	db	58
   625  01F2' 20                 	db	32
   626  01F3' 00                 	db	0
   627  01F4'                    __end_offundamentalEnergy@F3681:
   628                           	opt stack 0
   629  01F4'                    reactiveEnergy@F3647:
   630                           	opt stack 0
   631  01F4' 54                 	db	84
   632  01F5' 6F                 	db	111
   633  01F6' 74                 	db	116
   634  01F7' 61                 	db	97
   635  01F8' 6C                 	db	108
   636  01F9' 20                 	db	32
   637  01FA' 46                 	db	70
   638  01FB' 6F                 	db	111
   639  01FC' 72                 	db	114
   640  01FD' 77                 	db	119
   641  01FE' 20                 	db	32
   642  01FF' 52                 	db	82
   643  0200' 65                 	db	101
   644  0201' 61                 	db	97
   645  0202' 63                 	db	99
   646  0203' 74                 	db	116
   647  0204' 3A                 	db	58
   648  0205' 20                 	db	32
   649  0206' 00                 	db	0
   650  0207'                    __end_ofreactiveEnergy@F3647:
   651                           	opt stack 0
   652  0207'                    fundamentalEnergy@F3683:
   653                           	opt stack 0
   654  0207' 54                 	db	84
   655  0208' 6F                 	db	111
   656  0209' 74                 	db	116
   657  020A' 61                 	db	97
   658  020B' 6C                 	db	108
   659  020C' 20                 	db	32
   660  020D' 52                 	db	82
   661  020E' 65                 	db	101
   662  020F' 76                 	db	118
   663  0210' 46                 	db	70
   664  0211' 75                 	db	117
   665  0212' 6E                 	db	110
   666  0213' 64                 	db	100
   667  0214' 20                 	db	32
   668  0215' 45                 	db	69
   669  0216' 3A                 	db	58
   670  0217' 20                 	db	32
   671  0218' 00                 	db	0
   672  0219'                    __end_offundamentalEnergy@F3683:
   673                           	opt stack 0
   674  0219'                    apparentEnergy@F3663:
   675                           	opt stack 0
   676  0219' 54                 	db	84
   677  021A' 6F                 	db	111
   678  021B' 74                 	db	116
   679  021C' 61                 	db	97
   680  021D' 6C                 	db	108
   681  021E' 20                 	db	32
   682  021F' 56                 	db	86
   683  0220' 65                 	db	101
   684  0221' 63                 	db	99
   685  0222' 41                 	db	65
   686  0223' 70                 	db	112
   687  0224' 70                 	db	112
   688  0225' 20                 	db	32
   689  0226' 45                 	db	69
   690  0227' 6E                 	db	110
   691  0228' 3A                 	db	58
   692  0229' 20                 	db	32
   693  022A' 00                 	db	0
   694  022B'                    __end_ofapparentEnergy@F3663:
   695                           	opt stack 0
   696  022B'                    apparentEnergy@F3661:
   697                           	opt stack 0
   698  022B' 54                 	db	84
   699  022C' 6F                 	db	111
   700  022D' 74                 	db	116
   701  022E' 61                 	db	97
   702  022F' 6C                 	db	108
   703  0230' 20                 	db	32
   704  0231' 41                 	db	65
   705  0232' 72                 	db	114
   706  0233' 69                 	db	105
   707  0234' 41                 	db	65
   708  0235' 70                 	db	112
   709  0236' 70                 	db	112
   710  0237' 20                 	db	32
   711  0238' 45                 	db	69
   712  0239' 6E                 	db	110
   713  023A' 3A                 	db	58
   714  023B' 20                 	db	32
   715  023C' 00                 	db	0
   716  023D'                    __end_ofapparentEnergy@F3661:
   717                           	opt stack 0
   718  023D'                    reactiveEnergy@F3649:
   719                           	opt stack 0
   720  023D' 54                 	db	84
   721  023E' 6F                 	db	111
   722  023F' 74                 	db	116
   723  0240' 61                 	db	97
   724  0241' 6C                 	db	108
   725  0242' 20                 	db	32
   726  0243' 52                 	db	82
   727  0244' 65                 	db	101
   728  0245' 76                 	db	118
   729  0246' 20                 	db	32
   730  0247' 52                 	db	82
   731  0248' 65                 	db	101
   732  0249' 61                 	db	97
   733  024A' 63                 	db	99
   734  024B' 74                 	db	116
   735  024C' 3A                 	db	58
   736  024D' 20                 	db	32
   737  024E' 00                 	db	0
   738  024F'                    __end_ofreactiveEnergy@F3649:
   739                           	opt stack 0
   740  024F'                    _StateProgram:
   741                           	opt stack 0
   742  024F' 00'                	db	low _stateMainMenu
   743  0250' 00'                	db	high _stateMainMenu
   744  0251' 00'                	db	low _stateEnergy
   745  0252' 00'                	db	high _stateEnergy
   746  0253' 00'                	db	low _statePower1
   747  0254' 00'                	db	high _statePower1
   748  0255' 00'                	db	low _statePower2
   749  0256' 00'                	db	high _statePower2
   750  0257' 00'                	db	low _stateRmsVI
   751  0258' 00'                	db	high _stateRmsVI
   752  0259' 00'                	db	low _statePowerFactor
   753  025A' 00'                	db	high _statePowerFactor
   754  025B' 00'                	db	low _statePhaseAngle
   755  025C' 00'                	db	high _statePhaseAngle
   756  025D' 00'                	db	low _stateFrequency
   757  025E' 00'                	db	high _stateFrequency
   758  025F' 00'                	db	low _stateTemperature
   759  0260' 00'                	db	high _stateTemperature
   760  0261'                    __end_of_StateProgram:
   761                           	opt stack 0
   762  0261'                    activeEnergy@F3627:
   763                           	opt stack 0
   764  0261' 54                 	db	84
   765  0262' 6F                 	db	111
   766  0263' 74                 	db	116
   767  0264' 61                 	db	97
   768  0265' 6C                 	db	108
   769  0266' 20                 	db	32
   770  0267' 46                 	db	70
   771  0268' 6F                 	db	111
   772  0269' 72                 	db	114
   773  026A' 77                 	db	119
   774  026B' 20                 	db	32
   775  026C' 41                 	db	65
   776  026D' 63                 	db	99
   777  026E' 74                 	db	116
   778  026F' 3A                 	db	58
   779  0270' 20                 	db	32
   780  0271' 00                 	db	0
   781  0272'                    __end_ofactiveEnergy@F3627:
   782                           	opt stack 0
   783  0272'                    fundamentalEnergy@F3673:
   784                           	opt stack 0
   785  0272' 50                 	db	80
   786  0273' 43                 	db	67
   787  0274' 20                 	db	32
   788  0275' 46                 	db	70
   789  0276' 6F                 	db	111
   790  0277' 72                 	db	114
   791  0278' 77                 	db	119
   792  0279' 46                 	db	70
   793  027A' 75                 	db	117
   794  027B' 6E                 	db	110
   795  027C' 64                 	db	100
   796  027D' 20                 	db	32
   797  027E' 45                 	db	69
   798  027F' 3A                 	db	58
   799  0280' 20                 	db	32
   800  0281' 00                 	db	0
   801  0282'                    __end_offundamentalEnergy@F3673:
   802                           	opt stack 0
   803  0282'                    fundamentalEnergy@F3671:
   804                           	opt stack 0
   805  0282' 50                 	db	80
   806  0283' 42                 	db	66
   807  0284' 20                 	db	32
   808  0285' 46                 	db	70
   809  0286' 6F                 	db	111
   810  0287' 72                 	db	114
   811  0288' 77                 	db	119
   812  0289' 46                 	db	70
   813  028A' 75                 	db	117
   814  028B' 6E                 	db	110
   815  028C' 64                 	db	100
   816  028D' 20                 	db	32
   817  028E' 45                 	db	69
   818  028F' 3A                 	db	58
   819  0290' 20                 	db	32
   820  0291' 00                 	db	0
   821  0292'                    __end_offundamentalEnergy@F3671:
   822                           	opt stack 0
   823  0292'                    fundamentalEnergy@F3669:
   824                           	opt stack 0
   825  0292' 50                 	db	80
   826  0293' 41                 	db	65
   827  0294' 20                 	db	32
   828  0295' 46                 	db	70
   829  0296' 6F                 	db	111
   830  0297' 72                 	db	114
   831  0298' 77                 	db	119
   832  0299' 46                 	db	70
   833  029A' 75                 	db	117
   834  029B' 6E                 	db	110
   835  029C' 64                 	db	100
   836  029D' 20                 	db	32
   837  029E' 45                 	db	69
   838  029F' 3A                 	db	58
   839  02A0' 20                 	db	32
   840  02A1' 00                 	db	0
   841  02A2'                    __end_offundamentalEnergy@F3669:
   842                           	opt stack 0
   843  02A2'                    reactiveEnergy@F3639:
   844                           	opt stack 0
   845  02A2' 50                 	db	80
   846  02A3' 43                 	db	67
   847  02A4' 20                 	db	32
   848  02A5' 46                 	db	70
   849  02A6' 6F                 	db	111
   850  02A7' 72                 	db	114
   851  02A8' 77                 	db	119
   852  02A9' 20                 	db	32
   853  02AA' 52                 	db	82
   854  02AB' 65                 	db	101
   855  02AC' 61                 	db	97
   856  02AD' 63                 	db	99
   857  02AE' 74                 	db	116
   858  02AF' 3A                 	db	58
   859  02B0' 20                 	db	32
   860  02B1' 00                 	db	0
   861  02B2'                    __end_ofreactiveEnergy@F3639:
   862                           	opt stack 0
   863  02B2'                    reactiveEnergy@F3635:
   864                           	opt stack 0
   865  02B2' 50                 	db	80
   866  02B3' 41                 	db	65
   867  02B4' 20                 	db	32
   868  02B5' 46                 	db	70
   869  02B6' 6F                 	db	111
   870  02B7' 72                 	db	114
   871  02B8' 77                 	db	119
   872  02B9' 20                 	db	32
   873  02BA' 52                 	db	82
   874  02BB' 65                 	db	101
   875  02BC' 61                 	db	97
   876  02BD' 63                 	db	99
   877  02BE' 74                 	db	116
   878  02BF' 3A                 	db	58
   879  02C0' 20                 	db	32
   880  02C1' 00                 	db	0
   881  02C2'                    __end_ofreactiveEnergy@F3635:
   882                           	opt stack 0
   883  02C2'                    activeEnergy@F3629:
   884                           	opt stack 0
   885  02C2' 54                 	db	84
   886  02C3' 6F                 	db	111
   887  02C4' 74                 	db	116
   888  02C5' 61                 	db	97
   889  02C6' 6C                 	db	108
   890  02C7' 20                 	db	32
   891  02C8' 52                 	db	82
   892  02C9' 65                 	db	101
   893  02CA' 76                 	db	118
   894  02CB' 20                 	db	32
   895  02CC' 41                 	db	65
   896  02CD' 63                 	db	99
   897  02CE' 74                 	db	116
   898  02CF' 3A                 	db	58
   899  02D0' 20                 	db	32
   900  02D1' 00                 	db	0
   901  02D2'                    __end_ofactiveEnergy@F3629:
   902                           	opt stack 0
   903  02D2'                    viewMenu@F3584:
   904                           	opt stack 0
   905  02D2' 56                 	db	86
   906  02D3' 6F                 	db	111
   907  02D4' 6C                 	db	108
   908  02D5' 74                 	db	116
   909  02D6' 61                 	db	97
   910  02D7' 67                 	db	103
   911  02D8' 65                 	db	101
   912  02D9' 20                 	db	32
   913  02DA' 43                 	db	67
   914  02DB' 75                 	db	117
   915  02DC' 72                 	db	114
   916  02DD' 72                 	db	114
   917  02DE' 65                 	db	101
   918  02DF' 6E                 	db	110
   919  02E0' 74                 	db	116
   920  02E1' 00                 	db	0
   921  02E2'                    __end_ofviewMenu@F3584:
   922                           	opt stack 0
   923  02E2'                    viewMenu@F3574:
   924                           	opt stack 0
   925  02E2' 41                 	db	65
   926  02E3' 63                 	db	99
   927  02E4' 74                 	db	116
   928  02E5' 69                 	db	105
   929  02E6' 76                 	db	118
   930  02E7' 65                 	db	101
   931  02E8' 20                 	db	32
   932  02E9' 52                 	db	82
   933  02EA' 65                 	db	101
   934  02EB' 61                 	db	97
   935  02EC' 63                 	db	99
   936  02ED' 74                 	db	116
   937  02EE' 69                 	db	105
   938  02EF' 76                 	db	118
   939  02F0' 65                 	db	101
   940  02F1' 00                 	db	0
   941  02F2'                    __end_ofviewMenu@F3574:
   942                           	opt stack 0
   943  02F2'                    harmonicEnergy@F3701:
   944                           	opt stack 0
   945  02F2' 54                 	db	84
   946  02F3' 6F                 	db	111
   947  02F4' 74                 	db	116
   948  02F5' 61                 	db	97
   949  02F6' 6C                 	db	108
   950  02F7' 20                 	db	32
   951  02F8' 46                 	db	70
   952  02F9' 6F                 	db	111
   953  02FA' 72                 	db	114
   954  02FB' 77                 	db	119
   955  02FC' 48                 	db	72
   956  02FD' 45                 	db	69
   957  02FE' 3A                 	db	58
   958  02FF' 20                 	db	32
   959  0300' 00                 	db	0
   960  0301'                    __end_ofharmonicEnergy@F3701:
   961                           	opt stack 0
   962  0301'                    fundamentalEnergy@F3679:
   963                           	opt stack 0
   964  0301' 50                 	db	80
   965  0302' 43                 	db	67
   966  0303' 20                 	db	32
   967  0304' 52                 	db	82
   968  0305' 65                 	db	101
   969  0306' 76                 	db	118
   970  0307' 46                 	db	70
   971  0308' 75                 	db	117
   972  0309' 6E                 	db	110
   973  030A' 64                 	db	100
   974  030B' 20                 	db	32
   975  030C' 45                 	db	69
   976  030D' 3A                 	db	58
   977  030E' 20                 	db	32
   978  030F' 00                 	db	0
   979  0310'                    __end_offundamentalEnergy@F3679:
   980                           	opt stack 0
   981  0310'                    fundamentalEnergy@F3677:
   982                           	opt stack 0
   983  0310' 50                 	db	80
   984  0311' 42                 	db	66
   985  0312' 20                 	db	32
   986  0313' 52                 	db	82
   987  0314' 65                 	db	101
   988  0315' 76                 	db	118
   989  0316' 46                 	db	70
   990  0317' 75                 	db	117
   991  0318' 6E                 	db	110
   992  0319' 64                 	db	100
   993  031A' 20                 	db	32
   994  031B' 45                 	db	69
   995  031C' 3A                 	db	58
   996  031D' 20                 	db	32
   997  031E' 00                 	db	0
   998  031F'                    __end_offundamentalEnergy@F3677:
   999                           	opt stack 0
  1000  031F'                    fundamentalEnergy@F3675:
  1001                           	opt stack 0
  1002  031F' 50                 	db	80
  1003  0320' 41                 	db	65
  1004  0321' 20                 	db	32
  1005  0322' 52                 	db	82
  1006  0323' 65                 	db	101
  1007  0324' 76                 	db	118
  1008  0325' 46                 	db	70
  1009  0326' 75                 	db	117
  1010  0327' 6E                 	db	110
  1011  0328' 64                 	db	100
  1012  0329' 20                 	db	32
  1013  032A' 45                 	db	69
  1014  032B' 3A                 	db	58
  1015  032C' 20                 	db	32
  1016  032D' 00                 	db	0
  1017  032E'                    __end_offundamentalEnergy@F3675:
  1018                           	opt stack 0
  1019  032E'                    reactiveEnergy@F3645:
  1020                           	opt stack 0
  1021  032E' 50                 	db	80
  1022  032F' 43                 	db	67
  1023  0330' 20                 	db	32
  1024  0331' 52                 	db	82
  1025  0332' 65                 	db	101
  1026  0333' 76                 	db	118
  1027  0334' 20                 	db	32
  1028  0335' 52                 	db	82
  1029  0336' 65                 	db	101
  1030  0337' 61                 	db	97
  1031  0338' 63                 	db	99
  1032  0339' 74                 	db	116
  1033  033A' 3A                 	db	58
  1034  033B' 20                 	db	32
  1035  033C' 00                 	db	0
  1036  033D'                    __end_ofreactiveEnergy@F3645:
  1037                           	opt stack 0
  1038  033D'                    reactiveEnergy@F3643:
  1039                           	opt stack 0
  1040  033D' 50                 	db	80
  1041  033E' 42                 	db	66
  1042  033F' 20                 	db	32
  1043  0340' 52                 	db	82
  1044  0341' 65                 	db	101
  1045  0342' 76                 	db	118
  1046  0343' 20                 	db	32
  1047  0344' 52                 	db	82
  1048  0345' 65                 	db	101
  1049  0346' 61                 	db	97
  1050  0347' 63                 	db	99
  1051  0348' 74                 	db	116
  1052  0349' 3A                 	db	58
  1053  034A' 20                 	db	32
  1054  034B' 00                 	db	0
  1055  034C'                    __end_ofreactiveEnergy@F3643:
  1056                           	opt stack 0
  1057  034C'                    reactiveEnergy@F3641:
  1058                           	opt stack 0
  1059  034C' 50                 	db	80
  1060  034D' 41                 	db	65
  1061  034E' 20                 	db	32
  1062  034F' 52                 	db	82
  1063  0350' 65                 	db	101
  1064  0351' 76                 	db	118
  1065  0352' 20                 	db	32
  1066  0353' 52                 	db	82
  1067  0354' 65                 	db	101
  1068  0355' 61                 	db	97
  1069  0356' 63                 	db	99
  1070  0357' 74                 	db	116
  1071  0358' 3A                 	db	58
  1072  0359' 20                 	db	32
  1073  035A' 00                 	db	0
  1074  035B'                    __end_ofreactiveEnergy@F3641:
  1075                           	opt stack 0
  1076  035B'                    reactiveEnergy@F3637:
  1077                           	opt stack 0
  1078  035B' 50                 	db	80
  1079  035C' 42                 	db	66
  1080  035D' 20                 	db	32
  1081  035E' 46                 	db	70
  1082  035F' 6F                 	db	111
  1083  0360' 72                 	db	114
  1084  0361' 77                 	db	119
  1085  0362' 20                 	db	32
  1086  0363' 52                 	db	82
  1087  0364' 65                 	db	101
  1088  0365' 61                 	db	97
  1089  0366' 63                 	db	99
  1090  0367' 3A                 	db	58
  1091  0368' 20                 	db	32
  1092  0369' 00                 	db	0
  1093  036A'                    __end_ofreactiveEnergy@F3637:
  1094                           	opt stack 0
  1095  036A'                    viewMenu@F3576:
  1096                           	opt stack 0
  1097  036A' 41                 	db	65
  1098  036B' 70                 	db	112
  1099  036C' 70                 	db	112
  1100  036D' 61                 	db	97
  1101  036E' 72                 	db	114
  1102  036F' 65                 	db	101
  1103  0370' 6E                 	db	110
  1104  0371' 74                 	db	116
  1105  0372' 20                 	db	32
  1106  0373' 50                 	db	80
  1107  0374' 6F                 	db	111
  1108  0375' 77                 	db	119
  1109  0376' 65                 	db	101
  1110  0377' 72                 	db	114
  1111  0378' 00                 	db	0
  1112  0379'                    __end_ofviewMenu@F3576:
  1113                           	opt stack 0
  1114  0379'                    phPower1@F3735:
  1115                           	opt stack 0
  1116  0379' 54                 	db	84
  1117  037A' 6F                 	db	111
  1118  037B' 74                 	db	116
  1119  037C' 61                 	db	97
  1120  037D' 6C                 	db	108
  1121  037E' 20                 	db	32
  1122  037F' 41                 	db	65
  1123  0380' 50                 	db	80
  1124  0381' 50                 	db	80
  1125  0382' 6F                 	db	111
  1126  0383' 77                 	db	119
  1127  0384' 3A                 	db	58
  1128  0385' 20                 	db	32
  1129  0386' 00                 	db	0
  1130  0387'                    __end_ofphPower1@F3735:
  1131                           	opt stack 0
  1132  0387'                    harmonicEnergy@F3703:
  1133                           	opt stack 0
  1134  0387' 54                 	db	84
  1135  0388' 6F                 	db	111
  1136  0389' 74                 	db	116
  1137  038A' 61                 	db	97
  1138  038B' 6C                 	db	108
  1139  038C' 20                 	db	32
  1140  038D' 52                 	db	82
  1141  038E' 65                 	db	101
  1142  038F' 76                 	db	118
  1143  0390' 48                 	db	72
  1144  0391' 45                 	db	69
  1145  0392' 3A                 	db	58
  1146  0393' 20                 	db	32
  1147  0394' 00                 	db	0
  1148  0395'                    __end_ofharmonicEnergy@F3703:
  1149                           	opt stack 0
  1150  0395'                    activeEnergy@F3619:
  1151                           	opt stack 0
  1152  0395' 50                 	db	80
  1153  0396' 43                 	db	67
  1154  0397' 20                 	db	32
  1155  0398' 46                 	db	70
  1156  0399' 6F                 	db	111
  1157  039A' 72                 	db	114
  1158  039B' 77                 	db	119
  1159  039C' 20                 	db	32
  1160  039D' 41                 	db	65
  1161  039E' 63                 	db	99
  1162  039F' 74                 	db	116
  1163  03A0' 3A                 	db	58
  1164  03A1' 20                 	db	32
  1165  03A2' 00                 	db	0
  1166  03A3'                    __end_ofactiveEnergy@F3619:
  1167                           	opt stack 0
  1168  03A3'                    activeEnergy@F3617:
  1169                           	opt stack 0
  1170  03A3' 50                 	db	80
  1171  03A4' 42                 	db	66
  1172  03A5' 20                 	db	32
  1173  03A6' 46                 	db	70
  1174  03A7' 6F                 	db	111
  1175  03A8' 72                 	db	114
  1176  03A9' 77                 	db	119
  1177  03AA' 20                 	db	32
  1178  03AB' 41                 	db	65
  1179  03AC' 63                 	db	99
  1180  03AD' 74                 	db	116
  1181  03AE' 3A                 	db	58
  1182  03AF' 20                 	db	32
  1183  03B0' 00                 	db	0
  1184  03B1'                    __end_ofactiveEnergy@F3617:
  1185                           	opt stack 0
  1186  03B1'                    activeEnergy@F3615:
  1187                           	opt stack 0
  1188  03B1' 50                 	db	80
  1189  03B2' 41                 	db	65
  1190  03B3' 20                 	db	32
  1191  03B4' 46                 	db	70
  1192  03B5' 6F                 	db	111
  1193  03B6' 72                 	db	114
  1194  03B7' 77                 	db	119
  1195  03B8' 20                 	db	32
  1196  03B9' 41                 	db	65
  1197  03BA' 63                 	db	99
  1198  03BB' 74                 	db	116
  1199  03BC' 3A                 	db	58
  1200  03BD' 20                 	db	32
  1201  03BE' 00                 	db	0
  1202  03BF'                    __end_ofactiveEnergy@F3615:
  1203                           	opt stack 0
  1204  03BF'                    phPower2@F3759:
  1205                           	opt stack 0
  1206  03BF' 54                 	db	84
  1207  03C0' 6F                 	db	111
  1208  03C1' 74                 	db	116
  1209  03C2' 61                 	db	97
  1210  03C3' 6C                 	db	108
  1211  03C4' 20                 	db	32
  1212  03C5' 48                 	db	72
  1213  03C6' 50                 	db	80
  1214  03C7' 6F                 	db	111
  1215  03C8' 77                 	db	119
  1216  03C9' 3A                 	db	58
  1217  03CA' 20                 	db	32
  1218  03CB' 00                 	db	0
  1219  03CC'                    __end_ofphPower2@F3759:
  1220                           	opt stack 0
  1221  03CC'                    phPower2@F3757:
  1222                           	opt stack 0
  1223  03CC' 54                 	db	84
  1224  03CD' 6F                 	db	111
  1225  03CE' 74                 	db	116
  1226  03CF' 61                 	db	97
  1227  03D0' 6C                 	db	108
  1228  03D1' 20                 	db	32
  1229  03D2' 46                 	db	70
  1230  03D3' 50                 	db	80
  1231  03D4' 6F                 	db	111
  1232  03D5' 77                 	db	119
  1233  03D6' 3A                 	db	58
  1234  03D7' 20                 	db	32
  1235  03D8' 00                 	db	0
  1236  03D9'                    __end_ofphPower2@F3757:
  1237                           	opt stack 0
  1238  03D9'                    phPower1@F3733:
  1239                           	opt stack 0
  1240  03D9' 54                 	db	84
  1241  03DA' 6F                 	db	111
  1242  03DB' 74                 	db	116
  1243  03DC' 61                 	db	97
  1244  03DD' 6C                 	db	108
  1245  03DE' 20                 	db	32
  1246  03DF' 52                 	db	82
  1247  03E0' 50                 	db	80
  1248  03E1' 6F                 	db	111
  1249  03E2' 77                 	db	119
  1250  03E3' 3A                 	db	58
  1251  03E4' 20                 	db	32
  1252  03E5' 00                 	db	0
  1253  03E6'                    __end_ofphPower1@F3733:
  1254                           	opt stack 0
  1255  03E6'                    phPower1@F3731:
  1256                           	opt stack 0
  1257  03E6' 54                 	db	84
  1258  03E7' 6F                 	db	111
  1259  03E8' 74                 	db	116
  1260  03E9' 61                 	db	97
  1261  03EA' 6C                 	db	108
  1262  03EB' 20                 	db	32
  1263  03EC' 41                 	db	65
  1264  03ED' 50                 	db	80
  1265  03EE' 6F                 	db	111
  1266  03EF' 77                 	db	119
  1267  03F0' 3A                 	db	58
  1268  03F1' 20                 	db	32
  1269  03F2' 00                 	db	0
  1270  03F3'                    __end_ofphPower1@F3731:
  1271                           	opt stack 0
  1272  03F3'                    activeEnergy@F3625:
  1273                           	opt stack 0
  1274  03F3' 50                 	db	80
  1275  03F4' 43                 	db	67
  1276  03F5' 20                 	db	32
  1277  03F6' 52                 	db	82
  1278  03F7' 65                 	db	101
  1279  03F8' 76                 	db	118
  1280  03F9' 20                 	db	32
  1281  03FA' 41                 	db	65
  1282  03FB' 63                 	db	99
  1283  03FC' 74                 	db	116
  1284  03FD' 3A                 	db	58
  1285  03FE' 20                 	db	32
  1286  03FF' 00                 	db	0
  1287  0400'                    __end_ofactiveEnergy@F3625:
  1288                           	opt stack 0
  1289  0400'                    activeEnergy@F3623:
  1290                           	opt stack 0
  1291  0400' 50                 	db	80
  1292  0401' 42                 	db	66
  1293  0402' 20                 	db	32
  1294  0403' 52                 	db	82
  1295  0404' 65                 	db	101
  1296  0405' 76                 	db	118
  1297  0406' 20                 	db	32
  1298  0407' 41                 	db	65
  1299  0408' 63                 	db	99
  1300  0409' 74                 	db	116
  1301  040A' 3A                 	db	58
  1302  040B' 20                 	db	32
  1303  040C' 00                 	db	0
  1304  040D'                    __end_ofactiveEnergy@F3623:
  1305                           	opt stack 0
  1306  040D'                    activeEnergy@F3621:
  1307                           	opt stack 0
  1308  040D' 50                 	db	80
  1309  040E' 41                 	db	65
  1310  040F' 20                 	db	32
  1311  0410' 52                 	db	82
  1312  0411' 65                 	db	101
  1313  0412' 76                 	db	118
  1314  0413' 20                 	db	32
  1315  0414' 41                 	db	65
  1316  0415' 63                 	db	99
  1317  0416' 74                 	db	116
  1318  0417' 3A                 	db	58
  1319  0418' 20                 	db	32
  1320  0419' 00                 	db	0
  1321  041A'                    __end_ofactiveEnergy@F3621:
  1322                           	opt stack 0
  1323  041A'                    neutralRmsVI@F3783:
  1324                           	opt stack 0
  1325  041A' 4E                 	db	78
  1326  041B' 20                 	db	32
  1327  041C' 53                 	db	83
  1328  041D' 61                 	db	97
  1329  041E' 6D                 	db	109
  1330  041F' 43                 	db	67
  1331  0420' 52                 	db	82
  1332  0421' 4D                 	db	77
  1333  0422' 53                 	db	83
  1334  0423' 3A                 	db	58
  1335  0424' 20                 	db	32
  1336  0425' 00                 	db	0
  1337  0426'                    __end_ofneutralRmsVI@F3783:
  1338                           	opt stack 0
  1339  0426'                    neutralRmsVI@F3781:
  1340                           	opt stack 0
  1341  0426' 4E                 	db	78
  1342  0427' 20                 	db	32
  1343  0428' 43                 	db	67
  1344  0429' 61                 	db	97
  1345  042A' 6C                 	db	108
  1346  042B' 43                 	db	67
  1347  042C' 52                 	db	82
  1348  042D' 4D                 	db	77
  1349  042E' 53                 	db	83
  1350  042F' 3A                 	db	58
  1351  0430' 20                 	db	32
  1352  0431' 00                 	db	0
  1353  0432'                    __end_ofneutralRmsVI@F3781:
  1354                           	opt stack 0
  1355  0432'                    harmonicEnergy@F3693:
  1356                           	opt stack 0
  1357  0432' 50                 	db	80
  1358  0433' 43                 	db	67
  1359  0434' 20                 	db	32
  1360  0435' 46                 	db	70
  1361  0436' 6F                 	db	111
  1362  0437' 72                 	db	114
  1363  0438' 77                 	db	119
  1364  0439' 48                 	db	72
  1365  043A' 45                 	db	69
  1366  043B' 3A                 	db	58
  1367  043C' 20                 	db	32
  1368  043D' 00                 	db	0
  1369  043E'                    __end_ofharmonicEnergy@F3693:
  1370                           	opt stack 0
  1371  043E'                    harmonicEnergy@F3691:
  1372                           	opt stack 0
  1373  043E' 50                 	db	80
  1374  043F' 42                 	db	66
  1375  0440' 20                 	db	32
  1376  0441' 46                 	db	70
  1377  0442' 6F                 	db	111
  1378  0443' 72                 	db	114
  1379  0444' 77                 	db	119
  1380  0445' 48                 	db	72
  1381  0446' 45                 	db	69
  1382  0447' 3A                 	db	58
  1383  0448' 20                 	db	32
  1384  0449' 00                 	db	0
  1385  044A'                    __end_ofharmonicEnergy@F3691:
  1386                           	opt stack 0
  1387  044A'                    harmonicEnergy@F3689:
  1388                           	opt stack 0
  1389  044A' 50                 	db	80
  1390  044B' 41                 	db	65
  1391  044C' 20                 	db	32
  1392  044D' 46                 	db	70
  1393  044E' 6F                 	db	111
  1394  044F' 72                 	db	114
  1395  0450' 77                 	db	119
  1396  0451' 48                 	db	72
  1397  0452' 45                 	db	69
  1398  0453' 3A                 	db	58
  1399  0454' 20                 	db	32
  1400  0455' 00                 	db	0
  1401  0456'                    __end_ofharmonicEnergy@F3689:
  1402                           	opt stack 0
  1403  0456'                    viewMenu@F3598:
  1404                           	opt stack 0
  1405  0456' 54                 	db	84
  1406  0457' 65                 	db	101
  1407  0458' 6D                 	db	109
  1408  0459' 70                 	db	112
  1409  045A' 65                 	db	101
  1410  045B' 72                 	db	114
  1411  045C' 61                 	db	97
  1412  045D' 74                 	db	116
  1413  045E' 75                 	db	117
  1414  045F' 72                 	db	114
  1415  0460' 65                 	db	101
  1416  0461' 00                 	db	0
  1417  0462'                    __end_ofviewMenu@F3598:
  1418                           	opt stack 0
  1419  0462'                    viewMenu@F3578:
  1420                           	opt stack 0
  1421  0462' 46                 	db	70
  1422  0463' 75                 	db	117
  1423  0464' 6E                 	db	110
  1424  0465' 64                 	db	100
  1425  0466' 61                 	db	97
  1426  0467' 6D                 	db	109
  1427  0468' 65                 	db	101
  1428  0469' 6E                 	db	110
  1429  046A' 74                 	db	116
  1430  046B' 61                 	db	97
  1431  046C' 6C                 	db	108
  1432  046D' 00                 	db	0
  1433  046E'                    __end_ofviewMenu@F3578:
  1434                           	opt stack 0
  1435  046E'                    generalView@F3561:
  1436                           	opt stack 0
  1437  046E' 4D                 	db	77
  1438  046F' 65                 	db	101
  1439  0470' 61                 	db	97
  1440  0471' 73                 	db	115
  1441  0472' 75                 	db	117
  1442  0473' 72                 	db	114
  1443  0474' 65                 	db	101
  1444  0475' 6D                 	db	109
  1445  0476' 65                 	db	101
  1446  0477' 6E                 	db	110
  1447  0478' 74                 	db	116
  1448  0479' 00                 	db	0
  1449  047A'                    __end_ofgeneralView@F3561:
  1450                           	opt stack 0
  1451  047A'                    generalView@F3559:
  1452                           	opt stack 0
  1453  047A' 54                 	db	84
  1454  047B' 68                 	db	104
  1455  047C' 72                 	db	114
  1456  047D' 65                 	db	101
  1457  047E' 65                 	db	101
  1458  047F' 20                 	db	32
  1459  0480' 50                 	db	80
  1460  0481' 68                 	db	104
  1461  0482' 61                 	db	97
  1462  0483' 73                 	db	115
  1463  0484' 65                 	db	101
  1464  0485' 00                 	db	0
  1465  0486'                    __end_ofgeneralView@F3559:
  1466                           	opt stack 0
  1467  0486'                    _phasesEnergy:
  1468                           	opt stack 0
  1469  0486' 00'                	db	low _activeEnergy
  1470  0487' 00'                	db	high _activeEnergy
  1471  0488' 00'                	db	low _reactiveEnergy
  1472  0489' 00'                	db	high _reactiveEnergy
  1473  048A' 00'                	db	low _apparentEnergy
  1474  048B' 00'                	db	high _apparentEnergy
  1475  048C' 00'                	db	low _fundamentalEnergy
  1476  048D' 00'                	db	high _fundamentalEnergy
  1477  048E' 00'                	db	low _harmonicEnergy
  1478  048F' 00'                	db	high _harmonicEnergy
  1479  0490' 00'                	db	low _exitEnergy
  1480  0491' 00'                	db	high _exitEnergy
  1481  0492'                    __end_of_phasesEnergy:
  1482                           	opt stack 0
  1483  0492'                    THDNPhaseAngle@F3831:
  1484                           	opt stack 0
  1485  0492' 50                 	db	80
  1486  0493' 43                 	db	67
  1487  0494' 20                 	db	32
  1488  0495' 63                 	db	99
  1489  0496' 54                 	db	84
  1490  0497' 48                 	db	72
  1491  0498' 44                 	db	68
  1492  0499' 4E                 	db	78
  1493  049A' 3A                 	db	58
  1494  049B' 20                 	db	32
  1495  049C' 00                 	db	0
  1496  049D'                    __end_ofTHDNPhaseAngle@F3831:
  1497                           	opt stack 0
  1498  049D'                    THDNPhaseAngle@F3829:
  1499                           	opt stack 0
  1500  049D' 50                 	db	80
  1501  049E' 42                 	db	66
  1502  049F' 20                 	db	32
  1503  04A0' 63                 	db	99
  1504  04A1' 54                 	db	84
  1505  04A2' 48                 	db	72
  1506  04A3' 44                 	db	68
  1507  04A4' 4E                 	db	78
  1508  04A5' 3A                 	db	58
  1509  04A6' 20                 	db	32
  1510  04A7' 00                 	db	0
  1511  04A8'                    __end_ofTHDNPhaseAngle@F3829:
  1512                           	opt stack 0
  1513  04A8'                    THDNPhaseAngle@F3827:
  1514                           	opt stack 0
  1515  04A8' 50                 	db	80
  1516  04A9' 41                 	db	65
  1517  04AA' 20                 	db	32
  1518  04AB' 63                 	db	99
  1519  04AC' 54                 	db	84
  1520  04AD' 48                 	db	72
  1521  04AE' 44                 	db	68
  1522  04AF' 4E                 	db	78
  1523  04B0' 3A                 	db	58
  1524  04B1' 20                 	db	32
  1525  04B2' 00                 	db	0
  1526  04B3'                    __end_ofTHDNPhaseAngle@F3827:
  1527                           	opt stack 0
  1528  04B3'                    THDNPhaseAngle@F3825:
  1529                           	opt stack 0
  1530  04B3' 50                 	db	80
  1531  04B4' 43                 	db	67
  1532  04B5' 20                 	db	32
  1533  04B6' 76                 	db	118
  1534  04B7' 54                 	db	84
  1535  04B8' 48                 	db	72
  1536  04B9' 44                 	db	68
  1537  04BA' 4E                 	db	78
  1538  04BB' 3A                 	db	58
  1539  04BC' 20                 	db	32
  1540  04BD' 00                 	db	0
  1541  04BE'                    __end_ofTHDNPhaseAngle@F3825:
  1542                           	opt stack 0
  1543  04BE'                    THDNPhaseAngle@F3823:
  1544                           	opt stack 0
  1545  04BE' 50                 	db	80
  1546  04BF' 42                 	db	66
  1547  04C0' 20                 	db	32
  1548  04C1' 76                 	db	118
  1549  04C2' 54                 	db	84
  1550  04C3' 48                 	db	72
  1551  04C4' 44                 	db	68
  1552  04C5' 4E                 	db	78
  1553  04C6' 3A                 	db	58
  1554  04C7' 20                 	db	32
  1555  04C8' 00                 	db	0
  1556  04C9'                    __end_ofTHDNPhaseAngle@F3823:
  1557                           	opt stack 0
  1558  04C9'                    THDNPhaseAngle@F3821:
  1559                           	opt stack 0
  1560  04C9' 50                 	db	80
  1561  04CA' 41                 	db	65
  1562  04CB' 20                 	db	32
  1563  04CC' 76                 	db	118
  1564  04CD' 54                 	db	84
  1565  04CE' 48                 	db	72
  1566  04CF' 44                 	db	68
  1567  04D0' 4E                 	db	78
  1568  04D1' 3A                 	db	58
  1569  04D2' 20                 	db	32
  1570  04D3' 00                 	db	0
  1571  04D4'                    __end_ofTHDNPhaseAngle@F3821:
  1572                           	opt stack 0
  1573  04D4'                    phPowerFactor@F3797:
  1574                           	opt stack 0
  1575  04D4' 54                 	db	84
  1576  04D5' 6F                 	db	111
  1577  04D6' 74                 	db	116
  1578  04D7' 61                 	db	97
  1579  04D8' 6C                 	db	108
  1580  04D9' 20                 	db	32
  1581  04DA' 50                 	db	80
  1582  04DB' 46                 	db	70
  1583  04DC' 3A                 	db	58
  1584  04DD' 20                 	db	32
  1585  04DE' 00                 	db	0
  1586  04DF'                    __end_ofphPowerFactor@F3797:
  1587                           	opt stack 0
  1588  04DF'                    typesPower1@F3727:
  1589                           	opt stack 0
  1590  04DF' 50                 	db	80
  1591  04E0' 43                 	db	67
  1592  04E1' 20                 	db	32
  1593  04E2' 41                 	db	65
  1594  04E3' 50                 	db	80
  1595  04E4' 50                 	db	80
  1596  04E5' 6F                 	db	111
  1597  04E6' 77                 	db	119
  1598  04E7' 3A                 	db	58
  1599  04E8' 20                 	db	32
  1600  04E9' 00                 	db	0
  1601  04EA'                    __end_oftypesPower1@F3727:
  1602                           	opt stack 0
  1603  04EA'                    typesPower1@F3725:
  1604                           	opt stack 0
  1605  04EA' 50                 	db	80
  1606  04EB' 42                 	db	66
  1607  04EC' 20                 	db	32
  1608  04ED' 41                 	db	65
  1609  04EE' 50                 	db	80
  1610  04EF' 50                 	db	80
  1611  04F0' 6F                 	db	111
  1612  04F1' 77                 	db	119
  1613  04F2' 3A                 	db	58
  1614  04F3' 20                 	db	32
  1615  04F4' 00                 	db	0
  1616  04F5'                    __end_oftypesPower1@F3725:
  1617                           	opt stack 0
  1618  04F5'                    typesPower1@F3723:
  1619                           	opt stack 0
  1620  04F5' 50                 	db	80
  1621  04F6' 41                 	db	65
  1622  04F7' 20                 	db	32
  1623  04F8' 41                 	db	65
  1624  04F9' 50                 	db	80
  1625  04FA' 50                 	db	80
  1626  04FB' 6F                 	db	111
  1627  04FC' 77                 	db	119
  1628  04FD' 3A                 	db	58
  1629  04FE' 20                 	db	32
  1630  04FF' 00                 	db	0
  1631  0500'                    __end_oftypesPower1@F3723:
  1632                           	opt stack 0
  1633  0500'                    harmonicEnergy@F3699:
  1634                           	opt stack 0
  1635  0500' 50                 	db	80
  1636  0501' 43                 	db	67
  1637  0502' 20                 	db	32
  1638  0503' 52                 	db	82
  1639  0504' 65                 	db	101
  1640  0505' 76                 	db	118
  1641  0506' 48                 	db	72
  1642  0507' 45                 	db	69
  1643  0508' 3A                 	db	58
  1644  0509' 20                 	db	32
  1645  050A' 00                 	db	0
  1646  050B'                    __end_ofharmonicEnergy@F3699:
  1647                           	opt stack 0
  1648  050B'                    harmonicEnergy@F3697:
  1649                           	opt stack 0
  1650  050B' 50                 	db	80
  1651  050C' 42                 	db	66
  1652  050D' 20                 	db	32
  1653  050E' 52                 	db	82
  1654  050F' 65                 	db	101
  1655  0510' 76                 	db	118
  1656  0511' 48                 	db	72
  1657  0512' 45                 	db	69
  1658  0513' 3A                 	db	58
  1659  0514' 20                 	db	32
  1660  0515' 00                 	db	0
  1661  0516'                    __end_ofharmonicEnergy@F3697:
  1662                           	opt stack 0
  1663  0516'                    harmonicEnergy@F3695:
  1664                           	opt stack 0
  1665  0516' 50                 	db	80
  1666  0517' 41                 	db	65
  1667  0518' 20                 	db	32
  1668  0519' 52                 	db	82
  1669  051A' 65                 	db	101
  1670  051B' 76                 	db	118
  1671  051C' 48                 	db	72
  1672  051D' 45                 	db	69
  1673  051E' 3A                 	db	58
  1674  051F' 20                 	db	32
  1675  0520' 00                 	db	0
  1676  0521'                    __end_ofharmonicEnergy@F3695:
  1677                           	opt stack 0
  1678  0521'                    viPhaseAngle@F3815:
  1679                           	opt stack 0
  1680  0521' 50                 	db	80
  1681  0522' 43                 	db	67
  1682  0523' 20                 	db	32
  1683  0524' 56                 	db	86
  1684  0525' 70                 	db	112
  1685  0526' 68                 	db	104
  1686  0527' 41                 	db	65
  1687  0528' 3A                 	db	58
  1688  0529' 20                 	db	32
  1689  052A' 00                 	db	0
  1690  052B'                    __end_ofviPhaseAngle@F3815:
  1691                           	opt stack 0
  1692  052B'                    viPhaseAngle@F3813:
  1693                           	opt stack 0
  1694  052B' 50                 	db	80
  1695  052C' 42                 	db	66
  1696  052D' 20                 	db	32
  1697  052E' 56                 	db	86
  1698  052F' 70                 	db	112
  1699  0530' 68                 	db	104
  1700  0531' 41                 	db	65
  1701  0532' 3A                 	db	58
  1702  0533' 20                 	db	32
  1703  0534' 00                 	db	0
  1704  0535'                    __end_ofviPhaseAngle@F3813:
  1705                           	opt stack 0
  1706  0535'                    viPhaseAngle@F3811:
  1707                           	opt stack 0
  1708  0535' 50                 	db	80
  1709  0536' 41                 	db	65
  1710  0537' 20                 	db	32
  1711  0538' 56                 	db	86
  1712  0539' 70                 	db	112
  1713  053A' 68                 	db	104
  1714  053B' 41                 	db	65
  1715  053C' 3A                 	db	58
  1716  053D' 20                 	db	32
  1717  053E' 00                 	db	0
  1718  053F'                    __end_ofviPhaseAngle@F3811:
  1719                           	opt stack 0
  1720  053F'                    phRmsVI@F3777:
  1721                           	opt stack 0
  1722  053F' 50                 	db	80
  1723  0540' 43                 	db	67
  1724  0541' 20                 	db	32
  1725  0542' 43                 	db	67
  1726  0543' 52                 	db	82
  1727  0544' 4D                 	db	77
  1728  0545' 53                 	db	83
  1729  0546' 3A                 	db	58
  1730  0547' 20                 	db	32
  1731  0548' 00                 	db	0
  1732  0549'                    __end_ofphRmsVI@F3777:
  1733                           	opt stack 0
  1734  0549'                    phRmsVI@F3775:
  1735                           	opt stack 0
  1736  0549' 50                 	db	80
  1737  054A' 42                 	db	66
  1738  054B' 20                 	db	32
  1739  054C' 43                 	db	67
  1740  054D' 52                 	db	82
  1741  054E' 4D                 	db	77
  1742  054F' 53                 	db	83
  1743  0550' 3A                 	db	58
  1744  0551' 20                 	db	32
  1745  0552' 00                 	db	0
  1746  0553'                    __end_ofphRmsVI@F3775:
  1747                           	opt stack 0
  1748  0553'                    phRmsVI@F3773:
  1749                           	opt stack 0
  1750  0553' 50                 	db	80
  1751  0554' 41                 	db	65
  1752  0555' 20                 	db	32
  1753  0556' 43                 	db	67
  1754  0557' 52                 	db	82
  1755  0558' 4D                 	db	77
  1756  0559' 53                 	db	83
  1757  055A' 3A                 	db	58
  1758  055B' 20                 	db	32
  1759  055C' 00                 	db	0
  1760  055D'                    __end_ofphRmsVI@F3773:
  1761                           	opt stack 0
  1762  055D'                    phRmsVI@F3771:
  1763                           	opt stack 0
  1764  055D' 50                 	db	80
  1765  055E' 43                 	db	67
  1766  055F' 20                 	db	32
  1767  0560' 56                 	db	86
  1768  0561' 52                 	db	82
  1769  0562' 4D                 	db	77
  1770  0563' 53                 	db	83
  1771  0564' 3A                 	db	58
  1772  0565' 20                 	db	32
  1773  0566' 00                 	db	0
  1774  0567'                    __end_ofphRmsVI@F3771:
  1775                           	opt stack 0
  1776  0567'                    phRmsVI@F3769:
  1777                           	opt stack 0
  1778  0567' 50                 	db	80
  1779  0568' 42                 	db	66
  1780  0569' 20                 	db	32
  1781  056A' 56                 	db	86
  1782  056B' 52                 	db	82
  1783  056C' 4D                 	db	77
  1784  056D' 53                 	db	83
  1785  056E' 3A                 	db	58
  1786  056F' 20                 	db	32
  1787  0570' 00                 	db	0
  1788  0571'                    __end_ofphRmsVI@F3769:
  1789                           	opt stack 0
  1790  0571'                    phRmsVI@F3767:
  1791                           	opt stack 0
  1792  0571' 50                 	db	80
  1793  0572' 41                 	db	65
  1794  0573' 20                 	db	32
  1795  0574' 56                 	db	86
  1796  0575' 52                 	db	82
  1797  0576' 4D                 	db	77
  1798  0577' 53                 	db	83
  1799  0578' 3A                 	db	58
  1800  0579' 20                 	db	32
  1801  057A' 00                 	db	0
  1802  057B'                    __end_ofphRmsVI@F3767:
  1803                           	opt stack 0
  1804  057B'                    fhPower2@F3753:
  1805                           	opt stack 0
  1806  057B' 50                 	db	80
  1807  057C' 43                 	db	67
  1808  057D' 20                 	db	32
  1809  057E' 48                 	db	72
  1810  057F' 50                 	db	80
  1811  0580' 6F                 	db	111
  1812  0581' 77                 	db	119
  1813  0582' 3A                 	db	58
  1814  0583' 20                 	db	32
  1815  0584' 00                 	db	0
  1816  0585'                    __end_offhPower2@F3753:
  1817                           	opt stack 0
  1818  0585'                    fhPower2@F3751:
  1819                           	opt stack 0
  1820  0585' 50                 	db	80
  1821  0586' 42                 	db	66
  1822  0587' 20                 	db	32
  1823  0588' 48                 	db	72
  1824  0589' 50                 	db	80
  1825  058A' 6F                 	db	111
  1826  058B' 77                 	db	119
  1827  058C' 3A                 	db	58
  1828  058D' 20                 	db	32
  1829  058E' 00                 	db	0
  1830  058F'                    __end_offhPower2@F3751:
  1831                           	opt stack 0
  1832  058F'                    fhPower2@F3749:
  1833                           	opt stack 0
  1834  058F' 50                 	db	80
  1835  0590' 41                 	db	65
  1836  0591' 20                 	db	32
  1837  0592' 48                 	db	72
  1838  0593' 50                 	db	80
  1839  0594' 6F                 	db	111
  1840  0595' 77                 	db	119
  1841  0596' 3A                 	db	58
  1842  0597' 20                 	db	32
  1843  0598' 00                 	db	0
  1844  0599'                    __end_offhPower2@F3749:
  1845                           	opt stack 0
  1846  0599'                    fhPower2@F3747:
  1847                           	opt stack 0
  1848  0599' 50                 	db	80
  1849  059A' 43                 	db	67
  1850  059B' 20                 	db	32
  1851  059C' 46                 	db	70
  1852  059D' 50                 	db	80
  1853  059E' 6F                 	db	111
  1854  059F' 77                 	db	119
  1855  05A0' 3A                 	db	58
  1856  05A1' 20                 	db	32
  1857  05A2' 00                 	db	0
  1858  05A3'                    __end_offhPower2@F3747:
  1859                           	opt stack 0
  1860  05A3'                    fhPower2@F3745:
  1861                           	opt stack 0
  1862  05A3' 50                 	db	80
  1863  05A4' 42                 	db	66
  1864  05A5' 20                 	db	32
  1865  05A6' 46                 	db	70
  1866  05A7' 50                 	db	80
  1867  05A8' 6F                 	db	111
  1868  05A9' 77                 	db	119
  1869  05AA' 3A                 	db	58
  1870  05AB' 20                 	db	32
  1871  05AC' 00                 	db	0
  1872  05AD'                    __end_offhPower2@F3745:
  1873                           	opt stack 0
  1874  05AD'                    fhPower2@F3743:
  1875                           	opt stack 0
  1876  05AD' 50                 	db	80
  1877  05AE' 41                 	db	65
  1878  05AF' 20                 	db	32
  1879  05B0' 46                 	db	70
  1880  05B1' 50                 	db	80
  1881  05B2' 6F                 	db	111
  1882  05B3' 77                 	db	119
  1883  05B4' 3A                 	db	58
  1884  05B5' 20                 	db	32
  1885  05B6' 00                 	db	0
  1886  05B7'                    __end_offhPower2@F3743:
  1887                           	opt stack 0
  1888  05B7'                    typesPower1@F3721:
  1889                           	opt stack 0
  1890  05B7' 50                 	db	80
  1891  05B8' 43                 	db	67
  1892  05B9' 20                 	db	32
  1893  05BA' 52                 	db	82
  1894  05BB' 50                 	db	80
  1895  05BC' 6F                 	db	111
  1896  05BD' 77                 	db	119
  1897  05BE' 3A                 	db	58
  1898  05BF' 20                 	db	32
  1899  05C0' 00                 	db	0
  1900  05C1'                    __end_oftypesPower1@F3721:
  1901                           	opt stack 0
  1902  05C1'                    typesPower1@F3719:
  1903                           	opt stack 0
  1904  05C1' 50                 	db	80
  1905  05C2' 42                 	db	66
  1906  05C3' 20                 	db	32
  1907  05C4' 52                 	db	82
  1908  05C5' 50                 	db	80
  1909  05C6' 6F                 	db	111
  1910  05C7' 77                 	db	119
  1911  05C8' 3A                 	db	58
  1912  05C9' 20                 	db	32
  1913  05CA' 00                 	db	0
  1914  05CB'                    __end_oftypesPower1@F3719:
  1915                           	opt stack 0
  1916  05CB'                    typesPower1@F3717:
  1917                           	opt stack 0
  1918  05CB' 50                 	db	80
  1919  05CC' 41                 	db	65
  1920  05CD' 20                 	db	32
  1921  05CE' 52                 	db	82
  1922  05CF' 50                 	db	80
  1923  05D0' 6F                 	db	111
  1924  05D1' 77                 	db	119
  1925  05D2' 3A                 	db	58
  1926  05D3' 20                 	db	32
  1927  05D4' 00                 	db	0
  1928  05D5'                    __end_oftypesPower1@F3717:
  1929                           	opt stack 0
  1930  05D5'                    typesPower1@F3715:
  1931                           	opt stack 0
  1932  05D5' 50                 	db	80
  1933  05D6' 43                 	db	67
  1934  05D7' 20                 	db	32
  1935  05D8' 41                 	db	65
  1936  05D9' 50                 	db	80
  1937  05DA' 6F                 	db	111
  1938  05DB' 77                 	db	119
  1939  05DC' 3A                 	db	58
  1940  05DD' 20                 	db	32
  1941  05DE' 00                 	db	0
  1942  05DF'                    __end_oftypesPower1@F3715:
  1943                           	opt stack 0
  1944  05DF'                    typesPower1@F3713:
  1945                           	opt stack 0
  1946  05DF' 50                 	db	80
  1947  05E0' 42                 	db	66
  1948  05E1' 20                 	db	32
  1949  05E2' 41                 	db	65
  1950  05E3' 50                 	db	80
  1951  05E4' 6F                 	db	111
  1952  05E5' 77                 	db	119
  1953  05E6' 3A                 	db	58
  1954  05E7' 20                 	db	32
  1955  05E8' 00                 	db	0
  1956  05E9'                    __end_oftypesPower1@F3713:
  1957                           	opt stack 0
  1958  05E9'                    typesPower1@F3711:
  1959                           	opt stack 0
  1960  05E9' 50                 	db	80
  1961  05EA' 41                 	db	65
  1962  05EB' 20                 	db	32
  1963  05EC' 41                 	db	65
  1964  05ED' 50                 	db	80
  1965  05EE' 6F                 	db	111
  1966  05EF' 77                 	db	119
  1967  05F0' 3A                 	db	58
  1968  05F1' 20                 	db	32
  1969  05F2' 00                 	db	0
  1970  05F3'                    __end_oftypesPower1@F3711:
  1971                           	opt stack 0
  1972  05F3'                    viewMenu@F3596:
  1973                           	opt stack 0
  1974  05F3' 46                 	db	70
  1975  05F4' 72                 	db	114
  1976  05F5' 65                 	db	101
  1977  05F6' 71                 	db	113
  1978  05F7' 75                 	db	117
  1979  05F8' 65                 	db	101
  1980  05F9' 6E                 	db	110
  1981  05FA' 63                 	db	99
  1982  05FB' 79                 	db	121
  1983  05FC' 00                 	db	0
  1984  05FD'                    __end_ofviewMenu@F3596:
  1985                           	opt stack 0
  1986  05FD'                    phPhaseAngle@F3807:
  1987                           	opt stack 0
  1988  05FD' 50                 	db	80
  1989  05FE' 43                 	db	67
  1990  05FF' 20                 	db	32
  1991  0600' 70                 	db	112
  1992  0601' 68                 	db	104
  1993  0602' 41                 	db	65
  1994  0603' 3A                 	db	58
  1995  0604' 20                 	db	32
  1996  0605' 00                 	db	0
  1997  0606'                    __end_ofphPhaseAngle@F3807:
  1998                           	opt stack 0
  1999  0606'                    phPhaseAngle@F3805:
  2000                           	opt stack 0
  2001  0606' 50                 	db	80
  2002  0607' 42                 	db	66
  2003  0608' 20                 	db	32
  2004  0609' 70                 	db	112
  2005  060A' 68                 	db	104
  2006  060B' 41                 	db	65
  2007  060C' 3A                 	db	58
  2008  060D' 20                 	db	32
  2009  060E' 00                 	db	0
  2010  060F'                    __end_ofphPhaseAngle@F3805:
  2011                           	opt stack 0
  2012  060F'                    phPhaseAngle@F3803:
  2013                           	opt stack 0
  2014  060F' 50                 	db	80
  2015  0610' 41                 	db	65
  2016  0611' 20                 	db	32
  2017  0612' 70                 	db	112
  2018  0613' 68                 	db	104
  2019  0614' 41                 	db	65
  2020  0615' 3A                 	db	58
  2021  0616' 20                 	db	32
  2022  0617' 00                 	db	0
  2023  0618'                    __end_ofphPhaseAngle@F3803:
  2024                           	opt stack 0
  2025  0618'                    apparentEnergy@F3659:
  2026                           	opt stack 0
  2027  0618' 50                 	db	80
  2028  0619' 43                 	db	67
  2029  061A' 20                 	db	32
  2030  061B' 41                 	db	65
  2031  061C' 70                 	db	112
  2032  061D' 70                 	db	112
  2033  061E' 3A                 	db	58
  2034  061F' 20                 	db	32
  2035  0620' 00                 	db	0
  2036  0621'                    __end_ofapparentEnergy@F3659:
  2037                           	opt stack 0
  2038  0621'                    apparentEnergy@F3657:
  2039                           	opt stack 0
  2040  0621' 50                 	db	80
  2041  0622' 42                 	db	66
  2042  0623' 20                 	db	32
  2043  0624' 41                 	db	65
  2044  0625' 70                 	db	112
  2045  0626' 70                 	db	112
  2046  0627' 3A                 	db	58
  2047  0628' 20                 	db	32
  2048  0629' 00                 	db	0
  2049  062A'                    __end_ofapparentEnergy@F3657:
  2050                           	opt stack 0
  2051  062A'                    apparentEnergy@F3655:
  2052                           	opt stack 0
  2053  062A' 50                 	db	80
  2054  062B' 41                 	db	65
  2055  062C' 20                 	db	32
  2056  062D' 41                 	db	65
  2057  062E' 70                 	db	112
  2058  062F' 70                 	db	112
  2059  0630' 3A                 	db	58
  2060  0631' 20                 	db	32
  2061  0632' 00                 	db	0
  2062  0633'                    __end_ofapparentEnergy@F3655:
  2063                           	opt stack 0
  2064  0633'                    viewMenu@F3580:
  2065                           	opt stack 0
  2066  0633' 48                 	db	72
  2067  0634' 61                 	db	97
  2068  0635' 72                 	db	114
  2069  0636' 6D                 	db	109
  2070  0637' 6F                 	db	111
  2071  0638' 6E                 	db	110
  2072  0639' 69                 	db	105
  2073  063A' 63                 	db	99
  2074  063B' 00                 	db	0
  2075  063C'                    __end_ofviewMenu@F3580:
  2076                           	opt stack 0
  2077  063C'                    phPowerFactor@F3795:
  2078                           	opt stack 0
  2079  063C' 50                 	db	80
  2080  063D' 43                 	db	67
  2081  063E' 20                 	db	32
  2082  063F' 50                 	db	80
  2083  0640' 46                 	db	70
  2084  0641' 3A                 	db	58
  2085  0642' 20                 	db	32
  2086  0643' 00                 	db	0
  2087  0644'                    __end_ofphPowerFactor@F3795:
  2088                           	opt stack 0
  2089  0644'                    phPowerFactor@F3793:
  2090                           	opt stack 0
  2091  0644' 50                 	db	80
  2092  0645' 42                 	db	66
  2093  0646' 20                 	db	32
  2094  0647' 50                 	db	80
  2095  0648' 46                 	db	70
  2096  0649' 3A                 	db	58
  2097  064A' 20                 	db	32
  2098  064B' 00                 	db	0
  2099  064C'                    __end_ofphPowerFactor@F3793:
  2100                           	opt stack 0
  2101  064C'                    phPowerFactor@F3791:
  2102                           	opt stack 0
  2103  064C' 50                 	db	80
  2104  064D' 41                 	db	65
  2105  064E' 20                 	db	32
  2106  064F' 50                 	db	80
  2107  0650' 46                 	db	70
  2108  0651' 3A                 	db	58
  2109  0652' 20                 	db	32
  2110  0653' 00                 	db	0
  2111  0654'                    __end_ofphPowerFactor@F3791:
  2112                           	opt stack 0
  2113  0654'                    _phasesPhaseAngle:
  2114                           	opt stack 0
  2115  0654' 00'                	db	low _phPhaseAngle
  2116  0655' 00'                	db	high _phPhaseAngle
  2117  0656' 00'                	db	low _viPhaseAngle
  2118  0657' 00'                	db	high _viPhaseAngle
  2119  0658' 00'                	db	low _THDNPhaseAngle
  2120  0659' 00'                	db	high _THDNPhaseAngle
  2121  065A' 00'                	db	low _exitPhaseAngle
  2122  065B' 00'                	db	high _exitPhaseAngle
  2123  065C'                    __end_of_phasesPhaseAngle:
  2124                           	opt stack 0
  2125  065C'                    _phasesMainMenu:
  2126                           	opt stack 0
  2127  065C' 00'                	db	low _initialLoad
  2128  065D' 00'                	db	high _initialLoad
  2129  065E' 00'                	db	low _generalView
  2130  065F' 00'                	db	high _generalView
  2131  0660' 00'                	db	low _viewMenu
  2132  0661' 00'                	db	high _viewMenu
  2133  0662' 00'                	db	low _sendData
  2134  0663' 00'                	db	high _sendData
  2135  0664'                    __end_of_phasesMainMenu:
  2136                           	opt stack 0
  2137  0664'                    showTemperature@F3843:
  2138                           	opt stack 0
  2139  0664' 54                 	db	84
  2140  0665' 65                 	db	101
  2141  0666' 6D                 	db	109
  2142  0667' 70                 	db	112
  2143  0668' 3A                 	db	58
  2144  0669' 20                 	db	32
  2145  066A' 00                 	db	0
  2146  066B'                    __end_ofshowTemperature@F3843:
  2147                           	opt stack 0
  2148  066B'                    showFrequency@F3837:
  2149                           	opt stack 0
  2150  066B' 46                 	db	70
  2151  066C' 72                 	db	114
  2152  066D' 65                 	db	101
  2153  066E' 71                 	db	113
  2154  066F' 3A                 	db	58
  2155  0670' 20                 	db	32
  2156  0671' 00                 	db	0
  2157  0672'                    __end_ofshowFrequency@F3837:
  2158                           	opt stack 0
  2159  0672'                    viewMenu@F3590:
  2160                           	opt stack 0
  2161  0672' 46                 	db	70
  2162  0673' 61                 	db	97
  2163  0674' 63                 	db	99
  2164  0675' 74                 	db	116
  2165  0676' 6F                 	db	111
  2166  0677' 72                 	db	114
  2167  0678' 00                 	db	0
  2168  0679'                    __end_ofviewMenu@F3590:
  2169                           	opt stack 0
  2170  0679'                    viewMenu@F3572:
  2171                           	opt stack 0
  2172  0679' 45                 	db	69
  2173  067A' 6E                 	db	110
  2174  067B' 65                 	db	101
  2175  067C' 72                 	db	114
  2176  067D' 67                 	db	103
  2177  067E' 79                 	db	121
  2178  067F' 00                 	db	0
  2179  0680'                    __end_ofviewMenu@F3572:
  2180                           	opt stack 0
  2181  0680'                    viewMenu@F3594:
  2182                           	opt stack 0
  2183  0680' 41                 	db	65
  2184  0681' 6E                 	db	110
  2185  0682' 67                 	db	103
  2186  0683' 6C                 	db	108
  2187  0684' 65                 	db	101
  2188  0685' 00                 	db	0
  2189  0686'                    __end_ofviewMenu@F3594:
  2190                           	opt stack 0
  2191  0686'                    viewMenu@F3592:
  2192                           	opt stack 0
  2193  0686' 50                 	db	80
  2194  0687' 68                 	db	104
  2195  0688' 61                 	db	97
  2196  0689' 73                 	db	115
  2197  068A' 65                 	db	101
  2198  068B' 00                 	db	0
  2199  068C'                    __end_ofviewMenu@F3592:
  2200                           	opt stack 0
  2201  068C'                    viewMenu@F3588:
  2202                           	opt stack 0
  2203  068C' 50                 	db	80
  2204  068D' 6F                 	db	111
  2205  068E' 77                 	db	119
  2206  068F' 65                 	db	101
  2207  0690' 72                 	db	114
  2208  0691' 00                 	db	0
  2209  0692'                    __end_ofviewMenu@F3588:
  2210                           	opt stack 0
  2211  0692'                    viewMenu@F3582:
  2212                           	opt stack 0
  2213  0692' 50                 	db	80
  2214  0693' 6F                 	db	111
  2215  0694' 77                 	db	119
  2216  0695' 65                 	db	101
  2217  0696' 72                 	db	114
  2218  0697' 00                 	db	0
  2219  0698'                    __end_ofviewMenu@F3582:
  2220                           	opt stack 0
  2221  0698'                    _phasesRmsVI:
  2222                           	opt stack 0
  2223  0698' 00'                	db	low _phRmsVI
  2224  0699' 00'                	db	high _phRmsVI
  2225  069A' 00'                	db	low _neutralRmsVI
  2226  069B' 00'                	db	high _neutralRmsVI
  2227  069C' 00'                	db	low _exitRmsVI
  2228  069D' 00'                	db	high _exitRmsVI
  2229  069E'                    __end_of_phasesRmsVI:
  2230                           	opt stack 0
  2231  069E'                    _phasesPower2:
  2232                           	opt stack 0
  2233  069E' 00'                	db	low _fhPower2
  2234  069F' 00'                	db	high _fhPower2
  2235  06A0' 00'                	db	low _phPower2
  2236  06A1' 00'                	db	high _phPower2
  2237  06A2' 00'                	db	low _exitPower2
  2238  06A3' 00'                	db	high _exitPower2
  2239  06A4'                    __end_of_phasesPower2:
  2240                           	opt stack 0
  2241  06A4'                    _phasesPower1:
  2242                           	opt stack 0
  2243  06A4' 00'                	db	low _typesPower1
  2244  06A5' 00'                	db	high _typesPower1
  2245  06A6' 00'                	db	low _phPower1
  2246  06A7' 00'                	db	high _phPower1
  2247  06A8' 00'                	db	low _exitPower1
  2248  06A9' 00'                	db	high _exitPower1
  2249  06AA'                    __end_of_phasesPower1:
  2250                           	opt stack 0
  2251  06AA'                    generalView@F3565:
  2252                           	opt stack 0
  2253  06AA' 4D                 	db	77
  2254  06AB' 65                 	db	101
  2255  06AC' 6E                 	db	110
  2256  06AD' 75                 	db	117
  2257  06AE' 00                 	db	0
  2258  06AF'                    __end_ofgeneralView@F3565:
  2259                           	opt stack 0
  2260  06AF'                    generalView@F3563:
  2261                           	opt stack 0
  2262  06AF' 53                 	db	83
  2263  06B0' 65                 	db	101
  2264  06B1' 6E                 	db	110
  2265  06B2' 64                 	db	100
  2266  06B3' 00                 	db	0
  2267  06B4'                    __end_ofgeneralView@F3563:
  2268                           	opt stack 0
  2269  06B4'                    viewMenu@F3586:
  2270                           	opt stack 0
  2271  06B4' 52                 	db	82
  2272  06B5' 4D                 	db	77
  2273  06B6' 53                 	db	83
  2274  06B7' 00                 	db	0
  2275  06B8'                    __end_ofviewMenu@F3586:
  2276                           	opt stack 0
  2277  06B8'                    _phasesTemperature:
  2278                           	opt stack 0
  2279  06B8' 00'                	db	low _showTemperature
  2280  06B9' 00'                	db	high _showTemperature
  2281  06BA' 00'                	db	low _exitTemperature
  2282  06BB' 00'                	db	high _exitTemperature
  2283  06BC'                    __end_of_phasesTemperature:
  2284                           	opt stack 0
  2285  06BC'                    _phasesFrequency:
  2286                           	opt stack 0
  2287  06BC' 00'                	db	low _showFrequency
  2288  06BD' 00'                	db	high _showFrequency
  2289  06BE' 00'                	db	low _exitFrequency
  2290  06BF' 00'                	db	high _exitFrequency
  2291  06C0'                    __end_of_phasesFrequency:
  2292                           	opt stack 0
  2293  06C0'                    _phasesPowerFactor:
  2294                           	opt stack 0
  2295  06C0' 00'                	db	low _phPowerFactor
  2296  06C1' 00'                	db	high _phPowerFactor
  2297  06C2' 00'                	db	low _exitPowerFactor
  2298  06C3' 00'                	db	high _exitPowerFactor
  2299  06C4'                    __end_of_phasesPowerFactor:
  2300                           	opt stack 0
  2301  06C4'                    viewMenu@F3604:
  2302                           	opt stack 0
  2303  06C4' 4C                 	db	76
  2304  06C5' 00                 	db	0
  2305  06C6'                    __end_ofviewMenu@F3604:
  2306                           	opt stack 0
  2307  06C6'                    viewMenu@F3602:
  2308                           	opt stack 0
  2309  06C6' 45                 	db	69
  2310  06C7' 00                 	db	0
  2311  06C8'                    __end_ofviewMenu@F3602:
  2312                           	opt stack 0
  2313  06C8'                    viewMenu@F3600:
  2314                           	opt stack 0
  2315  06C8' 52                 	db	82
  2316  06C9' 00                 	db	0
  2317  06CA'                    __end_ofviewMenu@F3600:
  2318                           	opt stack 0
  2319  06CA'                    _SPI_Config2:
  2320                           	opt stack 0
  2321  06CA' 01                 	db	1
  2322  06CB' 00                 	db	0
  2323  06CC' 02                 	db	2
  2324  06CD'                    __end_of_SPI_Config2:
  2325                           	opt stack 0
  2326  06CD'                    _SPI_Config:
  2327                           	opt stack 0
  2328  06CD' 01                 	db	1
  2329  06CE' 00                 	db	0
  2330  06CF' 02                 	db	2
  2331  06D0'                    __end_of_SPI_Config:
  2332                           	opt stack 0
  2333  0000                     _ANSEL0bits	set	4024
  2334  0000                     _PORTCbits	set	3970
  2335  0000                     _PORTAbits	set	3968
  2336  0000                     _PORTBbits	set	3969
  2337  0000                     _TXREG	set	4013
  2338  0000                     _BAUDCTLbits	set	4010
  2339  0000                     _RCSTAbits	set	4011
  2340  0000                     _TXSTAbits	set	4012
  2341  0000                     _SPBRG	set	4015
  2342  0000                     _SSPBUF	set	4041
  2343  0000                     _PIR1bits	set	3998
  2344  0000                     _SSPCON	set	4038
  2345  0000                     _SSPCONbits	set	4038
  2346  0000                     _SSPSTATbits	set	4039
  2347  0000                     _SSPSTAT	set	4039
  2348  0000                     _TRISCbits	set	3988
  2349  0000                     _PORTC	set	3970
  2350  0000                     _PORTB	set	3969
  2351  0000                     _PORTA	set	3968
  2352  0000                     _ANSEL0	set	4024
  2353  0000                     _TRISC	set	3988
  2354  0000                     _TRISB	set	3987
  2355  0000                     _TRISA	set	3986
  2356  0000                     _OSCCON	set	4051
  2357  0000                     _ANS0	set	32192
  2358  0000                     _ANS1	set	32193
  2359  0000                     _ANS2	set	32194
  2360                           
  2361                           ; #config settings
  2362  06D0' 00                 	db	0	; dummy byte at the end
  2363  0000                     
  2364                           	psect	cinit
  2365  0000'                    __pcinit:
  2366                           	opt stack 0
  2367  0000'                    start_initialization:
  2368                           	opt stack 0
  2369  0000'                    __initialization:
  2370                           	opt stack 0
  2371                           
  2372                           ; Clear objects allocated to BANK1 (244 bytes)
  2373  0000' EE00' F000'        	lfsr	0,__pbssBANK1
  2374  0004' 0EF4               	movlw	244
  2375  0006'                    clear_0:
  2376  0006' 6AEE               	clrf	postinc0,c
  2377  0008' 06E8               	decf	wreg,f,c
  2378  000A' E1FD               	bnz	clear_0
  2379                           
  2380                           ; Clear objects allocated to BANK0 (20 bytes)
  2381  000C' EE00' F000'        	lfsr	0,__pbssBANK0
  2382  0010' 0E14               	movlw	20
  2383  0012'                    clear_1:
  2384  0012' 6AEE               	clrf	postinc0,c
  2385  0014' 06E8               	decf	wreg,f,c
  2386  0016' E1FD               	bnz	clear_1
  2387                           
  2388                           ; Clear objects allocated to COMRAM (9 bytes)
  2389  0018' EE00' F000'        	lfsr	0,__pbssCOMRAM
  2390  001C' 0E09               	movlw	9
  2391  001E'                    clear_2:
  2392  001E' 6AEE               	clrf	postinc0,c
  2393  0020' 06E8               	decf	wreg,f,c
  2394  0022' E1FD               	bnz	clear_2
  2395  0024'                    end_of_initialization:
  2396                           	opt stack 0
  2397  0024'                    __end_of__initialization:
  2398                           	opt stack 0
  2399  0024' 0E00'              	movlw	low (__Lmediumconst shr (0+16))
  2400  0026' 6EF8               	movwf	tblptru,c
  2401  0028' 0100               	movlb	0
  2402  002A' EF00' F000'        	goto	_main	;jump to C main() function
  2403                           tblptru	equ	0xFF8
  2404                           postinc0	equ	0xFEE
  2405                           wreg	equ	0xFE8
  2406                           
  2407                           	psect	bssCOMRAM
  2408  0000'                    __pbssCOMRAM:
  2409                           	opt stack 0
  2410  0000'                    viewMenu@currentMainMenu3:
  2411                           	opt stack 0
  2412  0000'                    	ds	2
  2413  0002'                    typesPower1@counter:
  2414                           	opt stack 0
  2415  0002'                    	ds	1
  2416  0003'                    harmonicEnergy@counter:
  2417                           	opt stack 0
  2418  0003'                    	ds	1
  2419  0004'                    fundamentalEnergy@counter:
  2420                           	opt stack 0
  2421  0004'                    	ds	1
  2422  0005'                    apparentEnergy@counter:
  2423                           	opt stack 0
  2424  0005'                    	ds	1
  2425  0006'                    reactiveEnergy@counter:
  2426                           	opt stack 0
  2427  0006'                    	ds	1
  2428  0007'                    activeEnergy@counter:
  2429                           	opt stack 0
  2430  0007'                    	ds	1
  2431  0008'                    viewMenu@counterMenu:
  2432                           	opt stack 0
  2433  0008'                    	ds	1
  2434                           tblptru	equ	0xFF8
  2435                           postinc0	equ	0xFEE
  2436                           wreg	equ	0xFE8
  2437                           
  2438                           	psect	bssBANK0
  2439  0000'                    __pbssBANK0:
  2440                           	opt stack 0
  2441  0000'                    _FlagButton3:
  2442                           	opt stack 0
  2443  0000'                    	ds	1
  2444  0001'                    _FlagButton2:
  2445                           	opt stack 0
  2446  0001'                    	ds	1
  2447  0002'                    _FlagButton1:
  2448                           	opt stack 0
  2449  0002'                    	ds	1
  2450  0003'                    THDNPhaseAngle@counter:
  2451                           	opt stack 0
  2452  0003'                    	ds	1
  2453  0004'                    phPowerFactor@counter:
  2454                           	opt stack 0
  2455  0004'                    	ds	1
  2456  0005'                    phRmsVI@counter:
  2457                           	opt stack 0
  2458  0005'                    	ds	1
  2459  0006'                    fhPower2@counter:
  2460                           	opt stack 0
  2461  0006'                    	ds	1
  2462  0007'                    viewMenu@lockWrite:
  2463                           	opt stack 0
  2464  0007'                    	ds	1
  2465  0008'                    viewMenu@lockClear:
  2466                           	opt stack 0
  2467  0008'                    	ds	1
  2468  0009'                    generalView@lockWrite:
  2469                           	opt stack 0
  2470  0009'                    	ds	1
  2471  000A'                    generalView@lockClear:
  2472                           	opt stack 0
  2473  000A'                    	ds	1
  2474  000B'                    stateTemperature@phase:
  2475                           	opt stack 0
  2476  000B'                    	ds	1
  2477  000C'                    stateFrequency@phase:
  2478                           	opt stack 0
  2479  000C'                    	ds	1
  2480  000D'                    statePhaseAngle@phase:
  2481                           	opt stack 0
  2482  000D'                    	ds	1
  2483  000E'                    statePowerFactor@phase:
  2484                           	opt stack 0
  2485  000E'                    	ds	1
  2486  000F'                    stateRmsVI@phase:
  2487                           	opt stack 0
  2488  000F'                    	ds	1
  2489  0010'                    statePower2@phase:
  2490                           	opt stack 0
  2491  0010'                    	ds	1
  2492  0011'                    statePower1@phase:
  2493                           	opt stack 0
  2494  0011'                    	ds	1
  2495  0012'                    stateEnergy@phase:
  2496                           	opt stack 0
  2497  0012'                    	ds	1
  2498  0013'                    stateMainMenu@phase:
  2499                           	opt stack 0
  2500  0013'                    	ds	1
  2501                           tblptru	equ	0xFF8
  2502                           postinc0	equ	0xFEE
  2503                           wreg	equ	0xFE8
  2504                           
  2505                           	psect	bssBANK1
  2506  0000'                    __pbssBANK1:
  2507                           	opt stack 0
  2508  0000'                    ATM_calibration@F3299:
  2509                           	opt stack 0
  2510  0000'                    	ds	22
  2511  0016'                    ATM_calibration@F3297:
  2512                           	opt stack 0
  2513  0016'                    	ds	22
  2514  002C'                    ATM_calibration@F3295:
  2515                           	opt stack 0
  2516  002C'                    	ds	22
  2517  0042'                    ATM_calibration@F3293:
  2518                           	opt stack 0
  2519  0042'                    	ds	22
  2520  0058'                    ATM_calibration@F3311:
  2521                           	opt stack 0
  2522  0058'                    	ds	10
  2523  0062'                    ATM_calibration@F3309:
  2524                           	opt stack 0
  2525  0062'                    	ds	10
  2526  006C'                    ATM_calibration@F3307:
  2527                           	opt stack 0
  2528  006C'                    	ds	10
  2529  0076'                    ATM_calibration@F3305:
  2530                           	opt stack 0
  2531  0076'                    	ds	6
  2532  007C'                    ATM_calibration@F3303:
  2533                           	opt stack 0
  2534  007C'                    	ds	6
  2535  0082'                    ATM_calibration@F3301:
  2536                           	opt stack 0
  2537  0082'                    	ds	6
  2538  0088'                    expBASE10@value:
  2539                           	opt stack 0
  2540  0088'                    	ds	4
  2541  008C'                    exitTemperature@currentTemperature2:
  2542                           	opt stack 0
  2543  008C'                    	ds	3
  2544  008F'                    showTemperature@currentTemperature1:
  2545                           	opt stack 0
  2546  008F'                    	ds	3
  2547  0092'                    exitFrequency@currentFrequency2:
  2548                           	opt stack 0
  2549  0092'                    	ds	3
  2550  0095'                    showFrequency@currentFrequency1:
  2551                           	opt stack 0
  2552  0095'                    	ds	3
  2553  0098'                    exitPhaseAngle@currentPhaseAngle3:
  2554                           	opt stack 0
  2555  0098'                    	ds	3
  2556  009B'                    THDNPhaseAngle@currentPhaseAngle3:
  2557                           	opt stack 0
  2558  009B'                    	ds	3
  2559  009E'                    viPhaseAngle@currentPhaseAngle2:
  2560                           	opt stack 0
  2561  009E'                    	ds	3
  2562  00A1'                    phPhaseAngle@currentPhaseAngle1:
  2563                           	opt stack 0
  2564  00A1'                    	ds	3
  2565  00A4'                    exitRmsVI@currentRms3:
  2566                           	opt stack 0
  2567  00A4'                    	ds	3
  2568  00A7'                    neutralRmsVI@currentRms2:
  2569                           	opt stack 0
  2570  00A7'                    	ds	3
  2571  00AA'                    phRmsVI@currentRms1:
  2572                           	opt stack 0
  2573  00AA'                    	ds	3
  2574  00AD'                    exitPower2@currentPower2_3:
  2575                           	opt stack 0
  2576  00AD'                    	ds	3
  2577  00B0'                    phPower2@currentPower2_2:
  2578                           	opt stack 0
  2579  00B0'                    	ds	3
  2580  00B3'                    fhPower2@currentPower2_1:
  2581                           	opt stack 0
  2582  00B3'                    	ds	3
  2583  00B6'                    exitPower1@currentPower1_4:
  2584                           	opt stack 0
  2585  00B6'                    	ds	3
  2586  00B9'                    phPower1@currentPower1_2:
  2587                           	opt stack 0
  2588  00B9'                    	ds	3
  2589  00BC'                    typesPower1@currentPower1_1:
  2590                           	opt stack 0
  2591  00BC'                    	ds	3
  2592  00BF'                    exitEnergy@currentEnergy6:
  2593                           	opt stack 0
  2594  00BF'                    	ds	3
  2595  00C2'                    harmonicEnergy@currentEnergy5:
  2596                           	opt stack 0
  2597  00C2'                    	ds	3
  2598  00C5'                    fundamentalEnergy@currentEnergy4:
  2599                           	opt stack 0
  2600  00C5'                    	ds	3
  2601  00C8'                    apparentEnergy@currentEnergy3:
  2602                           	opt stack 0
  2603  00C8'                    	ds	3
  2604  00CB'                    reactiveEnergy@currentEnergy2:
  2605                           	opt stack 0
  2606  00CB'                    	ds	3
  2607  00CE'                    activeEnergy@currentEnergy1:
  2608                           	opt stack 0
  2609  00CE'                    	ds	3
  2610  00D1'                    stateTemperature@phaseTemperature:
  2611                           	opt stack 0
  2612  00D1'                    	ds	3
  2613  00D4'                    stateFrequency@phaseFrequency:
  2614                           	opt stack 0
  2615  00D4'                    	ds	3
  2616  00D7'                    statePhaseAngle@phasePhaseAngle:
  2617                           	opt stack 0
  2618  00D7'                    	ds	3
  2619  00DA'                    stateRmsVI@phaseRmsVI:
  2620                           	opt stack 0
  2621  00DA'                    	ds	3
  2622  00DD'                    statePower2@phasePower2:
  2623                           	opt stack 0
  2624  00DD'                    	ds	3
  2625  00E0'                    statePower1@phasePower1:
  2626                           	opt stack 0
  2627  00E0'                    	ds	3
  2628  00E3'                    stateEnergy@phaseEnergy:
  2629                           	opt stack 0
  2630  00E3'                    	ds	3
  2631  00E6'                    exitPowerFactor@currentPowerFactor2:
  2632                           	opt stack 0
  2633  00E6'                    	ds	2
  2634  00E8'                    phPowerFactor@currentPowerFactor1:
  2635                           	opt stack 0
  2636  00E8'                    	ds	2
  2637  00EA'                    sendData@currentMainMenu4:
  2638                           	opt stack 0
  2639  00EA'                    	ds	2
  2640  00EC'                    generalView@currentMainMenu2:
  2641                           	opt stack 0
  2642  00EC'                    	ds	2
  2643  00EE'                    initialLoad@currentMainMenu1:
  2644                           	opt stack 0
  2645  00EE'                    	ds	2
  2646  00F0'                    statePowerFactor@phasePowerFactor:
  2647                           	opt stack 0
  2648  00F0'                    	ds	2
  2649  00F2'                    stateMainMenu@phaseMain:
  2650                           	opt stack 0
  2651  00F2'                    	ds	2
  2652                           tblptru	equ	0xFF8
  2653                           postinc0	equ	0xFEE
  2654                           wreg	equ	0xFE8
  2655                           
  2656                           	psect	cstackBANK0
  2657  0000'                    __pcstackBANK0:
  2658                           	opt stack 0
  2659  0000'                    fhPower2@fundamental_PowerP1:
  2660                           	opt stack 0
  2661  0000'                    phRmsVI@voltage1_RMS:
  2662                           	opt stack 0
  2663  0000'                    typesPower1@apparent_powerP1:
  2664                           	opt stack 0
  2665  0000'                    THDNPhaseAngle@voltage1_THDN:
  2666                           	opt stack 0
  2667  0000'                    harmonicEnergy@harmonic_ForwardTotal:
  2668                           	opt stack 0
  2669  0000'                    viewMenu@string1_Power1:
  2670                           	opt stack 0
  2671  0000'                    activeEnergy@active_Forward_Total:
  2672                           	opt stack 0
  2673  0000'                    apparentEnergy@apparentAri_energyTotal:
  2674                           	opt stack 0
  2675  0000'                    reactiveEnergy@reactive_Forward_Total:
  2676                           	opt stack 0
  2677  0000'                    fundamentalEnergy@fund_ForwardTotal:
  2678                           	opt stack 0
  2679                           
  2680                           ; 19 bytes @ 0x0
  2681  0000'                    	ds	10
  2682  000A'                    fhPower2@fundamental_PowerP2:
  2683                           	opt stack 0
  2684  000A'                    phRmsVI@voltage2_RMS:
  2685                           	opt stack 0
  2686                           
  2687                           ; 10 bytes @ 0xA
  2688  000A'                    	ds	1
  2689  000B'                    typesPower1@apparent_powerP2:
  2690                           	opt stack 0
  2691  000B'                    THDNPhaseAngle@voltage2_THDN:
  2692                           	opt stack 0
  2693                           
  2694                           ; 11 bytes @ 0xB
  2695  000B'                    	ds	4
  2696  000F'                    harmonicEnergy@harmonic_ReverseTotal:
  2697                           	opt stack 0
  2698                           
  2699                           ; 14 bytes @ 0xF
  2700  000F'                    	ds	1
  2701  0010'                    viewMenu@string1_RMS:
  2702                           	opt stack 0
  2703                           
  2704                           ; 16 bytes @ 0x10
  2705  0010'                    	ds	1
  2706  0011'                    activeEnergy@active_Reverse_Total:
  2707                           	opt stack 0
  2708                           
  2709                           ; 16 bytes @ 0x11
  2710  0011'                    	ds	1
  2711  0012'                    apparentEnergy@apparentVec_energyTotal:
  2712                           	opt stack 0
  2713                           
  2714                           ; 18 bytes @ 0x12
  2715  0012'                    	ds	1
  2716  0013'                    reactiveEnergy@reactive_Reverse_Total:
  2717                           	opt stack 0
  2718  0013'                    fundamentalEnergy@fund_ReverseTotal:
  2719                           	opt stack 0
  2720                           
  2721                           ; 18 bytes @ 0x13
  2722  0013'                    	ds	1
  2723  0014'                    fhPower2@fundamental_PowerP3:
  2724                           	opt stack 0
  2725  0014'                    phRmsVI@voltage3_RMS:
  2726                           	opt stack 0
  2727                           
  2728                           ; 10 bytes @ 0x14
  2729  0014'                    	ds	2
  2730  0016'                    typesPower1@apparent_powerP3:
  2731                           	opt stack 0
  2732  0016'                    THDNPhaseAngle@voltage3_THDN:
  2733                           	opt stack 0
  2734                           
  2735                           ; 11 bytes @ 0x16
  2736  0016'                    	ds	7
  2737  001D'                    harmonicEnergy@harmonic_ForwardP1:
  2738                           	opt stack 0
  2739                           
  2740                           ; 12 bytes @ 0x1D
  2741  001D'                    	ds	1
  2742  001E'                    fhPower2@harmonic_PowerP1:
  2743                           	opt stack 0
  2744  001E'                    phRmsVI@current1_RMS:
  2745                           	opt stack 0
  2746                           
  2747                           ; 10 bytes @ 0x1E
  2748  001E'                    	ds	2
  2749  0020'                    viewMenu@string2_Power1:
  2750                           	opt stack 0
  2751                           
  2752                           ; 15 bytes @ 0x20
  2753  0020'                    	ds	1
  2754  0021'                    typesPower1@active_powerP1:
  2755                           	opt stack 0
  2756  0021'                    THDNPhaseAngle@current1_THDN:
  2757                           	opt stack 0
  2758  0021'                    activeEnergy@active_Forward1:
  2759                           	opt stack 0
  2760                           
  2761                           ; 14 bytes @ 0x21
  2762  0021'                    	ds	3
  2763  0024'                    apparentEnergy@apparent_energyP1:
  2764                           	opt stack 0
  2765                           
  2766                           ; 9 bytes @ 0x24
  2767  0024'                    	ds	1
  2768  0025'                    reactiveEnergy@reactive_Forward1:
  2769                           	opt stack 0
  2770  0025'                    fundamentalEnergy@fund_ForwardP1:
  2771                           	opt stack 0
  2772                           
  2773                           ; 16 bytes @ 0x25
  2774  0025'                    	ds	3
  2775  0028'                    fhPower2@harmonic_PowerP2:
  2776                           	opt stack 0
  2777  0028'                    phRmsVI@current2_RMS:
  2778                           	opt stack 0
  2779                           
  2780                           ; 10 bytes @ 0x28
  2781  0028'                    	ds	1
  2782  0029'                    harmonicEnergy@harmonic_ForwardP2:
  2783                           	opt stack 0
  2784                           
  2785                           ; 12 bytes @ 0x29
  2786  0029'                    	ds	2
  2787  002B'                    typesPower1@active_powerP2:
  2788                           	opt stack 0
  2789                           
  2790                           ; 10 bytes @ 0x2B
  2791  002B'                    	ds	1
  2792  002C'                    THDNPhaseAngle@current2_THDN:
  2793                           	opt stack 0
  2794                           
  2795                           ; 11 bytes @ 0x2C
  2796  002C'                    	ds	1
  2797  002D'                    apparentEnergy@apparent_energyP2:
  2798                           	opt stack 0
  2799                           
  2800                           ; 9 bytes @ 0x2D
  2801  002D'                    	ds	2
  2802  002F'                    viewMenu@string1_Power2:
  2803                           	opt stack 0
  2804  002F'                    activeEnergy@active_Forward2:
  2805                           	opt stack 0
  2806                           
  2807                           ; 14 bytes @ 0x2F
  2808  002F'                    	ds	3
  2809  0032'                    fhPower2@harmonic_PowerP3:
  2810                           	opt stack 0
  2811  0032'                    phRmsVI@current3_RMS:
  2812                           	opt stack 0
  2813                           
  2814                           ; 10 bytes @ 0x32
  2815  0032'                    	ds	3
  2816  0035'                    typesPower1@active_powerP3:
  2817                           	opt stack 0
  2818  0035'                    harmonicEnergy@harmonic_ForwardP3:
  2819                           	opt stack 0
  2820  0035'                    reactiveEnergy@reactive_Forward3:
  2821                           	opt stack 0
  2822  0035'                    fundamentalEnergy@fund_ForwardP2:
  2823                           	opt stack 0
  2824                           
  2825                           ; 16 bytes @ 0x35
  2826  0035'                    	ds	1
  2827  0036'                    apparentEnergy@apparent_energyP3:
  2828                           	opt stack 0
  2829                           
  2830                           ; 9 bytes @ 0x36
  2831  0036'                    	ds	1
  2832  0037'                    THDNPhaseAngle@current3_THDN:
  2833                           	opt stack 0
  2834                           
  2835                           ; 11 bytes @ 0x37
  2836  0037'                    	ds	4
  2837  003B'                    viewMenu@string1_Temperature:
  2838                           	opt stack 0
  2839                           
  2840                           ; 12 bytes @ 0x3B
  2841  003B'                    	ds	1
  2842  003C'                    fhPower2@maxScreens:
  2843                           	opt stack 0
  2844  003C'                    phRmsVI@maxScreens:
  2845                           	opt stack 0
  2846                           
  2847                           ; 1 bytes @ 0x3C
  2848  003C'                    	ds	1
  2849  003D'                    activeEnergy@active_Forward3:
  2850                           	opt stack 0
  2851                           
  2852                           ; 14 bytes @ 0x3D
  2853  003D'                    	ds	2
  2854  003F'                    apparentEnergy@maxScreens:
  2855                           	opt stack 0
  2856  003F'                    typesPower1@reactive_powerP1:
  2857                           	opt stack 0
  2858                           
  2859                           ; 10 bytes @ 0x3F
  2860  003F'                    	ds	2
  2861  0041'                    harmonicEnergy@harmonic_ReverseP1:
  2862                           	opt stack 0
  2863                           
  2864                           ; 11 bytes @ 0x41
  2865  0041'                    	ds	1
  2866  0042'                    THDNPhaseAngle@maxScreens:
  2867                           	opt stack 0
  2868                           
  2869                           ; 1 bytes @ 0x42
  2870  0042'                    	ds	3
  2871  0045'                    reactiveEnergy@reactive_Forward2:
  2872                           	opt stack 0
  2873  0045'                    fundamentalEnergy@fund_ForwardP3:
  2874                           	opt stack 0
  2875                           
  2876                           ; 16 bytes @ 0x45
  2877  0045'                    	ds	2
  2878  0047'                    viewMenu@string1_Frequency:
  2879                           	opt stack 0
  2880                           
  2881                           ; 10 bytes @ 0x47
  2882  0047'                    	ds	2
  2883  0049'                    typesPower1@reactive_powerP2:
  2884                           	opt stack 0
  2885                           
  2886                           ; 10 bytes @ 0x49
  2887  0049'                    	ds	2
  2888  004B'                    activeEnergy@active_Reverse1:
  2889                           	opt stack 0
  2890                           
  2891                           ; 13 bytes @ 0x4B
  2892  004B'                    	ds	1
  2893  004C'                    harmonicEnergy@harmonic_ReverseP2:
  2894                           	opt stack 0
  2895                           
  2896                           ; 11 bytes @ 0x4C
  2897  004C'                    	ds	5
  2898  0051'                    viewMenu@string2_Power2:
  2899                           	opt stack 0
  2900                           
  2901                           ; 9 bytes @ 0x51
  2902  0051'                    	ds	2
  2903  0053'                    typesPower1@reactive_powerP3:
  2904                           	opt stack 0
  2905                           
  2906                           ; 10 bytes @ 0x53
  2907  0053'                    	ds	1
  2908  0054'                    reactiveEnergy@reactive_Reverse1:
  2909                           	opt stack 0
  2910                           
  2911                           ; 15 bytes @ 0x54
  2912  0054'                    	ds	1
  2913  0055'                    fundamentalEnergy@fund_ReverseP1:
  2914                           	opt stack 0
  2915                           
  2916                           ; 15 bytes @ 0x55
  2917  0055'                    	ds	2
  2918  0057'                    harmonicEnergy@harmonic_ReverseP3:
  2919                           	opt stack 0
  2920                           
  2921                           ; 11 bytes @ 0x57
  2922  0057'                    	ds	1
  2923  0058'                    activeEnergy@active_Reverse2:
  2924                           	opt stack 0
  2925                           
  2926                           ; 13 bytes @ 0x58
  2927  0058'                    	ds	2
  2928  005A'                    viewMenu@string_Energy:
  2929                           	opt stack 0
  2930                           
  2931                           ; 7 bytes @ 0x5A
  2932  005A'                    	ds	3
  2933  005D'                    typesPower1@maxScreens:
  2934                           	opt stack 0
  2935                           
  2936                           ; 1 bytes @ 0x5D
  2937  005D'                    	ds	4
  2938  0061'                    viewMenu@string2_PowerFactor:
  2939                           	opt stack 0
  2940                           
  2941                           ; 7 bytes @ 0x61
  2942  0061'                    	ds	1
  2943  0062'                    harmonicEnergy@maxScreens:
  2944                           	opt stack 0
  2945                           
  2946                           ; 1 bytes @ 0x62
  2947  0062'                    	ds	1
  2948  0063'                    reactiveEnergy@reactive_Reverse2:
  2949                           	opt stack 0
  2950                           
  2951                           ; 15 bytes @ 0x63
  2952  0063'                    	ds	1
  2953  0064'                    fundamentalEnergy@fund_ReverseP2:
  2954                           	opt stack 0
  2955                           
  2956                           ; 15 bytes @ 0x64
  2957  0064'                    	ds	1
  2958  0065'                    activeEnergy@active_Reverse3:
  2959                           	opt stack 0
  2960                           
  2961                           ; 13 bytes @ 0x65
  2962  0065'                    	ds	3
  2963  0068'                    viewMenu@string3_Power2:
  2964                           	opt stack 0
  2965                           
  2966                           ; 6 bytes @ 0x68
  2967  0068'                    	ds	6
  2968  006E'                    viewMenu@string1_PowerFactor:
  2969                           	opt stack 0
  2970                           
  2971                           ; 6 bytes @ 0x6E
  2972  006E'                    	ds	4
  2973  0072'                    activeEnergy@maxScreens:
  2974                           	opt stack 0
  2975  0072'                    reactiveEnergy@reactive_Reverse3:
  2976                           	opt stack 0
  2977                           
  2978                           ; 15 bytes @ 0x72
  2979  0072'                    	ds	1
  2980  0073'                    fundamentalEnergy@fund_ReverseP3:
  2981                           	opt stack 0
  2982                           
  2983                           ; 15 bytes @ 0x73
  2984  0073'                    	ds	1
  2985  0074'                    viewMenu@string1_PhaseAngle:
  2986                           	opt stack 0
  2987                           
  2988                           ; 6 bytes @ 0x74
  2989  0074'                    	ds	6
  2990  007A'                    viewMenu@string2_PhaseAngle:
  2991                           	opt stack 0
  2992                           
  2993                           ; 6 bytes @ 0x7A
  2994  007A'                    	ds	6
  2995  0080'                    viewMenu@string2_RMS:
  2996                           	opt stack 0
  2997                           
  2998                           ; 4 bytes @ 0x80
  2999  0080'                    	ds	1
  3000  0081'                    reactiveEnergy@maxScreens:
  3001                           	opt stack 0
  3002                           
  3003                           ; 1 bytes @ 0x81
  3004  0081'                    	ds	1
  3005  0082'                    fundamentalEnergy@maxScreens:
  3006                           	opt stack 0
  3007                           
  3008                           ; 1 bytes @ 0x82
  3009  0082'                    	ds	2
  3010  0084'                    viewMenu@buttonRight:
  3011                           	opt stack 0
  3012                           
  3013                           ; 2 bytes @ 0x84
  3014  0084'                    	ds	2
  3015  0086'                    viewMenu@buttonCenter:
  3016                           	opt stack 0
  3017                           
  3018                           ; 2 bytes @ 0x86
  3019  0086'                    	ds	2
  3020  0088'                    viewMenu@buttonLeft:
  3021                           	opt stack 0
  3022                           
  3023                           ; 2 bytes @ 0x88
  3024  0088'                    	ds	2
  3025  008A'                    viewMenu@maxScreens:
  3026                           	opt stack 0
  3027                           
  3028                           ; 1 bytes @ 0x8A
  3029  008A'                    	ds	1
  3030                           tblptru	equ	0xFF8
  3031                           postinc0	equ	0xFEE
  3032                           wreg	equ	0xFE8
  3033                           
  3034                           	psect	cstackCOMRAM
  3035  0000'                    __pcstackCOMRAM:
  3036                           	opt stack 0
  3037  0000'                    ?___wmul:
  3038                           	opt stack 0
  3039  0000'                    ?___lldiv:
  3040                           	opt stack 0
  3041  0000'                    ?___llmod:
  3042                           	opt stack 0
  3043  0000'                    GPIO_dataDirectionPIN@pin:
  3044                           	opt stack 0
  3045  0000'                    GPIO_setPIN@pin:
  3046                           	opt stack 0
  3047  0000'                    GPIO_clearPIN@pin:
  3048                           	opt stack 0
  3049  0000'                    SPI_enableClock@cpol:
  3050                           	opt stack 0
  3051  0000'                    SPI_enablePins@serial:
  3052                           	opt stack 0
  3053  0000'                    SPI_write@data:
  3054                           	opt stack 0
  3055  0000'                    SPI_read@dummy:
  3056                           	opt stack 0
  3057  0000'                    ___wmul@multiplier:
  3058                           	opt stack 0
  3059  0000'                    delay@delay:
  3060                           	opt stack 0
  3061  0000'                    LCD_delay@counter:
  3062                           	opt stack 0
  3063  0000'                    ___lldiv@dividend:
  3064                           	opt stack 0
  3065  0000'                    ___llmod@dividend:
  3066                           	opt stack 0
  3067                           
  3068                           ; 4 bytes @ 0x0
  3069  0000'                    	ds	1
  3070  0001'                    ??_GPIO_setPIN:
  3071  0001'                    ??_GPIO_clearPIN:
  3072  0001'                    ?_ATM_read:
  3073                           	opt stack 0
  3074  0001'                    GPIO_dataDirectionPIN@state:
  3075                           	opt stack 0
  3076  0001'                    SPI_enableClock@phase:
  3077                           	opt stack 0
  3078  0001'                    ATM_read@register_add:
  3079                           	opt stack 0
  3080                           
  3081                           ; 2 bytes @ 0x1
  3082  0001'                    	ds	1
  3083  0002'                    ??_GPIO_dataDirectionPIN:
  3084  0002'                    SPI_init@SPI_Config:
  3085                           	opt stack 0
  3086  0002'                    ___wmul@multiplicand:
  3087                           	opt stack 0
  3088                           
  3089                           ; 2 bytes @ 0x2
  3090  0002'                    	ds	1
  3091  0003'                    ??_ATM_read:
  3092  0003'                    GPIO_setPIN@portName:
  3093                           	opt stack 0
  3094  0003'                    GPIO_clearPIN@portName:
  3095                           	opt stack 0
  3096                           
  3097                           ; 1 bytes @ 0x3
  3098  0003'                    	ds	1
  3099  0004'                    ??_SPI_init:
  3100  0004'                    GPIO_dataDirectionPIN@portName:
  3101                           	opt stack 0
  3102  0004'                    ATM_read@data:
  3103                           	opt stack 0
  3104  0004'                    ___wmul@product:
  3105                           	opt stack 0
  3106  0004'                    delay@counter:
  3107                           	opt stack 0
  3108  0004'                    ___lldiv@divisor:
  3109                           	opt stack 0
  3110  0004'                    ___llmod@divisor:
  3111                           	opt stack 0
  3112                           
  3113                           ; 4 bytes @ 0x4
  3114  0004'                    	ds	1
  3115  0005'                    UART_init@baudRate:
  3116                           	opt stack 0
  3117                           
  3118                           ; 2 bytes @ 0x5
  3119  0005'                    	ds	1
  3120  0006'                    LCDNokia_writeByte@data:
  3121                           	opt stack 0
  3122  0006'                    ATM_read@data_From_IC:
  3123                           	opt stack 0
  3124                           
  3125                           ; 6 bytes @ 0x6
  3126  0006'                    	ds	1
  3127  0007'                    ??_UART_init:
  3128  0007'                    LCDNokia_writeByte@DataOrCmd:
  3129                           	opt stack 0
  3130                           
  3131                           ; 1 bytes @ 0x7
  3132  0007'                    	ds	1
  3133  0008'                    ??_LCDNokia_sendChar:
  3134  0008'                    LCDNokia_gotoXY@y:
  3135                           	opt stack 0
  3136  0008'                    ___llmod@counter:
  3137                           	opt stack 0
  3138  0008'                    ___lldiv@quotient:
  3139                           	opt stack 0
  3140                           
  3141                           ; 4 bytes @ 0x8
  3142  0008'                    	ds	1
  3143  0009'                    LCDNokia_gotoXY@x:
  3144                           	opt stack 0
  3145                           
  3146                           ; 1 bytes @ 0x9
  3147  0009'                    	ds	1
  3148  000A'                    LCDNokia_sendChar@character:
  3149                           	opt stack 0
  3150  000A'                    LCDNokia_clear@index:
  3151                           	opt stack 0
  3152                           
  3153                           ; 2 bytes @ 0xA
  3154  000A'                    	ds	1
  3155  000B'                    LCDNokia_sendChar@index:
  3156                           	opt stack 0
  3157                           
  3158                           ; 2 bytes @ 0xB
  3159  000B'                    	ds	1
  3160  000C'                    ___lldiv@counter:
  3161                           	opt stack 0
  3162  000C'                    ATM_read@register_To_IC:
  3163                           	opt stack 0
  3164                           
  3165                           ; 6 bytes @ 0xC
  3166  000C'                    	ds	1
  3167  000D'                    LCDNokia_sendString@characters:
  3168                           	opt stack 0
  3169                           
  3170                           ; 2 bytes @ 0xD
  3171  000D'                    	ds	2
  3172  000F'                    ?_initialLoad:
  3173                           	opt stack 0
  3174  000F'                    ?_generalView:
  3175                           	opt stack 0
  3176  000F'                    ?_viewMenu:
  3177                           	opt stack 0
  3178  000F'                    ?_sendData:
  3179                           	opt stack 0
  3180  000F'                    initialLoad@data:
  3181                           	opt stack 0
  3182  000F'                    generalView@data:
  3183                           	opt stack 0
  3184  000F'                    viewMenu@data:
  3185                           	opt stack 0
  3186  000F'                    sendData@data:
  3187                           	opt stack 0
  3188                           
  3189                           ; 2 bytes @ 0xF
  3190  000F'                    	ds	2
  3191  0011'                    generalView@msgInitial1:
  3192                           	opt stack 0
  3193                           
  3194                           ; 12 bytes @ 0x11
  3195  0011'                    	ds	1
  3196  0012'                    ?_ATM_registers:
  3197                           	opt stack 0
  3198  0012'                    ATM_registers@reg:
  3199                           	opt stack 0
  3200                           
  3201                           ; 1 bytes @ 0x12
  3202  0012'                    	ds	2
  3203  0014'                    ATM_registers@type:
  3204                           	opt stack 0
  3205                           
  3206                           ; 1 bytes @ 0x14
  3207  0014'                    	ds	1
  3208  0015'                    ATM_registers@info:
  3209                           	opt stack 0
  3210                           
  3211                           ; 2 bytes @ 0x15
  3212  0015'                    	ds	2
  3213  0017'                    LCDNokia_printValue@value:
  3214                           	opt stack 0
  3215                           
  3216                           ; 4 bytes @ 0x17
  3217  0017'                    	ds	4
  3218  001B'                    LCDNokia_printValue@zero:
  3219                           	opt stack 0
  3220                           
  3221                           ; 1 bytes @ 0x1B
  3222  001B'                    	ds	1
  3223  001C'                    LCDNokia_printValue@temp_digit:
  3224                           	opt stack 0
  3225                           
  3226                           ; 1 bytes @ 0x1C
  3227  001C'                    	ds	1
  3228  001D'                    LCDNokia_printValue@counter:
  3229                           	opt stack 0
  3230  001D'                    generalView@msgInitial2:
  3231                           	opt stack 0
  3232                           
  3233                           ; 12 bytes @ 0x1D
  3234  001D'                    	ds	1
  3235  001E'                    LCDNokia_printValue@real_Value:
  3236                           	opt stack 0
  3237                           
  3238                           ; 8 bytes @ 0x1E
  3239  001E'                    	ds	8
  3240  0026'                    ?_phPowerFactor:
  3241                           	opt stack 0
  3242  0026'                    ?_exitPowerFactor:
  3243                           	opt stack 0
  3244  0026'                    ?_activeEnergy:
  3245                           	opt stack 0
  3246  0026'                    ?_reactiveEnergy:
  3247                           	opt stack 0
  3248  0026'                    ?_apparentEnergy:
  3249                           	opt stack 0
  3250  0026'                    ?_fundamentalEnergy:
  3251                           	opt stack 0
  3252  0026'                    ?_harmonicEnergy:
  3253                           	opt stack 0
  3254  0026'                    ?_exitEnergy:
  3255                           	opt stack 0
  3256  0026'                    ?_typesPower1:
  3257                           	opt stack 0
  3258  0026'                    ?_phPower1:
  3259                           	opt stack 0
  3260  0026'                    ?_exitPower1:
  3261                           	opt stack 0
  3262  0026'                    ?_fhPower2:
  3263                           	opt stack 0
  3264  0026'                    ?_phPower2:
  3265                           	opt stack 0
  3266  0026'                    ?_exitPower2:
  3267                           	opt stack 0
  3268  0026'                    ?_phRmsVI:
  3269                           	opt stack 0
  3270  0026'                    ?_neutralRmsVI:
  3271                           	opt stack 0
  3272  0026'                    ?_exitRmsVI:
  3273                           	opt stack 0
  3274  0026'                    ?_phPhaseAngle:
  3275                           	opt stack 0
  3276  0026'                    ?_viPhaseAngle:
  3277                           	opt stack 0
  3278  0026'                    ?_THDNPhaseAngle:
  3279                           	opt stack 0
  3280  0026'                    ?_exitPhaseAngle:
  3281                           	opt stack 0
  3282  0026'                    ?_showFrequency:
  3283                           	opt stack 0
  3284  0026'                    ?_exitFrequency:
  3285                           	opt stack 0
  3286  0026'                    ?_showTemperature:
  3287                           	opt stack 0
  3288  0026'                    ?_exitTemperature:
  3289                           	opt stack 0
  3290  0026'                    phPowerFactor@data:
  3291                           	opt stack 0
  3292  0026'                    exitPowerFactor@data:
  3293                           	opt stack 0
  3294  0026'                    activeEnergy@data:
  3295                           	opt stack 0
  3296  0026'                    reactiveEnergy@data:
  3297                           	opt stack 0
  3298  0026'                    apparentEnergy@data:
  3299                           	opt stack 0
  3300  0026'                    fundamentalEnergy@data:
  3301                           	opt stack 0
  3302  0026'                    harmonicEnergy@data:
  3303                           	opt stack 0
  3304  0026'                    exitEnergy@data:
  3305                           	opt stack 0
  3306  0026'                    typesPower1@data:
  3307                           	opt stack 0
  3308  0026'                    phPower1@data:
  3309                           	opt stack 0
  3310  0026'                    exitPower1@data:
  3311                           	opt stack 0
  3312  0026'                    fhPower2@data:
  3313                           	opt stack 0
  3314  0026'                    phPower2@data:
  3315                           	opt stack 0
  3316  0026'                    exitPower2@data:
  3317                           	opt stack 0
  3318  0026'                    phRmsVI@data:
  3319                           	opt stack 0
  3320  0026'                    neutralRmsVI@data:
  3321                           	opt stack 0
  3322  0026'                    exitRmsVI@data:
  3323                           	opt stack 0
  3324  0026'                    phPhaseAngle@data:
  3325                           	opt stack 0
  3326  0026'                    viPhaseAngle@data:
  3327                           	opt stack 0
  3328  0026'                    THDNPhaseAngle@data:
  3329                           	opt stack 0
  3330  0026'                    exitPhaseAngle@data:
  3331                           	opt stack 0
  3332  0026'                    showFrequency@data:
  3333                           	opt stack 0
  3334  0026'                    exitFrequency@data:
  3335                           	opt stack 0
  3336  0026'                    showTemperature@data:
  3337                           	opt stack 0
  3338  0026'                    exitTemperature@data:
  3339                           	opt stack 0
  3340                           
  3341                           ; 3 bytes @ 0x26
  3342  0026'                    	ds	2
  3343  0028'                    phPowerFactor@total_factor_power:
  3344                           	opt stack 0
  3345                           
  3346                           ; 11 bytes @ 0x28
  3347  0028'                    	ds	1
  3348  0029'                    stateEnergy@energyFunctions:
  3349                           	opt stack 0
  3350  0029'                    generalView@buttonRight:
  3351                           	opt stack 0
  3352  0029'                    showFrequency@frequency:
  3353                           	opt stack 0
  3354  0029'                    showTemperature@temperature:
  3355                           	opt stack 0
  3356  0029'                    phPhaseAngle@anglePhase1:
  3357                           	opt stack 0
  3358  0029'                    viPhaseAngle@angle_VoltageP1:
  3359                           	opt stack 0
  3360  0029'                    neutralRmsVI@nline_calculated_RMS:
  3361                           	opt stack 0
  3362  0029'                    phPower2@fundamental_Total_Power:
  3363                           	opt stack 0
  3364  0029'                    phPower1@total_apparent_power:
  3365                           	opt stack 0
  3366                           
  3367                           ; 14 bytes @ 0x29
  3368  0029'                    	ds	5
  3369  002E'                    generalView@buttonLeft:
  3370                           	opt stack 0
  3371                           
  3372                           ; 5 bytes @ 0x2E
  3373  002E'                    	ds	2
  3374  0030'                    stateFrequency@frequencyFunctions:
  3375                           	opt stack 0
  3376  0030'                    stateTemperature@temperatureFunctions:
  3377                           	opt stack 0
  3378                           
  3379                           ; 2 bytes @ 0x30
  3380  0030'                    	ds	2
  3381  0032'                    phPhaseAngle@anglePhase2:
  3382                           	opt stack 0
  3383                           
  3384                           ; 9 bytes @ 0x32
  3385  0032'                    	ds	1
  3386  0033'                    stateMainMenu@mainMenuFunctions:
  3387                           	opt stack 0
  3388  0033'                    phPowerFactor@factor_powerP1:
  3389                           	opt stack 0
  3390  0033'                    viPhaseAngle@angle_VoltageP2:
  3391                           	opt stack 0
  3392                           
  3393                           ; 10 bytes @ 0x33
  3394  0033'                    	ds	2
  3395  0035'                    neutralRmsVI@nline_sampled_RMS:
  3396                           	opt stack 0
  3397                           
  3398                           ; 12 bytes @ 0x35
  3399  0035'                    	ds	1
  3400  0036'                    phPower2@harmonic_Total_Power:
  3401                           	opt stack 0
  3402                           
  3403                           ; 13 bytes @ 0x36
  3404  0036'                    	ds	1
  3405  0037'                    phPower1@total_active_power:
  3406                           	opt stack 0
  3407                           
  3408                           ; 13 bytes @ 0x37
  3409  0037'                    	ds	4
  3410  003B'                    phPowerFactor@factor_powerP2:
  3411                           	opt stack 0
  3412  003B'                    phPhaseAngle@anglePhase3:
  3413                           	opt stack 0
  3414                           
  3415                           ; 9 bytes @ 0x3B
  3416  003B'                    	ds	2
  3417  003D'                    viPhaseAngle@angle_VoltageP3:
  3418                           	opt stack 0
  3419                           
  3420                           ; 10 bytes @ 0x3D
  3421  003D'                    	ds	4
  3422  0041'                    stateRmsVI@rmsVIFunctions:
  3423                           	opt stack 0
  3424                           
  3425                           ; 2 bytes @ 0x41
  3426  0041'                    	ds	2
  3427  0043'                    statePower2@power2Functions:
  3428                           	opt stack 0
  3429  0043'                    phPowerFactor@factor_powerP3:
  3430                           	opt stack 0
  3431                           
  3432                           ; 8 bytes @ 0x43
  3433  0043'                    	ds	1
  3434  0044'                    phPower1@total_reactive_power:
  3435                           	opt stack 0
  3436                           
  3437                           ; 13 bytes @ 0x44
  3438  0044'                    	ds	3
  3439  0047'                    statePhaseAngle@phaseAngleFunctions:
  3440                           	opt stack 0
  3441                           
  3442                           ; 2 bytes @ 0x47
  3443  0047'                    	ds	4
  3444  004B'                    phPowerFactor@maxScreens:
  3445                           	opt stack 0
  3446                           
  3447                           ; 1 bytes @ 0x4B
  3448  004B'                    	ds	1
  3449  004C'                    statePowerFactor@powerFactorFunctions:
  3450                           	opt stack 0
  3451                           
  3452                           ; 2 bytes @ 0x4C
  3453  004C'                    	ds	5
  3454  0051'                    statePower1@power1Functions:
  3455                           	opt stack 0
  3456                           
  3457                           ; 2 bytes @ 0x51
  3458  0051'                    	ds	2
  3459  0053'                    main@mainFunctions:
  3460                           	opt stack 0
  3461                           
  3462                           ; 2 bytes @ 0x53
  3463  0053'                    	ds	2
  3464  0055'                    main@currentState:
  3465                           	opt stack 0
  3466                           
  3467                           ; 1 bytes @ 0x55
  3468  0055'                    	ds	1
  3469                           tblptru	equ	0xFF8
  3470                           postinc0	equ	0xFEE
  3471                           wreg	equ	0xFE8
  3472                           
  3473 ;;
  3474 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3475 ;;
  3476 ;; *************** function _main *****************
  3477 ;; Defined at:
  3478 ;;		line 86 in file "main.c"
  3479 ;; Parameters:    Size  Location     Type
  3480 ;;		None
  3481 ;; Auto vars:     Size  Location     Type
  3482 ;;  mainFunction    2   83[COMRAM] PTR FTN()enum E3357
  3483 ;;		 -> stateTemperature(1), stateFrequency(1), statePhaseAngle(1), statePowerFactor(1), 
  3484 ;;		 -> stateRmsVI(1), statePower2(1), statePower1(1), stateEnergy(1), 
  3485 ;;		 -> stateMainMenu(1), 
  3486 ;;  currentState    1   85[COMRAM] enum E3357
  3487 ;; Return value:  Size  Location     Type
  3488 ;;                  1    wreg      void 
  3489 ;; Registers used:
  3490 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3491 ;; Tracked objects:
  3492 ;;		On entry : 0/0
  3493 ;;		On exit  : 0/0
  3494 ;;		Unchanged: 0/0
  3495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3496 ;;      Params:         0       0       0       0
  3497 ;;      Locals:         3       0       0       0
  3498 ;;      Temps:          0       0       0       0
  3499 ;;      Totals:         3       0       0       0
  3500 ;;Total ram usage:        3 bytes
  3501 ;; Hardware stack levels required when called:    6
  3502 ;; This function calls:
  3503 ;;		_ButtonInt_config
  3504 ;;		_LCDNokia_clear
  3505 ;;		_LCDNokia_init
  3506 ;;		_SPI_init
  3507 ;;		_stateEnergy
  3508 ;;		_stateFrequency
  3509 ;;		_stateMainMenu
  3510 ;;		_statePhaseAngle
  3511 ;;		_statePower1
  3512 ;;		_statePower2
  3513 ;;		_statePowerFactor
  3514 ;;		_stateRmsVI
  3515 ;;		_stateTemperature
  3516 ;; This function is called by:
  3517 ;;		Startup code after reset
  3518 ;; This function uses a non-reentrant model
  3519 ;;
  3520                           
  3521                           	psect	text0
  3522  0000'                    __ptext0:
  3523                           	opt stack 0
  3524  0000'                    _main:
  3525                           	opt stack 25
  3526                           
  3527                           ;main.c: 89: States_MenuType currentState = MAIN_MENU;
  3528                           
  3529                           ;incstack = 0
  3530  0000' 0E00               	movlw	0
  3531  0002' 6E55'              	movwf	main@currentState,c
  3532                           
  3533                           ;main.c: 90: States_MenuType(*mainFunctions)(void);
  3534                           ;main.c: 95: SPI_init(&SPI_Config);
  3535  0004' 0E00'              	movlw	low _SPI_Config
  3536  0006' 6E02'              	movwf	SPI_init@SPI_Config,c
  3537  0008' 0E00'              	movlw	high _SPI_Config
  3538  000A' 6E03'              	movwf	SPI_init@SPI_Config+1,c
  3539  000C' EC00' F000'        	call	_SPI_init	;wreg free
  3540                           
  3541                           ;main.c: 96: LCDNokia_init();
  3542  0010' EC00' F000'        	call	_LCDNokia_init	;wreg free
  3543                           
  3544                           ;main.c: 97: LCDNokia_clear();
  3545  0014' EC00' F000'        	call	_LCDNokia_clear	;wreg free
  3546                           
  3547                           ;main.c: 98: ButtonInt_config();
  3548  0018' EC00' F000'        	call	_ButtonInt_config	;wreg free
  3549  001C'                    
  3550                           ;main.c: 101: {
  3551                           ;main.c: 103: mainFunctions = StateProgram[currentState].stateFunction;
  3552  001C' 5055'              	movf	main@currentState,w,c
  3553  001E' 0D02               	mullw	2
  3554  0020' 0E00'              	movlw	low _StateProgram
  3555  0022' 24F3               	addwf	prodl,w,c
  3556  0024' 6EF6               	movwf	tblptrl,c
  3557  0026' 0E00'              	movlw	high _StateProgram
  3558  0028' 20F4               	addwfc	prodh,w,c
  3559  002A' 6EF7               	movwf	tblptrh,c
  3560  002C'                    	if	0	;There are less than 3 active tblptr bytes
  3561  002C'                    	endif
  3562  002C' 0009               	tblrd		*+
  3563  002E' CFF5 F053'         	movff	tablat,main@mainFunctions
  3564  0032' 000A               	tblrd		*-
  3565  0034' CFF5 F054'         	movff	tablat,main@mainFunctions+1
  3566                           
  3567                           ;main.c: 104: currentState = mainFunctions();
  3568  0038' D801               	call	u5058
  3569  003A' D00A               	goto	u5059
  3570  003C'                    u5058:
  3571  003C' 0005               	push	
  3572  003E' 6EFA               	movwf	pclath,c
  3573  0040' 5053'              	movf	main@mainFunctions,w,c
  3574  0042' 6EFD               	movwf	tosl,c
  3575  0044' 5054'              	movf	main@mainFunctions+1,w,c
  3576  0046' 6EFE               	movwf	tosh,c
  3577  0048' 50F8               	movf	tblptru,w,c
  3578  004A' 6EFF               	movwf	tosu,c
  3579  004C' 50FA               	movf	pclath,w,c
  3580  004E' 0012               	return		;indir
  3581  0050'                    u5059:
  3582  0050' 6E55'              	movwf	main@currentState,c
  3583                           
  3584                           ;main.c: 105: }
  3585  0052' D7E4               	goto	l35
  3586  0054'                    __end_of_main:
  3587                           	opt stack 0
  3588                           tosu	equ	0xFFF
  3589                           tosh	equ	0xFFE
  3590                           tosl	equ	0xFFD
  3591                           pclath	equ	0xFFA
  3592                           tblptru	equ	0xFF8
  3593                           tblptrh	equ	0xFF7
  3594                           tblptrl	equ	0xFF6
  3595                           tablat	equ	0xFF5
  3596                           prodh	equ	0xFF4
  3597                           prodl	equ	0xFF3
  3598                           postinc0	equ	0xFEE
  3599                           wreg	equ	0xFE8
  3600                           
  3601 ;; *************** function _stateFrequency *****************
  3602 ;; Defined at:
  3603 ;;		line 198 in file "States.c"
  3604 ;; Parameters:    Size  Location     Type
  3605 ;;		None
  3606 ;; Auto vars:     Size  Location     Type
  3607 ;;  frequencyFun    2   48[COMRAM] PTR FTN(struct .,)struct
  3608 ;;		 -> exitFrequency(3), showFrequency(3), 
  3609 ;; Return value:  Size  Location     Type
  3610 ;;                  1    wreg      enum E3357
  3611 ;; Registers used:
  3612 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3613 ;; Tracked objects:
  3614 ;;		On entry : 0/0
  3615 ;;		On exit  : 0/0
  3616 ;;		Unchanged: 0/0
  3617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3618 ;;      Params:         0       0       0       0
  3619 ;;      Locals:         2       0       0       0
  3620 ;;      Temps:          0       0       0       0
  3621 ;;      Totals:         2       0       0       0
  3622 ;;Total ram usage:        2 bytes
  3623 ;; Hardware stack levels used:    1
  3624 ;; Hardware stack levels required when called:    5
  3625 ;; This function calls:
  3626 ;;		_exitFrequency
  3627 ;;		_showFrequency
  3628 ;; This function is called by:
  3629 ;;		_main
  3630 ;; This function uses a non-reentrant model
  3631 ;;
  3632                           
  3633                           	psect	text1
  3634  0000'                    __ptext1:
  3635                           	opt stack 0
  3636  0000'                    _stateFrequency:
  3637                           	opt stack 25
  3638                           
  3639                           ;States.c: 201: static PhaseStateFrequency_Type phase = SHOW_FREQUENCY;
  3640                           ;States.c: 202: static PhaseFrequency_Type phaseFrequency;
  3641                           ;States.c: 203: PhaseFrequency_Type(*frequencyFunctions)(PhaseFrequency_Type);
  3642                           ;States.c: 204: phaseFrequency.stateMain = FREQUENCY;
  3643                           
  3644                           ;incstack = 0
  3645  0000' 0E07               	movlw	7
  3646  0002' 0101               	movlb	1	; () banked
  3647  0004' 6F00'              	movwf	(stateFrequency@phaseFrequency+2)& (0+255),b
  3648                           
  3649                           ; BSR set to: 1
  3650                           ;States.c: 207: frequencyFunctions = phasesFrequency[phase].PhaseFrequency;
  3651  0006' 0100               	movlb	0	; () banked
  3652  0008' 5100'              	movf	stateFrequency@phase& (0+255),w,b
  3653  000A' 0D02               	mullw	2
  3654  000C' 0E00'              	movlw	low _phasesFrequency
  3655  000E' 24F3               	addwf	prodl,w,c
  3656  0010' 6EF6               	movwf	tblptrl,c
  3657  0012' 0E00'              	movlw	high _phasesFrequency
  3658  0014' 20F4               	addwfc	prodh,w,c
  3659  0016' 6EF7               	movwf	tblptrh,c
  3660  0018'                    	if	0	;There are less than 3 active tblptr bytes
  3661  0018'                    	endif
  3662  0018' 0009               	tblrd		*+
  3663  001A' CFF5 F030'         	movff	tablat,stateFrequency@frequencyFunctions
  3664  001E' 000A               	tblrd		*-
  3665  0020' CFF5 F031'         	movff	tablat,stateFrequency@frequencyFunctions+1
  3666                           
  3667                           ; BSR set to: 0
  3668                           ;States.c: 208: phaseFrequency = frequencyFunctions(phaseFrequency);
  3669  0024' C0D4' F026'        	movff	stateFrequency@phaseFrequency,exitFrequency@data
  3670  0028' C0D5' F027'        	movff	stateFrequency@phaseFrequency+1,exitFrequency@data+1
  3671  002C' C0D6' F028'        	movff	stateFrequency@phaseFrequency+2,exitFrequency@data+2
  3672  0030' D801               	call	u4728
  3673  0032' D00A               	goto	u4729
  3674  0034'                    u4728:
  3675  0034' 0005               	push	
  3676  0036' 6EFA               	movwf	pclath,c
  3677  0038' 5030'              	movf	stateFrequency@frequencyFunctions,w,c
  3678  003A' 6EFD               	movwf	tosl,c
  3679  003C' 5031'              	movf	stateFrequency@frequencyFunctions+1,w,c
  3680  003E' 6EFE               	movwf	tosh,c
  3681  0040' 50F8               	movf	tblptru,w,c
  3682  0042' 6EFF               	movwf	tosu,c
  3683  0044' 50FA               	movf	pclath,w,c
  3684  0046' 0012               	return		;indir
  3685  0048'                    u4729:
  3686  0048' C026' F0D4'        	movff	?_exitFrequency,stateFrequency@phaseFrequency
  3687  004C' C027' F0D5'        	movff	?_exitFrequency+1,stateFrequency@phaseFrequency+1
  3688  0050' C028' F0D6'        	movff	?_exitFrequency+2,stateFrequency@phaseFrequency+2
  3689                           
  3690                           ;States.c: 211: phase = phaseFrequency.phaseState;
  3691  0054' C0D5' F00C'        	movff	stateFrequency@phaseFrequency+1,stateFrequency@phase
  3692                           
  3693                           ;States.c: 212: return (phaseFrequency.stateMain);
  3694  0058' 0101               	movlb	1	; () banked
  3695  005A' 5100'              	movf	(stateFrequency@phaseFrequency+2)& (0+255),w,b
  3696  005C' 0012               	return	
  3697  005E'                    __end_of_stateFrequency:
  3698                           	opt stack 0
  3699                           tosu	equ	0xFFF
  3700                           tosh	equ	0xFFE
  3701                           tosl	equ	0xFFD
  3702                           pclath	equ	0xFFA
  3703                           tblptru	equ	0xFF8
  3704                           tblptrh	equ	0xFF7
  3705                           tblptrl	equ	0xFF6
  3706                           tablat	equ	0xFF5
  3707                           prodh	equ	0xFF4
  3708                           prodl	equ	0xFF3
  3709                           postinc0	equ	0xFEE
  3710                           wreg	equ	0xFE8
  3711                           
  3712 ;; *************** function _statePhaseAngle *****************
  3713 ;; Defined at:
  3714 ;;		line 181 in file "States.c"
  3715 ;; Parameters:    Size  Location     Type
  3716 ;;		None
  3717 ;; Auto vars:     Size  Location     Type
  3718 ;;  phaseAngleFu    2   71[COMRAM] PTR FTN(struct .,)struct
  3719 ;;		 -> exitPhaseAngle(3), THDNPhaseAngle(3), viPhaseAngle(3), phPhaseAngle(3), 
  3720 ;; Return value:  Size  Location     Type
  3721 ;;                  1    wreg      enum E3357
  3722 ;; Registers used:
  3723 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3724 ;; Tracked objects:
  3725 ;;		On entry : 0/0
  3726 ;;		On exit  : 0/0
  3727 ;;		Unchanged: 0/0
  3728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3729 ;;      Params:         0       0       0       0
  3730 ;;      Locals:         2       0       0       0
  3731 ;;      Temps:          0       0       0       0
  3732 ;;      Totals:         2       0       0       0
  3733 ;;Total ram usage:        2 bytes
  3734 ;; Hardware stack levels used:    1
  3735 ;; Hardware stack levels required when called:    5
  3736 ;; This function calls:
  3737 ;;		_THDNPhaseAngle
  3738 ;;		_exitPhaseAngle
  3739 ;;		_phPhaseAngle
  3740 ;;		_viPhaseAngle
  3741 ;; This function is called by:
  3742 ;;		_main
  3743 ;; This function uses a non-reentrant model
  3744 ;;
  3745                           
  3746                           	psect	text2
  3747  0000'                    __ptext2:
  3748                           	opt stack 0
  3749  0000'                    _statePhaseAngle:
  3750                           	opt stack 25
  3751                           
  3752                           ;States.c: 184: static PhaseStatePhaseAngle_Type phase = PHASES_PA;
  3753                           ;States.c: 185: static PhasePhaseAngle_Type phasePhaseAngle;
  3754                           ;States.c: 186: PhasePhaseAngle_Type(*phaseAngleFunctions)(PhasePhaseAngle_Type);
  3755                           ;States.c: 187: phasePhaseAngle.stateMain = PHASE_ANGLE;
  3756                           
  3757                           ; BSR set to: 1
  3758                           ;incstack = 0
  3759  0000' 0E06               	movlw	6
  3760  0002' 0101               	movlb	1	; () banked
  3761  0004' 6F00'              	movwf	(statePhaseAngle@phasePhaseAngle+2)& (0+255),b
  3762                           
  3763                           ; BSR set to: 1
  3764                           ;States.c: 190: phaseAngleFunctions = phasesPhaseAngle[phase].PhasePhaseAngle;
  3765  0006' 0100               	movlb	0	; () banked
  3766  0008' 5100'              	movf	statePhaseAngle@phase& (0+255),w,b
  3767  000A' 0D02               	mullw	2
  3768  000C' 0E00'              	movlw	low _phasesPhaseAngle
  3769  000E' 24F3               	addwf	prodl,w,c
  3770  0010' 6EF6               	movwf	tblptrl,c
  3771  0012' 0E00'              	movlw	high _phasesPhaseAngle
  3772  0014' 20F4               	addwfc	prodh,w,c
  3773  0016' 6EF7               	movwf	tblptrh,c
  3774  0018'                    	if	0	;There are less than 3 active tblptr bytes
  3775  0018'                    	endif
  3776  0018' 0009               	tblrd		*+
  3777  001A' CFF5 F047'         	movff	tablat,statePhaseAngle@phaseAngleFunctions
  3778  001E' 000A               	tblrd		*-
  3779  0020' CFF5 F048'         	movff	tablat,statePhaseAngle@phaseAngleFunctions+1
  3780                           
  3781                           ; BSR set to: 0
  3782                           ;States.c: 191: phasePhaseAngle = phaseAngleFunctions(phasePhaseAngle);
  3783  0024' C0D7' F026'        	movff	statePhaseAngle@phasePhaseAngle,exitPhaseAngle@data
  3784  0028' C0D8' F027'        	movff	statePhaseAngle@phasePhaseAngle+1,exitPhaseAngle@data+1
  3785  002C' C0D9' F028'        	movff	statePhaseAngle@phasePhaseAngle+2,exitPhaseAngle@data+2
  3786  0030' D801               	call	u4718
  3787  0032' D00A               	goto	u4719
  3788  0034'                    u4718:
  3789  0034' 0005               	push	
  3790  0036' 6EFA               	movwf	pclath,c
  3791  0038' 5047'              	movf	statePhaseAngle@phaseAngleFunctions,w,c
  3792  003A' 6EFD               	movwf	tosl,c
  3793  003C' 5048'              	movf	statePhaseAngle@phaseAngleFunctions+1,w,c
  3794  003E' 6EFE               	movwf	tosh,c
  3795  0040' 50F8               	movf	tblptru,w,c
  3796  0042' 6EFF               	movwf	tosu,c
  3797  0044' 50FA               	movf	pclath,w,c
  3798  0046' 0012               	return		;indir
  3799  0048'                    u4719:
  3800  0048' C026' F0D7'        	movff	?_exitPhaseAngle,statePhaseAngle@phasePhaseAngle
  3801  004C' C027' F0D8'        	movff	?_exitPhaseAngle+1,statePhaseAngle@phasePhaseAngle+1
  3802  0050' C028' F0D9'        	movff	?_exitPhaseAngle+2,statePhaseAngle@phasePhaseAngle+2
  3803                           
  3804                           ;States.c: 194: phase = phasePhaseAngle.phaseState;
  3805  0054' C0D8' F00D'        	movff	statePhaseAngle@phasePhaseAngle+1,statePhaseAngle@phase
  3806                           
  3807                           ;States.c: 195: return (phasePhaseAngle.stateMain);
  3808  0058' 0101               	movlb	1	; () banked
  3809  005A' 5100'              	movf	(statePhaseAngle@phasePhaseAngle+2)& (0+255),w,b
  3810  005C' 0012               	return	
  3811  005E'                    __end_of_statePhaseAngle:
  3812                           	opt stack 0
  3813                           tosu	equ	0xFFF
  3814                           tosh	equ	0xFFE
  3815                           tosl	equ	0xFFD
  3816                           pclath	equ	0xFFA
  3817                           tblptru	equ	0xFF8
  3818                           tblptrh	equ	0xFF7
  3819                           tblptrl	equ	0xFF6
  3820                           tablat	equ	0xFF5
  3821                           prodh	equ	0xFF4
  3822                           prodl	equ	0xFF3
  3823                           postinc0	equ	0xFEE
  3824                           wreg	equ	0xFE8
  3825                           
  3826 ;; *************** function _statePowerFactor *****************
  3827 ;; Defined at:
  3828 ;;		line 164 in file "States.c"
  3829 ;; Parameters:    Size  Location     Type
  3830 ;;		None
  3831 ;; Auto vars:     Size  Location     Type
  3832 ;;  powerFactorF    2   76[COMRAM] PTR FTN(struct .,)struct
  3833 ;;		 -> exitPowerFactor(2), phPowerFactor(2), 
  3834 ;; Return value:  Size  Location     Type
  3835 ;;                  1    wreg      enum E3357
  3836 ;; Registers used:
  3837 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3838 ;; Tracked objects:
  3839 ;;		On entry : 0/0
  3840 ;;		On exit  : 0/0
  3841 ;;		Unchanged: 0/0
  3842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3843 ;;      Params:         0       0       0       0
  3844 ;;      Locals:         2       0       0       0
  3845 ;;      Temps:          0       0       0       0
  3846 ;;      Totals:         2       0       0       0
  3847 ;;Total ram usage:        2 bytes
  3848 ;; Hardware stack levels used:    1
  3849 ;; Hardware stack levels required when called:    5
  3850 ;; This function calls:
  3851 ;;		_exitPowerFactor
  3852 ;;		_phPowerFactor
  3853 ;; This function is called by:
  3854 ;;		_main
  3855 ;; This function uses a non-reentrant model
  3856 ;;
  3857                           
  3858                           	psect	text3
  3859  0000'                    __ptext3:
  3860                           	opt stack 0
  3861  0000'                    _statePowerFactor:
  3862                           	opt stack 25
  3863                           
  3864                           ;States.c: 167: static PhaseStatePowerFactor_Type phase = PHASES_PF;
  3865                           ;States.c: 168: static PhasePowerFactor_Type phasePowerFactor;
  3866                           ;States.c: 169: PhasePowerFactor_Type(*powerFactorFunctions)(PhasePowerFactor_Type);
  3867                           ;States.c: 170: phasePowerFactor.stateMain = POWER_FACTOR;
  3868                           
  3869                           ; BSR set to: 1
  3870                           ;incstack = 0
  3871  0000' 0E05               	movlw	5
  3872  0002' 0101               	movlb	1	; () banked
  3873  0004' 6F00'              	movwf	(statePowerFactor@phasePowerFactor+1)& (0+255),b
  3874                           
  3875                           ; BSR set to: 1
  3876                           ;States.c: 173: powerFactorFunctions = phasesPowerFactor[phase].PhasePowerFactor;
  3877  0006' 0100               	movlb	0	; () banked
  3878  0008' 5100'              	movf	statePowerFactor@phase& (0+255),w,b
  3879  000A' 0D02               	mullw	2
  3880  000C' 0E00'              	movlw	low _phasesPowerFactor
  3881  000E' 24F3               	addwf	prodl,w,c
  3882  0010' 6EF6               	movwf	tblptrl,c
  3883  0012' 0E00'              	movlw	high _phasesPowerFactor
  3884  0014' 20F4               	addwfc	prodh,w,c
  3885  0016' 6EF7               	movwf	tblptrh,c
  3886  0018'                    	if	0	;There are less than 3 active tblptr bytes
  3887  0018'                    	endif
  3888  0018' 0009               	tblrd		*+
  3889  001A' CFF5 F04C'         	movff	tablat,statePowerFactor@powerFactorFunctions
  3890  001E' 000A               	tblrd		*-
  3891  0020' CFF5 F04D'         	movff	tablat,statePowerFactor@powerFactorFunctions+1
  3892                           
  3893                           ; BSR set to: 0
  3894                           ;States.c: 174: phasePowerFactor = powerFactorFunctions(phasePowerFactor);
  3895  0024' C0F0' F026'        	movff	statePowerFactor@phasePowerFactor,exitPowerFactor@data
  3896  0028' C0F1' F027'        	movff	statePowerFactor@phasePowerFactor+1,exitPowerFactor@data+1
  3897  002C' D801               	call	u4708
  3898  002E' D00A               	goto	u4709
  3899  0030'                    u4708:
  3900  0030' 0005               	push	
  3901  0032' 6EFA               	movwf	pclath,c
  3902  0034' 504C'              	movf	statePowerFactor@powerFactorFunctions,w,c
  3903  0036' 6EFD               	movwf	tosl,c
  3904  0038' 504D'              	movf	statePowerFactor@powerFactorFunctions+1,w,c
  3905  003A' 6EFE               	movwf	tosh,c
  3906  003C' 50F8               	movf	tblptru,w,c
  3907  003E' 6EFF               	movwf	tosu,c
  3908  0040' 50FA               	movf	pclath,w,c
  3909  0042' 0012               	return		;indir
  3910  0044'                    u4709:
  3911  0044' C026' F0F0'        	movff	?_exitPowerFactor,statePowerFactor@phasePowerFactor
  3912  0048' C027' F0F1'        	movff	?_exitPowerFactor+1,statePowerFactor@phasePowerFactor+1
  3913                           
  3914                           ;States.c: 177: phase = phasePowerFactor.phaseState;
  3915  004C' C0F0' F00E'        	movff	statePowerFactor@phasePowerFactor,statePowerFactor@phase
  3916                           
  3917                           ;States.c: 178: return (phasePowerFactor.stateMain);
  3918  0050' 0101               	movlb	1	; () banked
  3919  0052' 5100'              	movf	(statePowerFactor@phasePowerFactor+1)& (0+255),w,b
  3920  0054' 0012               	return	
  3921  0056'                    __end_of_statePowerFactor:
  3922                           	opt stack 0
  3923                           tosu	equ	0xFFF
  3924                           tosh	equ	0xFFE
  3925                           tosl	equ	0xFFD
  3926                           pclath	equ	0xFFA
  3927                           tblptru	equ	0xFF8
  3928                           tblptrh	equ	0xFF7
  3929                           tblptrl	equ	0xFF6
  3930                           tablat	equ	0xFF5
  3931                           prodh	equ	0xFF4
  3932                           prodl	equ	0xFF3
  3933                           postinc0	equ	0xFEE
  3934                           wreg	equ	0xFE8
  3935                           
  3936 ;; *************** function _stateRmsVI *****************
  3937 ;; Defined at:
  3938 ;;		line 147 in file "States.c"
  3939 ;; Parameters:    Size  Location     Type
  3940 ;;		None
  3941 ;; Auto vars:     Size  Location     Type
  3942 ;;  rmsVIFunctio    2   65[COMRAM] PTR FTN(struct .,)struct
  3943 ;;		 -> exitRmsVI(3), neutralRmsVI(3), phRmsVI(3), 
  3944 ;; Return value:  Size  Location     Type
  3945 ;;                  1    wreg      enum E3357
  3946 ;; Registers used:
  3947 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3948 ;; Tracked objects:
  3949 ;;		On entry : 0/0
  3950 ;;		On exit  : 0/0
  3951 ;;		Unchanged: 0/0
  3952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3953 ;;      Params:         0       0       0       0
  3954 ;;      Locals:         2       0       0       0
  3955 ;;      Temps:          0       0       0       0
  3956 ;;      Totals:         2       0       0       0
  3957 ;;Total ram usage:        2 bytes
  3958 ;; Hardware stack levels used:    1
  3959 ;; Hardware stack levels required when called:    5
  3960 ;; This function calls:
  3961 ;;		_exitRmsVI
  3962 ;;		_neutralRmsVI
  3963 ;;		_phRmsVI
  3964 ;; This function is called by:
  3965 ;;		_main
  3966 ;; This function uses a non-reentrant model
  3967 ;;
  3968                           
  3969                           	psect	text4
  3970  0000'                    __ptext4:
  3971                           	opt stack 0
  3972  0000'                    _stateRmsVI:
  3973                           	opt stack 25
  3974                           
  3975                           ;States.c: 150: static PhaseStateRmsVI_Type phase = PHASES_RMSVI;
  3976                           ;States.c: 151: static PhaseRmsVI_Type phaseRmsVI;
  3977                           ;States.c: 152: PhaseRmsVI_Type(*rmsVIFunctions)(PhaseRmsVI_Type);
  3978                           ;States.c: 153: phaseRmsVI.stateMain = RMS_VI;
  3979                           
  3980                           ; BSR set to: 1
  3981                           ;incstack = 0
  3982  0000' 0E04               	movlw	4
  3983  0002' 0101               	movlb	1	; () banked
  3984  0004' 6F00'              	movwf	(stateRmsVI@phaseRmsVI+2)& (0+255),b
  3985                           
  3986                           ; BSR set to: 1
  3987                           ;States.c: 156: rmsVIFunctions = phasesRmsVI[phase].PhaseRmsVI;
  3988  0006' 0100               	movlb	0	; () banked
  3989  0008' 5100'              	movf	stateRmsVI@phase& (0+255),w,b
  3990  000A' 0D02               	mullw	2
  3991  000C' 0E00'              	movlw	low _phasesRmsVI
  3992  000E' 24F3               	addwf	prodl,w,c
  3993  0010' 6EF6               	movwf	tblptrl,c
  3994  0012' 0E00'              	movlw	high _phasesRmsVI
  3995  0014' 20F4               	addwfc	prodh,w,c
  3996  0016' 6EF7               	movwf	tblptrh,c
  3997  0018'                    	if	0	;There are less than 3 active tblptr bytes
  3998  0018'                    	endif
  3999  0018' 0009               	tblrd		*+
  4000  001A' CFF5 F041'         	movff	tablat,stateRmsVI@rmsVIFunctions
  4001  001E' 000A               	tblrd		*-
  4002  0020' CFF5 F042'         	movff	tablat,stateRmsVI@rmsVIFunctions+1
  4003                           
  4004                           ; BSR set to: 0
  4005                           ;States.c: 157: phaseRmsVI = rmsVIFunctions(phaseRmsVI);
  4006  0024' C0DA' F026'        	movff	stateRmsVI@phaseRmsVI,exitRmsVI@data
  4007  0028' C0DB' F027'        	movff	stateRmsVI@phaseRmsVI+1,exitRmsVI@data+1
  4008  002C' C0DC' F028'        	movff	stateRmsVI@phaseRmsVI+2,exitRmsVI@data+2
  4009  0030' D801               	call	u4698
  4010  0032' D00A               	goto	u4699
  4011  0034'                    u4698:
  4012  0034' 0005               	push	
  4013  0036' 6EFA               	movwf	pclath,c
  4014  0038' 5041'              	movf	stateRmsVI@rmsVIFunctions,w,c
  4015  003A' 6EFD               	movwf	tosl,c
  4016  003C' 5042'              	movf	stateRmsVI@rmsVIFunctions+1,w,c
  4017  003E' 6EFE               	movwf	tosh,c
  4018  0040' 50F8               	movf	tblptru,w,c
  4019  0042' 6EFF               	movwf	tosu,c
  4020  0044' 50FA               	movf	pclath,w,c
  4021  0046' 0012               	return		;indir
  4022  0048'                    u4699:
  4023  0048' C026' F0DA'        	movff	?_exitRmsVI,stateRmsVI@phaseRmsVI
  4024  004C' C027' F0DB'        	movff	?_exitRmsVI+1,stateRmsVI@phaseRmsVI+1
  4025  0050' C028' F0DC'        	movff	?_exitRmsVI+2,stateRmsVI@phaseRmsVI+2
  4026                           
  4027                           ;States.c: 160: phase = phaseRmsVI.phaseState;
  4028  0054' C0DB' F00F'        	movff	stateRmsVI@phaseRmsVI+1,stateRmsVI@phase
  4029                           
  4030                           ;States.c: 161: return (phaseRmsVI.stateMain);
  4031  0058' 0101               	movlb	1	; () banked
  4032  005A' 5100'              	movf	(stateRmsVI@phaseRmsVI+2)& (0+255),w,b
  4033  005C' 0012               	return	
  4034  005E'                    __end_of_stateRmsVI:
  4035                           	opt stack 0
  4036                           tosu	equ	0xFFF
  4037                           tosh	equ	0xFFE
  4038                           tosl	equ	0xFFD
  4039                           pclath	equ	0xFFA
  4040                           tblptru	equ	0xFF8
  4041                           tblptrh	equ	0xFF7
  4042                           tblptrl	equ	0xFF6
  4043                           tablat	equ	0xFF5
  4044                           prodh	equ	0xFF4
  4045                           prodl	equ	0xFF3
  4046                           postinc0	equ	0xFEE
  4047                           wreg	equ	0xFE8
  4048                           
  4049 ;; *************** function _statePower2 *****************
  4050 ;; Defined at:
  4051 ;;		line 130 in file "States.c"
  4052 ;; Parameters:    Size  Location     Type
  4053 ;;		None
  4054 ;; Auto vars:     Size  Location     Type
  4055 ;;  power2Functi    2   67[COMRAM] PTR FTN(struct .,)struct
  4056 ;;		 -> exitPower2(3), phPower2(3), fhPower2(3), 
  4057 ;; Return value:  Size  Location     Type
  4058 ;;                  1    wreg      enum E3357
  4059 ;; Registers used:
  4060 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4061 ;; Tracked objects:
  4062 ;;		On entry : 0/0
  4063 ;;		On exit  : 0/0
  4064 ;;		Unchanged: 0/0
  4065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4066 ;;      Params:         0       0       0       0
  4067 ;;      Locals:         2       0       0       0
  4068 ;;      Temps:          0       0       0       0
  4069 ;;      Totals:         2       0       0       0
  4070 ;;Total ram usage:        2 bytes
  4071 ;; Hardware stack levels used:    1
  4072 ;; Hardware stack levels required when called:    5
  4073 ;; This function calls:
  4074 ;;		_exitPower2
  4075 ;;		_fhPower2
  4076 ;;		_phPower2
  4077 ;; This function is called by:
  4078 ;;		_main
  4079 ;; This function uses a non-reentrant model
  4080 ;;
  4081                           
  4082                           	psect	text5
  4083  0000'                    __ptext5:
  4084                           	opt stack 0
  4085  0000'                    _statePower2:
  4086                           	opt stack 25
  4087                           
  4088                           ;States.c: 133: static PhaseStatePower2_Type phase = FH_POWER2;
  4089                           ;States.c: 134: static PhasePower2_Type phasePower2;
  4090                           ;States.c: 135: PhasePower2_Type(*power2Functions)(PhasePower2_Type);
  4091                           ;States.c: 136: phasePower2.stateMain = POWER_2;
  4092                           
  4093                           ; BSR set to: 1
  4094                           ;incstack = 0
  4095  0000' 0E03               	movlw	3
  4096  0002' 0101               	movlb	1	; () banked
  4097  0004' 6F00'              	movwf	(statePower2@phasePower2+2)& (0+255),b
  4098                           
  4099                           ; BSR set to: 1
  4100                           ;States.c: 139: power2Functions = phasesPower2[phase].PhasePower2;
  4101  0006' 0100               	movlb	0	; () banked
  4102  0008' 5100'              	movf	statePower2@phase& (0+255),w,b
  4103  000A' 0D02               	mullw	2
  4104  000C' 0E00'              	movlw	low _phasesPower2
  4105  000E' 24F3               	addwf	prodl,w,c
  4106  0010' 6EF6               	movwf	tblptrl,c
  4107  0012' 0E00'              	movlw	high _phasesPower2
  4108  0014' 20F4               	addwfc	prodh,w,c
  4109  0016' 6EF7               	movwf	tblptrh,c
  4110  0018'                    	if	0	;There are less than 3 active tblptr bytes
  4111  0018'                    	endif
  4112  0018' 0009               	tblrd		*+
  4113  001A' CFF5 F043'         	movff	tablat,statePower2@power2Functions
  4114  001E' 000A               	tblrd		*-
  4115  0020' CFF5 F044'         	movff	tablat,statePower2@power2Functions+1
  4116                           
  4117                           ; BSR set to: 0
  4118                           ;States.c: 140: phasePower2 = power2Functions(phasePower2);
  4119  0024' C0DD' F026'        	movff	statePower2@phasePower2,exitPower2@data
  4120  0028' C0DE' F027'        	movff	statePower2@phasePower2+1,exitPower2@data+1
  4121  002C' C0DF' F028'        	movff	statePower2@phasePower2+2,exitPower2@data+2
  4122  0030' D801               	call	u4688
  4123  0032' D00A               	goto	u4689
  4124  0034'                    u4688:
  4125  0034' 0005               	push	
  4126  0036' 6EFA               	movwf	pclath,c
  4127  0038' 5043'              	movf	statePower2@power2Functions,w,c
  4128  003A' 6EFD               	movwf	tosl,c
  4129  003C' 5044'              	movf	statePower2@power2Functions+1,w,c
  4130  003E' 6EFE               	movwf	tosh,c
  4131  0040' 50F8               	movf	tblptru,w,c
  4132  0042' 6EFF               	movwf	tosu,c
  4133  0044' 50FA               	movf	pclath,w,c
  4134  0046' 0012               	return		;indir
  4135  0048'                    u4689:
  4136  0048' C026' F0DD'        	movff	?_exitPower2,statePower2@phasePower2
  4137  004C' C027' F0DE'        	movff	?_exitPower2+1,statePower2@phasePower2+1
  4138  0050' C028' F0DF'        	movff	?_exitPower2+2,statePower2@phasePower2+2
  4139                           
  4140                           ;States.c: 143: phase = phasePower2.phaseState;
  4141  0054' C0DE' F010'        	movff	statePower2@phasePower2+1,statePower2@phase
  4142                           
  4143                           ;States.c: 144: return (phasePower2.stateMain);
  4144  0058' 0101               	movlb	1	; () banked
  4145  005A' 5100'              	movf	(statePower2@phasePower2+2)& (0+255),w,b
  4146  005C' 0012               	return	
  4147  005E'                    __end_of_statePower2:
  4148                           	opt stack 0
  4149                           tosu	equ	0xFFF
  4150                           tosh	equ	0xFFE
  4151                           tosl	equ	0xFFD
  4152                           pclath	equ	0xFFA
  4153                           tblptru	equ	0xFF8
  4154                           tblptrh	equ	0xFF7
  4155                           tblptrl	equ	0xFF6
  4156                           tablat	equ	0xFF5
  4157                           prodh	equ	0xFF4
  4158                           prodl	equ	0xFF3
  4159                           postinc0	equ	0xFEE
  4160                           wreg	equ	0xFE8
  4161                           
  4162 ;; *************** function _statePower1 *****************
  4163 ;; Defined at:
  4164 ;;		line 113 in file "States.c"
  4165 ;; Parameters:    Size  Location     Type
  4166 ;;		None
  4167 ;; Auto vars:     Size  Location     Type
  4168 ;;  power1Functi    2   81[COMRAM] PTR FTN(struct .,)struct
  4169 ;;		 -> exitPower1(3), phPower1(3), typesPower1(3), 
  4170 ;; Return value:  Size  Location     Type
  4171 ;;                  1    wreg      enum E3357
  4172 ;; Registers used:
  4173 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4174 ;; Tracked objects:
  4175 ;;		On entry : 0/0
  4176 ;;		On exit  : 0/0
  4177 ;;		Unchanged: 0/0
  4178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4179 ;;      Params:         0       0       0       0
  4180 ;;      Locals:         2       0       0       0
  4181 ;;      Temps:          0       0       0       0
  4182 ;;      Totals:         2       0       0       0
  4183 ;;Total ram usage:        2 bytes
  4184 ;; Hardware stack levels used:    1
  4185 ;; Hardware stack levels required when called:    5
  4186 ;; This function calls:
  4187 ;;		_exitPower1
  4188 ;;		_phPower1
  4189 ;;		_typesPower1
  4190 ;; This function is called by:
  4191 ;;		_main
  4192 ;; This function uses a non-reentrant model
  4193 ;;
  4194                           
  4195                           	psect	text6
  4196  0000'                    __ptext6:
  4197                           	opt stack 0
  4198  0000'                    _statePower1:
  4199                           	opt stack 25
  4200                           
  4201                           ;States.c: 116: static PhaseStatePower1_Type phase = TYPES_POWER1;
  4202                           ;States.c: 117: static PhasePower1_Type phasePower1;
  4203                           ;States.c: 118: PhasePower1_Type(*power1Functions)(PhasePower1_Type);
  4204                           ;States.c: 119: phasePower1.stateMain = POWER_1;
  4205                           
  4206                           ; BSR set to: 1
  4207                           ;incstack = 0
  4208  0000' 0E02               	movlw	2
  4209  0002' 0101               	movlb	1	; () banked
  4210  0004' 6F00'              	movwf	(statePower1@phasePower1+2)& (0+255),b
  4211                           
  4212                           ; BSR set to: 1
  4213                           ;States.c: 122: power1Functions = phasesPower1[phase].PhasePower1;
  4214  0006' 0100               	movlb	0	; () banked
  4215  0008' 5100'              	movf	statePower1@phase& (0+255),w,b
  4216  000A' 0D02               	mullw	2
  4217  000C' 0E00'              	movlw	low _phasesPower1
  4218  000E' 24F3               	addwf	prodl,w,c
  4219  0010' 6EF6               	movwf	tblptrl,c
  4220  0012' 0E00'              	movlw	high _phasesPower1
  4221  0014' 20F4               	addwfc	prodh,w,c
  4222  0016' 6EF7               	movwf	tblptrh,c
  4223  0018'                    	if	0	;There are less than 3 active tblptr bytes
  4224  0018'                    	endif
  4225  0018' 0009               	tblrd		*+
  4226  001A' CFF5 F051'         	movff	tablat,statePower1@power1Functions
  4227  001E' 000A               	tblrd		*-
  4228  0020' CFF5 F052'         	movff	tablat,statePower1@power1Functions+1
  4229                           
  4230                           ; BSR set to: 0
  4231                           ;States.c: 123: phasePower1 = power1Functions(phasePower1);
  4232  0024' C0E0' F026'        	movff	statePower1@phasePower1,exitPower1@data
  4233  0028' C0E1' F027'        	movff	statePower1@phasePower1+1,exitPower1@data+1
  4234  002C' C0E2' F028'        	movff	statePower1@phasePower1+2,exitPower1@data+2
  4235  0030' D801               	call	u4678
  4236  0032' D00A               	goto	u4679
  4237  0034'                    u4678:
  4238  0034' 0005               	push	
  4239  0036' 6EFA               	movwf	pclath,c
  4240  0038' 5051'              	movf	statePower1@power1Functions,w,c
  4241  003A' 6EFD               	movwf	tosl,c
  4242  003C' 5052'              	movf	statePower1@power1Functions+1,w,c
  4243  003E' 6EFE               	movwf	tosh,c
  4244  0040' 50F8               	movf	tblptru,w,c
  4245  0042' 6EFF               	movwf	tosu,c
  4246  0044' 50FA               	movf	pclath,w,c
  4247  0046' 0012               	return		;indir
  4248  0048'                    u4679:
  4249  0048' C026' F0E0'        	movff	?_exitPower1,statePower1@phasePower1
  4250  004C' C027' F0E1'        	movff	?_exitPower1+1,statePower1@phasePower1+1
  4251  0050' C028' F0E2'        	movff	?_exitPower1+2,statePower1@phasePower1+2
  4252                           
  4253                           ;States.c: 126: phase = phasePower1.phaseState;
  4254  0054' C0E1' F011'        	movff	statePower1@phasePower1+1,statePower1@phase
  4255                           
  4256                           ;States.c: 127: return (phasePower1.stateMain);
  4257  0058' 0101               	movlb	1	; () banked
  4258  005A' 5100'              	movf	(statePower1@phasePower1+2)& (0+255),w,b
  4259  005C' 0012               	return	
  4260  005E'                    __end_of_statePower1:
  4261                           	opt stack 0
  4262                           tosu	equ	0xFFF
  4263                           tosh	equ	0xFFE
  4264                           tosl	equ	0xFFD
  4265                           pclath	equ	0xFFA
  4266                           tblptru	equ	0xFF8
  4267                           tblptrh	equ	0xFF7
  4268                           tblptrl	equ	0xFF6
  4269                           tablat	equ	0xFF5
  4270                           prodh	equ	0xFF4
  4271                           prodl	equ	0xFF3
  4272                           postinc0	equ	0xFEE
  4273                           wreg	equ	0xFE8
  4274                           
  4275 ;; *************** function _stateEnergy *****************
  4276 ;; Defined at:
  4277 ;;		line 96 in file "States.c"
  4278 ;; Parameters:    Size  Location     Type
  4279 ;;		None
  4280 ;; Auto vars:     Size  Location     Type
  4281 ;;  energyFuncti    2   41[COMRAM] PTR FTN(struct .,)struct
  4282 ;;		 -> exitEnergy(3), harmonicEnergy(3), fundamentalEnergy(3), apparentEnergy(3), 
  4283 ;;		 -> reactiveEnergy(3), activeEnergy(3), 
  4284 ;; Return value:  Size  Location     Type
  4285 ;;                  1    wreg      enum E3357
  4286 ;; Registers used:
  4287 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4288 ;; Tracked objects:
  4289 ;;		On entry : 0/0
  4290 ;;		On exit  : 0/0
  4291 ;;		Unchanged: 0/0
  4292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4293 ;;      Params:         0       0       0       0
  4294 ;;      Locals:         2       0       0       0
  4295 ;;      Temps:          0       0       0       0
  4296 ;;      Totals:         2       0       0       0
  4297 ;;Total ram usage:        2 bytes
  4298 ;; Hardware stack levels used:    1
  4299 ;; Hardware stack levels required when called:    5
  4300 ;; This function calls:
  4301 ;;		_activeEnergy
  4302 ;;		_apparentEnergy
  4303 ;;		_exitEnergy
  4304 ;;		_fundamentalEnergy
  4305 ;;		_harmonicEnergy
  4306 ;;		_reactiveEnergy
  4307 ;; This function is called by:
  4308 ;;		_main
  4309 ;; This function uses a non-reentrant model
  4310 ;;
  4311                           
  4312                           	psect	text7
  4313  0000'                    __ptext7:
  4314                           	opt stack 0
  4315  0000'                    _stateEnergy:
  4316                           	opt stack 25
  4317                           
  4318                           ;States.c: 99: static PhaseStateEnergy_Type phase = ACTIVE_ENERGY;
  4319                           ;States.c: 100: static PhaseEnergy_Type phaseEnergy;
  4320                           ;States.c: 101: PhaseEnergy_Type(*energyFunctions)(PhaseEnergy_Type);
  4321                           ;States.c: 102: phaseEnergy.stateMain = ENERGY;
  4322                           
  4323                           ; BSR set to: 1
  4324                           ;incstack = 0
  4325  0000' 0E01               	movlw	1
  4326  0002' 0101               	movlb	1	; () banked
  4327  0004' 6F00'              	movwf	(stateEnergy@phaseEnergy+2)& (0+255),b
  4328                           
  4329                           ; BSR set to: 1
  4330                           ;States.c: 105: energyFunctions = phasesEnergy[phase].PhaseEnergy;
  4331  0006' 0100               	movlb	0	; () banked
  4332  0008' 5100'              	movf	stateEnergy@phase& (0+255),w,b
  4333  000A' 0D02               	mullw	2
  4334  000C' 0E00'              	movlw	low _phasesEnergy
  4335  000E' 24F3               	addwf	prodl,w,c
  4336  0010' 6EF6               	movwf	tblptrl,c
  4337  0012' 0E00'              	movlw	high _phasesEnergy
  4338  0014' 20F4               	addwfc	prodh,w,c
  4339  0016' 6EF7               	movwf	tblptrh,c
  4340  0018'                    	if	0	;There are less than 3 active tblptr bytes
  4341  0018'                    	endif
  4342  0018' 0009               	tblrd		*+
  4343  001A' CFF5 F029'         	movff	tablat,stateEnergy@energyFunctions
  4344  001E' 000A               	tblrd		*-
  4345  0020' CFF5 F02A'         	movff	tablat,stateEnergy@energyFunctions+1
  4346                           
  4347                           ; BSR set to: 0
  4348                           ;States.c: 106: phaseEnergy = energyFunctions(phaseEnergy);
  4349  0024' C0E3' F026'        	movff	stateEnergy@phaseEnergy,exitEnergy@data
  4350  0028' C0E4' F027'        	movff	stateEnergy@phaseEnergy+1,exitEnergy@data+1
  4351  002C' C0E5' F028'        	movff	stateEnergy@phaseEnergy+2,exitEnergy@data+2
  4352  0030' D801               	call	u4668
  4353  0032' D00A               	goto	u4669
  4354  0034'                    u4668:
  4355  0034' 0005               	push	
  4356  0036' 6EFA               	movwf	pclath,c
  4357  0038' 5029'              	movf	stateEnergy@energyFunctions,w,c
  4358  003A' 6EFD               	movwf	tosl,c
  4359  003C' 502A'              	movf	stateEnergy@energyFunctions+1,w,c
  4360  003E' 6EFE               	movwf	tosh,c
  4361  0040' 50F8               	movf	tblptru,w,c
  4362  0042' 6EFF               	movwf	tosu,c
  4363  0044' 50FA               	movf	pclath,w,c
  4364  0046' 0012               	return		;indir
  4365  0048'                    u4669:
  4366  0048' C026' F0E3'        	movff	?_exitEnergy,stateEnergy@phaseEnergy
  4367  004C' C027' F0E4'        	movff	?_exitEnergy+1,stateEnergy@phaseEnergy+1
  4368  0050' C028' F0E5'        	movff	?_exitEnergy+2,stateEnergy@phaseEnergy+2
  4369                           
  4370                           ;States.c: 109: phase = phaseEnergy.phaseState;
  4371  0054' C0E4' F012'        	movff	stateEnergy@phaseEnergy+1,stateEnergy@phase
  4372                           
  4373                           ;States.c: 110: return (phaseEnergy.stateMain);
  4374  0058' 0101               	movlb	1	; () banked
  4375  005A' 5100'              	movf	(stateEnergy@phaseEnergy+2)& (0+255),w,b
  4376  005C' 0012               	return	
  4377  005E'                    __end_of_stateEnergy:
  4378                           	opt stack 0
  4379                           tosu	equ	0xFFF
  4380                           tosh	equ	0xFFE
  4381                           tosl	equ	0xFFD
  4382                           pclath	equ	0xFFA
  4383                           tblptru	equ	0xFF8
  4384                           tblptrh	equ	0xFF7
  4385                           tblptrl	equ	0xFF6
  4386                           tablat	equ	0xFF5
  4387                           prodh	equ	0xFF4
  4388                           prodl	equ	0xFF3
  4389                           postinc0	equ	0xFEE
  4390                           wreg	equ	0xFE8
  4391                           
  4392 ;; *************** function _stateMainMenu *****************
  4393 ;; Defined at:
  4394 ;;		line 79 in file "States.c"
  4395 ;; Parameters:    Size  Location     Type
  4396 ;;		None
  4397 ;; Auto vars:     Size  Location     Type
  4398 ;;  mainMenuFunc    2   51[COMRAM] PTR FTN(struct .,)struct
  4399 ;;		 -> sendData(2), viewMenu(2), generalView(2), initialLoad(2), 
  4400 ;; Return value:  Size  Location     Type
  4401 ;;                  1    wreg      enum E3357
  4402 ;; Registers used:
  4403 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4404 ;; Tracked objects:
  4405 ;;		On entry : 0/0
  4406 ;;		On exit  : 0/0
  4407 ;;		Unchanged: 0/0
  4408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4409 ;;      Params:         0       0       0       0
  4410 ;;      Locals:         2       0       0       0
  4411 ;;      Temps:          0       0       0       0
  4412 ;;      Totals:         2       0       0       0
  4413 ;;Total ram usage:        2 bytes
  4414 ;; Hardware stack levels used:    1
  4415 ;; Hardware stack levels required when called:    5
  4416 ;; This function calls:
  4417 ;;		_generalView
  4418 ;;		_initialLoad
  4419 ;;		_sendData
  4420 ;;		_viewMenu
  4421 ;; This function is called by:
  4422 ;;		_main
  4423 ;; This function uses a non-reentrant model
  4424 ;;
  4425                           
  4426                           	psect	text8
  4427  0000'                    __ptext8:
  4428                           	opt stack 0
  4429  0000'                    _stateMainMenu:
  4430                           	opt stack 25
  4431                           
  4432                           ;States.c: 82: static PhaseStateMenu_Type phase = INITIAL_LOAD;
  4433                           ;States.c: 83: static PhaseMainMenu_Type phaseMain;
  4434                           ;States.c: 84: PhaseMainMenu_Type(*mainMenuFunctions)(PhaseMainMenu_Type);
  4435                           ;States.c: 85: phaseMain.stateMain = MAIN_MENU;
  4436                           
  4437                           ; BSR set to: 1
  4438                           ;incstack = 0
  4439  0000' 0E00               	movlw	0
  4440  0002' 0101               	movlb	1	; () banked
  4441  0004' 6F00'              	movwf	(stateMainMenu@phaseMain+1)& (0+255),b
  4442                           
  4443                           ; BSR set to: 1
  4444                           ;States.c: 88: mainMenuFunctions = phasesMainMenu[phase].PhaseMainMenu;
  4445  0006' 0100               	movlb	0	; () banked
  4446  0008' 5100'              	movf	stateMainMenu@phase& (0+255),w,b
  4447  000A' 0D02               	mullw	2
  4448  000C' 0E00'              	movlw	low _phasesMainMenu
  4449  000E' 24F3               	addwf	prodl,w,c
  4450  0010' 6EF6               	movwf	tblptrl,c
  4451  0012' 0E00'              	movlw	high _phasesMainMenu
  4452  0014' 20F4               	addwfc	prodh,w,c
  4453  0016' 6EF7               	movwf	tblptrh,c
  4454  0018'                    	if	0	;There are less than 3 active tblptr bytes
  4455  0018'                    	endif
  4456  0018' 0009               	tblrd		*+
  4457  001A' CFF5 F033'         	movff	tablat,stateMainMenu@mainMenuFunctions
  4458  001E' 000A               	tblrd		*-
  4459  0020' CFF5 F034'         	movff	tablat,stateMainMenu@mainMenuFunctions+1
  4460                           
  4461                           ; BSR set to: 0
  4462                           ;States.c: 89: phaseMain = mainMenuFunctions(phaseMain);
  4463  0024' C0F2' F00F'        	movff	stateMainMenu@phaseMain,sendData@data
  4464  0028' C0F3' F010'        	movff	stateMainMenu@phaseMain+1,sendData@data+1
  4465  002C' D801               	call	u4658
  4466  002E' D00A               	goto	u4659
  4467  0030'                    u4658:
  4468  0030' 0005               	push	
  4469  0032' 6EFA               	movwf	pclath,c
  4470  0034' 5033'              	movf	stateMainMenu@mainMenuFunctions,w,c
  4471  0036' 6EFD               	movwf	tosl,c
  4472  0038' 5034'              	movf	stateMainMenu@mainMenuFunctions+1,w,c
  4473  003A' 6EFE               	movwf	tosh,c
  4474  003C' 50F8               	movf	tblptru,w,c
  4475  003E' 6EFF               	movwf	tosu,c
  4476  0040' 50FA               	movf	pclath,w,c
  4477  0042' 0012               	return		;indir
  4478  0044'                    u4659:
  4479  0044' C00F' F0F2'        	movff	?_sendData,stateMainMenu@phaseMain
  4480  0048' C010' F0F3'        	movff	?_sendData+1,stateMainMenu@phaseMain+1
  4481                           
  4482                           ;States.c: 92: phase = phaseMain.phaseState;
  4483  004C' C0F2' F013'        	movff	stateMainMenu@phaseMain,stateMainMenu@phase
  4484                           
  4485                           ;States.c: 93: return (phaseMain.stateMain);
  4486  0050' 0101               	movlb	1	; () banked
  4487  0052' 5100'              	movf	(stateMainMenu@phaseMain+1)& (0+255),w,b
  4488  0054' 0012               	return	
  4489  0056'                    __end_of_stateMainMenu:
  4490                           	opt stack 0
  4491                           tosu	equ	0xFFF
  4492                           tosh	equ	0xFFE
  4493                           tosl	equ	0xFFD
  4494                           pclath	equ	0xFFA
  4495                           tblptru	equ	0xFF8
  4496                           tblptrh	equ	0xFF7
  4497                           tblptrl	equ	0xFF6
  4498                           tablat	equ	0xFF5
  4499                           prodh	equ	0xFF4
  4500                           prodl	equ	0xFF3
  4501                           postinc0	equ	0xFEE
  4502                           wreg	equ	0xFE8
  4503                           
  4504 ;; *************** function _stateTemperature *****************
  4505 ;; Defined at:
  4506 ;;		line 215 in file "States.c"
  4507 ;; Parameters:    Size  Location     Type
  4508 ;;		None
  4509 ;; Auto vars:     Size  Location     Type
  4510 ;;  temperatureF    2   48[COMRAM] PTR FTN(struct .,)struct
  4511 ;;		 -> exitTemperature(3), showTemperature(3), 
  4512 ;; Return value:  Size  Location     Type
  4513 ;;                  1    wreg      enum E3357
  4514 ;; Registers used:
  4515 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4516 ;; Tracked objects:
  4517 ;;		On entry : 0/0
  4518 ;;		On exit  : 0/0
  4519 ;;		Unchanged: 0/0
  4520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4521 ;;      Params:         0       0       0       0
  4522 ;;      Locals:         2       0       0       0
  4523 ;;      Temps:          0       0       0       0
  4524 ;;      Totals:         2       0       0       0
  4525 ;;Total ram usage:        2 bytes
  4526 ;; Hardware stack levels used:    1
  4527 ;; Hardware stack levels required when called:    5
  4528 ;; This function calls:
  4529 ;;		_exitTemperature
  4530 ;;		_showTemperature
  4531 ;; This function is called by:
  4532 ;;		_main
  4533 ;; This function uses a non-reentrant model
  4534 ;;
  4535                           
  4536                           	psect	text9
  4537  0000'                    __ptext9:
  4538                           	opt stack 0
  4539  0000'                    _stateTemperature:
  4540                           	opt stack 25
  4541                           
  4542                           ;States.c: 218: static PhaseStateTemperature_Type phase = SHOW_TEMPERATURE;
  4543                           ;States.c: 219: static PhaseTemperature_Type phaseTemperature;
  4544                           ;States.c: 220: PhaseTemperature_Type(*temperatureFunctions)(PhaseTemperature_Type);
  4545                           ;States.c: 221: phaseTemperature.stateMain = TEMPERATURE;
  4546                           
  4547                           ; BSR set to: 1
  4548                           ;incstack = 0
  4549  0000' 0E08               	movlw	8
  4550  0002' 0101               	movlb	1	; () banked
  4551  0004' 6F00'              	movwf	(stateTemperature@phaseTemperature+2)& (0+255),b
  4552                           
  4553                           ; BSR set to: 1
  4554                           ;States.c: 224: temperatureFunctions = phasesTemperature[phase].PhaseTemperature;
  4555  0006' 0100               	movlb	0	; () banked
  4556  0008' 5100'              	movf	stateTemperature@phase& (0+255),w,b
  4557  000A' 0D02               	mullw	2
  4558  000C' 0E00'              	movlw	low _phasesTemperature
  4559  000E' 24F3               	addwf	prodl,w,c
  4560  0010' 6EF6               	movwf	tblptrl,c
  4561  0012' 0E00'              	movlw	high _phasesTemperature
  4562  0014' 20F4               	addwfc	prodh,w,c
  4563  0016' 6EF7               	movwf	tblptrh,c
  4564  0018'                    	if	0	;There are less than 3 active tblptr bytes
  4565  0018'                    	endif
  4566  0018' 0009               	tblrd		*+
  4567  001A' CFF5 F030'         	movff	tablat,stateTemperature@temperatureFunctions
  4568  001E' 000A               	tblrd		*-
  4569  0020' CFF5 F031'         	movff	tablat,stateTemperature@temperatureFunctions+1
  4570                           
  4571                           ; BSR set to: 0
  4572                           ;States.c: 225: phaseTemperature = temperatureFunctions(phaseTemperature);
  4573  0024' C0D1' F026'        	movff	stateTemperature@phaseTemperature,exitTemperature@data
  4574  0028' C0D2' F027'        	movff	stateTemperature@phaseTemperature+1,exitTemperature@data+1
  4575  002C' C0D3' F028'        	movff	stateTemperature@phaseTemperature+2,exitTemperature@data+2
  4576  0030' D801               	call	u4738
  4577  0032' D00A               	goto	u4739
  4578  0034'                    u4738:
  4579  0034' 0005               	push	
  4580  0036' 6EFA               	movwf	pclath,c
  4581  0038' 5030'              	movf	stateTemperature@temperatureFunctions,w,c
  4582  003A' 6EFD               	movwf	tosl,c
  4583  003C' 5031'              	movf	stateTemperature@temperatureFunctions+1,w,c
  4584  003E' 6EFE               	movwf	tosh,c
  4585  0040' 50F8               	movf	tblptru,w,c
  4586  0042' 6EFF               	movwf	tosu,c
  4587  0044' 50FA               	movf	pclath,w,c
  4588  0046' 0012               	return		;indir
  4589  0048'                    u4739:
  4590  0048' C026' F0D1'        	movff	?_exitTemperature,stateTemperature@phaseTemperature
  4591  004C' C027' F0D2'        	movff	?_exitTemperature+1,stateTemperature@phaseTemperature+1
  4592  0050' C028' F0D3'        	movff	?_exitTemperature+2,stateTemperature@phaseTemperature+2
  4593                           
  4594                           ;States.c: 228: phase = phaseTemperature.phaseState;
  4595  0054' C0D2' F00B'        	movff	stateTemperature@phaseTemperature+1,stateTemperature@phase
  4596                           
  4597                           ;States.c: 229: return (phaseTemperature.stateMain);
  4598  0058' 0101               	movlb	1	; () banked
  4599  005A' 5100'              	movf	(stateTemperature@phaseTemperature+2)& (0+255),w,b
  4600  005C' 0012               	return	
  4601  005E'                    __end_of_stateTemperature:
  4602                           	opt stack 0
  4603                           tosu	equ	0xFFF
  4604                           tosh	equ	0xFFE
  4605                           tosl	equ	0xFFD
  4606                           pclath	equ	0xFFA
  4607                           tblptru	equ	0xFF8
  4608                           tblptrh	equ	0xFF7
  4609                           tblptrl	equ	0xFF6
  4610                           tablat	equ	0xFF5
  4611                           prodh	equ	0xFF4
  4612                           prodl	equ	0xFF3
  4613                           postinc0	equ	0xFEE
  4614                           wreg	equ	0xFE8
  4615                           
  4616 ;; *************** function _exitTemperature *****************
  4617 ;; Defined at:
  4618 ;;		line 1744 in file "Phases.c"
  4619 ;; Parameters:    Size  Location     Type
  4620 ;;  data            3   38[COMRAM] struct .
  4621 ;; Auto vars:     Size  Location     Type
  4622 ;;		None
  4623 ;; Return value:  Size  Location     Type
  4624 ;;                  3   38[COMRAM] struct .
  4625 ;; Registers used:
  4626 ;;		wreg, status,2, status,0, cstack
  4627 ;; Tracked objects:
  4628 ;;		On entry : 0/0
  4629 ;;		On exit  : 0/0
  4630 ;;		Unchanged: 0/0
  4631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4632 ;;      Params:         3       0       0       0
  4633 ;;      Locals:         0       0       0       0
  4634 ;;      Temps:          0       0       0       0
  4635 ;;      Totals:         3       0       0       0
  4636 ;;Total ram usage:        3 bytes
  4637 ;; Hardware stack levels used:    1
  4638 ;; Hardware stack levels required when called:    4
  4639 ;; This function calls:
  4640 ;;		_LCDNokia_clear
  4641 ;; This function is called by:
  4642 ;;		_stateTemperature
  4643 ;; This function uses a non-reentrant model
  4644 ;;
  4645                           
  4646                           	psect	text10
  4647  0000'                    __ptext10:
  4648                           	opt stack 0
  4649  0000'                    _exitTemperature:
  4650                           	opt stack 25
  4651                           
  4652                           ;Phases.c: 1747: static PhaseTemperature_Type currentTemperature2;
  4653                           ;Phases.c: 1749: LCDNokia_clear();
  4654                           
  4655                           ; BSR set to: 1
  4656                           ;incstack = 0
  4657  0000' EC00' F000'        	call	_LCDNokia_clear	;wreg free
  4658                           
  4659                           ;Phases.c: 1751: currentTemperature2.phaseState = data.phaseState;
  4660  0004' C027' F08D'        	movff	exitTemperature@data+1,exitTemperature@currentTemperature2+1
  4661                           
  4662                           ;Phases.c: 1752: currentTemperature2.stateMain = data.stateMain;
  4663  0008' C028' F08E'        	movff	exitTemperature@data+2,exitTemperature@currentTemperature2+2
  4664                           
  4665                           ;Phases.c: 1754: return (currentTemperature2);
  4666  000C' C08C' F026'        	movff	exitTemperature@currentTemperature2,?_exitTemperature
  4667  0010' C08D' F027'        	movff	exitTemperature@currentTemperature2+1,?_exitTemperature+1
  4668  0014' C08E' F028'        	movff	exitTemperature@currentTemperature2+2,?_exitTemperature+2
  4669  0018' 0012               	return	
  4670  001A'                    __end_of_exitTemperature:
  4671                           	opt stack 0
  4672                           tosu	equ	0xFFF
  4673                           tosh	equ	0xFFE
  4674                           tosl	equ	0xFFD
  4675                           pclath	equ	0xFFA
  4676                           tblptru	equ	0xFF8
  4677                           tblptrh	equ	0xFF7
  4678                           tblptrl	equ	0xFF6
  4679                           tablat	equ	0xFF5
  4680                           prodh	equ	0xFF4
  4681                           prodl	equ	0xFF3
  4682                           postinc0	equ	0xFEE
  4683                           wreg	equ	0xFE8
  4684                           
  4685 ;; *************** function _showTemperature *****************
  4686 ;; Defined at:
  4687 ;;		line 1718 in file "Phases.c"
  4688 ;; Parameters:    Size  Location     Type
  4689 ;;  data            3   38[COMRAM] struct .
  4690 ;; Auto vars:     Size  Location     Type
  4691 ;;  temperature     7   41[COMRAM] const unsigned char [7]
  4692 ;; Return value:  Size  Location     Type
  4693 ;;                  3   38[COMRAM] struct .
  4694 ;; Registers used:
  4695 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4696 ;; Tracked objects:
  4697 ;;		On entry : 0/0
  4698 ;;		On exit  : 0/0
  4699 ;;		Unchanged: 0/0
  4700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4701 ;;      Params:         3       0       0       0
  4702 ;;      Locals:         7       0       0       0
  4703 ;;      Temps:          0       0       0       0
  4704 ;;      Totals:        10       0       0       0
  4705 ;;Total ram usage:       10 bytes
  4706 ;; Hardware stack levels used:    1
  4707 ;; Hardware stack levels required when called:    4
  4708 ;; This function calls:
  4709 ;;		_ATM_registers
  4710 ;;		_LCDNokia_gotoXY
  4711 ;;		_LCDNokia_printValue
  4712 ;;		_LCDNokia_sendString
  4713 ;;		_getButton1
  4714 ;;		_getButton2
  4715 ;; This function is called by:
  4716 ;;		_stateTemperature
  4717 ;; This function uses a non-reentrant model
  4718 ;;
  4719                           
  4720                           	psect	text11
  4721  0000'                    __ptext11:
  4722                           	opt stack 0
  4723  0000'                    _showTemperature:
  4724                           	opt stack 25
  4725                           
  4726                           ;Phases.c: 1720: const uint8_t temperature[] = "Temp: ";
  4727                           
  4728                           ;incstack = 0
  4729  0000' 0E00'              	movlw	low showTemperature@F3843
  4730  0002' 6EF6               	movwf	tblptrl,c
  4731  0004'                    	if	1	;There is more than 1 active tblptr byte
  4732  0004' 0E00'              	movlw	high showTemperature@F3843
  4733  0006' 6EF7               	movwf	tblptrh,c
  4734  0008'                    	endif
  4735  0008'                    	if	0	;There are less than 3 active tblptr bytes
  4736  0008'                    	endif
  4737  0008' EE20' F000'        	lfsr	2,showTemperature@temperature
  4738  000C' 0E06               	movlw	6
  4739  000E'                    u4590:
  4740  000E' 0009               	tblrd		*+
  4741  0010' CFF5 FFDE          	movff	tablat,postinc2
  4742  0014' 06E8               	decf	wreg,f,c
  4743  0016' E2FB               	bc	u4590
  4744                           
  4745                           ;Phases.c: 1722: static PhaseTemperature_Type currentTemperature1;
  4746                           ;Phases.c: 1725: currentTemperature1.phaseState = SHOW_TEMPERATURE;
  4747  0018' 0E00               	movlw	0
  4748  001A' 0101               	movlb	1	; () banked
  4749  001C' 6F00'              	movwf	(showTemperature@currentTemperature1+1)& (0+255),b
  4750                           
  4751                           ; BSR set to: 1
  4752                           ;Phases.c: 1726: currentTemperature1.stateMain = data.stateMain;
  4753  001E' C028' F091'        	movff	showTemperature@data+2,showTemperature@currentTemperature1+2
  4754                           
  4755                           ; BSR set to: 1
  4756                           ;Phases.c: 1728: if(getButton1() == 1)
  4757  0022' EC00' F000'        	call	_getButton1	;wreg free
  4758  0026' 06E8               	decf	wreg,f,c
  4759  0028' A4D8               	btfss	status,2,c
  4760  002A' D003               	goto	l931
  4761                           
  4762                           ;Phases.c: 1729: {
  4763                           ;Phases.c: 1730: currentTemperature1.phaseState = EXIT_TEMPERATURE;
  4764  002C' 0E01               	movlw	1
  4765  002E' 0101               	movlb	1	; () banked
  4766  0030' 6F00'              	movwf	(showTemperature@currentTemperature1+1)& (0+255),b
  4767  0032'                    l931:
  4768                           
  4769                           ;Phases.c: 1731: }
  4770                           ;Phases.c: 1732: if(getButton2() == 1)
  4771                           
  4772                           ; BSR set to: 1
  4773  0032' EC00' F000'        	call	_getButton2	;wreg free
  4774  0036' 06E8               	decf	wreg,f,c
  4775  0038' A4D8               	btfss	status,2,c
  4776  003A' D003               	goto	l932
  4777                           
  4778                           ;Phases.c: 1733: {
  4779                           ;Phases.c: 1734: currentTemperature1.phaseState = EXIT_TEMPERATURE;
  4780  003C' 0E01               	movlw	1
  4781  003E' 0101               	movlb	1	; () banked
  4782  0040' 6F00'              	movwf	(showTemperature@currentTemperature1+1)& (0+255),b
  4783  0042'                    l932:
  4784                           
  4785                           ;Phases.c: 1735: }
  4786                           ;Phases.c: 1737: LCDNokia_gotoXY(0,1);
  4787                           
  4788                           ; BSR set to: 1
  4789  0042' 0E01               	movlw	1
  4790  0044' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  4791  0046' 0E00               	movlw	0
  4792  0048' EC00' F000'        	call	_LCDNokia_gotoXY
  4793                           
  4794                           ;Phases.c: 1738: LCDNokia_sendString(temperature);
  4795  004C' 0E00'              	movlw	low showTemperature@temperature
  4796  004E' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  4797  0050' 0E00'              	movlw	high showTemperature@temperature
  4798  0052' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  4799  0054' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  4800                           
  4801                           ;Phases.c: 1739: LCDNokia_printValue(ATM_registers(TEMPERATURE_TYPE, TEMPERATURE_REG));
  4802  0058' 0E4F               	movlw	79
  4803  005A' 6E12'              	movwf	ATM_registers@reg,c
  4804  005C' 0E10               	movlw	16
  4805  005E' EC00' F000'        	call	_ATM_registers
  4806  0062' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
  4807  0066' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
  4808  006A' 6A19'              	clrf	LCDNokia_printValue@value+2,c
  4809  006C' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
  4810  006E' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
  4811                           
  4812                           ;Phases.c: 1741: return (currentTemperature1);
  4813  0072' C08F' F026'        	movff	showTemperature@currentTemperature1,?_showTemperature
  4814  0076' C090' F027'        	movff	showTemperature@currentTemperature1+1,?_showTemperature+1
  4815  007A' C091' F028'        	movff	showTemperature@currentTemperature1+2,?_showTemperature+2
  4816  007E' 0012               	return	
  4817  0080'                    __end_of_showTemperature:
  4818                           	opt stack 0
  4819                           tosu	equ	0xFFF
  4820                           tosh	equ	0xFFE
  4821                           tosl	equ	0xFFD
  4822                           pclath	equ	0xFFA
  4823                           tblptru	equ	0xFF8
  4824                           tblptrh	equ	0xFF7
  4825                           tblptrl	equ	0xFF6
  4826                           tablat	equ	0xFF5
  4827                           prodh	equ	0xFF4
  4828                           prodl	equ	0xFF3
  4829                           postinc0	equ	0xFEE
  4830                           wreg	equ	0xFE8
  4831                           postinc2	equ	0xFDE
  4832                           status	equ	0xFD8
  4833                           
  4834 ;; *************** function _exitRmsVI *****************
  4835 ;; Defined at:
  4836 ;;		line 1444 in file "Phases.c"
  4837 ;; Parameters:    Size  Location     Type
  4838 ;;  data            3   38[COMRAM] struct .
  4839 ;; Auto vars:     Size  Location     Type
  4840 ;;		None
  4841 ;; Return value:  Size  Location     Type
  4842 ;;                  3   38[COMRAM] struct .
  4843 ;; Registers used:
  4844 ;;		wreg, status,2, status,0, cstack
  4845 ;; Tracked objects:
  4846 ;;		On entry : 0/0
  4847 ;;		On exit  : 0/0
  4848 ;;		Unchanged: 0/0
  4849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4850 ;;      Params:         3       0       0       0
  4851 ;;      Locals:         0       0       0       0
  4852 ;;      Temps:          0       0       0       0
  4853 ;;      Totals:         3       0       0       0
  4854 ;;Total ram usage:        3 bytes
  4855 ;; Hardware stack levels used:    1
  4856 ;; Hardware stack levels required when called:    4
  4857 ;; This function calls:
  4858 ;;		_LCDNokia_clear
  4859 ;; This function is called by:
  4860 ;;		_stateRmsVI
  4861 ;; This function uses a non-reentrant model
  4862 ;;
  4863                           
  4864                           	psect	text12
  4865  0000'                    __ptext12:
  4866                           	opt stack 0
  4867  0000'                    _exitRmsVI:
  4868                           	opt stack 25
  4869                           
  4870                           ;Phases.c: 1447: static PhaseRmsVI_Type currentRms3;
  4871                           ;Phases.c: 1449: LCDNokia_clear();
  4872                           
  4873                           ;incstack = 0
  4874  0000' EC00' F000'        	call	_LCDNokia_clear	;wreg free
  4875                           
  4876                           ;Phases.c: 1451: currentRms3.phaseState = data.phaseState;
  4877  0004' C027' F0A5'        	movff	exitRmsVI@data+1,exitRmsVI@currentRms3+1
  4878                           
  4879                           ;Phases.c: 1452: currentRms3.stateMain = data.stateMain;
  4880  0008' C028' F0A6'        	movff	exitRmsVI@data+2,exitRmsVI@currentRms3+2
  4881                           
  4882                           ;Phases.c: 1454: return (currentRms3);
  4883  000C' C0A4' F026'        	movff	exitRmsVI@currentRms3,?_exitRmsVI
  4884  0010' C0A5' F027'        	movff	exitRmsVI@currentRms3+1,?_exitRmsVI+1
  4885  0014' C0A6' F028'        	movff	exitRmsVI@currentRms3+2,?_exitRmsVI+2
  4886  0018' 0012               	return	
  4887  001A'                    __end_of_exitRmsVI:
  4888                           	opt stack 0
  4889                           tosu	equ	0xFFF
  4890                           tosh	equ	0xFFE
  4891                           tosl	equ	0xFFD
  4892                           pclath	equ	0xFFA
  4893                           tblptru	equ	0xFF8
  4894                           tblptrh	equ	0xFF7
  4895                           tblptrl	equ	0xFF6
  4896                           tablat	equ	0xFF5
  4897                           prodh	equ	0xFF4
  4898                           prodl	equ	0xFF3
  4899                           postinc0	equ	0xFEE
  4900                           wreg	equ	0xFE8
  4901                           postinc2	equ	0xFDE
  4902                           status	equ	0xFD8
  4903                           
  4904 ;; *************** function _neutralRmsVI *****************
  4905 ;; Defined at:
  4906 ;;		line 1413 in file "Phases.c"
  4907 ;; Parameters:    Size  Location     Type
  4908 ;;  data            3   38[COMRAM] struct .
  4909 ;; Auto vars:     Size  Location     Type
  4910 ;;  nline_sample   12   53[COMRAM] const unsigned char [12]
  4911 ;;  nline_calcul   12   41[COMRAM] const unsigned char [12]
  4912 ;; Return value:  Size  Location     Type
  4913 ;;                  3   38[COMRAM] struct .
  4914 ;; Registers used:
  4915 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4916 ;; Tracked objects:
  4917 ;;		On entry : 0/0
  4918 ;;		On exit  : 0/0
  4919 ;;		Unchanged: 0/0
  4920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4921 ;;      Params:         3       0       0       0
  4922 ;;      Locals:        24       0       0       0
  4923 ;;      Temps:          0       0       0       0
  4924 ;;      Totals:        27       0       0       0
  4925 ;;Total ram usage:       27 bytes
  4926 ;; Hardware stack levels used:    1
  4927 ;; Hardware stack levels required when called:    4
  4928 ;; This function calls:
  4929 ;;		_ATM_registers
  4930 ;;		_LCDNokia_gotoXY
  4931 ;;		_LCDNokia_printValue
  4932 ;;		_LCDNokia_sendString
  4933 ;;		_getButton1
  4934 ;;		_getButton2
  4935 ;; This function is called by:
  4936 ;;		_stateRmsVI
  4937 ;; This function uses a non-reentrant model
  4938 ;;
  4939                           
  4940                           	psect	text13
  4941  0000'                    __ptext13:
  4942                           	opt stack 0
  4943  0000'                    _neutralRmsVI:
  4944                           	opt stack 25
  4945                           
  4946                           ;Phases.c: 1415: const uint8_t nline_calculated_RMS[] = "N CalCRMS: ";
  4947                           
  4948                           ;incstack = 0
  4949  0000' 0E00'              	movlw	low neutralRmsVI@F3781
  4950  0002' 6EF6               	movwf	tblptrl,c
  4951  0004'                    	if	1	;There is more than 1 active tblptr byte
  4952  0004' 0E00'              	movlw	high neutralRmsVI@F3781
  4953  0006' 6EF7               	movwf	tblptrh,c
  4954  0008'                    	endif
  4955  0008'                    	if	0	;There are less than 3 active tblptr bytes
  4956  0008'                    	endif
  4957  0008' EE20' F000'        	lfsr	2,neutralRmsVI@nline_calculated_RMS
  4958  000C' 0E0B               	movlw	11
  4959  000E'                    u4240:
  4960  000E' 0009               	tblrd		*+
  4961  0010' CFF5 FFDE          	movff	tablat,postinc2
  4962  0014' 06E8               	decf	wreg,f,c
  4963  0016' E2FB               	bc	u4240
  4964                           
  4965                           ;Phases.c: 1416: const uint8_t nline_sampled_RMS[] = "N SamCRMS: ";
  4966  0018' 0E00'              	movlw	low neutralRmsVI@F3783
  4967  001A' 6EF6               	movwf	tblptrl,c
  4968  001C'                    	if	1	;There is more than 1 active tblptr byte
  4969  001C' 0E00'              	movlw	high neutralRmsVI@F3783
  4970  001E' 6EF7               	movwf	tblptrh,c
  4971  0020'                    	endif
  4972  0020'                    	if	0	;There are less than 3 active tblptr bytes
  4973  0020'                    	endif
  4974  0020' EE20' F000'        	lfsr	2,neutralRmsVI@nline_sampled_RMS
  4975  0024' 0E0B               	movlw	11
  4976  0026'                    u4250:
  4977  0026' 0009               	tblrd		*+
  4978  0028' CFF5 FFDE          	movff	tablat,postinc2
  4979  002C' 06E8               	decf	wreg,f,c
  4980  002E' E2FB               	bc	u4250
  4981                           
  4982                           ;Phases.c: 1419: static PhaseRmsVI_Type currentRms2;
  4983                           ;Phases.c: 1422: currentRms2.phaseState = NEUTRAL_RMSVI;
  4984  0030' 0E01               	movlw	1
  4985  0032' 0101               	movlb	1	; () banked
  4986  0034' 6F00'              	movwf	(neutralRmsVI@currentRms2+1)& (0+255),b
  4987                           
  4988                           ; BSR set to: 1
  4989                           ;Phases.c: 1423: currentRms2.stateMain = data.stateMain;
  4990  0036' C028' F0A9'        	movff	neutralRmsVI@data+2,neutralRmsVI@currentRms2+2
  4991                           
  4992                           ; BSR set to: 1
  4993                           ;Phases.c: 1425: if(getButton1() == 1)
  4994  003A' EC00' F000'        	call	_getButton1	;wreg free
  4995  003E' 06E8               	decf	wreg,f,c
  4996  0040' A4D8               	btfss	status,2,c
  4997  0042' D003               	goto	l815
  4998                           
  4999                           ;Phases.c: 1426: {
  5000                           ;Phases.c: 1427: currentRms2.phaseState = EXIT_RMSVI;
  5001  0044' 0E02               	movlw	2
  5002  0046' 0101               	movlb	1	; () banked
  5003  0048' 6F00'              	movwf	(neutralRmsVI@currentRms2+1)& (0+255),b
  5004  004A'                    l815:
  5005                           
  5006                           ;Phases.c: 1429: }
  5007                           ;Phases.c: 1430: if(getButton2() == 1)
  5008                           
  5009                           ; BSR set to: 1
  5010  004A' EC00' F000'        	call	_getButton2	;wreg free
  5011  004E' 06E8               	decf	wreg,f,c
  5012  0050' A4D8               	btfss	status,2,c
  5013  0052' D003               	goto	l816
  5014                           
  5015                           ;Phases.c: 1431: {
  5016                           ;Phases.c: 1432: currentRms2.phaseState = EXIT_RMSVI;
  5017  0054' 0E02               	movlw	2
  5018  0056' 0101               	movlb	1	; () banked
  5019  0058' 6F00'              	movwf	(neutralRmsVI@currentRms2+1)& (0+255),b
  5020  005A'                    l816:
  5021                           
  5022                           ;Phases.c: 1433: }
  5023                           ;Phases.c: 1434: LCDNokia_gotoXY(0,1);
  5024                           
  5025                           ; BSR set to: 1
  5026  005A' 0E01               	movlw	1
  5027  005C' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  5028  005E' 0E00               	movlw	0
  5029  0060' EC00' F000'        	call	_LCDNokia_gotoXY
  5030                           
  5031                           ;Phases.c: 1435: LCDNokia_sendString(nline_calculated_RMS);
  5032  0064' 0E00'              	movlw	low neutralRmsVI@nline_calculated_RMS
  5033  0066' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  5034  0068' 0E00'              	movlw	high neutralRmsVI@nline_calculated_RMS
  5035  006A' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  5036  006C' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  5037                           
  5038                           ;Phases.c: 1436: LCDNokia_printValue(ATM_registers(CURRENT_RMS, NLINE_CALCULATED_CURRENT
      +                          _RMS));
  5039  0070' 0E41               	movlw	65
  5040  0072' 6E12'              	movwf	ATM_registers@reg,c
  5041  0074' 0E0C               	movlw	12
  5042  0076' EC00' F000'        	call	_ATM_registers
  5043  007A' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
  5044  007E' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
  5045  0082' 6A19'              	clrf	LCDNokia_printValue@value+2,c
  5046  0084' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
  5047  0086' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
  5048                           
  5049                           ;Phases.c: 1437: LCDNokia_gotoXY(0,2);
  5050  008A' 0E02               	movlw	2
  5051  008C' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  5052  008E' 0E00               	movlw	0
  5053  0090' EC00' F000'        	call	_LCDNokia_gotoXY
  5054                           
  5055                           ;Phases.c: 1438: LCDNokia_sendString(nline_sampled_RMS);
  5056  0094' 0E00'              	movlw	low neutralRmsVI@nline_sampled_RMS
  5057  0096' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  5058  0098' 0E00'              	movlw	high neutralRmsVI@nline_sampled_RMS
  5059  009A' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  5060  009C' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  5061                           
  5062                           ;Phases.c: 1439: LCDNokia_printValue(ATM_registers(CURRENT_RMS, NLINE_SAMPLED_CURRENT_RM
      +                          S));
  5063  00A0' 0E3D               	movlw	61
  5064  00A2' 6E12'              	movwf	ATM_registers@reg,c
  5065  00A4' 0E0C               	movlw	12
  5066  00A6' EC00' F000'        	call	_ATM_registers
  5067  00AA' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
  5068  00AE' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
  5069  00B2' 6A19'              	clrf	LCDNokia_printValue@value+2,c
  5070  00B4' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
  5071  00B6' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
  5072                           
  5073                           ;Phases.c: 1441: return (currentRms2);
  5074  00BA' C0A7' F026'        	movff	neutralRmsVI@currentRms2,?_neutralRmsVI
  5075  00BE' C0A8' F027'        	movff	neutralRmsVI@currentRms2+1,?_neutralRmsVI+1
  5076  00C2' C0A9' F028'        	movff	neutralRmsVI@currentRms2+2,?_neutralRmsVI+2
  5077  00C6' 0012               	return	
  5078  00C8'                    __end_of_neutralRmsVI:
  5079                           	opt stack 0
  5080                           tosu	equ	0xFFF
  5081                           tosh	equ	0xFFE
  5082                           tosl	equ	0xFFD
  5083                           pclath	equ	0xFFA
  5084                           tblptru	equ	0xFF8
  5085                           tblptrh	equ	0xFF7
  5086                           tblptrl	equ	0xFF6
  5087                           tablat	equ	0xFF5
  5088                           prodh	equ	0xFF4
  5089                           prodl	equ	0xFF3
  5090                           postinc0	equ	0xFEE
  5091                           wreg	equ	0xFE8
  5092                           postinc2	equ	0xFDE
  5093                           status	equ	0xFD8
  5094                           
  5095 ;; *************** function _phRmsVI *****************
  5096 ;; Defined at:
  5097 ;;		line 1346 in file "Phases.c"
  5098 ;; Parameters:    Size  Location     Type
  5099 ;;  data            3   38[COMRAM] struct .
  5100 ;; Auto vars:     Size  Location     Type
  5101 ;;  current3_RMS   10   50[BANK0 ] const unsigned char [10]
  5102 ;;  current2_RMS   10   40[BANK0 ] const unsigned char [10]
  5103 ;;  current1_RMS   10   30[BANK0 ] const unsigned char [10]
  5104 ;;  voltage3_RMS   10   20[BANK0 ] const unsigned char [10]
  5105 ;;  voltage2_RMS   10   10[BANK0 ] const unsigned char [10]
  5106 ;;  voltage1_RMS   10    0[BANK0 ] const unsigned char [10]
  5107 ;;  maxScreens      1   60[BANK0 ] const unsigned char 
  5108 ;; Return value:  Size  Location     Type
  5109 ;;                  3   38[COMRAM] struct .
  5110 ;; Registers used:
  5111 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5112 ;; Tracked objects:
  5113 ;;		On entry : 0/0
  5114 ;;		On exit  : 0/0
  5115 ;;		Unchanged: 0/0
  5116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5117 ;;      Params:         3       0       0       0
  5118 ;;      Locals:         0      61       0       0
  5119 ;;      Temps:          0       0       0       0
  5120 ;;      Totals:         3      61       0       0
  5121 ;;Total ram usage:       64 bytes
  5122 ;; Hardware stack levels used:    1
  5123 ;; Hardware stack levels required when called:    4
  5124 ;; This function calls:
  5125 ;;		_ATM_registers
  5126 ;;		_LCDNokia_clear
  5127 ;;		_LCDNokia_gotoXY
  5128 ;;		_LCDNokia_printValue
  5129 ;;		_LCDNokia_sendString
  5130 ;;		_getButton1
  5131 ;;		_getButton2
  5132 ;;		_getButton3
  5133 ;; This function is called by:
  5134 ;;		_stateRmsVI
  5135 ;; This function uses a non-reentrant model
  5136 ;;
  5137                           
  5138                           	psect	text14
  5139  0000'                    __ptext14:
  5140                           	opt stack 0
  5141  0000'                    _phRmsVI:
  5142                           	opt stack 25
  5143                           
  5144                           ;Phases.c: 1348: static uint8_t counter = 0;
  5145                           ;Phases.c: 1349: const uint8_t maxScreens = 1;
  5146                           
  5147                           ;incstack = 0
  5148  0000' 0E01               	movlw	1
  5149  0002' 0100               	movlb	0	; () banked
  5150  0004' 6F00'              	movwf	phRmsVI@maxScreens& (0+255),b
  5151                           
  5152                           ; BSR set to: 0
  5153                           ;Phases.c: 1350: const uint8_t voltage1_RMS[] = "PA VRMS: ";
  5154  0006' 0E00'              	movlw	low phRmsVI@F3767
  5155  0008' 6EF6               	movwf	tblptrl,c
  5156  000A'                    	if	1	;There is more than 1 active tblptr byte
  5157  000A' 0E00'              	movlw	high phRmsVI@F3767
  5158  000C' 6EF7               	movwf	tblptrh,c
  5159  000E'                    	endif
  5160  000E'                    	if	0	;There are less than 3 active tblptr bytes
  5161  000E'                    	endif
  5162  000E' EE20' F000'        	lfsr	2,phRmsVI@voltage1_RMS
  5163  0012' 0E09               	movlw	9
  5164  0014'                    u4140:
  5165  0014' 0009               	tblrd		*+
  5166  0016' CFF5 FFDE          	movff	tablat,postinc2
  5167  001A' 06E8               	decf	wreg,f,c
  5168  001C' E2FB               	bc	u4140
  5169                           
  5170                           ; BSR set to: 0
  5171                           ;Phases.c: 1351: const uint8_t voltage2_RMS[] = "PB VRMS: ";
  5172  001E' 0E00'              	movlw	low phRmsVI@F3769
  5173  0020' 6EF6               	movwf	tblptrl,c
  5174  0022'                    	if	1	;There is more than 1 active tblptr byte
  5175  0022' 0E00'              	movlw	high phRmsVI@F3769
  5176  0024' 6EF7               	movwf	tblptrh,c
  5177  0026'                    	endif
  5178  0026'                    	if	0	;There are less than 3 active tblptr bytes
  5179  0026'                    	endif
  5180  0026' EE20' F000'        	lfsr	2,phRmsVI@voltage2_RMS
  5181  002A' 0E09               	movlw	9
  5182  002C'                    u4150:
  5183  002C' 0009               	tblrd		*+
  5184  002E' CFF5 FFDE          	movff	tablat,postinc2
  5185  0032' 06E8               	decf	wreg,f,c
  5186  0034' E2FB               	bc	u4150
  5187                           
  5188                           ; BSR set to: 0
  5189                           ;Phases.c: 1352: const uint8_t voltage3_RMS[] = "PC VRMS: ";
  5190  0036' 0E00'              	movlw	low phRmsVI@F3771
  5191  0038' 6EF6               	movwf	tblptrl,c
  5192  003A'                    	if	1	;There is more than 1 active tblptr byte
  5193  003A' 0E00'              	movlw	high phRmsVI@F3771
  5194  003C' 6EF7               	movwf	tblptrh,c
  5195  003E'                    	endif
  5196  003E'                    	if	0	;There are less than 3 active tblptr bytes
  5197  003E'                    	endif
  5198  003E' EE20' F000'        	lfsr	2,phRmsVI@voltage3_RMS
  5199  0042' 0E09               	movlw	9
  5200  0044'                    u4160:
  5201  0044' 0009               	tblrd		*+
  5202  0046' CFF5 FFDE          	movff	tablat,postinc2
  5203  004A' 06E8               	decf	wreg,f,c
  5204  004C' E2FB               	bc	u4160
  5205                           
  5206                           ; BSR set to: 0
  5207                           ;Phases.c: 1354: const uint8_t current1_RMS[] = "PA CRMS: ";
  5208  004E' 0E00'              	movlw	low phRmsVI@F3773
  5209  0050' 6EF6               	movwf	tblptrl,c
  5210  0052'                    	if	1	;There is more than 1 active tblptr byte
  5211  0052' 0E00'              	movlw	high phRmsVI@F3773
  5212  0054' 6EF7               	movwf	tblptrh,c
  5213  0056'                    	endif
  5214  0056'                    	if	0	;There are less than 3 active tblptr bytes
  5215  0056'                    	endif
  5216  0056' EE20' F000'        	lfsr	2,phRmsVI@current1_RMS
  5217  005A' 0E09               	movlw	9
  5218  005C'                    u4170:
  5219  005C' 0009               	tblrd		*+
  5220  005E' CFF5 FFDE          	movff	tablat,postinc2
  5221  0062' 06E8               	decf	wreg,f,c
  5222  0064' E2FB               	bc	u4170
  5223                           
  5224                           ; BSR set to: 0
  5225                           ;Phases.c: 1355: const uint8_t current2_RMS[] = "PB CRMS: ";
  5226  0066' 0E00'              	movlw	low phRmsVI@F3775
  5227  0068' 6EF6               	movwf	tblptrl,c
  5228  006A'                    	if	1	;There is more than 1 active tblptr byte
  5229  006A' 0E00'              	movlw	high phRmsVI@F3775
  5230  006C' 6EF7               	movwf	tblptrh,c
  5231  006E'                    	endif
  5232  006E'                    	if	0	;There are less than 3 active tblptr bytes
  5233  006E'                    	endif
  5234  006E' EE20' F000'        	lfsr	2,phRmsVI@current2_RMS
  5235  0072' 0E09               	movlw	9
  5236  0074'                    u4180:
  5237  0074' 0009               	tblrd		*+
  5238  0076' CFF5 FFDE          	movff	tablat,postinc2
  5239  007A' 06E8               	decf	wreg,f,c
  5240  007C' E2FB               	bc	u4180
  5241                           
  5242                           ; BSR set to: 0
  5243                           ;Phases.c: 1356: const uint8_t current3_RMS[] = "PC CRMS: ";
  5244  007E' 0E00'              	movlw	low phRmsVI@F3777
  5245  0080' 6EF6               	movwf	tblptrl,c
  5246  0082'                    	if	1	;There is more than 1 active tblptr byte
  5247  0082' 0E00'              	movlw	high phRmsVI@F3777
  5248  0084' 6EF7               	movwf	tblptrh,c
  5249  0086'                    	endif
  5250  0086'                    	if	0	;There are less than 3 active tblptr bytes
  5251  0086'                    	endif
  5252  0086' EE20' F000'        	lfsr	2,phRmsVI@current3_RMS
  5253  008A' 0E09               	movlw	9
  5254  008C'                    u4190:
  5255  008C' 0009               	tblrd		*+
  5256  008E' CFF5 FFDE          	movff	tablat,postinc2
  5257  0092' 06E8               	decf	wreg,f,c
  5258  0094' E2FB               	bc	u4190
  5259                           
  5260                           ;Phases.c: 1359: static PhaseRmsVI_Type currentRms1;
  5261                           ;Phases.c: 1362: currentRms1.phaseState = PHASES_RMSVI;
  5262  0096' 0E00               	movlw	0
  5263  0098' 0101               	movlb	1	; () banked
  5264  009A' 6F00'              	movwf	(phRmsVI@currentRms1+1)& (0+255),b
  5265                           
  5266                           ; BSR set to: 1
  5267                           ;Phases.c: 1363: currentRms1.stateMain = data.stateMain;
  5268  009C' C028' F0AC'        	movff	phRmsVI@data+2,phRmsVI@currentRms1+2
  5269                           
  5270                           ; BSR set to: 1
  5271                           ;Phases.c: 1365: if(getButton1() == 1)
  5272  00A0' EC00' F000'        	call	_getButton1	;wreg free
  5273  00A4' 06E8               	decf	wreg,f,c
  5274  00A6' A4D8               	btfss	status,2,c
  5275  00A8' D003               	goto	l797
  5276                           
  5277                           ;Phases.c: 1366: {
  5278                           ;Phases.c: 1367: currentRms1.phaseState = EXIT_RMSVI;
  5279  00AA' 0E02               	movlw	2
  5280  00AC' 0101               	movlb	1	; () banked
  5281  00AE' 6F00'              	movwf	(phRmsVI@currentRms1+1)& (0+255),b
  5282  00B0'                    l797:
  5283                           
  5284                           ;Phases.c: 1368: }
  5285                           ;Phases.c: 1369: if(getButton2() == 1)
  5286                           
  5287                           ; BSR set to: 1
  5288  00B0' EC00' F000'        	call	_getButton2	;wreg free
  5289  00B4' 06E8               	decf	wreg,f,c
  5290  00B6' A4D8               	btfss	status,2,c
  5291  00B8' D005               	goto	l798
  5292                           
  5293                           ;Phases.c: 1370: {
  5294                           ;Phases.c: 1371: currentRms1.phaseState = NEUTRAL_RMSVI;
  5295  00BA' 0E01               	movlw	1
  5296  00BC' 0101               	movlb	1	; () banked
  5297  00BE' 6F00'              	movwf	(phRmsVI@currentRms1+1)& (0+255),b
  5298                           
  5299                           ; BSR set to: 1
  5300                           ;Phases.c: 1372: LCDNokia_clear();
  5301  00C0' EC00' F000'        	call	_LCDNokia_clear	;wreg free
  5302  00C4'                    l798:
  5303                           
  5304                           ;Phases.c: 1373: }
  5305                           ;Phases.c: 1374: if(getButton3() == 1)
  5306  00C4' EC00' F000'        	call	_getButton3	;wreg free
  5307  00C8' 06E8               	decf	wreg,f,c
  5308  00CA' A4D8               	btfss	status,2,c
  5309  00CC' D09E               	goto	l801
  5310                           
  5311                           ;Phases.c: 1375: {
  5312                           ;Phases.c: 1376: counter++;
  5313  00CE' 0100               	movlb	0	; () banked
  5314  00D0' 2B00'              	incf	phRmsVI@counter& (0+255),f,b
  5315                           
  5316                           ; BSR set to: 0
  5317                           ;Phases.c: 1377: LCDNokia_clear();
  5318  00D2' EC00' F000'        	call	_LCDNokia_clear	;wreg free
  5319                           
  5320                           ;Phases.c: 1378: if(counter > maxScreens)
  5321  00D6' 0100               	movlb	0	; () banked
  5322  00D8' 5100'              	movf	phRmsVI@counter& (0+255),w,b
  5323  00DA' 5D00'              	subwf	phRmsVI@maxScreens& (0+255),w,b
  5324  00DC' B0D8               	btfsc	status,0,c
  5325  00DE' D095               	goto	l801
  5326                           
  5327                           ; BSR set to: 0
  5328                           ;Phases.c: 1379: {
  5329                           ;Phases.c: 1380: counter = 0;
  5330  00E0' 0E00               	movlw	0
  5331  00E2' 6F00'              	movwf	phRmsVI@counter& (0+255),b
  5332                           
  5333                           ; BSR set to: 0
  5334                           ;Phases.c: 1381: }
  5335                           ;Phases.c: 1382: }
  5336                           ;Phases.c: 1383: switch(counter)
  5337                           
  5338                           ; BSR set to: 0
  5339  00E4' D092               	goto	l801
  5340  00E6'                    
  5341                           ; BSR set to: 0
  5342                           ;Phases.c: 1386: LCDNokia_gotoXY(0,1);
  5343                           
  5344                           ; BSR set to: 0
  5345  00E6' 0E01               	movlw	1
  5346  00E8' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  5347  00EA' 0E00               	movlw	0
  5348  00EC' EC00' F000'        	call	_LCDNokia_gotoXY
  5349                           
  5350                           ;Phases.c: 1387: LCDNokia_sendString(voltage1_RMS);
  5351  00F0' 0E00'              	movlw	low phRmsVI@voltage1_RMS
  5352  00F2' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  5353  00F4' 0E00'              	movlw	high phRmsVI@voltage1_RMS
  5354  00F6' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  5355  00F8' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  5356                           
  5357                           ;Phases.c: 1388: LCDNokia_printValue(ATM_registers(VOLTAGE_RMS, PHASE_A_VOLTAGE_RMS));
  5358  00FC' 0E3E               	movlw	62
  5359  00FE' 6E12'              	movwf	ATM_registers@reg,c
  5360  0100' 0E0B               	movlw	11
  5361  0102' EC00' F000'        	call	_ATM_registers
  5362  0106' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
  5363  010A' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
  5364  010E' 6A19'              	clrf	LCDNokia_printValue@value+2,c
  5365  0110' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
  5366  0112' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
  5367                           
  5368                           ;Phases.c: 1389: LCDNokia_gotoXY(0,2);
  5369  0116' 0E02               	movlw	2
  5370  0118' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  5371  011A' 0E00               	movlw	0
  5372  011C' EC00' F000'        	call	_LCDNokia_gotoXY
  5373                           
  5374                           ;Phases.c: 1390: LCDNokia_sendString(voltage2_RMS);
  5375  0120' 0E00'              	movlw	low phRmsVI@voltage2_RMS
  5376  0122' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  5377  0124' 0E00'              	movlw	high phRmsVI@voltage2_RMS
  5378  0126' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  5379  0128' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  5380                           
  5381                           ;Phases.c: 1391: LCDNokia_printValue(ATM_registers(VOLTAGE_RMS, PHASE_B_VOLTAGE_RMS));
  5382  012C' 0E3F               	movlw	63
  5383  012E' 6E12'              	movwf	ATM_registers@reg,c
  5384  0130' 0E0B               	movlw	11
  5385  0132' EC00' F000'        	call	_ATM_registers
  5386  0136' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
  5387  013A' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
  5388  013E' 6A19'              	clrf	LCDNokia_printValue@value+2,c
  5389  0140' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
  5390  0142' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
  5391                           
  5392                           ;Phases.c: 1392: LCDNokia_gotoXY(0,3);
  5393  0146' 0E03               	movlw	3
  5394  0148' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  5395  014A' 0E00               	movlw	0
  5396  014C' EC00' F000'        	call	_LCDNokia_gotoXY
  5397                           
  5398                           ;Phases.c: 1393: LCDNokia_sendString(voltage3_RMS);
  5399  0150' 0E00'              	movlw	low phRmsVI@voltage3_RMS
  5400  0152' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  5401  0154' 0E00'              	movlw	high phRmsVI@voltage3_RMS
  5402  0156' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  5403  0158' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  5404                           
  5405                           ;Phases.c: 1394: LCDNokia_printValue(ATM_registers(VOLTAGE_RMS, PHASE_C_VOLTAGE_RMS));
  5406  015C' 0E40               	movlw	64
  5407  015E' 6E12'              	movwf	ATM_registers@reg,c
  5408  0160' 0E0B               	movlw	11
  5409  0162' EC00' F000'        	call	_ATM_registers
  5410  0166' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
  5411  016A' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
  5412  016E' 6A19'              	clrf	LCDNokia_printValue@value+2,c
  5413  0170' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
  5414  0172' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
  5415                           
  5416                           ;Phases.c: 1395: break;
  5417  0176' D051               	goto	l803
  5418  0178'                    
  5419                           ;Phases.c: 1397: LCDNokia_gotoXY(0,1);
  5420  0178' 0E01               	movlw	1
  5421  017A' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  5422  017C' 0E00               	movlw	0
  5423  017E' EC00' F000'        	call	_LCDNokia_gotoXY
  5424                           
  5425                           ;Phases.c: 1398: LCDNokia_sendString(current1_RMS);
  5426  0182' 0E00'              	movlw	low phRmsVI@current1_RMS
  5427  0184' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  5428  0186' 0E00'              	movlw	high phRmsVI@current1_RMS
  5429  0188' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  5430  018A' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  5431                           
  5432                           ;Phases.c: 1399: LCDNokia_printValue(ATM_registers(CURRENT_RMS, PHASE_A_CURRENT_RMS));
  5433  018E' 0E42               	movlw	66
  5434  0190' 6E12'              	movwf	ATM_registers@reg,c
  5435  0192' 0E0C               	movlw	12
  5436  0194' EC00' F000'        	call	_ATM_registers
  5437  0198' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
  5438  019C' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
  5439  01A0' 6A19'              	clrf	LCDNokia_printValue@value+2,c
  5440  01A2' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
  5441  01A4' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
  5442                           
  5443                           ;Phases.c: 1400: LCDNokia_gotoXY(0,2);
  5444  01A8' 0E02               	movlw	2
  5445  01AA' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  5446  01AC' 0E00               	movlw	0
  5447  01AE' EC00' F000'        	call	_LCDNokia_gotoXY
  5448                           
  5449                           ;Phases.c: 1401: LCDNokia_sendString(current2_RMS);
  5450  01B2' 0E00'              	movlw	low phRmsVI@current2_RMS
  5451  01B4' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  5452  01B6' 0E00'              	movlw	high phRmsVI@current2_RMS
  5453  01B8' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  5454  01BA' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  5455                           
  5456                           ;Phases.c: 1402: LCDNokia_printValue(ATM_registers(CURRENT_RMS, PHASE_B_CURRENT_RMS));
  5457  01BE' 0E43               	movlw	67
  5458  01C0' 6E12'              	movwf	ATM_registers@reg,c
  5459  01C2' 0E0C               	movlw	12
  5460  01C4' EC00' F000'        	call	_ATM_registers
  5461  01C8' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
  5462  01CC' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
  5463  01D0' 6A19'              	clrf	LCDNokia_printValue@value+2,c
  5464  01D2' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
  5465  01D4' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
  5466                           
  5467                           ;Phases.c: 1403: LCDNokia_gotoXY(0,3);
  5468  01D8' 0E03               	movlw	3
  5469  01DA' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  5470  01DC' 0E00               	movlw	0
  5471  01DE' EC00' F000'        	call	_LCDNokia_gotoXY
  5472                           
  5473                           ;Phases.c: 1404: LCDNokia_sendString(current3_RMS);
  5474  01E2' 0E00'              	movlw	low phRmsVI@current3_RMS
  5475  01E4' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  5476  01E6' 0E00'              	movlw	high phRmsVI@current3_RMS
  5477  01E8' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  5478  01EA' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  5479                           
  5480                           ;Phases.c: 1405: LCDNokia_printValue(ATM_registers(CURRENT_RMS, PHASE_C_CURRENT_RMS));
  5481  01EE' 0E44               	movlw	68
  5482  01F0' 6E12'              	movwf	ATM_registers@reg,c
  5483  01F2' 0E0C               	movlw	12
  5484  01F4' EC00' F000'        	call	_ATM_registers
  5485  01F8' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
  5486  01FC' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
  5487  0200' 6A19'              	clrf	LCDNokia_printValue@value+2,c
  5488  0202' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
  5489  0204' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
  5490                           
  5491                           ;Phases.c: 1409: }
  5492                           
  5493                           ;Phases.c: 1408: break;
  5494                           
  5495                           ;Phases.c: 1407: default:
  5496                           
  5497                           ;Phases.c: 1406: break;
  5498  0208' D008               	goto	l803
  5499  020A'                    l801:
  5500  020A' 0100               	movlb	0	; () banked
  5501  020C' 5100'              	movf	phRmsVI@counter& (0+255),w,b
  5502                           
  5503                           ; Switch size 1, requested type "space"
  5504                           ; Number of cases is 2, Range of values is 0 to 1
  5505                           ; switch strategies available:
  5506                           ; Name         Instructions Cycles
  5507                           ; simple_byte            7     4 (average)
  5508                           ;	Chosen strategy is simple_byte
  5509  020E' 0A00               	xorlw	0	; case 0
  5510  0210' B4D8               	btfsc	status,2,c
  5511  0212' D769               	goto	l802
  5512  0214' 0A01               	xorlw	1	; case 1
  5513  0216' B4D8               	btfsc	status,2,c
  5514  0218' D7AF               	goto	l804
  5515  021A'                    l803:
  5516                           
  5517                           ;Phases.c: 1410: return (currentRms1);
  5518  021A' C0AA' F026'        	movff	phRmsVI@currentRms1,?_phRmsVI
  5519  021E' C0AB' F027'        	movff	phRmsVI@currentRms1+1,?_phRmsVI+1
  5520  0222' C0AC' F028'        	movff	phRmsVI@currentRms1+2,?_phRmsVI+2
  5521  0226' 0012               	return		;funcret
  5522  0228'                    __end_of_phRmsVI:
  5523                           	opt stack 0
  5524                           tosu	equ	0xFFF
  5525                           tosh	equ	0xFFE
  5526                           tosl	equ	0xFFD
  5527                           pclath	equ	0xFFA
  5528                           tblptru	equ	0xFF8
  5529                           tblptrh	equ	0xFF7
  5530                           tblptrl	equ	0xFF6
  5531                           tablat	equ	0xFF5
  5532                           prodh	equ	0xFF4
  5533                           prodl	equ	0xFF3
  5534                           postinc0	equ	0xFEE
  5535                           wreg	equ	0xFE8
  5536                           postinc2	equ	0xFDE
  5537                           status	equ	0xFD8
  5538                           
  5539 ;; *************** function _exitPowerFactor *****************
  5540 ;; Defined at:
  5541 ;;		line 1515 in file "Phases.c"
  5542 ;; Parameters:    Size  Location     Type
  5543 ;;  data            2   38[COMRAM] struct .
  5544 ;; Auto vars:     Size  Location     Type
  5545 ;;		None
  5546 ;; Return value:  Size  Location     Type
  5547 ;;                  2   38[COMRAM] struct .
  5548 ;; Registers used:
  5549 ;;		wreg, status,2, status,0, cstack
  5550 ;; Tracked objects:
  5551 ;;		On entry : 0/0
  5552 ;;		On exit  : 0/0
  5553 ;;		Unchanged: 0/0
  5554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5555 ;;      Params:         2       0       0       0
  5556 ;;      Locals:         0       0       0       0
  5557 ;;      Temps:          0       0       0       0
  5558 ;;      Totals:         2       0       0       0
  5559 ;;Total ram usage:        2 bytes
  5560 ;; Hardware stack levels used:    1
  5561 ;; Hardware stack levels required when called:    4
  5562 ;; This function calls:
  5563 ;;		_LCDNokia_clear
  5564 ;; This function is called by:
  5565 ;;		_statePowerFactor
  5566 ;; This function uses a non-reentrant model
  5567 ;;
  5568                           
  5569                           	psect	text15
  5570  0000'                    __ptext15:
  5571                           	opt stack 0
  5572  0000'                    _exitPowerFactor:
  5573                           	opt stack 25
  5574                           
  5575                           ;Phases.c: 1518: static PhasePowerFactor_Type currentPowerFactor2;
  5576                           ;Phases.c: 1520: LCDNokia_clear();
  5577                           
  5578                           ;incstack = 0
  5579  0000' EC00' F000'        	call	_LCDNokia_clear	;wreg free
  5580                           
  5581                           ;Phases.c: 1522: currentPowerFactor2.phaseState = data.phaseState;
  5582  0004' C026' F0E6'        	movff	exitPowerFactor@data,exitPowerFactor@currentPowerFactor2
  5583                           
  5584                           ;Phases.c: 1523: currentPowerFactor2.stateMain = data.stateMain;
  5585  0008' C027' F0E7'        	movff	exitPowerFactor@data+1,exitPowerFactor@currentPowerFactor2+1
  5586                           
  5587                           ;Phases.c: 1525: return (currentPowerFactor2);
  5588  000C' C0E6' F026'        	movff	exitPowerFactor@currentPowerFactor2,?_exitPowerFactor
  5589  0010' C0E7' F027'        	movff	exitPowerFactor@currentPowerFactor2+1,?_exitPowerFactor+1
  5590  0014' 0012               	return	
  5591  0016'                    __end_of_exitPowerFactor:
  5592                           	opt stack 0
  5593                           tosu	equ	0xFFF
  5594                           tosh	equ	0xFFE
  5595                           tosl	equ	0xFFD
  5596                           pclath	equ	0xFFA
  5597                           tblptru	equ	0xFF8
  5598                           tblptrh	equ	0xFF7
  5599                           tblptrl	equ	0xFF6
  5600                           tablat	equ	0xFF5
  5601                           prodh	equ	0xFF4
  5602                           prodl	equ	0xFF3
  5603                           postinc0	equ	0xFEE
  5604                           wreg	equ	0xFE8
  5605                           postinc2	equ	0xFDE
  5606                           status	equ	0xFD8
  5607                           
  5608 ;; *************** function _phPowerFactor *****************
  5609 ;; Defined at:
  5610 ;;		line 1457 in file "Phases.c"
  5611 ;; Parameters:    Size  Location     Type
  5612 ;;  data            2   38[COMRAM] struct .
  5613 ;; Auto vars:     Size  Location     Type
  5614 ;;  total_factor   11   40[COMRAM] const unsigned char [11]
  5615 ;;  factor_power    8   67[COMRAM] const unsigned char [8]
  5616 ;;  factor_power    8   59[COMRAM] const unsigned char [8]
  5617 ;;  factor_power    8   51[COMRAM] const unsigned char [8]
  5618 ;;  maxScreens      1   75[COMRAM] const unsigned char 
  5619 ;; Return value:  Size  Location     Type
  5620 ;;                  2   38[COMRAM] struct .
  5621 ;; Registers used:
  5622 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5623 ;; Tracked objects:
  5624 ;;		On entry : 0/0
  5625 ;;		On exit  : 0/0
  5626 ;;		Unchanged: 0/0
  5627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5628 ;;      Params:         2       0       0       0
  5629 ;;      Locals:        36       0       0       0
  5630 ;;      Temps:          0       0       0       0
  5631 ;;      Totals:        38       0       0       0
  5632 ;;Total ram usage:       38 bytes
  5633 ;; Hardware stack levels used:    1
  5634 ;; Hardware stack levels required when called:    4
  5635 ;; This function calls:
  5636 ;;		_ATM_registers
  5637 ;;		_LCDNokia_clear
  5638 ;;		_LCDNokia_gotoXY
  5639 ;;		_LCDNokia_printValue
  5640 ;;		_LCDNokia_sendString
  5641 ;;		_getButton1
  5642 ;;		_getButton2
  5643 ;;		_getButton3
  5644 ;; This function is called by:
  5645 ;;		_statePowerFactor
  5646 ;; This function uses a non-reentrant model
  5647 ;;
  5648                           
  5649                           	psect	text16
  5650  0000'                    __ptext16:
  5651                           	opt stack 0
  5652  0000'                    _phPowerFactor:
  5653                           	opt stack 25
  5654                           
  5655                           ;Phases.c: 1459: static uint8_t counter = 0;
  5656                           ;Phases.c: 1460: const uint8_t maxScreens = 1;
  5657                           
  5658                           ;incstack = 0
  5659  0000' 0E01               	movlw	1
  5660  0002' 6E4B'              	movwf	phPowerFactor@maxScreens,c
  5661                           
  5662                           ;Phases.c: 1461: const uint8_t factor_powerP1[] = "PA PF: ";
  5663  0004' 0E00'              	movlw	low phPowerFactor@F3791
  5664  0006' 6EF6               	movwf	tblptrl,c
  5665  0008'                    	if	1	;There is more than 1 active tblptr byte
  5666  0008' 0E00'              	movlw	high phPowerFactor@F3791
  5667  000A' 6EF7               	movwf	tblptrh,c
  5668  000C'                    	endif
  5669  000C'                    	if	0	;There are less than 3 active tblptr bytes
  5670  000C'                    	endif
  5671  000C' EE20' F000'        	lfsr	2,phPowerFactor@factor_powerP1
  5672  0010' 0E07               	movlw	7
  5673  0012'                    u4280:
  5674  0012' 0009               	tblrd		*+
  5675  0014' CFF5 FFDE          	movff	tablat,postinc2
  5676  0018' 06E8               	decf	wreg,f,c
  5677  001A' E2FB               	bc	u4280
  5678                           
  5679                           ;Phases.c: 1462: const uint8_t factor_powerP2[] = "PB PF: ";
  5680  001C' 0E00'              	movlw	low phPowerFactor@F3793
  5681  001E' 6EF6               	movwf	tblptrl,c
  5682  0020'                    	if	1	;There is more than 1 active tblptr byte
  5683  0020' 0E00'              	movlw	high phPowerFactor@F3793
  5684  0022' 6EF7               	movwf	tblptrh,c
  5685  0024'                    	endif
  5686  0024'                    	if	0	;There are less than 3 active tblptr bytes
  5687  0024'                    	endif
  5688  0024' EE20' F000'        	lfsr	2,phPowerFactor@factor_powerP2
  5689  0028' 0E07               	movlw	7
  5690  002A'                    u4290:
  5691  002A' 0009               	tblrd		*+
  5692  002C' CFF5 FFDE          	movff	tablat,postinc2
  5693  0030' 06E8               	decf	wreg,f,c
  5694  0032' E2FB               	bc	u4290
  5695                           
  5696                           ;Phases.c: 1463: const uint8_t factor_powerP3[] = "PC PF: ";
  5697  0034' 0E00'              	movlw	low phPowerFactor@F3795
  5698  0036' 6EF6               	movwf	tblptrl,c
  5699  0038'                    	if	1	;There is more than 1 active tblptr byte
  5700  0038' 0E00'              	movlw	high phPowerFactor@F3795
  5701  003A' 6EF7               	movwf	tblptrh,c
  5702  003C'                    	endif
  5703  003C'                    	if	0	;There are less than 3 active tblptr bytes
  5704  003C'                    	endif
  5705  003C' EE20' F000'        	lfsr	2,phPowerFactor@factor_powerP3
  5706  0040' 0E07               	movlw	7
  5707  0042'                    u4300:
  5708  0042' 0009               	tblrd		*+
  5709  0044' CFF5 FFDE          	movff	tablat,postinc2
  5710  0048' 06E8               	decf	wreg,f,c
  5711  004A' E2FB               	bc	u4300
  5712                           
  5713                           ;Phases.c: 1465: const uint8_t total_factor_power[] = "Total PF: ";
  5714  004C' 0E00'              	movlw	low phPowerFactor@F3797
  5715  004E' 6EF6               	movwf	tblptrl,c
  5716  0050'                    	if	1	;There is more than 1 active tblptr byte
  5717  0050' 0E00'              	movlw	high phPowerFactor@F3797
  5718  0052' 6EF7               	movwf	tblptrh,c
  5719  0054'                    	endif
  5720  0054'                    	if	0	;There are less than 3 active tblptr bytes
  5721  0054'                    	endif
  5722  0054' EE20' F000'        	lfsr	2,phPowerFactor@total_factor_power
  5723  0058' 0E0A               	movlw	10
  5724  005A'                    u4310:
  5725  005A' 0009               	tblrd		*+
  5726  005C' CFF5 FFDE          	movff	tablat,postinc2
  5727  0060' 06E8               	decf	wreg,f,c
  5728  0062' E2FB               	bc	u4310
  5729                           
  5730                           ;Phases.c: 1468: static PhasePowerFactor_Type currentPowerFactor1;
  5731                           ;Phases.c: 1471: currentPowerFactor1.phaseState = PHASES_PF;
  5732  0064' 0E00               	movlw	0
  5733  0066' 0101               	movlb	1	; () banked
  5734  0068' 6F00'              	movwf	phPowerFactor@currentPowerFactor1& (0+255),b
  5735                           
  5736                           ; BSR set to: 1
  5737                           ;Phases.c: 1472: currentPowerFactor1.stateMain = data.stateMain;
  5738  006A' C027' F0E9'        	movff	phPowerFactor@data+1,phPowerFactor@currentPowerFactor1+1
  5739                           
  5740                           ; BSR set to: 1
  5741                           ;Phases.c: 1474: if(getButton1() == 1)
  5742  006E' EC00' F000'        	call	_getButton1	;wreg free
  5743  0072' 06E8               	decf	wreg,f,c
  5744  0074' A4D8               	btfss	status,2,c
  5745  0076' D003               	goto	l837
  5746                           
  5747                           ;Phases.c: 1475: {
  5748                           ;Phases.c: 1476: currentPowerFactor1.phaseState = EXIT_PF;
  5749  0078' 0E01               	movlw	1
  5750  007A' 0101               	movlb	1	; () banked
  5751  007C' 6F00'              	movwf	phPowerFactor@currentPowerFactor1& (0+255),b
  5752  007E'                    l837:
  5753                           
  5754                           ;Phases.c: 1477: }
  5755                           ;Phases.c: 1478: if(getButton2() == 1)
  5756                           
  5757                           ; BSR set to: 1
  5758  007E' EC00' F000'        	call	_getButton2	;wreg free
  5759  0082' 06E8               	decf	wreg,f,c
  5760  0084' A4D8               	btfss	status,2,c
  5761  0086' D003               	goto	l838
  5762                           
  5763                           ;Phases.c: 1479: {
  5764                           ;Phases.c: 1480: currentPowerFactor1.phaseState = EXIT_PF;
  5765  0088' 0E01               	movlw	1
  5766  008A' 0101               	movlb	1	; () banked
  5767  008C' 6F00'              	movwf	phPowerFactor@currentPowerFactor1& (0+255),b
  5768  008E'                    l838:
  5769                           
  5770                           ;Phases.c: 1481: }
  5771                           ;Phases.c: 1482: if(getButton3() == 1)
  5772                           
  5773                           ; BSR set to: 1
  5774  008E' EC00' F000'        	call	_getButton3	;wreg free
  5775  0092' 06E8               	decf	wreg,f,c
  5776  0094' A4D8               	btfss	status,2,c
  5777  0096' D06E               	goto	l841
  5778                           
  5779                           ;Phases.c: 1483: {
  5780                           ;Phases.c: 1484: counter++;
  5781  0098' 0100               	movlb	0	; () banked
  5782  009A' 2B00'              	incf	phPowerFactor@counter& (0+255),f,b
  5783                           
  5784                           ; BSR set to: 0
  5785                           ;Phases.c: 1485: LCDNokia_clear();
  5786  009C' EC00' F000'        	call	_LCDNokia_clear	;wreg free
  5787                           
  5788                           ;Phases.c: 1486: if(counter > maxScreens)
  5789  00A0' 0100               	movlb	0	; () banked
  5790  00A2' 5100'              	movf	phPowerFactor@counter& (0+255),w,b
  5791  00A4' 5C4B'              	subwf	phPowerFactor@maxScreens,w,c
  5792  00A6' B0D8               	btfsc	status,0,c
  5793  00A8' D065               	goto	l841
  5794                           
  5795                           ; BSR set to: 0
  5796                           ;Phases.c: 1487: {
  5797                           ;Phases.c: 1488: counter = 0;
  5798  00AA' 0E00               	movlw	0
  5799  00AC' 6F00'              	movwf	phPowerFactor@counter& (0+255),b
  5800                           
  5801                           ; BSR set to: 0
  5802                           ;Phases.c: 1489: }
  5803                           ;Phases.c: 1490: }
  5804                           ;Phases.c: 1491: switch(counter)
  5805                           
  5806                           ; BSR set to: 0
  5807  00AE' D062               	goto	l841
  5808  00B0'                    
  5809                           ; BSR set to: 0
  5810                           ;Phases.c: 1494: LCDNokia_gotoXY(0,1);
  5811                           
  5812                           ; BSR set to: 0
  5813  00B0' 0E01               	movlw	1
  5814  00B2' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  5815  00B4' 0E00               	movlw	0
  5816  00B6' EC00' F000'        	call	_LCDNokia_gotoXY
  5817                           
  5818                           ;Phases.c: 1495: LCDNokia_sendString(factor_powerP1);
  5819  00BA' 0E00'              	movlw	low phPowerFactor@factor_powerP1
  5820  00BC' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  5821  00BE' 0E00'              	movlw	high phPowerFactor@factor_powerP1
  5822  00C0' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  5823  00C2' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  5824                           
  5825                           ;Phases.c: 1496: LCDNokia_printValue(ATM_registers(POWER_FACTOR_TYPE, PHASE_A_POWER_FACT
      +                          OR));
  5826  00C6' 0E32               	movlw	50
  5827  00C8' 6E12'              	movwf	ATM_registers@reg,c
  5828  00CA' 0E08               	movlw	8
  5829  00CC' EC00' F000'        	call	_ATM_registers
  5830  00D0' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
  5831  00D4' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
  5832  00D8' 6A19'              	clrf	LCDNokia_printValue@value+2,c
  5833  00DA' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
  5834  00DC' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
  5835                           
  5836                           ;Phases.c: 1497: LCDNokia_gotoXY(0,2);
  5837  00E0' 0E02               	movlw	2
  5838  00E2' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  5839  00E4' 0E00               	movlw	0
  5840  00E6' EC00' F000'        	call	_LCDNokia_gotoXY
  5841                           
  5842                           ;Phases.c: 1498: LCDNokia_sendString(factor_powerP2);
  5843  00EA' 0E00'              	movlw	low phPowerFactor@factor_powerP2
  5844  00EC' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  5845  00EE' 0E00'              	movlw	high phPowerFactor@factor_powerP2
  5846  00F0' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  5847  00F2' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  5848                           
  5849                           ;Phases.c: 1499: LCDNokia_printValue(ATM_registers(POWER_FACTOR_TYPE, PHASE_B_POWER_FACT
      +                          OR));
  5850  00F6' 0E33               	movlw	51
  5851  00F8' 6E12'              	movwf	ATM_registers@reg,c
  5852  00FA' 0E08               	movlw	8
  5853  00FC' EC00' F000'        	call	_ATM_registers
  5854  0100' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
  5855  0104' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
  5856  0108' 6A19'              	clrf	LCDNokia_printValue@value+2,c
  5857  010A' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
  5858  010C' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
  5859                           
  5860                           ;Phases.c: 1500: LCDNokia_gotoXY(0,3);
  5861  0110' 0E03               	movlw	3
  5862  0112' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  5863  0114' 0E00               	movlw	0
  5864  0116' EC00' F000'        	call	_LCDNokia_gotoXY
  5865                           
  5866                           ;Phases.c: 1501: LCDNokia_sendString(factor_powerP3);
  5867  011A' 0E00'              	movlw	low phPowerFactor@factor_powerP3
  5868  011C' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  5869  011E' 0E00'              	movlw	high phPowerFactor@factor_powerP3
  5870  0120' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  5871  0122' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  5872                           
  5873                           ;Phases.c: 1502: LCDNokia_printValue(ATM_registers(POWER_FACTOR_TYPE, PHASE_C_POWER_FACT
      +                          OR));
  5874  0126' 0E34               	movlw	52
  5875  0128' 6E12'              	movwf	ATM_registers@reg,c
  5876  012A' 0E08               	movlw	8
  5877  012C' EC00' F000'        	call	_ATM_registers
  5878  0130' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
  5879  0134' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
  5880  0138' 6A19'              	clrf	LCDNokia_printValue@value+2,c
  5881  013A' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
  5882  013C' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
  5883                           
  5884                           ;Phases.c: 1503: break;
  5885  0140' D021               	goto	l843
  5886  0142'                    
  5887                           ;Phases.c: 1505: LCDNokia_gotoXY(0,1);
  5888  0142' 0E01               	movlw	1
  5889  0144' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  5890  0146' 0E00               	movlw	0
  5891  0148' EC00' F000'        	call	_LCDNokia_gotoXY
  5892                           
  5893                           ;Phases.c: 1506: LCDNokia_sendString(total_factor_power);
  5894  014C' 0E00'              	movlw	low phPowerFactor@total_factor_power
  5895  014E' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  5896  0150' 0E00'              	movlw	high phPowerFactor@total_factor_power
  5897  0152' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  5898  0154' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  5899                           
  5900                           ;Phases.c: 1507: LCDNokia_printValue(ATM_registers(POWER_FACTOR_TYPE, TOTAL_POWER_FACTOR
      +                          ));
  5901  0158' 0E31               	movlw	49
  5902  015A' 6E12'              	movwf	ATM_registers@reg,c
  5903  015C' 0E08               	movlw	8
  5904  015E' EC00' F000'        	call	_ATM_registers
  5905  0162' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
  5906  0166' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
  5907  016A' 6A19'              	clrf	LCDNokia_printValue@value+2,c
  5908  016C' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
  5909  016E' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
  5910                           
  5911                           ;Phases.c: 1511: }
  5912                           
  5913                           ;Phases.c: 1510: break;
  5914                           
  5915                           ;Phases.c: 1509: default:
  5916                           
  5917                           ;Phases.c: 1508: break;
  5918  0172' D008               	goto	l843
  5919  0174'                    l841:
  5920  0174' 0100               	movlb	0	; () banked
  5921  0176' 5100'              	movf	phPowerFactor@counter& (0+255),w,b
  5922                           
  5923                           ; Switch size 1, requested type "space"
  5924                           ; Number of cases is 2, Range of values is 0 to 1
  5925                           ; switch strategies available:
  5926                           ; Name         Instructions Cycles
  5927                           ; simple_byte            7     4 (average)
  5928                           ;	Chosen strategy is simple_byte
  5929  0178' 0A00               	xorlw	0	; case 0
  5930  017A' B4D8               	btfsc	status,2,c
  5931  017C' D799               	goto	l842
  5932  017E' 0A01               	xorlw	1	; case 1
  5933  0180' B4D8               	btfsc	status,2,c
  5934  0182' D7DF               	goto	l844
  5935  0184'                    l843:
  5936                           
  5937                           ;Phases.c: 1512: return (currentPowerFactor1);
  5938  0184' C0E8' F026'        	movff	phPowerFactor@currentPowerFactor1,?_phPowerFactor
  5939  0188' C0E9' F027'        	movff	phPowerFactor@currentPowerFactor1+1,?_phPowerFactor+1
  5940  018C' 0012               	return		;funcret
  5941  018E'                    __end_of_phPowerFactor:
  5942                           	opt stack 0
  5943                           tosu	equ	0xFFF
  5944                           tosh	equ	0xFFE
  5945                           tosl	equ	0xFFD
  5946                           pclath	equ	0xFFA
  5947                           tblptru	equ	0xFF8
  5948                           tblptrh	equ	0xFF7
  5949                           tblptrl	equ	0xFF6
  5950                           tablat	equ	0xFF5
  5951                           prodh	equ	0xFF4
  5952                           prodl	equ	0xFF3
  5953                           postinc0	equ	0xFEE
  5954                           wreg	equ	0xFE8
  5955                           postinc2	equ	0xFDE
  5956                           status	equ	0xFD8
  5957                           
  5958 ;; *************** function _exitPower2 *****************
  5959 ;; Defined at:
  5960 ;;		line 1333 in file "Phases.c"
  5961 ;; Parameters:    Size  Location     Type
  5962 ;;  data            3   38[COMRAM] struct .
  5963 ;; Auto vars:     Size  Location     Type
  5964 ;;		None
  5965 ;; Return value:  Size  Location     Type
  5966 ;;                  3   38[COMRAM] struct .
  5967 ;; Registers used:
  5968 ;;		wreg, status,2, status,0, cstack
  5969 ;; Tracked objects:
  5970 ;;		On entry : 0/0
  5971 ;;		On exit  : 0/0
  5972 ;;		Unchanged: 0/0
  5973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5974 ;;      Params:         3       0       0       0
  5975 ;;      Locals:         0       0       0       0
  5976 ;;      Temps:          0       0       0       0
  5977 ;;      Totals:         3       0       0       0
  5978 ;;Total ram usage:        3 bytes
  5979 ;; Hardware stack levels used:    1
  5980 ;; Hardware stack levels required when called:    4
  5981 ;; This function calls:
  5982 ;;		_LCDNokia_clear
  5983 ;; This function is called by:
  5984 ;;		_statePower2
  5985 ;; This function uses a non-reentrant model
  5986 ;;
  5987                           
  5988                           	psect	text17
  5989  0000'                    __ptext17:
  5990                           	opt stack 0
  5991  0000'                    _exitPower2:
  5992                           	opt stack 25
  5993                           
  5994                           ;Phases.c: 1336: static PhasePower2_Type currentPower2_3;
  5995                           ;Phases.c: 1338: LCDNokia_clear();
  5996                           
  5997                           ;incstack = 0
  5998  0000' EC00' F000'        	call	_LCDNokia_clear	;wreg free
  5999                           
  6000                           ;Phases.c: 1340: currentPower2_3.phaseState = data.phaseState;
  6001  0004' C027' F0AE'        	movff	exitPower2@data+1,exitPower2@currentPower2_3+1
  6002                           
  6003                           ;Phases.c: 1341: currentPower2_3.stateMain = data.stateMain;
  6004  0008' C028' F0AF'        	movff	exitPower2@data+2,exitPower2@currentPower2_3+2
  6005                           
  6006                           ;Phases.c: 1343: return (currentPower2_3);
  6007  000C' C0AD' F026'        	movff	exitPower2@currentPower2_3,?_exitPower2
  6008  0010' C0AE' F027'        	movff	exitPower2@currentPower2_3+1,?_exitPower2+1
  6009  0014' C0AF' F028'        	movff	exitPower2@currentPower2_3+2,?_exitPower2+2
  6010  0018' 0012               	return	
  6011  001A'                    __end_of_exitPower2:
  6012                           	opt stack 0
  6013                           tosu	equ	0xFFF
  6014                           tosh	equ	0xFFE
  6015                           tosl	equ	0xFFD
  6016                           pclath	equ	0xFFA
  6017                           tblptru	equ	0xFF8
  6018                           tblptrh	equ	0xFF7
  6019                           tblptrl	equ	0xFF6
  6020                           tablat	equ	0xFF5
  6021                           prodh	equ	0xFF4
  6022                           prodl	equ	0xFF3
  6023                           postinc0	equ	0xFEE
  6024                           wreg	equ	0xFE8
  6025                           postinc2	equ	0xFDE
  6026                           status	equ	0xFD8
  6027                           
  6028 ;; *************** function _fhPower2 *****************
  6029 ;; Defined at:
  6030 ;;		line 1236 in file "Phases.c"
  6031 ;; Parameters:    Size  Location     Type
  6032 ;;  data            3   38[COMRAM] struct .
  6033 ;; Auto vars:     Size  Location     Type
  6034 ;;  harmonic_Pow   10   50[BANK0 ] const unsigned char [10]
  6035 ;;  harmonic_Pow   10   40[BANK0 ] const unsigned char [10]
  6036 ;;  harmonic_Pow   10   30[BANK0 ] const unsigned char [10]
  6037 ;;  fundamental_   10   20[BANK0 ] const unsigned char [10]
  6038 ;;  fundamental_   10   10[BANK0 ] const unsigned char [10]
  6039 ;;  fundamental_   10    0[BANK0 ] const unsigned char [10]
  6040 ;;  maxScreens      1   60[BANK0 ] const unsigned char 
  6041 ;; Return value:  Size  Location     Type
  6042 ;;                  3   38[COMRAM] struct .
  6043 ;; Registers used:
  6044 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6045 ;; Tracked objects:
  6046 ;;		On entry : 0/0
  6047 ;;		On exit  : 0/0
  6048 ;;		Unchanged: 0/0
  6049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6050 ;;      Params:         3       0       0       0
  6051 ;;      Locals:         0      61       0       0
  6052 ;;      Temps:          0       0       0       0
  6053 ;;      Totals:         3      61       0       0
  6054 ;;Total ram usage:       64 bytes
  6055 ;; Hardware stack levels used:    1
  6056 ;; Hardware stack levels required when called:    4
  6057 ;; This function calls:
  6058 ;;		_ATM_registers
  6059 ;;		_LCDNokia_clear
  6060 ;;		_LCDNokia_gotoXY
  6061 ;;		_LCDNokia_printValue
  6062 ;;		_LCDNokia_sendString
  6063 ;;		_getButton1
  6064 ;;		_getButton2
  6065 ;;		_getButton3
  6066 ;; This function is called by:
  6067 ;;		_statePower2
  6068 ;; This function uses a non-reentrant model
  6069 ;;
  6070                           
  6071                           	psect	text18
  6072  0000'                    __ptext18:
  6073                           	opt stack 0
  6074  0000'                    _fhPower2:
  6075                           	opt stack 25
  6076                           
  6077                           ;Phases.c: 1238: static uint8_t counter = 0;
  6078                           ;Phases.c: 1239: const uint8_t maxScreens = 1;
  6079                           
  6080                           ;incstack = 0
  6081  0000' 0E01               	movlw	1
  6082  0002' 0100               	movlb	0	; () banked
  6083  0004' 6F00'              	movwf	fhPower2@maxScreens& (0+255),b
  6084                           
  6085                           ; BSR set to: 0
  6086                           ;Phases.c: 1240: const uint8_t fundamental_PowerP1[] = "PA FPow: ";
  6087  0006' 0E00'              	movlw	low fhPower2@F3743
  6088  0008' 6EF6               	movwf	tblptrl,c
  6089  000A'                    	if	1	;There is more than 1 active tblptr byte
  6090  000A' 0E00'              	movlw	high fhPower2@F3743
  6091  000C' 6EF7               	movwf	tblptrh,c
  6092  000E'                    	endif
  6093  000E'                    	if	0	;There are less than 3 active tblptr bytes
  6094  000E'                    	endif
  6095  000E' EE20' F000'        	lfsr	2,fhPower2@fundamental_PowerP1
  6096  0012' 0E09               	movlw	9
  6097  0014'                    u4000:
  6098  0014' 0009               	tblrd		*+
  6099  0016' CFF5 FFDE          	movff	tablat,postinc2
  6100  001A' 06E8               	decf	wreg,f,c
  6101  001C' E2FB               	bc	u4000
  6102                           
  6103                           ; BSR set to: 0
  6104                           ;Phases.c: 1241: const uint8_t fundamental_PowerP2[] = "PB FPow: ";
  6105  001E' 0E00'              	movlw	low fhPower2@F3745
  6106  0020' 6EF6               	movwf	tblptrl,c
  6107  0022'                    	if	1	;There is more than 1 active tblptr byte
  6108  0022' 0E00'              	movlw	high fhPower2@F3745
  6109  0024' 6EF7               	movwf	tblptrh,c
  6110  0026'                    	endif
  6111  0026'                    	if	0	;There are less than 3 active tblptr bytes
  6112  0026'                    	endif
  6113  0026' EE20' F000'        	lfsr	2,fhPower2@fundamental_PowerP2
  6114  002A' 0E09               	movlw	9
  6115  002C'                    u4010:
  6116  002C' 0009               	tblrd		*+
  6117  002E' CFF5 FFDE          	movff	tablat,postinc2
  6118  0032' 06E8               	decf	wreg,f,c
  6119  0034' E2FB               	bc	u4010
  6120                           
  6121                           ; BSR set to: 0
  6122                           ;Phases.c: 1242: const uint8_t fundamental_PowerP3[] = "PC FPow: ";
  6123  0036' 0E00'              	movlw	low fhPower2@F3747
  6124  0038' 6EF6               	movwf	tblptrl,c
  6125  003A'                    	if	1	;There is more than 1 active tblptr byte
  6126  003A' 0E00'              	movlw	high fhPower2@F3747
  6127  003C' 6EF7               	movwf	tblptrh,c
  6128  003E'                    	endif
  6129  003E'                    	if	0	;There are less than 3 active tblptr bytes
  6130  003E'                    	endif
  6131  003E' EE20' F000'        	lfsr	2,fhPower2@fundamental_PowerP3
  6132  0042' 0E09               	movlw	9
  6133  0044'                    u4020:
  6134  0044' 0009               	tblrd		*+
  6135  0046' CFF5 FFDE          	movff	tablat,postinc2
  6136  004A' 06E8               	decf	wreg,f,c
  6137  004C' E2FB               	bc	u4020
  6138                           
  6139                           ; BSR set to: 0
  6140                           ;Phases.c: 1244: const uint8_t harmonic_PowerP1[] = "PA HPow: ";
  6141  004E' 0E00'              	movlw	low fhPower2@F3749
  6142  0050' 6EF6               	movwf	tblptrl,c
  6143  0052'                    	if	1	;There is more than 1 active tblptr byte
  6144  0052' 0E00'              	movlw	high fhPower2@F3749
  6145  0054' 6EF7               	movwf	tblptrh,c
  6146  0056'                    	endif
  6147  0056'                    	if	0	;There are less than 3 active tblptr bytes
  6148  0056'                    	endif
  6149  0056' EE20' F000'        	lfsr	2,fhPower2@harmonic_PowerP1
  6150  005A' 0E09               	movlw	9
  6151  005C'                    u4030:
  6152  005C' 0009               	tblrd		*+
  6153  005E' CFF5 FFDE          	movff	tablat,postinc2
  6154  0062' 06E8               	decf	wreg,f,c
  6155  0064' E2FB               	bc	u4030
  6156                           
  6157                           ; BSR set to: 0
  6158                           ;Phases.c: 1245: const uint8_t harmonic_PowerP2[] = "PB HPow: ";
  6159  0066' 0E00'              	movlw	low fhPower2@F3751
  6160  0068' 6EF6               	movwf	tblptrl,c
  6161  006A'                    	if	1	;There is more than 1 active tblptr byte
  6162  006A' 0E00'              	movlw	high fhPower2@F3751
  6163  006C' 6EF7               	movwf	tblptrh,c
  6164  006E'                    	endif
  6165  006E'                    	if	0	;There are less than 3 active tblptr bytes
  6166  006E'                    	endif
  6167  006E' EE20' F000'        	lfsr	2,fhPower2@harmonic_PowerP2
  6168  0072' 0E09               	movlw	9
  6169  0074'                    u4040:
  6170  0074' 0009               	tblrd		*+
  6171  0076' CFF5 FFDE          	movff	tablat,postinc2
  6172  007A' 06E8               	decf	wreg,f,c
  6173  007C' E2FB               	bc	u4040
  6174                           
  6175                           ; BSR set to: 0
  6176                           ;Phases.c: 1246: const uint8_t harmonic_PowerP3[] = "PC HPow: ";
  6177  007E' 0E00'              	movlw	low fhPower2@F3753
  6178  0080' 6EF6               	movwf	tblptrl,c
  6179  0082'                    	if	1	;There is more than 1 active tblptr byte
  6180  0082' 0E00'              	movlw	high fhPower2@F3753
  6181  0084' 6EF7               	movwf	tblptrh,c
  6182  0086'                    	endif
  6183  0086'                    	if	0	;There are less than 3 active tblptr bytes
  6184  0086'                    	endif
  6185  0086' EE20' F000'        	lfsr	2,fhPower2@harmonic_PowerP3
  6186  008A' 0E09               	movlw	9
  6187  008C'                    u4050:
  6188  008C' 0009               	tblrd		*+
  6189  008E' CFF5 FFDE          	movff	tablat,postinc2
  6190  0092' 06E8               	decf	wreg,f,c
  6191  0094' E2FB               	bc	u4050
  6192                           
  6193                           ;Phases.c: 1249: static PhasePower2_Type currentPower2_1;
  6194                           ;Phases.c: 1252: currentPower2_1.phaseState = FH_POWER2;
  6195  0096' 0E00               	movlw	0
  6196  0098' 0101               	movlb	1	; () banked
  6197  009A' 6F00'              	movwf	(fhPower2@currentPower2_1+1)& (0+255),b
  6198                           
  6199                           ; BSR set to: 1
  6200                           ;Phases.c: 1253: currentPower2_1.stateMain = data.stateMain;
  6201  009C' C028' F0B5'        	movff	fhPower2@data+2,fhPower2@currentPower2_1+2
  6202                           
  6203                           ; BSR set to: 1
  6204                           ;Phases.c: 1255: if(getButton1() == 1)
  6205  00A0' EC00' F000'        	call	_getButton1	;wreg free
  6206  00A4' 06E8               	decf	wreg,f,c
  6207  00A6' A4D8               	btfss	status,2,c
  6208  00A8' D003               	goto	l753
  6209                           
  6210                           ;Phases.c: 1256: {
  6211                           ;Phases.c: 1257: currentPower2_1.phaseState = EXIT_POWER2;
  6212  00AA' 0E02               	movlw	2
  6213  00AC' 0101               	movlb	1	; () banked
  6214  00AE' 6F00'              	movwf	(fhPower2@currentPower2_1+1)& (0+255),b
  6215  00B0'                    l753:
  6216                           
  6217                           ;Phases.c: 1258: }
  6218                           ;Phases.c: 1259: if(getButton2() == 1)
  6219                           
  6220                           ; BSR set to: 1
  6221  00B0' EC00' F000'        	call	_getButton2	;wreg free
  6222  00B4' 06E8               	decf	wreg,f,c
  6223  00B6' A4D8               	btfss	status,2,c
  6224  00B8' D005               	goto	l754
  6225                           
  6226                           ;Phases.c: 1260: {
  6227                           ;Phases.c: 1261: currentPower2_1.phaseState = PHASES_POWER2;
  6228  00BA' 0E01               	movlw	1
  6229  00BC' 0101               	movlb	1	; () banked
  6230  00BE' 6F00'              	movwf	(fhPower2@currentPower2_1+1)& (0+255),b
  6231                           
  6232                           ; BSR set to: 1
  6233                           ;Phases.c: 1262: LCDNokia_clear();
  6234  00C0' EC00' F000'        	call	_LCDNokia_clear	;wreg free
  6235  00C4'                    l754:
  6236                           
  6237                           ;Phases.c: 1263: }
  6238                           ;Phases.c: 1264: if(getButton3() == 1)
  6239  00C4' EC00' F000'        	call	_getButton3	;wreg free
  6240  00C8' 06E8               	decf	wreg,f,c
  6241  00CA' A4D8               	btfss	status,2,c
  6242  00CC' D09E               	goto	l757
  6243                           
  6244                           ;Phases.c: 1265: {
  6245                           ;Phases.c: 1266: counter++;
  6246  00CE' 0100               	movlb	0	; () banked
  6247  00D0' 2B00'              	incf	fhPower2@counter& (0+255),f,b
  6248                           
  6249                           ; BSR set to: 0
  6250                           ;Phases.c: 1267: LCDNokia_clear();
  6251  00D2' EC00' F000'        	call	_LCDNokia_clear	;wreg free
  6252                           
  6253                           ;Phases.c: 1268: if(counter > maxScreens)
  6254  00D6' 0100               	movlb	0	; () banked
  6255  00D8' 5100'              	movf	fhPower2@counter& (0+255),w,b
  6256  00DA' 5D00'              	subwf	fhPower2@maxScreens& (0+255),w,b
  6257  00DC' B0D8               	btfsc	status,0,c
  6258  00DE' D095               	goto	l757
  6259                           
  6260                           ; BSR set to: 0
  6261                           ;Phases.c: 1269: {
  6262                           ;Phases.c: 1270: counter = 0;
  6263  00E0' 0E00               	movlw	0
  6264  00E2' 6F00'              	movwf	fhPower2@counter& (0+255),b
  6265                           
  6266                           ; BSR set to: 0
  6267                           ;Phases.c: 1271: }
  6268                           ;Phases.c: 1272: }
  6269                           ;Phases.c: 1273: switch(counter)
  6270                           
  6271                           ; BSR set to: 0
  6272  00E4' D092               	goto	l757
  6273  00E6'                    
  6274                           ; BSR set to: 0
  6275                           ;Phases.c: 1276: LCDNokia_gotoXY(0,1);
  6276                           
  6277                           ; BSR set to: 0
  6278  00E6' 0E01               	movlw	1
  6279  00E8' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  6280  00EA' 0E00               	movlw	0
  6281  00EC' EC00' F000'        	call	_LCDNokia_gotoXY
  6282                           
  6283                           ;Phases.c: 1277: LCDNokia_sendString(fundamental_PowerP1);
  6284  00F0' 0E00'              	movlw	low fhPower2@fundamental_PowerP1
  6285  00F2' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  6286  00F4' 0E00'              	movlw	high fhPower2@fundamental_PowerP1
  6287  00F6' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  6288  00F8' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  6289                           
  6290                           ;Phases.c: 1278: LCDNokia_printValue(ATM_registers(FUNDAMENTAL_POWER, PHASE_A_ACTIVE_FUN
      +                          D_POWER));
  6291  00FC' 0E36               	movlw	54
  6292  00FE' 6E12'              	movwf	ATM_registers@reg,c
  6293  0100' 0E09               	movlw	9
  6294  0102' EC00' F000'        	call	_ATM_registers
  6295  0106' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
  6296  010A' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
  6297  010E' 6A19'              	clrf	LCDNokia_printValue@value+2,c
  6298  0110' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
  6299  0112' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
  6300                           
  6301                           ;Phases.c: 1279: LCDNokia_gotoXY(0,2);
  6302  0116' 0E02               	movlw	2
  6303  0118' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  6304  011A' 0E00               	movlw	0
  6305  011C' EC00' F000'        	call	_LCDNokia_gotoXY
  6306                           
  6307                           ;Phases.c: 1280: LCDNokia_sendString(fundamental_PowerP2);
  6308  0120' 0E00'              	movlw	low fhPower2@fundamental_PowerP2
  6309  0122' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  6310  0124' 0E00'              	movlw	high fhPower2@fundamental_PowerP2
  6311  0126' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  6312  0128' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  6313                           
  6314                           ;Phases.c: 1281: LCDNokia_printValue(ATM_registers(FUNDAMENTAL_POWER, PHASE_B_ACTIVE_FUN
      +                          D_POWER));
  6315  012C' 0E37               	movlw	55
  6316  012E' 6E12'              	movwf	ATM_registers@reg,c
  6317  0130' 0E09               	movlw	9
  6318  0132' EC00' F000'        	call	_ATM_registers
  6319  0136' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
  6320  013A' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
  6321  013E' 6A19'              	clrf	LCDNokia_printValue@value+2,c
  6322  0140' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
  6323  0142' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
  6324                           
  6325                           ;Phases.c: 1282: LCDNokia_gotoXY(0,3);
  6326  0146' 0E03               	movlw	3
  6327  0148' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  6328  014A' 0E00               	movlw	0
  6329  014C' EC00' F000'        	call	_LCDNokia_gotoXY
  6330                           
  6331                           ;Phases.c: 1283: LCDNokia_sendString(fundamental_PowerP3);
  6332  0150' 0E00'              	movlw	low fhPower2@fundamental_PowerP3
  6333  0152' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  6334  0154' 0E00'              	movlw	high fhPower2@fundamental_PowerP3
  6335  0156' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  6336  0158' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  6337                           
  6338                           ;Phases.c: 1284: LCDNokia_printValue(ATM_registers(FUNDAMENTAL_POWER, PHASE_C_ACTIVE_FUN
      +                          D_POWER));
  6339  015C' 0E38               	movlw	56
  6340  015E' 6E12'              	movwf	ATM_registers@reg,c
  6341  0160' 0E09               	movlw	9
  6342  0162' EC00' F000'        	call	_ATM_registers
  6343  0166' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
  6344  016A' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
  6345  016E' 6A19'              	clrf	LCDNokia_printValue@value+2,c
  6346  0170' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
  6347  0172' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
  6348                           
  6349                           ;Phases.c: 1285: break;
  6350  0176' D051               	goto	l759
  6351  0178'                    
  6352                           ;Phases.c: 1287: LCDNokia_gotoXY(0,1);
  6353  0178' 0E01               	movlw	1
  6354  017A' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  6355  017C' 0E00               	movlw	0
  6356  017E' EC00' F000'        	call	_LCDNokia_gotoXY
  6357                           
  6358                           ;Phases.c: 1288: LCDNokia_sendString(harmonic_PowerP1);
  6359  0182' 0E00'              	movlw	low fhPower2@harmonic_PowerP1
  6360  0184' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  6361  0186' 0E00'              	movlw	high fhPower2@harmonic_PowerP1
  6362  0188' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  6363  018A' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  6364                           
  6365                           ;Phases.c: 1289: LCDNokia_printValue(ATM_registers(HARMONIC_POWER, PHASE_A_ACTIVE_HARM_P
      +                          OWER));
  6366  018E' 0E3A               	movlw	58
  6367  0190' 6E12'              	movwf	ATM_registers@reg,c
  6368  0192' 0E0A               	movlw	10
  6369  0194' EC00' F000'        	call	_ATM_registers
  6370  0198' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
  6371  019C' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
  6372  01A0' 6A19'              	clrf	LCDNokia_printValue@value+2,c
  6373  01A2' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
  6374  01A4' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
  6375                           
  6376                           ;Phases.c: 1290: LCDNokia_gotoXY(0,2);
  6377  01A8' 0E02               	movlw	2
  6378  01AA' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  6379  01AC' 0E00               	movlw	0
  6380  01AE' EC00' F000'        	call	_LCDNokia_gotoXY
  6381                           
  6382                           ;Phases.c: 1291: LCDNokia_sendString(harmonic_PowerP2);
  6383  01B2' 0E00'              	movlw	low fhPower2@harmonic_PowerP2
  6384  01B4' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  6385  01B6' 0E00'              	movlw	high fhPower2@harmonic_PowerP2
  6386  01B8' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  6387  01BA' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  6388                           
  6389                           ;Phases.c: 1292: LCDNokia_printValue(ATM_registers(HARMONIC_POWER, PHASE_B_ACTIVE_HARM_P
      +                          OWER));
  6390  01BE' 0E3B               	movlw	59
  6391  01C0' 6E12'              	movwf	ATM_registers@reg,c
  6392  01C2' 0E0A               	movlw	10
  6393  01C4' EC00' F000'        	call	_ATM_registers
  6394  01C8' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
  6395  01CC' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
  6396  01D0' 6A19'              	clrf	LCDNokia_printValue@value+2,c
  6397  01D2' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
  6398  01D4' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
  6399                           
  6400                           ;Phases.c: 1293: LCDNokia_gotoXY(0,3);
  6401  01D8' 0E03               	movlw	3
  6402  01DA' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  6403  01DC' 0E00               	movlw	0
  6404  01DE' EC00' F000'        	call	_LCDNokia_gotoXY
  6405                           
  6406                           ;Phases.c: 1294: LCDNokia_sendString(harmonic_PowerP3);
  6407  01E2' 0E00'              	movlw	low fhPower2@harmonic_PowerP3
  6408  01E4' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  6409  01E6' 0E00'              	movlw	high fhPower2@harmonic_PowerP3
  6410  01E8' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  6411  01EA' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  6412                           
  6413                           ;Phases.c: 1295: LCDNokia_printValue(ATM_registers(HARMONIC_POWER, PHASE_C_ACTIVE_HARM_P
      +                          OWER));
  6414  01EE' 0E3C               	movlw	60
  6415  01F0' 6E12'              	movwf	ATM_registers@reg,c
  6416  01F2' 0E0A               	movlw	10
  6417  01F4' EC00' F000'        	call	_ATM_registers
  6418  01F8' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
  6419  01FC' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
  6420  0200' 6A19'              	clrf	LCDNokia_printValue@value+2,c
  6421  0202' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
  6422  0204' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
  6423                           
  6424                           ;Phases.c: 1299: }
  6425                           
  6426                           ;Phases.c: 1298: break;
  6427                           
  6428                           ;Phases.c: 1297: default:
  6429                           
  6430                           ;Phases.c: 1296: break;
  6431  0208' D008               	goto	l759
  6432  020A'                    l757:
  6433  020A' 0100               	movlb	0	; () banked
  6434  020C' 5100'              	movf	fhPower2@counter& (0+255),w,b
  6435                           
  6436                           ; Switch size 1, requested type "space"
  6437                           ; Number of cases is 2, Range of values is 0 to 1
  6438                           ; switch strategies available:
  6439                           ; Name         Instructions Cycles
  6440                           ; simple_byte            7     4 (average)
  6441                           ;	Chosen strategy is simple_byte
  6442  020E' 0A00               	xorlw	0	; case 0
  6443  0210' B4D8               	btfsc	status,2,c
  6444  0212' D769               	goto	l758
  6445  0214' 0A01               	xorlw	1	; case 1
  6446  0216' B4D8               	btfsc	status,2,c
  6447  0218' D7AF               	goto	l760
  6448  021A'                    l759:
  6449                           
  6450                           ;Phases.c: 1300: return (currentPower2_1);
  6451  021A' C0B3' F026'        	movff	fhPower2@currentPower2_1,?_fhPower2
  6452  021E' C0B4' F027'        	movff	fhPower2@currentPower2_1+1,?_fhPower2+1
  6453  0222' C0B5' F028'        	movff	fhPower2@currentPower2_1+2,?_fhPower2+2
  6454  0226' 0012               	return		;funcret
  6455  0228'                    __end_of_fhPower2:
  6456                           	opt stack 0
  6457                           tosu	equ	0xFFF
  6458                           tosh	equ	0xFFE
  6459                           tosl	equ	0xFFD
  6460                           pclath	equ	0xFFA
  6461                           tblptru	equ	0xFF8
  6462                           tblptrh	equ	0xFF7
  6463                           tblptrl	equ	0xFF6
  6464                           tablat	equ	0xFF5
  6465                           prodh	equ	0xFF4
  6466                           prodl	equ	0xFF3
  6467                           postinc0	equ	0xFEE
  6468                           wreg	equ	0xFE8
  6469                           postinc2	equ	0xFDE
  6470                           status	equ	0xFD8
  6471                           
  6472 ;; *************** function _phPower2 *****************
  6473 ;; Defined at:
  6474 ;;		line 1303 in file "Phases.c"
  6475 ;; Parameters:    Size  Location     Type
  6476 ;;  data            3   38[COMRAM] struct .
  6477 ;; Auto vars:     Size  Location     Type
  6478 ;;  harmonic_Tot   13   54[COMRAM] const unsigned char [13]
  6479 ;;  fundamental_   13   41[COMRAM] const unsigned char [13]
  6480 ;; Return value:  Size  Location     Type
  6481 ;;                  3   38[COMRAM] struct .
  6482 ;; Registers used:
  6483 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6484 ;; Tracked objects:
  6485 ;;		On entry : 0/0
  6486 ;;		On exit  : 0/0
  6487 ;;		Unchanged: 0/0
  6488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6489 ;;      Params:         3       0       0       0
  6490 ;;      Locals:        26       0       0       0
  6491 ;;      Temps:          0       0       0       0
  6492 ;;      Totals:        29       0       0       0
  6493 ;;Total ram usage:       29 bytes
  6494 ;; Hardware stack levels used:    1
  6495 ;; Hardware stack levels required when called:    4
  6496 ;; This function calls:
  6497 ;;		_ATM_registers
  6498 ;;		_LCDNokia_gotoXY
  6499 ;;		_LCDNokia_printValue
  6500 ;;		_LCDNokia_sendString
  6501 ;;		_getButton1
  6502 ;;		_getButton2
  6503 ;; This function is called by:
  6504 ;;		_statePower2
  6505 ;; This function uses a non-reentrant model
  6506 ;;
  6507                           
  6508                           	psect	text19
  6509  0000'                    __ptext19:
  6510                           	opt stack 0
  6511  0000'                    _phPower2:
  6512                           	opt stack 25
  6513                           
  6514                           ;Phases.c: 1305: const uint8_t fundamental_Total_Power[] = "Total FPow: ";
  6515                           
  6516                           ;incstack = 0
  6517  0000' 0E00'              	movlw	low phPower2@F3757
  6518  0002' 6EF6               	movwf	tblptrl,c
  6519  0004'                    	if	1	;There is more than 1 active tblptr byte
  6520  0004' 0E00'              	movlw	high phPower2@F3757
  6521  0006' 6EF7               	movwf	tblptrh,c
  6522  0008'                    	endif
  6523  0008'                    	if	0	;There are less than 3 active tblptr bytes
  6524  0008'                    	endif
  6525  0008' EE20' F000'        	lfsr	2,phPower2@fundamental_Total_Power
  6526  000C' 0E0C               	movlw	12
  6527  000E'                    u4100:
  6528  000E' 0009               	tblrd		*+
  6529  0010' CFF5 FFDE          	movff	tablat,postinc2
  6530  0014' 06E8               	decf	wreg,f,c
  6531  0016' E2FB               	bc	u4100
  6532                           
  6533                           ;Phases.c: 1306: const uint8_t harmonic_Total_Power[] = "Total HPow: ";
  6534  0018' 0E00'              	movlw	low phPower2@F3759
  6535  001A' 6EF6               	movwf	tblptrl,c
  6536  001C'                    	if	1	;There is more than 1 active tblptr byte
  6537  001C' 0E00'              	movlw	high phPower2@F3759
  6538  001E' 6EF7               	movwf	tblptrh,c
  6539  0020'                    	endif
  6540  0020'                    	if	0	;There are less than 3 active tblptr bytes
  6541  0020'                    	endif
  6542  0020' EE20' F000'        	lfsr	2,phPower2@harmonic_Total_Power
  6543  0024' 0E0C               	movlw	12
  6544  0026'                    u4110:
  6545  0026' 0009               	tblrd		*+
  6546  0028' CFF5 FFDE          	movff	tablat,postinc2
  6547  002C' 06E8               	decf	wreg,f,c
  6548  002E' E2FB               	bc	u4110
  6549                           
  6550                           ;Phases.c: 1309: static PhasePower2_Type currentPower2_2;
  6551                           ;Phases.c: 1312: currentPower2_2.phaseState = PHASES_POWER2;
  6552  0030' 0E01               	movlw	1
  6553  0032' 0101               	movlb	1	; () banked
  6554  0034' 6F00'              	movwf	(phPower2@currentPower2_2+1)& (0+255),b
  6555                           
  6556                           ; BSR set to: 1
  6557                           ;Phases.c: 1313: currentPower2_2.stateMain = data.stateMain;
  6558  0036' C028' F0B2'        	movff	phPower2@data+2,phPower2@currentPower2_2+2
  6559                           
  6560                           ; BSR set to: 1
  6561                           ;Phases.c: 1315: if(getButton1() == 1)
  6562  003A' EC00' F000'        	call	_getButton1	;wreg free
  6563  003E' 06E8               	decf	wreg,f,c
  6564  0040' A4D8               	btfss	status,2,c
  6565  0042' D003               	goto	l771
  6566                           
  6567                           ;Phases.c: 1316: {
  6568                           ;Phases.c: 1317: currentPower2_2.phaseState = EXIT_POWER2;
  6569  0044' 0E02               	movlw	2
  6570  0046' 0101               	movlb	1	; () banked
  6571  0048' 6F00'              	movwf	(phPower2@currentPower2_2+1)& (0+255),b
  6572  004A'                    l771:
  6573                           
  6574                           ;Phases.c: 1318: }
  6575                           ;Phases.c: 1319: if(getButton2() == 1)
  6576                           
  6577                           ; BSR set to: 1
  6578  004A' EC00' F000'        	call	_getButton2	;wreg free
  6579  004E' 06E8               	decf	wreg,f,c
  6580  0050' A4D8               	btfss	status,2,c
  6581  0052' D003               	goto	l772
  6582                           
  6583                           ;Phases.c: 1320: {
  6584                           ;Phases.c: 1321: currentPower2_2.phaseState = EXIT_POWER2;
  6585  0054' 0E02               	movlw	2
  6586  0056' 0101               	movlb	1	; () banked
  6587  0058' 6F00'              	movwf	(phPower2@currentPower2_2+1)& (0+255),b
  6588  005A'                    l772:
  6589                           
  6590                           ;Phases.c: 1322: }
  6591                           ;Phases.c: 1323: LCDNokia_gotoXY(0,1);
  6592                           
  6593                           ; BSR set to: 1
  6594  005A' 0E01               	movlw	1
  6595  005C' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  6596  005E' 0E00               	movlw	0
  6597  0060' EC00' F000'        	call	_LCDNokia_gotoXY
  6598                           
  6599                           ;Phases.c: 1324: LCDNokia_sendString(fundamental_Total_Power);
  6600  0064' 0E00'              	movlw	low phPower2@fundamental_Total_Power
  6601  0066' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  6602  0068' 0E00'              	movlw	high phPower2@fundamental_Total_Power
  6603  006A' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  6604  006C' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  6605                           
  6606                           ;Phases.c: 1325: LCDNokia_printValue(ATM_registers(FUNDAMENTAL_POWER, TOTAL_ACTIVE_FUND_
      +                          POWER));
  6607  0070' 0E35               	movlw	53
  6608  0072' 6E12'              	movwf	ATM_registers@reg,c
  6609  0074' 0E09               	movlw	9
  6610  0076' EC00' F000'        	call	_ATM_registers
  6611  007A' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
  6612  007E' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
  6613  0082' 6A19'              	clrf	LCDNokia_printValue@value+2,c
  6614  0084' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
  6615  0086' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
  6616                           
  6617                           ;Phases.c: 1326: LCDNokia_gotoXY(0,2);
  6618  008A' 0E02               	movlw	2
  6619  008C' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  6620  008E' 0E00               	movlw	0
  6621  0090' EC00' F000'        	call	_LCDNokia_gotoXY
  6622                           
  6623                           ;Phases.c: 1327: LCDNokia_sendString(harmonic_Total_Power);
  6624  0094' 0E00'              	movlw	low phPower2@harmonic_Total_Power
  6625  0096' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  6626  0098' 0E00'              	movlw	high phPower2@harmonic_Total_Power
  6627  009A' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  6628  009C' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  6629                           
  6630                           ;Phases.c: 1328: LCDNokia_printValue(ATM_registers(HARMONIC_POWER, TOTAL_ACTIVE_HARM_POW
      +                          ER));
  6631  00A0' 0E39               	movlw	57
  6632  00A2' 6E12'              	movwf	ATM_registers@reg,c
  6633  00A4' 0E0A               	movlw	10
  6634  00A6' EC00' F000'        	call	_ATM_registers
  6635  00AA' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
  6636  00AE' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
  6637  00B2' 6A19'              	clrf	LCDNokia_printValue@value+2,c
  6638  00B4' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
  6639  00B6' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
  6640                           
  6641                           ;Phases.c: 1330: return (currentPower2_2);
  6642  00BA' C0B0' F026'        	movff	phPower2@currentPower2_2,?_phPower2
  6643  00BE' C0B1' F027'        	movff	phPower2@currentPower2_2+1,?_phPower2+1
  6644  00C2' C0B2' F028'        	movff	phPower2@currentPower2_2+2,?_phPower2+2
  6645  00C6' 0012               	return	
  6646  00C8'                    __end_of_phPower2:
  6647                           	opt stack 0
  6648                           tosu	equ	0xFFF
  6649                           tosh	equ	0xFFE
  6650                           tosl	equ	0xFFD
  6651                           pclath	equ	0xFFA
  6652                           tblptru	equ	0xFF8
  6653                           tblptrh	equ	0xFF7
  6654                           tblptrl	equ	0xFF6
  6655                           tablat	equ	0xFF5
  6656                           prodh	equ	0xFF4
  6657                           prodl	equ	0xFF3
  6658                           postinc0	equ	0xFEE
  6659                           wreg	equ	0xFE8
  6660                           postinc2	equ	0xFDE
  6661                           status	equ	0xFD8
  6662                           
  6663 ;; *************** function _exitPower1 *****************
  6664 ;; Defined at:
  6665 ;;		line 1223 in file "Phases.c"
  6666 ;; Parameters:    Size  Location     Type
  6667 ;;  data            3   38[COMRAM] struct .
  6668 ;; Auto vars:     Size  Location     Type
  6669 ;;		None
  6670 ;; Return value:  Size  Location     Type
  6671 ;;                  3   38[COMRAM] struct .
  6672 ;; Registers used:
  6673 ;;		wreg, status,2, status,0, cstack
  6674 ;; Tracked objects:
  6675 ;;		On entry : 0/0
  6676 ;;		On exit  : 0/0
  6677 ;;		Unchanged: 0/0
  6678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6679 ;;      Params:         3       0       0       0
  6680 ;;      Locals:         0       0       0       0
  6681 ;;      Temps:          0       0       0       0
  6682 ;;      Totals:         3       0       0       0
  6683 ;;Total ram usage:        3 bytes
  6684 ;; Hardware stack levels used:    1
  6685 ;; Hardware stack levels required when called:    4
  6686 ;; This function calls:
  6687 ;;		_LCDNokia_clear
  6688 ;; This function is called by:
  6689 ;;		_statePower1
  6690 ;; This function uses a non-reentrant model
  6691 ;;
  6692                           
  6693                           	psect	text20
  6694  0000'                    __ptext20:
  6695                           	opt stack 0
  6696  0000'                    _exitPower1:
  6697                           	opt stack 25
  6698                           
  6699                           ;Phases.c: 1226: static PhasePower1_Type currentPower1_4;
  6700                           ;Phases.c: 1228: LCDNokia_clear();
  6701                           
  6702                           ;incstack = 0
  6703  0000' EC00' F000'        	call	_LCDNokia_clear	;wreg free
  6704                           
  6705                           ;Phases.c: 1230: currentPower1_4.phaseState = data.phaseState;
  6706  0004' C027' F0B7'        	movff	exitPower1@data+1,exitPower1@currentPower1_4+1
  6707                           
  6708                           ;Phases.c: 1231: currentPower1_4.stateMain = data.stateMain;
  6709  0008' C028' F0B8'        	movff	exitPower1@data+2,exitPower1@currentPower1_4+2
  6710                           
  6711                           ;Phases.c: 1233: return (currentPower1_4);
  6712  000C' C0B6' F026'        	movff	exitPower1@currentPower1_4,?_exitPower1
  6713  0010' C0B7' F027'        	movff	exitPower1@currentPower1_4+1,?_exitPower1+1
  6714  0014' C0B8' F028'        	movff	exitPower1@currentPower1_4+2,?_exitPower1+2
  6715  0018' 0012               	return	
  6716  001A'                    __end_of_exitPower1:
  6717                           	opt stack 0
  6718                           tosu	equ	0xFFF
  6719                           tosh	equ	0xFFE
  6720                           tosl	equ	0xFFD
  6721                           pclath	equ	0xFFA
  6722                           tblptru	equ	0xFF8
  6723                           tblptrh	equ	0xFF7
  6724                           tblptrl	equ	0xFF6
  6725                           tablat	equ	0xFF5
  6726                           prodh	equ	0xFF4
  6727                           prodl	equ	0xFF3
  6728                           postinc0	equ	0xFEE
  6729                           wreg	equ	0xFE8
  6730                           postinc2	equ	0xFDE
  6731                           status	equ	0xFD8
  6732                           
  6733 ;; *************** function _phPower1 *****************
  6734 ;; Defined at:
  6735 ;;		line 1187 in file "Phases.c"
  6736 ;; Parameters:    Size  Location     Type
  6737 ;;  data            3   38[COMRAM] struct .
  6738 ;; Auto vars:     Size  Location     Type
  6739 ;;  total_appare   14   41[COMRAM] const unsigned char [14]
  6740 ;;  total_reacti   13   68[COMRAM] const unsigned char [13]
  6741 ;;  total_active   13   55[COMRAM] const unsigned char [13]
  6742 ;; Return value:  Size  Location     Type
  6743 ;;                  3   38[COMRAM] struct .
  6744 ;; Registers used:
  6745 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6746 ;; Tracked objects:
  6747 ;;		On entry : 0/0
  6748 ;;		On exit  : 0/0
  6749 ;;		Unchanged: 0/0
  6750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6751 ;;      Params:         3       0       0       0
  6752 ;;      Locals:        40       0       0       0
  6753 ;;      Temps:          0       0       0       0
  6754 ;;      Totals:        43       0       0       0
  6755 ;;Total ram usage:       43 bytes
  6756 ;; Hardware stack levels used:    1
  6757 ;; Hardware stack levels required when called:    4
  6758 ;; This function calls:
  6759 ;;		_ATM_registers
  6760 ;;		_LCDNokia_clear
  6761 ;;		_LCDNokia_gotoXY
  6762 ;;		_LCDNokia_printValue
  6763 ;;		_LCDNokia_sendString
  6764 ;;		_getButton1
  6765 ;;		_getButton2
  6766 ;; This function is called by:
  6767 ;;		_statePower1
  6768 ;; This function uses a non-reentrant model
  6769 ;;
  6770                           
  6771                           	psect	text21
  6772  0000'                    __ptext21:
  6773                           	opt stack 0
  6774  0000'                    _phPower1:
  6775                           	opt stack 25
  6776                           
  6777                           ;Phases.c: 1189: const uint8_t total_active_power[] = "Total APow: ";
  6778                           
  6779                           ;incstack = 0
  6780  0000' 0E00'              	movlw	low phPower1@F3731
  6781  0002' 6EF6               	movwf	tblptrl,c
  6782  0004'                    	if	1	;There is more than 1 active tblptr byte
  6783  0004' 0E00'              	movlw	high phPower1@F3731
  6784  0006' 6EF7               	movwf	tblptrh,c
  6785  0008'                    	endif
  6786  0008'                    	if	0	;There are less than 3 active tblptr bytes
  6787  0008'                    	endif
  6788  0008' EE20' F000'        	lfsr	2,phPower1@total_active_power
  6789  000C' 0E0C               	movlw	12
  6790  000E'                    u3950:
  6791  000E' 0009               	tblrd		*+
  6792  0010' CFF5 FFDE          	movff	tablat,postinc2
  6793  0014' 06E8               	decf	wreg,f,c
  6794  0016' E2FB               	bc	u3950
  6795                           
  6796                           ;Phases.c: 1190: const uint8_t total_reactive_power[] = "Total RPow: ";
  6797  0018' 0E00'              	movlw	low phPower1@F3733
  6798  001A' 6EF6               	movwf	tblptrl,c
  6799  001C'                    	if	1	;There is more than 1 active tblptr byte
  6800  001C' 0E00'              	movlw	high phPower1@F3733
  6801  001E' 6EF7               	movwf	tblptrh,c
  6802  0020'                    	endif
  6803  0020'                    	if	0	;There are less than 3 active tblptr bytes
  6804  0020'                    	endif
  6805  0020' EE20' F000'        	lfsr	2,phPower1@total_reactive_power
  6806  0024' 0E0C               	movlw	12
  6807  0026'                    u3960:
  6808  0026' 0009               	tblrd		*+
  6809  0028' CFF5 FFDE          	movff	tablat,postinc2
  6810  002C' 06E8               	decf	wreg,f,c
  6811  002E' E2FB               	bc	u3960
  6812                           
  6813                           ;Phases.c: 1191: const uint8_t total_apparent_power[] = "Total APPow: ";
  6814  0030' 0E00'              	movlw	low phPower1@F3735
  6815  0032' 6EF6               	movwf	tblptrl,c
  6816  0034'                    	if	1	;There is more than 1 active tblptr byte
  6817  0034' 0E00'              	movlw	high phPower1@F3735
  6818  0036' 6EF7               	movwf	tblptrh,c
  6819  0038'                    	endif
  6820  0038'                    	if	0	;There are less than 3 active tblptr bytes
  6821  0038'                    	endif
  6822  0038' EE20' F000'        	lfsr	2,phPower1@total_apparent_power
  6823  003C' 0E0D               	movlw	13
  6824  003E'                    u3970:
  6825  003E' 0009               	tblrd		*+
  6826  0040' CFF5 FFDE          	movff	tablat,postinc2
  6827  0044' 06E8               	decf	wreg,f,c
  6828  0046' E2FB               	bc	u3970
  6829                           
  6830                           ;Phases.c: 1194: static PhasePower1_Type currentPower1_2;
  6831                           ;Phases.c: 1197: currentPower1_2.phaseState = PHASES_POWER1;
  6832  0048' 0E01               	movlw	1
  6833  004A' 0101               	movlb	1	; () banked
  6834  004C' 6F00'              	movwf	(phPower1@currentPower1_2+1)& (0+255),b
  6835                           
  6836                           ; BSR set to: 1
  6837                           ;Phases.c: 1198: currentPower1_2.stateMain = data.stateMain;
  6838  004E' C028' F0BB'        	movff	phPower1@data+2,phPower1@currentPower1_2+2
  6839                           
  6840                           ; BSR set to: 1
  6841                           ;Phases.c: 1200: if(getButton1() == 1)
  6842  0052' EC00' F000'        	call	_getButton1	;wreg free
  6843  0056' 06E8               	decf	wreg,f,c
  6844  0058' A4D8               	btfss	status,2,c
  6845  005A' D003               	goto	l727
  6846                           
  6847                           ;Phases.c: 1201: {
  6848                           ;Phases.c: 1202: currentPower1_2.phaseState = EXIT_POWER1;
  6849  005C' 0E02               	movlw	2
  6850  005E' 0101               	movlb	1	; () banked
  6851  0060' 6F00'              	movwf	(phPower1@currentPower1_2+1)& (0+255),b
  6852  0062'                    l727:
  6853                           
  6854                           ;Phases.c: 1203: }
  6855                           ;Phases.c: 1204: if(getButton2() == 1)
  6856                           
  6857                           ; BSR set to: 1
  6858  0062' EC00' F000'        	call	_getButton2	;wreg free
  6859  0066' 06E8               	decf	wreg,f,c
  6860  0068' A4D8               	btfss	status,2,c
  6861  006A' D005               	goto	l728
  6862                           
  6863                           ;Phases.c: 1205: {
  6864                           ;Phases.c: 1206: currentPower1_2.phaseState = EXIT_POWER1;
  6865  006C' 0E02               	movlw	2
  6866  006E' 0101               	movlb	1	; () banked
  6867  0070' 6F00'              	movwf	(phPower1@currentPower1_2+1)& (0+255),b
  6868                           
  6869                           ; BSR set to: 1
  6870                           ;Phases.c: 1207: LCDNokia_clear();
  6871  0072' EC00' F000'        	call	_LCDNokia_clear	;wreg free
  6872  0076'                    l728:
  6873                           
  6874                           ;Phases.c: 1208: }
  6875                           ;Phases.c: 1210: LCDNokia_gotoXY(0,1);
  6876  0076' 0E01               	movlw	1
  6877  0078' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  6878  007A' 0E00               	movlw	0
  6879  007C' EC00' F000'        	call	_LCDNokia_gotoXY
  6880                           
  6881                           ;Phases.c: 1211: LCDNokia_sendString(total_active_power);
  6882  0080' 0E00'              	movlw	low phPower1@total_active_power
  6883  0082' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  6884  0084' 0E00'              	movlw	high phPower1@total_active_power
  6885  0086' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  6886  0088' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  6887                           
  6888                           ;Phases.c: 1212: LCDNokia_printValue(ATM_registers(POWER_FACTOR_TYPE, TOTAL_ACTIVE_POWER
      +                          ));
  6889  008C' 0E25               	movlw	37
  6890  008E' 6E12'              	movwf	ATM_registers@reg,c
  6891  0090' 0E08               	movlw	8
  6892  0092' EC00' F000'        	call	_ATM_registers
  6893  0096' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
  6894  009A' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
  6895  009E' 6A19'              	clrf	LCDNokia_printValue@value+2,c
  6896  00A0' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
  6897  00A2' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
  6898                           
  6899                           ;Phases.c: 1213: LCDNokia_gotoXY(0,2);
  6900  00A6' 0E02               	movlw	2
  6901  00A8' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  6902  00AA' 0E00               	movlw	0
  6903  00AC' EC00' F000'        	call	_LCDNokia_gotoXY
  6904                           
  6905                           ;Phases.c: 1214: LCDNokia_sendString(total_reactive_power);
  6906  00B0' 0E00'              	movlw	low phPower1@total_reactive_power
  6907  00B2' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  6908  00B4' 0E00'              	movlw	high phPower1@total_reactive_power
  6909  00B6' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  6910  00B8' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  6911                           
  6912                           ;Phases.c: 1215: LCDNokia_printValue(ATM_registers(POWER_FACTOR_TYPE, TOTAL_REACTIVE_POW
      +                          ER));
  6913  00BC' 0E29               	movlw	41
  6914  00BE' 6E12'              	movwf	ATM_registers@reg,c
  6915  00C0' 0E08               	movlw	8
  6916  00C2' EC00' F000'        	call	_ATM_registers
  6917  00C6' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
  6918  00CA' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
  6919  00CE' 6A19'              	clrf	LCDNokia_printValue@value+2,c
  6920  00D0' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
  6921  00D2' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
  6922                           
  6923                           ;Phases.c: 1216: LCDNokia_gotoXY(0,3);
  6924  00D6' 0E03               	movlw	3
  6925  00D8' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  6926  00DA' 0E00               	movlw	0
  6927  00DC' EC00' F000'        	call	_LCDNokia_gotoXY
  6928                           
  6929                           ;Phases.c: 1217: LCDNokia_sendString(total_apparent_power);
  6930  00E0' 0E00'              	movlw	low phPower1@total_apparent_power
  6931  00E2' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  6932  00E4' 0E00'              	movlw	high phPower1@total_apparent_power
  6933  00E6' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  6934  00E8' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  6935                           
  6936                           ;Phases.c: 1218: LCDNokia_printValue(ATM_registers(APPARENT_POWER_TYPE, TOTAL_APPARENT_P
      +                          OWER));
  6937  00EC' 0E2D               	movlw	45
  6938  00EE' 6E12'              	movwf	ATM_registers@reg,c
  6939  00F0' 0E07               	movlw	7
  6940  00F2' EC00' F000'        	call	_ATM_registers
  6941  00F6' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
  6942  00FA' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
  6943  00FE' 6A19'              	clrf	LCDNokia_printValue@value+2,c
  6944  0100' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
  6945  0102' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
  6946                           
  6947                           ;Phases.c: 1220: return (currentPower1_2);
  6948  0106' C0B9' F026'        	movff	phPower1@currentPower1_2,?_phPower1
  6949  010A' C0BA' F027'        	movff	phPower1@currentPower1_2+1,?_phPower1+1
  6950  010E' C0BB' F028'        	movff	phPower1@currentPower1_2+2,?_phPower1+2
  6951  0112' 0012               	return	
  6952  0114'                    __end_of_phPower1:
  6953                           	opt stack 0
  6954                           tosu	equ	0xFFF
  6955                           tosh	equ	0xFFE
  6956                           tosl	equ	0xFFD
  6957                           pclath	equ	0xFFA
  6958                           tblptru	equ	0xFF8
  6959                           tblptrh	equ	0xFF7
  6960                           tblptrl	equ	0xFF6
  6961                           tablat	equ	0xFF5
  6962                           prodh	equ	0xFF4
  6963                           prodl	equ	0xFF3
  6964                           postinc0	equ	0xFEE
  6965                           wreg	equ	0xFE8
  6966                           postinc2	equ	0xFDE
  6967                           status	equ	0xFD8
  6968                           
  6969 ;; *************** function _typesPower1 *****************
  6970 ;; Defined at:
  6971 ;;		line 1105 in file "Phases.c"
  6972 ;; Parameters:    Size  Location     Type
  6973 ;;  data            3   38[COMRAM] struct .
  6974 ;; Auto vars:     Size  Location     Type
  6975 ;;  apparent_pow   11   22[BANK0 ] const unsigned char [11]
  6976 ;;  apparent_pow   11   11[BANK0 ] const unsigned char [11]
  6977 ;;  apparent_pow   11    0[BANK0 ] const unsigned char [11]
  6978 ;;  reactive_pow   10   83[BANK0 ] const unsigned char [10]
  6979 ;;  reactive_pow   10   73[BANK0 ] const unsigned char [10]
  6980 ;;  reactive_pow   10   63[BANK0 ] const unsigned char [10]
  6981 ;;  active_power   10   53[BANK0 ] const unsigned char [10]
  6982 ;;  active_power   10   43[BANK0 ] const unsigned char [10]
  6983 ;;  active_power   10   33[BANK0 ] const unsigned char [10]
  6984 ;;  maxScreens      1   93[BANK0 ] const unsigned char 
  6985 ;; Return value:  Size  Location     Type
  6986 ;;                  3   38[COMRAM] struct .
  6987 ;; Registers used:
  6988 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6989 ;; Tracked objects:
  6990 ;;		On entry : 0/0
  6991 ;;		On exit  : 0/0
  6992 ;;		Unchanged: 0/0
  6993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6994 ;;      Params:         3       0       0       0
  6995 ;;      Locals:         0      94       0       0
  6996 ;;      Temps:          0       0       0       0
  6997 ;;      Totals:         3      94       0       0
  6998 ;;Total ram usage:       97 bytes
  6999 ;; Hardware stack levels used:    1
  7000 ;; Hardware stack levels required when called:    4
  7001 ;; This function calls:
  7002 ;;		_ATM_registers
  7003 ;;		_LCDNokia_clear
  7004 ;;		_LCDNokia_gotoXY
  7005 ;;		_LCDNokia_printValue
  7006 ;;		_LCDNokia_sendString
  7007 ;;		_getButton1
  7008 ;;		_getButton2
  7009 ;;		_getButton3
  7010 ;; This function is called by:
  7011 ;;		_statePower1
  7012 ;; This function uses a non-reentrant model
  7013 ;;
  7014                           
  7015                           	psect	text22
  7016  0000'                    __ptext22:
  7017                           	opt stack 0
  7018  0000'                    _typesPower1:
  7019                           	opt stack 25
  7020                           
  7021                           ;Phases.c: 1107: static uint8_t counter = 0;
  7022                           ;Phases.c: 1108: const uint8_t maxScreens = 2;
  7023                           
  7024                           ;incstack = 0
  7025  0000' 0E02               	movlw	2
  7026  0002' 0100               	movlb	0	; () banked
  7027  0004' 6F00'              	movwf	typesPower1@maxScreens& (0+255),b
  7028                           
  7029                           ; BSR set to: 0
  7030                           ;Phases.c: 1109: const uint8_t active_powerP1[] = "PA APow: ";
  7031  0006' 0E00'              	movlw	low typesPower1@F3711
  7032  0008' 6EF6               	movwf	tblptrl,c
  7033  000A'                    	if	1	;There is more than 1 active tblptr byte
  7034  000A' 0E00'              	movlw	high typesPower1@F3711
  7035  000C' 6EF7               	movwf	tblptrh,c
  7036  000E'                    	endif
  7037  000E'                    	if	0	;There are less than 3 active tblptr bytes
  7038  000E'                    	endif
  7039  000E' EE20' F000'        	lfsr	2,typesPower1@active_powerP1
  7040  0012' 0E09               	movlw	9
  7041  0014'                    u3820:
  7042  0014' 0009               	tblrd		*+
  7043  0016' CFF5 FFDE          	movff	tablat,postinc2
  7044  001A' 06E8               	decf	wreg,f,c
  7045  001C' E2FB               	bc	u3820
  7046                           
  7047                           ; BSR set to: 0
  7048                           ;Phases.c: 1110: const uint8_t active_powerP2[] = "PB APow: ";
  7049  001E' 0E00'              	movlw	low typesPower1@F3713
  7050  0020' 6EF6               	movwf	tblptrl,c
  7051  0022'                    	if	1	;There is more than 1 active tblptr byte
  7052  0022' 0E00'              	movlw	high typesPower1@F3713
  7053  0024' 6EF7               	movwf	tblptrh,c
  7054  0026'                    	endif
  7055  0026'                    	if	0	;There are less than 3 active tblptr bytes
  7056  0026'                    	endif
  7057  0026' EE20' F000'        	lfsr	2,typesPower1@active_powerP2
  7058  002A' 0E09               	movlw	9
  7059  002C'                    u3830:
  7060  002C' 0009               	tblrd		*+
  7061  002E' CFF5 FFDE          	movff	tablat,postinc2
  7062  0032' 06E8               	decf	wreg,f,c
  7063  0034' E2FB               	bc	u3830
  7064                           
  7065                           ; BSR set to: 0
  7066                           ;Phases.c: 1111: const uint8_t active_powerP3[] = "PC APow: ";;
  7067  0036' 0E00'              	movlw	low typesPower1@F3715
  7068  0038' 6EF6               	movwf	tblptrl,c
  7069  003A'                    	if	1	;There is more than 1 active tblptr byte
  7070  003A' 0E00'              	movlw	high typesPower1@F3715
  7071  003C' 6EF7               	movwf	tblptrh,c
  7072  003E'                    	endif
  7073  003E'                    	if	0	;There are less than 3 active tblptr bytes
  7074  003E'                    	endif
  7075  003E' EE20' F000'        	lfsr	2,typesPower1@active_powerP3
  7076  0042' 0E09               	movlw	9
  7077  0044'                    u3840:
  7078  0044' 0009               	tblrd		*+
  7079  0046' CFF5 FFDE          	movff	tablat,postinc2
  7080  004A' 06E8               	decf	wreg,f,c
  7081  004C' E2FB               	bc	u3840
  7082                           
  7083                           ; BSR set to: 0
  7084                           ;Phases.c: 1113: const uint8_t reactive_powerP1[] = "PA RPow: ";
  7085  004E' 0E00'              	movlw	low typesPower1@F3717
  7086  0050' 6EF6               	movwf	tblptrl,c
  7087  0052'                    	if	1	;There is more than 1 active tblptr byte
  7088  0052' 0E00'              	movlw	high typesPower1@F3717
  7089  0054' 6EF7               	movwf	tblptrh,c
  7090  0056'                    	endif
  7091  0056'                    	if	0	;There are less than 3 active tblptr bytes
  7092  0056'                    	endif
  7093  0056' EE20' F000'        	lfsr	2,typesPower1@reactive_powerP1
  7094  005A' 0E09               	movlw	9
  7095  005C'                    u3850:
  7096  005C' 0009               	tblrd		*+
  7097  005E' CFF5 FFDE          	movff	tablat,postinc2
  7098  0062' 06E8               	decf	wreg,f,c
  7099  0064' E2FB               	bc	u3850
  7100                           
  7101                           ; BSR set to: 0
  7102                           ;Phases.c: 1114: const uint8_t reactive_powerP2[] = "PB RPow: ";
  7103  0066' 0E00'              	movlw	low typesPower1@F3719
  7104  0068' 6EF6               	movwf	tblptrl,c
  7105  006A'                    	if	1	;There is more than 1 active tblptr byte
  7106  006A' 0E00'              	movlw	high typesPower1@F3719
  7107  006C' 6EF7               	movwf	tblptrh,c
  7108  006E'                    	endif
  7109  006E'                    	if	0	;There are less than 3 active tblptr bytes
  7110  006E'                    	endif
  7111  006E' EE20' F000'        	lfsr	2,typesPower1@reactive_powerP2
  7112  0072' 0E09               	movlw	9
  7113  0074'                    u3860:
  7114  0074' 0009               	tblrd		*+
  7115  0076' CFF5 FFDE          	movff	tablat,postinc2
  7116  007A' 06E8               	decf	wreg,f,c
  7117  007C' E2FB               	bc	u3860
  7118                           
  7119                           ; BSR set to: 0
  7120                           ;Phases.c: 1115: const uint8_t reactive_powerP3[] = "PC RPow: ";
  7121  007E' 0E00'              	movlw	low typesPower1@F3721
  7122  0080' 6EF6               	movwf	tblptrl,c
  7123  0082'                    	if	1	;There is more than 1 active tblptr byte
  7124  0082' 0E00'              	movlw	high typesPower1@F3721
  7125  0084' 6EF7               	movwf	tblptrh,c
  7126  0086'                    	endif
  7127  0086'                    	if	0	;There are less than 3 active tblptr bytes
  7128  0086'                    	endif
  7129  0086' EE20' F000'        	lfsr	2,typesPower1@reactive_powerP3
  7130  008A' 0E09               	movlw	9
  7131  008C'                    u3870:
  7132  008C' 0009               	tblrd		*+
  7133  008E' CFF5 FFDE          	movff	tablat,postinc2
  7134  0092' 06E8               	decf	wreg,f,c
  7135  0094' E2FB               	bc	u3870
  7136                           
  7137                           ; BSR set to: 0
  7138                           ;Phases.c: 1117: const uint8_t apparent_powerP1[] = "PA APPow: ";
  7139  0096' 0E00'              	movlw	low typesPower1@F3723
  7140  0098' 6EF6               	movwf	tblptrl,c
  7141  009A'                    	if	1	;There is more than 1 active tblptr byte
  7142  009A' 0E00'              	movlw	high typesPower1@F3723
  7143  009C' 6EF7               	movwf	tblptrh,c
  7144  009E'                    	endif
  7145  009E'                    	if	0	;There are less than 3 active tblptr bytes
  7146  009E'                    	endif
  7147  009E' EE20' F000'        	lfsr	2,typesPower1@apparent_powerP1
  7148  00A2' 0E0A               	movlw	10
  7149  00A4'                    u3880:
  7150  00A4' 0009               	tblrd		*+
  7151  00A6' CFF5 FFDE          	movff	tablat,postinc2
  7152  00AA' 06E8               	decf	wreg,f,c
  7153  00AC' E2FB               	bc	u3880
  7154                           
  7155                           ; BSR set to: 0
  7156                           ;Phases.c: 1118: const uint8_t apparent_powerP2[] = "PB APPow: ";
  7157  00AE' 0E00'              	movlw	low typesPower1@F3725
  7158  00B0' 6EF6               	movwf	tblptrl,c
  7159  00B2'                    	if	1	;There is more than 1 active tblptr byte
  7160  00B2' 0E00'              	movlw	high typesPower1@F3725
  7161  00B4' 6EF7               	movwf	tblptrh,c
  7162  00B6'                    	endif
  7163  00B6'                    	if	0	;There are less than 3 active tblptr bytes
  7164  00B6'                    	endif
  7165  00B6' EE20' F000'        	lfsr	2,typesPower1@apparent_powerP2
  7166  00BA' 0E0A               	movlw	10
  7167  00BC'                    u3890:
  7168  00BC' 0009               	tblrd		*+
  7169  00BE' CFF5 FFDE          	movff	tablat,postinc2
  7170  00C2' 06E8               	decf	wreg,f,c
  7171  00C4' E2FB               	bc	u3890
  7172                           
  7173                           ; BSR set to: 0
  7174                           ;Phases.c: 1119: const uint8_t apparent_powerP3[] = "PC APPow: ";
  7175  00C6' 0E00'              	movlw	low typesPower1@F3727
  7176  00C8' 6EF6               	movwf	tblptrl,c
  7177  00CA'                    	if	1	;There is more than 1 active tblptr byte
  7178  00CA' 0E00'              	movlw	high typesPower1@F3727
  7179  00CC' 6EF7               	movwf	tblptrh,c
  7180  00CE'                    	endif
  7181  00CE'                    	if	0	;There are less than 3 active tblptr bytes
  7182  00CE'                    	endif
  7183  00CE' EE20' F000'        	lfsr	2,typesPower1@apparent_powerP3
  7184  00D2' 0E0A               	movlw	10
  7185  00D4'                    u3900:
  7186  00D4' 0009               	tblrd		*+
  7187  00D6' CFF5 FFDE          	movff	tablat,postinc2
  7188  00DA' 06E8               	decf	wreg,f,c
  7189  00DC' E2FB               	bc	u3900
  7190                           
  7191                           ; BSR set to: 0
  7192                           ;Phases.c: 1122: static PhasePower1_Type currentPower1_1;
  7193                           ;Phases.c: 1125: currentPower1_1.phaseState = TYPES_POWER1;
  7194  00DE' 0E00               	movlw	0
  7195  00E0' 0101               	movlb	1	; () banked
  7196  00E2' 6F00'              	movwf	(typesPower1@currentPower1_1+1)& (0+255),b
  7197                           
  7198                           ; BSR set to: 1
  7199                           ;Phases.c: 1126: currentPower1_1.stateMain = data.stateMain;
  7200  00E4' C028' F0BE'        	movff	typesPower1@data+2,typesPower1@currentPower1_1+2
  7201                           
  7202                           ; BSR set to: 1
  7203                           ;Phases.c: 1128: if(getButton1() == 1)
  7204  00E8' EC00' F000'        	call	_getButton1	;wreg free
  7205  00EC' 06E8               	decf	wreg,f,c
  7206  00EE' A4D8               	btfss	status,2,c
  7207  00F0' D003               	goto	l706
  7208                           
  7209                           ;Phases.c: 1129: {
  7210                           ;Phases.c: 1130: currentPower1_1.phaseState = EXIT_POWER1;
  7211  00F2' 0E02               	movlw	2
  7212  00F4' 0101               	movlb	1	; () banked
  7213  00F6' 6F00'              	movwf	(typesPower1@currentPower1_1+1)& (0+255),b
  7214  00F8'                    l706:
  7215                           
  7216                           ;Phases.c: 1131: }
  7217                           ;Phases.c: 1132: if(getButton2() == 1)
  7218                           
  7219                           ; BSR set to: 1
  7220  00F8' EC00' F000'        	call	_getButton2	;wreg free
  7221  00FC' 06E8               	decf	wreg,f,c
  7222  00FE' A4D8               	btfss	status,2,c
  7223  0100' D005               	goto	l707
  7224                           
  7225                           ;Phases.c: 1133: {
  7226                           ;Phases.c: 1134: currentPower1_1.phaseState = PHASES_POWER1;
  7227  0102' 0E01               	movlw	1
  7228  0104' 0101               	movlb	1	; () banked
  7229  0106' 6F00'              	movwf	(typesPower1@currentPower1_1+1)& (0+255),b
  7230                           
  7231                           ; BSR set to: 1
  7232                           ;Phases.c: 1135: LCDNokia_clear();
  7233  0108' EC00' F000'        	call	_LCDNokia_clear	;wreg free
  7234  010C'                    l707:
  7235                           
  7236                           ;Phases.c: 1136: }
  7237                           ;Phases.c: 1137: if(getButton3() == 1)
  7238  010C' EC00' F000'        	call	_getButton3	;wreg free
  7239  0110' 06E8               	decf	wreg,f,c
  7240  0112' A4D8               	btfss	status,2,c
  7241  0114' D0E6               	goto	l710
  7242                           
  7243                           ;Phases.c: 1138: {
  7244                           ;Phases.c: 1139: counter++;
  7245  0116' 2A02'              	incf	typesPower1@counter,f,c
  7246                           
  7247                           ;Phases.c: 1140: LCDNokia_clear();
  7248  0118' EC00' F000'        	call	_LCDNokia_clear	;wreg free
  7249                           
  7250                           ;Phases.c: 1141: if(counter > maxScreens)
  7251  011C' 5002'              	movf	typesPower1@counter,w,c
  7252  011E' 0100               	movlb	0	; () banked
  7253  0120' 5D00'              	subwf	typesPower1@maxScreens& (0+255),w,b
  7254  0122' B0D8               	btfsc	status,0,c
  7255  0124' D0DE               	goto	l710
  7256                           
  7257                           ; BSR set to: 0
  7258                           ;Phases.c: 1142: {
  7259                           ;Phases.c: 1143: counter = 0;
  7260  0126' 0E00               	movlw	0
  7261  0128' 6E02'              	movwf	typesPower1@counter,c
  7262                           
  7263                           ; BSR set to: 0
  7264                           ;Phases.c: 1144: }
  7265                           ;Phases.c: 1145: }
  7266                           ;Phases.c: 1146: switch(counter)
  7267                           
  7268                           ; BSR set to: 0
  7269  012A' D0DB               	goto	l710
  7270  012C'                    
  7271                           ;Phases.c: 1149: LCDNokia_gotoXY(0,1);
  7272                           
  7273                           ; BSR set to: 0
  7274  012C' 0E01               	movlw	1
  7275  012E' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  7276  0130' 0E00               	movlw	0
  7277  0132' EC00' F000'        	call	_LCDNokia_gotoXY
  7278                           
  7279                           ;Phases.c: 1150: LCDNokia_sendString(active_powerP1);
  7280  0136' 0E00'              	movlw	low typesPower1@active_powerP1
  7281  0138' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  7282  013A' 0E00'              	movlw	high typesPower1@active_powerP1
  7283  013C' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  7284  013E' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  7285                           
  7286                           ;Phases.c: 1151: LCDNokia_printValue(ATM_registers(POWER_FACTOR_TYPE, PHASE_A_ACTIVE_POW
      +                          ER));
  7287  0142' 0E26               	movlw	38
  7288  0144' 6E12'              	movwf	ATM_registers@reg,c
  7289  0146' 0E08               	movlw	8
  7290  0148' EC00' F000'        	call	_ATM_registers
  7291  014C' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
  7292  0150' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
  7293  0154' 6A19'              	clrf	LCDNokia_printValue@value+2,c
  7294  0156' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
  7295  0158' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
  7296                           
  7297                           ;Phases.c: 1152: LCDNokia_gotoXY(0,2);
  7298  015C' 0E02               	movlw	2
  7299  015E' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  7300  0160' 0E00               	movlw	0
  7301  0162' EC00' F000'        	call	_LCDNokia_gotoXY
  7302                           
  7303                           ;Phases.c: 1153: LCDNokia_sendString(active_powerP2);
  7304  0166' 0E00'              	movlw	low typesPower1@active_powerP2
  7305  0168' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  7306  016A' 0E00'              	movlw	high typesPower1@active_powerP2
  7307  016C' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  7308  016E' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  7309                           
  7310                           ;Phases.c: 1154: LCDNokia_printValue(ATM_registers(POWER_FACTOR_TYPE, PHASE_B_ACTIVE_POW
      +                          ER));
  7311  0172' 0E27               	movlw	39
  7312  0174' 6E12'              	movwf	ATM_registers@reg,c
  7313  0176' 0E08               	movlw	8
  7314  0178' EC00' F000'        	call	_ATM_registers
  7315  017C' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
  7316  0180' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
  7317  0184' 6A19'              	clrf	LCDNokia_printValue@value+2,c
  7318  0186' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
  7319  0188' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
  7320                           
  7321                           ;Phases.c: 1155: LCDNokia_gotoXY(0,3);
  7322  018C' 0E03               	movlw	3
  7323  018E' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  7324  0190' 0E00               	movlw	0
  7325  0192' EC00' F000'        	call	_LCDNokia_gotoXY
  7326                           
  7327                           ;Phases.c: 1156: LCDNokia_sendString(active_powerP3);
  7328  0196' 0E00'              	movlw	low typesPower1@active_powerP3
  7329  0198' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  7330  019A' 0E00'              	movlw	high typesPower1@active_powerP3
  7331  019C' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  7332  019E' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  7333                           
  7334                           ;Phases.c: 1157: LCDNokia_printValue(ATM_registers(POWER_FACTOR_TYPE, PHASE_C_ACTIVE_POW
      +                          ER));
  7335  01A2' 0E28               	movlw	40
  7336  01A4' 6E12'              	movwf	ATM_registers@reg,c
  7337  01A6' 0E08               	movlw	8
  7338  01A8' EC00' F000'        	call	_ATM_registers
  7339  01AC' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
  7340  01B0' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
  7341  01B4' 6A19'              	clrf	LCDNokia_printValue@value+2,c
  7342  01B6' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
  7343  01B8' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
  7344                           
  7345                           ;Phases.c: 1158: break;
  7346  01BC' D09C               	goto	l712
  7347  01BE'                    
  7348                           ;Phases.c: 1160: LCDNokia_gotoXY(0,1);
  7349  01BE' 0E01               	movlw	1
  7350  01C0' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  7351  01C2' 0E00               	movlw	0
  7352  01C4' EC00' F000'        	call	_LCDNokia_gotoXY
  7353                           
  7354                           ;Phases.c: 1161: LCDNokia_sendString(reactive_powerP1);
  7355  01C8' 0E00'              	movlw	low typesPower1@reactive_powerP1
  7356  01CA' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  7357  01CC' 0E00'              	movlw	high typesPower1@reactive_powerP1
  7358  01CE' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  7359  01D0' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  7360                           
  7361                           ;Phases.c: 1162: LCDNokia_printValue(ATM_registers(POWER_FACTOR_TYPE, PHASE_A_REACTIVE_P
      +                          OWER));
  7362  01D4' 0E2A               	movlw	42
  7363  01D6' 6E12'              	movwf	ATM_registers@reg,c
  7364  01D8' 0E08               	movlw	8
  7365  01DA' EC00' F000'        	call	_ATM_registers
  7366  01DE' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
  7367  01E2' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
  7368  01E6' 6A19'              	clrf	LCDNokia_printValue@value+2,c
  7369  01E8' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
  7370  01EA' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
  7371                           
  7372                           ;Phases.c: 1163: LCDNokia_gotoXY(0,2);
  7373  01EE' 0E02               	movlw	2
  7374  01F0' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  7375  01F2' 0E00               	movlw	0
  7376  01F4' EC00' F000'        	call	_LCDNokia_gotoXY
  7377                           
  7378                           ;Phases.c: 1164: LCDNokia_sendString(reactive_powerP2);
  7379  01F8' 0E00'              	movlw	low typesPower1@reactive_powerP2
  7380  01FA' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  7381  01FC' 0E00'              	movlw	high typesPower1@reactive_powerP2
  7382  01FE' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  7383  0200' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  7384                           
  7385                           ;Phases.c: 1165: LCDNokia_printValue(ATM_registers(POWER_FACTOR_TYPE, PHASE_B_REACTIVE_P
      +                          OWER));
  7386  0204' 0E2B               	movlw	43
  7387  0206' 6E12'              	movwf	ATM_registers@reg,c
  7388  0208' 0E08               	movlw	8
  7389  020A' EC00' F000'        	call	_ATM_registers
  7390  020E' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
  7391  0212' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
  7392  0216' 6A19'              	clrf	LCDNokia_printValue@value+2,c
  7393  0218' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
  7394  021A' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
  7395                           
  7396                           ;Phases.c: 1166: LCDNokia_gotoXY(0,3);
  7397  021E' 0E03               	movlw	3
  7398  0220' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  7399  0222' 0E00               	movlw	0
  7400  0224' EC00' F000'        	call	_LCDNokia_gotoXY
  7401                           
  7402                           ;Phases.c: 1167: LCDNokia_sendString(reactive_powerP3);
  7403  0228' 0E00'              	movlw	low typesPower1@reactive_powerP3
  7404  022A' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  7405  022C' 0E00'              	movlw	high typesPower1@reactive_powerP3
  7406  022E' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  7407  0230' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  7408                           
  7409                           ;Phases.c: 1168: LCDNokia_printValue(ATM_registers(POWER_FACTOR_TYPE, PHASE_C_REACTIVE_P
      +                          OWER));
  7410  0234' 0E2C               	movlw	44
  7411  0236' 6E12'              	movwf	ATM_registers@reg,c
  7412  0238' 0E08               	movlw	8
  7413  023A' EC00' F000'        	call	_ATM_registers
  7414  023E' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
  7415  0242' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
  7416  0246' 6A19'              	clrf	LCDNokia_printValue@value+2,c
  7417  0248' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
  7418  024A' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
  7419                           
  7420                           ;Phases.c: 1169: break;
  7421  024E' D053               	goto	l712
  7422  0250'                    
  7423                           ;Phases.c: 1171: LCDNokia_gotoXY(0,1);
  7424  0250' 0E01               	movlw	1
  7425  0252' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  7426  0254' 0E00               	movlw	0
  7427  0256' EC00' F000'        	call	_LCDNokia_gotoXY
  7428                           
  7429                           ;Phases.c: 1172: LCDNokia_sendString(apparent_powerP1);
  7430  025A' 0E00'              	movlw	low typesPower1@apparent_powerP1
  7431  025C' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  7432  025E' 0E00'              	movlw	high typesPower1@apparent_powerP1
  7433  0260' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  7434  0262' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  7435                           
  7436                           ;Phases.c: 1173: LCDNokia_printValue(ATM_registers(APPARENT_POWER_TYPE, PHASE_A_APPARENT
      +                          _POWER));
  7437  0266' 0E2E               	movlw	46
  7438  0268' 6E12'              	movwf	ATM_registers@reg,c
  7439  026A' 0E07               	movlw	7
  7440  026C' EC00' F000'        	call	_ATM_registers
  7441  0270' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
  7442  0274' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
  7443  0278' 6A19'              	clrf	LCDNokia_printValue@value+2,c
  7444  027A' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
  7445  027C' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
  7446                           
  7447                           ;Phases.c: 1174: LCDNokia_gotoXY(0,2);
  7448  0280' 0E02               	movlw	2
  7449  0282' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  7450  0284' 0E00               	movlw	0
  7451  0286' EC00' F000'        	call	_LCDNokia_gotoXY
  7452                           
  7453                           ;Phases.c: 1175: LCDNokia_sendString(apparent_powerP2);
  7454  028A' 0E00'              	movlw	low typesPower1@apparent_powerP2
  7455  028C' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  7456  028E' 0E00'              	movlw	high typesPower1@apparent_powerP2
  7457  0290' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  7458  0292' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  7459                           
  7460                           ;Phases.c: 1176: LCDNokia_printValue(ATM_registers(APPARENT_POWER_TYPE, PHASE_B_APPARENT
      +                          _POWER));
  7461  0296' 0E2F               	movlw	47
  7462  0298' 6E12'              	movwf	ATM_registers@reg,c
  7463  029A' 0E07               	movlw	7
  7464  029C' EC00' F000'        	call	_ATM_registers
  7465  02A0' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
  7466  02A4' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
  7467  02A8' 6A19'              	clrf	LCDNokia_printValue@value+2,c
  7468  02AA' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
  7469  02AC' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
  7470                           
  7471                           ;Phases.c: 1177: LCDNokia_gotoXY(0,3);
  7472  02B0' 0E03               	movlw	3
  7473  02B2' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  7474  02B4' 0E00               	movlw	0
  7475  02B6' EC00' F000'        	call	_LCDNokia_gotoXY
  7476                           
  7477                           ;Phases.c: 1178: LCDNokia_sendString(apparent_powerP3);
  7478  02BA' 0E00'              	movlw	low typesPower1@apparent_powerP3
  7479  02BC' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  7480  02BE' 0E00'              	movlw	high typesPower1@apparent_powerP3
  7481  02C0' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  7482  02C2' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  7483                           
  7484                           ;Phases.c: 1179: LCDNokia_printValue(ATM_registers(APPARENT_POWER_TYPE, PHASE_C_APPARENT
      +                          _POWER));
  7485  02C6' 0E30               	movlw	48
  7486  02C8' 6E12'              	movwf	ATM_registers@reg,c
  7487  02CA' 0E07               	movlw	7
  7488  02CC' EC00' F000'        	call	_ATM_registers
  7489  02D0' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
  7490  02D4' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
  7491  02D8' 6A19'              	clrf	LCDNokia_printValue@value+2,c
  7492  02DA' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
  7493  02DC' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
  7494                           
  7495                           ;Phases.c: 1183: }
  7496                           
  7497                           ;Phases.c: 1182: break;
  7498                           
  7499                           ;Phases.c: 1181: default:
  7500                           
  7501                           ;Phases.c: 1180: break;
  7502  02E0' D00A               	goto	l712
  7503  02E2'                    l710:
  7504  02E2' 5002'              	movf	typesPower1@counter,w,c
  7505                           
  7506                           ; Switch size 1, requested type "space"
  7507                           ; Number of cases is 3, Range of values is 0 to 2
  7508                           ; switch strategies available:
  7509                           ; Name         Instructions Cycles
  7510                           ; simple_byte           10     6 (average)
  7511                           ;	Chosen strategy is simple_byte
  7512  02E4' 0A00               	xorlw	0	; case 0
  7513  02E6' B4D8               	btfsc	status,2,c
  7514  02E8' D721               	goto	l711
  7515  02EA' 0A01               	xorlw	1	; case 1
  7516  02EC' B4D8               	btfsc	status,2,c
  7517  02EE' D767               	goto	l713
  7518  02F0' 0A03               	xorlw	3	; case 2
  7519  02F2' B4D8               	btfsc	status,2,c
  7520  02F4' D7AD               	goto	l714
  7521  02F6'                    l712:
  7522                           
  7523                           ;Phases.c: 1184: return (currentPower1_1);
  7524  02F6' C0BC' F026'        	movff	typesPower1@currentPower1_1,?_typesPower1
  7525  02FA' C0BD' F027'        	movff	typesPower1@currentPower1_1+1,?_typesPower1+1
  7526  02FE' C0BE' F028'        	movff	typesPower1@currentPower1_1+2,?_typesPower1+2
  7527  0302' 0012               	return		;funcret
  7528  0304'                    __end_of_typesPower1:
  7529                           	opt stack 0
  7530                           tosu	equ	0xFFF
  7531                           tosh	equ	0xFFE
  7532                           tosl	equ	0xFFD
  7533                           pclath	equ	0xFFA
  7534                           tblptru	equ	0xFF8
  7535                           tblptrh	equ	0xFF7
  7536                           tblptrl	equ	0xFF6
  7537                           tablat	equ	0xFF5
  7538                           prodh	equ	0xFF4
  7539                           prodl	equ	0xFF3
  7540                           postinc0	equ	0xFEE
  7541                           wreg	equ	0xFE8
  7542                           postinc2	equ	0xFDE
  7543                           status	equ	0xFD8
  7544                           
  7545 ;; *************** function _exitPhaseAngle *****************
  7546 ;; Defined at:
  7547 ;;		line 1667 in file "Phases.c"
  7548 ;; Parameters:    Size  Location     Type
  7549 ;;  data            3   38[COMRAM] struct .
  7550 ;; Auto vars:     Size  Location     Type
  7551 ;;		None
  7552 ;; Return value:  Size  Location     Type
  7553 ;;                  3   38[COMRAM] struct .
  7554 ;; Registers used:
  7555 ;;		wreg, status,2, status,0, cstack
  7556 ;; Tracked objects:
  7557 ;;		On entry : 0/0
  7558 ;;		On exit  : 0/0
  7559 ;;		Unchanged: 0/0
  7560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7561 ;;      Params:         3       0       0       0
  7562 ;;      Locals:         0       0       0       0
  7563 ;;      Temps:          0       0       0       0
  7564 ;;      Totals:         3       0       0       0
  7565 ;;Total ram usage:        3 bytes
  7566 ;; Hardware stack levels used:    1
  7567 ;; Hardware stack levels required when called:    4
  7568 ;; This function calls:
  7569 ;;		_LCDNokia_clear
  7570 ;; This function is called by:
  7571 ;;		_statePhaseAngle
  7572 ;; This function uses a non-reentrant model
  7573 ;;
  7574                           
  7575                           	psect	text23
  7576  0000'                    __ptext23:
  7577                           	opt stack 0
  7578  0000'                    _exitPhaseAngle:
  7579                           	opt stack 25
  7580                           
  7581                           ;Phases.c: 1670: static PhasePhaseAngle_Type currentPhaseAngle3;
  7582                           ;Phases.c: 1672: LCDNokia_clear();
  7583                           
  7584                           ;incstack = 0
  7585  0000' EC00' F000'        	call	_LCDNokia_clear	;wreg free
  7586                           
  7587                           ;Phases.c: 1674: currentPhaseAngle3.phaseState = data.phaseState;
  7588  0004' C027' F099'        	movff	exitPhaseAngle@data+1,exitPhaseAngle@currentPhaseAngle3+1
  7589                           
  7590                           ;Phases.c: 1675: currentPhaseAngle3.stateMain = data.stateMain;
  7591  0008' C028' F09A'        	movff	exitPhaseAngle@data+2,exitPhaseAngle@currentPhaseAngle3+2
  7592                           
  7593                           ;Phases.c: 1677: return (currentPhaseAngle3);
  7594  000C' C098' F026'        	movff	exitPhaseAngle@currentPhaseAngle3,?_exitPhaseAngle
  7595  0010' C099' F027'        	movff	exitPhaseAngle@currentPhaseAngle3+1,?_exitPhaseAngle+1
  7596  0014' C09A' F028'        	movff	exitPhaseAngle@currentPhaseAngle3+2,?_exitPhaseAngle+2
  7597  0018' 0012               	return	
  7598  001A'                    __end_of_exitPhaseAngle:
  7599                           	opt stack 0
  7600                           tosu	equ	0xFFF
  7601                           tosh	equ	0xFFE
  7602                           tosl	equ	0xFFD
  7603                           pclath	equ	0xFFA
  7604                           tblptru	equ	0xFF8
  7605                           tblptrh	equ	0xFF7
  7606                           tblptrl	equ	0xFF6
  7607                           tablat	equ	0xFF5
  7608                           prodh	equ	0xFF4
  7609                           prodl	equ	0xFF3
  7610                           postinc0	equ	0xFEE
  7611                           wreg	equ	0xFE8
  7612                           postinc2	equ	0xFDE
  7613                           status	equ	0xFD8
  7614                           
  7615 ;; *************** function _THDNPhaseAngle *****************
  7616 ;; Defined at:
  7617 ;;		line 1600 in file "Phases.c"
  7618 ;; Parameters:    Size  Location     Type
  7619 ;;  data            3   38[COMRAM] struct .
  7620 ;; Auto vars:     Size  Location     Type
  7621 ;;  current3_THD   11   55[BANK0 ] const unsigned char [11]
  7622 ;;  current2_THD   11   44[BANK0 ] const unsigned char [11]
  7623 ;;  current1_THD   11   33[BANK0 ] const unsigned char [11]
  7624 ;;  voltage3_THD   11   22[BANK0 ] const unsigned char [11]
  7625 ;;  voltage2_THD   11   11[BANK0 ] const unsigned char [11]
  7626 ;;  voltage1_THD   11    0[BANK0 ] const unsigned char [11]
  7627 ;;  maxScreens      1   66[BANK0 ] const unsigned char 
  7628 ;; Return value:  Size  Location     Type
  7629 ;;                  3   38[COMRAM] struct .
  7630 ;; Registers used:
  7631 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7632 ;; Tracked objects:
  7633 ;;		On entry : 0/0
  7634 ;;		On exit  : 0/0
  7635 ;;		Unchanged: 0/0
  7636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7637 ;;      Params:         3       0       0       0
  7638 ;;      Locals:         0      67       0       0
  7639 ;;      Temps:          0       0       0       0
  7640 ;;      Totals:         3      67       0       0
  7641 ;;Total ram usage:       70 bytes
  7642 ;; Hardware stack levels used:    1
  7643 ;; Hardware stack levels required when called:    4
  7644 ;; This function calls:
  7645 ;;		_ATM_registers
  7646 ;;		_LCDNokia_clear
  7647 ;;		_LCDNokia_gotoXY
  7648 ;;		_LCDNokia_printValue
  7649 ;;		_LCDNokia_sendString
  7650 ;;		_getButton1
  7651 ;;		_getButton2
  7652 ;;		_getButton3
  7653 ;; This function is called by:
  7654 ;;		_statePhaseAngle
  7655 ;; This function uses a non-reentrant model
  7656 ;;
  7657                           
  7658                           	psect	text24
  7659  0000'                    __ptext24:
  7660                           	opt stack 0
  7661  0000'                    _THDNPhaseAngle:
  7662                           	opt stack 25
  7663                           
  7664                           ;Phases.c: 1602: static uint8_t counter = 0;
  7665                           ;Phases.c: 1603: const uint8_t maxScreens = 1;
  7666                           
  7667                           ;incstack = 0
  7668  0000' 0E01               	movlw	1
  7669  0002' 0100               	movlb	0	; () banked
  7670  0004' 6F00'              	movwf	THDNPhaseAngle@maxScreens& (0+255),b
  7671                           
  7672                           ; BSR set to: 0
  7673                           ;Phases.c: 1604: const uint8_t voltage1_THDN[] = "PA vTHDN: ";
  7674  0006' 0E00'              	movlw	low THDNPhaseAngle@F3821
  7675  0008' 6EF6               	movwf	tblptrl,c
  7676  000A'                    	if	1	;There is more than 1 active tblptr byte
  7677  000A' 0E00'              	movlw	high THDNPhaseAngle@F3821
  7678  000C' 6EF7               	movwf	tblptrh,c
  7679  000E'                    	endif
  7680  000E'                    	if	0	;There are less than 3 active tblptr bytes
  7681  000E'                    	endif
  7682  000E' EE20' F000'        	lfsr	2,THDNPhaseAngle@voltage1_THDN
  7683  0012' 0E0A               	movlw	10
  7684  0014'                    u4460:
  7685  0014' 0009               	tblrd		*+
  7686  0016' CFF5 FFDE          	movff	tablat,postinc2
  7687  001A' 06E8               	decf	wreg,f,c
  7688  001C' E2FB               	bc	u4460
  7689                           
  7690                           ; BSR set to: 0
  7691                           ;Phases.c: 1605: const uint8_t voltage2_THDN[] = "PB vTHDN: ";
  7692  001E' 0E00'              	movlw	low THDNPhaseAngle@F3823
  7693  0020' 6EF6               	movwf	tblptrl,c
  7694  0022'                    	if	1	;There is more than 1 active tblptr byte
  7695  0022' 0E00'              	movlw	high THDNPhaseAngle@F3823
  7696  0024' 6EF7               	movwf	tblptrh,c
  7697  0026'                    	endif
  7698  0026'                    	if	0	;There are less than 3 active tblptr bytes
  7699  0026'                    	endif
  7700  0026' EE20' F000'        	lfsr	2,THDNPhaseAngle@voltage2_THDN
  7701  002A' 0E0A               	movlw	10
  7702  002C'                    u4470:
  7703  002C' 0009               	tblrd		*+
  7704  002E' CFF5 FFDE          	movff	tablat,postinc2
  7705  0032' 06E8               	decf	wreg,f,c
  7706  0034' E2FB               	bc	u4470
  7707                           
  7708                           ; BSR set to: 0
  7709                           ;Phases.c: 1606: const uint8_t voltage3_THDN[] = "PC vTHDN: ";
  7710  0036' 0E00'              	movlw	low THDNPhaseAngle@F3825
  7711  0038' 6EF6               	movwf	tblptrl,c
  7712  003A'                    	if	1	;There is more than 1 active tblptr byte
  7713  003A' 0E00'              	movlw	high THDNPhaseAngle@F3825
  7714  003C' 6EF7               	movwf	tblptrh,c
  7715  003E'                    	endif
  7716  003E'                    	if	0	;There are less than 3 active tblptr bytes
  7717  003E'                    	endif
  7718  003E' EE20' F000'        	lfsr	2,THDNPhaseAngle@voltage3_THDN
  7719  0042' 0E0A               	movlw	10
  7720  0044'                    u4480:
  7721  0044' 0009               	tblrd		*+
  7722  0046' CFF5 FFDE          	movff	tablat,postinc2
  7723  004A' 06E8               	decf	wreg,f,c
  7724  004C' E2FB               	bc	u4480
  7725                           
  7726                           ; BSR set to: 0
  7727                           ;Phases.c: 1608: const uint8_t current1_THDN[] = "PA cTHDN: ";
  7728  004E' 0E00'              	movlw	low THDNPhaseAngle@F3827
  7729  0050' 6EF6               	movwf	tblptrl,c
  7730  0052'                    	if	1	;There is more than 1 active tblptr byte
  7731  0052' 0E00'              	movlw	high THDNPhaseAngle@F3827
  7732  0054' 6EF7               	movwf	tblptrh,c
  7733  0056'                    	endif
  7734  0056'                    	if	0	;There are less than 3 active tblptr bytes
  7735  0056'                    	endif
  7736  0056' EE20' F000'        	lfsr	2,THDNPhaseAngle@current1_THDN
  7737  005A' 0E0A               	movlw	10
  7738  005C'                    u4490:
  7739  005C' 0009               	tblrd		*+
  7740  005E' CFF5 FFDE          	movff	tablat,postinc2
  7741  0062' 06E8               	decf	wreg,f,c
  7742  0064' E2FB               	bc	u4490
  7743                           
  7744                           ; BSR set to: 0
  7745                           ;Phases.c: 1609: const uint8_t current2_THDN[] = "PB cTHDN: ";
  7746  0066' 0E00'              	movlw	low THDNPhaseAngle@F3829
  7747  0068' 6EF6               	movwf	tblptrl,c
  7748  006A'                    	if	1	;There is more than 1 active tblptr byte
  7749  006A' 0E00'              	movlw	high THDNPhaseAngle@F3829
  7750  006C' 6EF7               	movwf	tblptrh,c
  7751  006E'                    	endif
  7752  006E'                    	if	0	;There are less than 3 active tblptr bytes
  7753  006E'                    	endif
  7754  006E' EE20' F000'        	lfsr	2,THDNPhaseAngle@current2_THDN
  7755  0072' 0E0A               	movlw	10
  7756  0074'                    u4500:
  7757  0074' 0009               	tblrd		*+
  7758  0076' CFF5 FFDE          	movff	tablat,postinc2
  7759  007A' 06E8               	decf	wreg,f,c
  7760  007C' E2FB               	bc	u4500
  7761                           
  7762                           ; BSR set to: 0
  7763                           ;Phases.c: 1610: const uint8_t current3_THDN[] = "PC cTHDN: ";
  7764  007E' 0E00'              	movlw	low THDNPhaseAngle@F3831
  7765  0080' 6EF6               	movwf	tblptrl,c
  7766  0082'                    	if	1	;There is more than 1 active tblptr byte
  7767  0082' 0E00'              	movlw	high THDNPhaseAngle@F3831
  7768  0084' 6EF7               	movwf	tblptrh,c
  7769  0086'                    	endif
  7770  0086'                    	if	0	;There are less than 3 active tblptr bytes
  7771  0086'                    	endif
  7772  0086' EE20' F000'        	lfsr	2,THDNPhaseAngle@current3_THDN
  7773  008A' 0E0A               	movlw	10
  7774  008C'                    u4510:
  7775  008C' 0009               	tblrd		*+
  7776  008E' CFF5 FFDE          	movff	tablat,postinc2
  7777  0092' 06E8               	decf	wreg,f,c
  7778  0094' E2FB               	bc	u4510
  7779                           
  7780                           ;Phases.c: 1613: static PhasePhaseAngle_Type currentPhaseAngle3;
  7781                           ;Phases.c: 1616: currentPhaseAngle3.phaseState = THDN_PA;
  7782  0096' 0E02               	movlw	2
  7783  0098' 0101               	movlb	1	; () banked
  7784  009A' 6F00'              	movwf	(THDNPhaseAngle@currentPhaseAngle3+1)& (0+255),b
  7785                           
  7786                           ; BSR set to: 1
  7787                           ;Phases.c: 1617: currentPhaseAngle3.stateMain = data.stateMain;
  7788  009C' C028' F09D'        	movff	THDNPhaseAngle@data+2,THDNPhaseAngle@currentPhaseAngle3+2
  7789                           
  7790                           ; BSR set to: 1
  7791                           ;Phases.c: 1619: if(getButton1() == 1)
  7792  00A0' EC00' F000'        	call	_getButton1	;wreg free
  7793  00A4' 06E8               	decf	wreg,f,c
  7794  00A6' A4D8               	btfss	status,2,c
  7795  00A8' D003               	goto	l896
  7796                           
  7797                           ;Phases.c: 1620: {
  7798                           ;Phases.c: 1621: currentPhaseAngle3.phaseState = EXIT_PA;
  7799  00AA' 0E03               	movlw	3
  7800  00AC' 0101               	movlb	1	; () banked
  7801  00AE' 6F00'              	movwf	(THDNPhaseAngle@currentPhaseAngle3+1)& (0+255),b
  7802  00B0'                    l896:
  7803                           
  7804                           ;Phases.c: 1623: }
  7805                           ;Phases.c: 1624: if(getButton2() == 1)
  7806                           
  7807                           ; BSR set to: 1
  7808  00B0' EC00' F000'        	call	_getButton2	;wreg free
  7809  00B4' 06E8               	decf	wreg,f,c
  7810  00B6' A4D8               	btfss	status,2,c
  7811  00B8' D003               	goto	l897
  7812                           
  7813                           ;Phases.c: 1625: {
  7814                           ;Phases.c: 1626: currentPhaseAngle3.phaseState = EXIT_PA;
  7815  00BA' 0E03               	movlw	3
  7816  00BC' 0101               	movlb	1	; () banked
  7817  00BE' 6F00'              	movwf	(THDNPhaseAngle@currentPhaseAngle3+1)& (0+255),b
  7818  00C0'                    l897:
  7819                           
  7820                           ;Phases.c: 1627: }
  7821                           ;Phases.c: 1628: if(getButton3() == 1)
  7822                           
  7823                           ; BSR set to: 1
  7824  00C0' EC00' F000'        	call	_getButton3	;wreg free
  7825  00C4' 06E8               	decf	wreg,f,c
  7826  00C6' A4D8               	btfss	status,2,c
  7827  00C8' D09E               	goto	l900
  7828                           
  7829                           ;Phases.c: 1629: {
  7830                           ;Phases.c: 1630: counter++;
  7831  00CA' 0100               	movlb	0	; () banked
  7832  00CC' 2B00'              	incf	THDNPhaseAngle@counter& (0+255),f,b
  7833                           
  7834                           ; BSR set to: 0
  7835                           ;Phases.c: 1631: LCDNokia_clear();
  7836  00CE' EC00' F000'        	call	_LCDNokia_clear	;wreg free
  7837                           
  7838                           ;Phases.c: 1632: if(counter > maxScreens)
  7839  00D2' 0100               	movlb	0	; () banked
  7840  00D4' 5100'              	movf	THDNPhaseAngle@counter& (0+255),w,b
  7841  00D6' 5D00'              	subwf	THDNPhaseAngle@maxScreens& (0+255),w,b
  7842  00D8' B0D8               	btfsc	status,0,c
  7843  00DA' D095               	goto	l900
  7844                           
  7845                           ; BSR set to: 0
  7846                           ;Phases.c: 1633: {
  7847                           ;Phases.c: 1634: counter = 0;
  7848  00DC' 0E00               	movlw	0
  7849  00DE' 6F00'              	movwf	THDNPhaseAngle@counter& (0+255),b
  7850                           
  7851                           ; BSR set to: 0
  7852                           ;Phases.c: 1635: }
  7853                           ;Phases.c: 1636: }
  7854                           ;Phases.c: 1637: switch(counter)
  7855                           
  7856                           ; BSR set to: 0
  7857  00E0' D092               	goto	l900
  7858  00E2'                    
  7859                           ; BSR set to: 0
  7860                           ;Phases.c: 1640: LCDNokia_gotoXY(0,1);
  7861                           
  7862                           ; BSR set to: 0
  7863  00E2' 0E01               	movlw	1
  7864  00E4' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  7865  00E6' 0E00               	movlw	0
  7866  00E8' EC00' F000'        	call	_LCDNokia_gotoXY
  7867                           
  7868                           ;Phases.c: 1641: LCDNokia_sendString(voltage1_THDN);
  7869  00EC' 0E00'              	movlw	low THDNPhaseAngle@voltage1_THDN
  7870  00EE' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  7871  00F0' 0E00'              	movlw	high THDNPhaseAngle@voltage1_THDN
  7872  00F2' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  7873  00F4' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  7874                           
  7875                           ;Phases.c: 1642: LCDNokia_printValue(ATM_registers(PHASE_ANGLE_TYPE, PHASE_A_VOLTAGE_ANG
      +                          LE_PHASE));
  7876  00F8' 0E50               	movlw	80
  7877  00FA' 6E12'              	movwf	ATM_registers@reg,c
  7878  00FC' 0E0F               	movlw	15
  7879  00FE' EC00' F000'        	call	_ATM_registers
  7880  0102' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
  7881  0106' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
  7882  010A' 6A19'              	clrf	LCDNokia_printValue@value+2,c
  7883  010C' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
  7884  010E' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
  7885                           
  7886                           ;Phases.c: 1643: LCDNokia_gotoXY(0,2);
  7887  0112' 0E02               	movlw	2
  7888  0114' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  7889  0116' 0E00               	movlw	0
  7890  0118' EC00' F000'        	call	_LCDNokia_gotoXY
  7891                           
  7892                           ;Phases.c: 1644: LCDNokia_sendString(voltage2_THDN);
  7893  011C' 0E00'              	movlw	low THDNPhaseAngle@voltage2_THDN
  7894  011E' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  7895  0120' 0E00'              	movlw	high THDNPhaseAngle@voltage2_THDN
  7896  0122' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  7897  0124' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  7898                           
  7899                           ;Phases.c: 1645: LCDNokia_printValue(ATM_registers(PHASE_ANGLE_TYPE, PHASE_B_VOLTAGE_ANG
      +                          LE_PHASE));
  7900  0128' 0E51               	movlw	81
  7901  012A' 6E12'              	movwf	ATM_registers@reg,c
  7902  012C' 0E0F               	movlw	15
  7903  012E' EC00' F000'        	call	_ATM_registers
  7904  0132' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
  7905  0136' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
  7906  013A' 6A19'              	clrf	LCDNokia_printValue@value+2,c
  7907  013C' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
  7908  013E' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
  7909                           
  7910                           ;Phases.c: 1646: LCDNokia_gotoXY(0,3);
  7911  0142' 0E03               	movlw	3
  7912  0144' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  7913  0146' 0E00               	movlw	0
  7914  0148' EC00' F000'        	call	_LCDNokia_gotoXY
  7915                           
  7916                           ;Phases.c: 1647: LCDNokia_sendString(voltage3_THDN);
  7917  014C' 0E00'              	movlw	low THDNPhaseAngle@voltage3_THDN
  7918  014E' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  7919  0150' 0E00'              	movlw	high THDNPhaseAngle@voltage3_THDN
  7920  0152' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  7921  0154' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  7922                           
  7923                           ;Phases.c: 1648: LCDNokia_printValue(ATM_registers(PHASE_ANGLE_TYPE, PHASE_C_VOLTAGE_ANG
      +                          LE_PHASE));
  7924  0158' 0E52               	movlw	82
  7925  015A' 6E12'              	movwf	ATM_registers@reg,c
  7926  015C' 0E0F               	movlw	15
  7927  015E' EC00' F000'        	call	_ATM_registers
  7928  0162' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
  7929  0166' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
  7930  016A' 6A19'              	clrf	LCDNokia_printValue@value+2,c
  7931  016C' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
  7932  016E' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
  7933                           
  7934                           ;Phases.c: 1649: break;
  7935  0172' D051               	goto	l902
  7936  0174'                    
  7937                           ;Phases.c: 1651: LCDNokia_gotoXY(0,1);
  7938  0174' 0E01               	movlw	1
  7939  0176' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  7940  0178' 0E00               	movlw	0
  7941  017A' EC00' F000'        	call	_LCDNokia_gotoXY
  7942                           
  7943                           ;Phases.c: 1652: LCDNokia_sendString(current1_THDN);
  7944  017E' 0E00'              	movlw	low THDNPhaseAngle@current1_THDN
  7945  0180' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  7946  0182' 0E00'              	movlw	high THDNPhaseAngle@current1_THDN
  7947  0184' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  7948  0186' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  7949                           
  7950                           ;Phases.c: 1653: LCDNokia_printValue(ATM_registers(THDN_TYPE, PHASE_A_CURRENT_THDN));
  7951  018A' 0E48               	movlw	72
  7952  018C' 6E12'              	movwf	ATM_registers@reg,c
  7953  018E' 0E0D               	movlw	13
  7954  0190' EC00' F000'        	call	_ATM_registers
  7955  0194' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
  7956  0198' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
  7957  019C' 6A19'              	clrf	LCDNokia_printValue@value+2,c
  7958  019E' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
  7959  01A0' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
  7960                           
  7961                           ;Phases.c: 1654: LCDNokia_gotoXY(0,2);
  7962  01A4' 0E02               	movlw	2
  7963  01A6' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  7964  01A8' 0E00               	movlw	0
  7965  01AA' EC00' F000'        	call	_LCDNokia_gotoXY
  7966                           
  7967                           ;Phases.c: 1655: LCDNokia_sendString(current2_THDN);
  7968  01AE' 0E00'              	movlw	low THDNPhaseAngle@current2_THDN
  7969  01B0' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  7970  01B2' 0E00'              	movlw	high THDNPhaseAngle@current2_THDN
  7971  01B4' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  7972  01B6' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  7973                           
  7974                           ;Phases.c: 1656: LCDNokia_printValue(ATM_registers(THDN_TYPE, PHASE_B_CURRENT_THDN));
  7975  01BA' 0E49               	movlw	73
  7976  01BC' 6E12'              	movwf	ATM_registers@reg,c
  7977  01BE' 0E0D               	movlw	13
  7978  01C0' EC00' F000'        	call	_ATM_registers
  7979  01C4' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
  7980  01C8' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
  7981  01CC' 6A19'              	clrf	LCDNokia_printValue@value+2,c
  7982  01CE' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
  7983  01D0' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
  7984                           
  7985                           ;Phases.c: 1657: LCDNokia_gotoXY(0,3);
  7986  01D4' 0E03               	movlw	3
  7987  01D6' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  7988  01D8' 0E00               	movlw	0
  7989  01DA' EC00' F000'        	call	_LCDNokia_gotoXY
  7990                           
  7991                           ;Phases.c: 1658: LCDNokia_sendString(current3_THDN);
  7992  01DE' 0E00'              	movlw	low THDNPhaseAngle@current3_THDN
  7993  01E0' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  7994  01E2' 0E00'              	movlw	high THDNPhaseAngle@current3_THDN
  7995  01E4' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  7996  01E6' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  7997                           
  7998                           ;Phases.c: 1659: LCDNokia_printValue(ATM_registers(THDN_TYPE, PHASE_C_CURRENT_THDN));
  7999  01EA' 0E4A               	movlw	74
  8000  01EC' 6E12'              	movwf	ATM_registers@reg,c
  8001  01EE' 0E0D               	movlw	13
  8002  01F0' EC00' F000'        	call	_ATM_registers
  8003  01F4' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
  8004  01F8' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
  8005  01FC' 6A19'              	clrf	LCDNokia_printValue@value+2,c
  8006  01FE' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
  8007  0200' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
  8008                           
  8009                           ;Phases.c: 1663: }
  8010                           
  8011                           ;Phases.c: 1662: break;
  8012                           
  8013                           ;Phases.c: 1661: default:
  8014                           
  8015                           ;Phases.c: 1660: break;
  8016  0204' D008               	goto	l902
  8017  0206'                    l900:
  8018  0206' 0100               	movlb	0	; () banked
  8019  0208' 5100'              	movf	THDNPhaseAngle@counter& (0+255),w,b
  8020                           
  8021                           ; Switch size 1, requested type "space"
  8022                           ; Number of cases is 2, Range of values is 0 to 1
  8023                           ; switch strategies available:
  8024                           ; Name         Instructions Cycles
  8025                           ; simple_byte            7     4 (average)
  8026                           ;	Chosen strategy is simple_byte
  8027  020A' 0A00               	xorlw	0	; case 0
  8028  020C' B4D8               	btfsc	status,2,c
  8029  020E' D769               	goto	l901
  8030  0210' 0A01               	xorlw	1	; case 1
  8031  0212' B4D8               	btfsc	status,2,c
  8032  0214' D7AF               	goto	l903
  8033  0216'                    l902:
  8034                           
  8035                           ;Phases.c: 1664: return (currentPhaseAngle3);
  8036  0216' C09B' F026'        	movff	THDNPhaseAngle@currentPhaseAngle3,?_THDNPhaseAngle
  8037  021A' C09C' F027'        	movff	THDNPhaseAngle@currentPhaseAngle3+1,?_THDNPhaseAngle+1
  8038  021E' C09D' F028'        	movff	THDNPhaseAngle@currentPhaseAngle3+2,?_THDNPhaseAngle+2
  8039  0222' 0012               	return		;funcret
  8040  0224'                    __end_of_THDNPhaseAngle:
  8041                           	opt stack 0
  8042                           tosu	equ	0xFFF
  8043                           tosh	equ	0xFFE
  8044                           tosl	equ	0xFFD
  8045                           pclath	equ	0xFFA
  8046                           tblptru	equ	0xFF8
  8047                           tblptrh	equ	0xFF7
  8048                           tblptrl	equ	0xFF6
  8049                           tablat	equ	0xFF5
  8050                           prodh	equ	0xFF4
  8051                           prodl	equ	0xFF3
  8052                           postinc0	equ	0xFEE
  8053                           wreg	equ	0xFE8
  8054                           postinc2	equ	0xFDE
  8055                           status	equ	0xFD8
  8056                           
  8057 ;; *************** function _phPhaseAngle *****************
  8058 ;; Defined at:
  8059 ;;		line 1528 in file "Phases.c"
  8060 ;; Parameters:    Size  Location     Type
  8061 ;;  data            3   38[COMRAM] struct .
  8062 ;; Auto vars:     Size  Location     Type
  8063 ;;  anglePhase3     9   59[COMRAM] const unsigned char [9]
  8064 ;;  anglePhase2     9   50[COMRAM] const unsigned char [9]
  8065 ;;  anglePhase1     9   41[COMRAM] const unsigned char [9]
  8066 ;; Return value:  Size  Location     Type
  8067 ;;                  3   38[COMRAM] struct .
  8068 ;; Registers used:
  8069 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8070 ;; Tracked objects:
  8071 ;;		On entry : 0/0
  8072 ;;		On exit  : 0/0
  8073 ;;		Unchanged: 0/0
  8074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8075 ;;      Params:         3       0       0       0
  8076 ;;      Locals:        27       0       0       0
  8077 ;;      Temps:          0       0       0       0
  8078 ;;      Totals:        30       0       0       0
  8079 ;;Total ram usage:       30 bytes
  8080 ;; Hardware stack levels used:    1
  8081 ;; Hardware stack levels required when called:    4
  8082 ;; This function calls:
  8083 ;;		_ATM_registers
  8084 ;;		_LCDNokia_clear
  8085 ;;		_LCDNokia_gotoXY
  8086 ;;		_LCDNokia_printValue
  8087 ;;		_LCDNokia_sendString
  8088 ;;		_getButton1
  8089 ;;		_getButton2
  8090 ;; This function is called by:
  8091 ;;		_statePhaseAngle
  8092 ;; This function uses a non-reentrant model
  8093 ;;
  8094                           
  8095                           	psect	text25
  8096  0000'                    __ptext25:
  8097                           	opt stack 0
  8098  0000'                    _phPhaseAngle:
  8099                           	opt stack 25
  8100                           
  8101                           ;Phases.c: 1530: const uint8_t anglePhase1[] = "PA phA: ";
  8102                           
  8103                           ;incstack = 0
  8104  0000' 0E00'              	movlw	low phPhaseAngle@F3803
  8105  0002' 6EF6               	movwf	tblptrl,c
  8106  0004'                    	if	1	;There is more than 1 active tblptr byte
  8107  0004' 0E00'              	movlw	high phPhaseAngle@F3803
  8108  0006' 6EF7               	movwf	tblptrh,c
  8109  0008'                    	endif
  8110  0008'                    	if	0	;There are less than 3 active tblptr bytes
  8111  0008'                    	endif
  8112  0008' EE20' F000'        	lfsr	2,phPhaseAngle@anglePhase1
  8113  000C' 0E08               	movlw	8
  8114  000E'                    u4360:
  8115  000E' 0009               	tblrd		*+
  8116  0010' CFF5 FFDE          	movff	tablat,postinc2
  8117  0014' 06E8               	decf	wreg,f,c
  8118  0016' E2FB               	bc	u4360
  8119                           
  8120                           ;Phases.c: 1531: const uint8_t anglePhase2[] = "PB phA: ";
  8121  0018' 0E00'              	movlw	low phPhaseAngle@F3805
  8122  001A' 6EF6               	movwf	tblptrl,c
  8123  001C'                    	if	1	;There is more than 1 active tblptr byte
  8124  001C' 0E00'              	movlw	high phPhaseAngle@F3805
  8125  001E' 6EF7               	movwf	tblptrh,c
  8126  0020'                    	endif
  8127  0020'                    	if	0	;There are less than 3 active tblptr bytes
  8128  0020'                    	endif
  8129  0020' EE20' F000'        	lfsr	2,phPhaseAngle@anglePhase2
  8130  0024' 0E08               	movlw	8
  8131  0026'                    u4370:
  8132  0026' 0009               	tblrd		*+
  8133  0028' CFF5 FFDE          	movff	tablat,postinc2
  8134  002C' 06E8               	decf	wreg,f,c
  8135  002E' E2FB               	bc	u4370
  8136                           
  8137                           ;Phases.c: 1532: const uint8_t anglePhase3[] = "PC phA: ";
  8138  0030' 0E00'              	movlw	low phPhaseAngle@F3807
  8139  0032' 6EF6               	movwf	tblptrl,c
  8140  0034'                    	if	1	;There is more than 1 active tblptr byte
  8141  0034' 0E00'              	movlw	high phPhaseAngle@F3807
  8142  0036' 6EF7               	movwf	tblptrh,c
  8143  0038'                    	endif
  8144  0038'                    	if	0	;There are less than 3 active tblptr bytes
  8145  0038'                    	endif
  8146  0038' EE20' F000'        	lfsr	2,phPhaseAngle@anglePhase3
  8147  003C' 0E08               	movlw	8
  8148  003E'                    u4380:
  8149  003E' 0009               	tblrd		*+
  8150  0040' CFF5 FFDE          	movff	tablat,postinc2
  8151  0044' 06E8               	decf	wreg,f,c
  8152  0046' E2FB               	bc	u4380
  8153                           
  8154                           ;Phases.c: 1535: static PhasePhaseAngle_Type currentPhaseAngle1;
  8155                           ;Phases.c: 1538: currentPhaseAngle1.phaseState = PHASES_PA;
  8156  0048' 0E00               	movlw	0
  8157  004A' 0101               	movlb	1	; () banked
  8158  004C' 6F00'              	movwf	(phPhaseAngle@currentPhaseAngle1+1)& (0+255),b
  8159                           
  8160                           ; BSR set to: 1
  8161                           ;Phases.c: 1539: currentPhaseAngle1.stateMain = data.stateMain;
  8162  004E' C028' F0A3'        	movff	phPhaseAngle@data+2,phPhaseAngle@currentPhaseAngle1+2
  8163                           
  8164                           ; BSR set to: 1
  8165                           ;Phases.c: 1541: if(getButton1() == 1)
  8166  0052' EC00' F000'        	call	_getButton1	;wreg free
  8167  0056' 06E8               	decf	wreg,f,c
  8168  0058' A4D8               	btfss	status,2,c
  8169  005A' D003               	goto	l862
  8170                           
  8171                           ;Phases.c: 1542: {
  8172                           ;Phases.c: 1543: currentPhaseAngle1.phaseState = EXIT_PA;
  8173  005C' 0E03               	movlw	3
  8174  005E' 0101               	movlb	1	; () banked
  8175  0060' 6F00'              	movwf	(phPhaseAngle@currentPhaseAngle1+1)& (0+255),b
  8176  0062'                    l862:
  8177                           
  8178                           ;Phases.c: 1544: }
  8179                           ;Phases.c: 1545: if(getButton2() == 1)
  8180                           
  8181                           ; BSR set to: 1
  8182  0062' EC00' F000'        	call	_getButton2	;wreg free
  8183  0066' 06E8               	decf	wreg,f,c
  8184  0068' A4D8               	btfss	status,2,c
  8185  006A' D005               	goto	l863
  8186                           
  8187                           ;Phases.c: 1546: {
  8188                           ;Phases.c: 1547: currentPhaseAngle1.phaseState = VI_PA;
  8189  006C' 0E01               	movlw	1
  8190  006E' 0101               	movlb	1	; () banked
  8191  0070' 6F00'              	movwf	(phPhaseAngle@currentPhaseAngle1+1)& (0+255),b
  8192                           
  8193                           ; BSR set to: 1
  8194                           ;Phases.c: 1548: LCDNokia_clear();
  8195  0072' EC00' F000'        	call	_LCDNokia_clear	;wreg free
  8196  0076'                    l863:
  8197                           
  8198                           ;Phases.c: 1549: }
  8199                           ;Phases.c: 1551: LCDNokia_gotoXY(0,1);
  8200  0076' 0E01               	movlw	1
  8201  0078' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  8202  007A' 0E00               	movlw	0
  8203  007C' EC00' F000'        	call	_LCDNokia_gotoXY
  8204                           
  8205                           ;Phases.c: 1552: LCDNokia_sendString(anglePhase1);
  8206  0080' 0E00'              	movlw	low phPhaseAngle@anglePhase1
  8207  0082' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  8208  0084' 0E00'              	movlw	high phPhaseAngle@anglePhase1
  8209  0086' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  8210  0088' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  8211                           
  8212                           ;Phases.c: 1553: LCDNokia_printValue(ATM_registers(PHASE_ANGLE_TYPE, PHASE_A_MEAN_ANGLE_
      +                          PHASE));
  8213  008C' 0E4C               	movlw	76
  8214  008E' 6E12'              	movwf	ATM_registers@reg,c
  8215  0090' 0E0F               	movlw	15
  8216  0092' EC00' F000'        	call	_ATM_registers
  8217  0096' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
  8218  009A' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
  8219  009E' 6A19'              	clrf	LCDNokia_printValue@value+2,c
  8220  00A0' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
  8221  00A2' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
  8222                           
  8223                           ;Phases.c: 1554: LCDNokia_gotoXY(0,2);
  8224  00A6' 0E02               	movlw	2
  8225  00A8' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  8226  00AA' 0E00               	movlw	0
  8227  00AC' EC00' F000'        	call	_LCDNokia_gotoXY
  8228                           
  8229                           ;Phases.c: 1555: LCDNokia_sendString(anglePhase2);
  8230  00B0' 0E00'              	movlw	low phPhaseAngle@anglePhase2
  8231  00B2' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  8232  00B4' 0E00'              	movlw	high phPhaseAngle@anglePhase2
  8233  00B6' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  8234  00B8' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  8235                           
  8236                           ;Phases.c: 1556: LCDNokia_printValue(ATM_registers(PHASE_ANGLE_TYPE, PHASE_B_MEAN_ANGLE_
      +                          PHASE));
  8237  00BC' 0E4D               	movlw	77
  8238  00BE' 6E12'              	movwf	ATM_registers@reg,c
  8239  00C0' 0E0F               	movlw	15
  8240  00C2' EC00' F000'        	call	_ATM_registers
  8241  00C6' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
  8242  00CA' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
  8243  00CE' 6A19'              	clrf	LCDNokia_printValue@value+2,c
  8244  00D0' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
  8245  00D2' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
  8246                           
  8247                           ;Phases.c: 1557: LCDNokia_gotoXY(0,3);
  8248  00D6' 0E03               	movlw	3
  8249  00D8' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  8250  00DA' 0E00               	movlw	0
  8251  00DC' EC00' F000'        	call	_LCDNokia_gotoXY
  8252                           
  8253                           ;Phases.c: 1558: LCDNokia_sendString(anglePhase3);
  8254  00E0' 0E00'              	movlw	low phPhaseAngle@anglePhase3
  8255  00E2' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  8256  00E4' 0E00'              	movlw	high phPhaseAngle@anglePhase3
  8257  00E6' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  8258  00E8' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  8259                           
  8260                           ;Phases.c: 1559: LCDNokia_printValue(ATM_registers(PHASE_ANGLE_TYPE, PHASE_C_MEAN_ANGLE_
      +                          PHASE));
  8261  00EC' 0E4E               	movlw	78
  8262  00EE' 6E12'              	movwf	ATM_registers@reg,c
  8263  00F0' 0E0F               	movlw	15
  8264  00F2' EC00' F000'        	call	_ATM_registers
  8265  00F6' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
  8266  00FA' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
  8267  00FE' 6A19'              	clrf	LCDNokia_printValue@value+2,c
  8268  0100' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
  8269  0102' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
  8270                           
  8271                           ;Phases.c: 1561: return (currentPhaseAngle1);
  8272  0106' C0A1' F026'        	movff	phPhaseAngle@currentPhaseAngle1,?_phPhaseAngle
  8273  010A' C0A2' F027'        	movff	phPhaseAngle@currentPhaseAngle1+1,?_phPhaseAngle+1
  8274  010E' C0A3' F028'        	movff	phPhaseAngle@currentPhaseAngle1+2,?_phPhaseAngle+2
  8275  0112' 0012               	return	
  8276  0114'                    __end_of_phPhaseAngle:
  8277                           	opt stack 0
  8278                           tosu	equ	0xFFF
  8279                           tosh	equ	0xFFE
  8280                           tosl	equ	0xFFD
  8281                           pclath	equ	0xFFA
  8282                           tblptru	equ	0xFF8
  8283                           tblptrh	equ	0xFF7
  8284                           tblptrl	equ	0xFF6
  8285                           tablat	equ	0xFF5
  8286                           prodh	equ	0xFF4
  8287                           prodl	equ	0xFF3
  8288                           postinc0	equ	0xFEE
  8289                           wreg	equ	0xFE8
  8290                           postinc2	equ	0xFDE
  8291                           status	equ	0xFD8
  8292                           
  8293 ;; *************** function _viPhaseAngle *****************
  8294 ;; Defined at:
  8295 ;;		line 1564 in file "Phases.c"
  8296 ;; Parameters:    Size  Location     Type
  8297 ;;  data            3   38[COMRAM] struct .
  8298 ;; Auto vars:     Size  Location     Type
  8299 ;;  angle_Voltag   10   61[COMRAM] const unsigned char [10]
  8300 ;;  angle_Voltag   10   51[COMRAM] const unsigned char [10]
  8301 ;;  angle_Voltag   10   41[COMRAM] const unsigned char [10]
  8302 ;; Return value:  Size  Location     Type
  8303 ;;                  3   38[COMRAM] struct .
  8304 ;; Registers used:
  8305 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8306 ;; Tracked objects:
  8307 ;;		On entry : 0/0
  8308 ;;		On exit  : 0/0
  8309 ;;		Unchanged: 0/0
  8310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8311 ;;      Params:         3       0       0       0
  8312 ;;      Locals:        30       0       0       0
  8313 ;;      Temps:          0       0       0       0
  8314 ;;      Totals:        33       0       0       0
  8315 ;;Total ram usage:       33 bytes
  8316 ;; Hardware stack levels used:    1
  8317 ;; Hardware stack levels required when called:    4
  8318 ;; This function calls:
  8319 ;;		_ATM_registers
  8320 ;;		_LCDNokia_clear
  8321 ;;		_LCDNokia_gotoXY
  8322 ;;		_LCDNokia_printValue
  8323 ;;		_LCDNokia_sendString
  8324 ;;		_getButton1
  8325 ;;		_getButton2
  8326 ;; This function is called by:
  8327 ;;		_statePhaseAngle
  8328 ;; This function uses a non-reentrant model
  8329 ;;
  8330                           
  8331                           	psect	text26
  8332  0000'                    __ptext26:
  8333                           	opt stack 0
  8334  0000'                    _viPhaseAngle:
  8335                           	opt stack 25
  8336                           
  8337                           ;Phases.c: 1566: const uint8_t angle_VoltageP1[] = "PA VphA: ";
  8338                           
  8339                           ;incstack = 0
  8340  0000' 0E00'              	movlw	low viPhaseAngle@F3811
  8341  0002' 6EF6               	movwf	tblptrl,c
  8342  0004'                    	if	1	;There is more than 1 active tblptr byte
  8343  0004' 0E00'              	movlw	high viPhaseAngle@F3811
  8344  0006' 6EF7               	movwf	tblptrh,c
  8345  0008'                    	endif
  8346  0008'                    	if	0	;There are less than 3 active tblptr bytes
  8347  0008'                    	endif
  8348  0008' EE20' F000'        	lfsr	2,viPhaseAngle@angle_VoltageP1
  8349  000C' 0E09               	movlw	9
  8350  000E'                    u4410:
  8351  000E' 0009               	tblrd		*+
  8352  0010' CFF5 FFDE          	movff	tablat,postinc2
  8353  0014' 06E8               	decf	wreg,f,c
  8354  0016' E2FB               	bc	u4410
  8355                           
  8356                           ;Phases.c: 1567: const uint8_t angle_VoltageP2[] = "PB VphA: ";
  8357  0018' 0E00'              	movlw	low viPhaseAngle@F3813
  8358  001A' 6EF6               	movwf	tblptrl,c
  8359  001C'                    	if	1	;There is more than 1 active tblptr byte
  8360  001C' 0E00'              	movlw	high viPhaseAngle@F3813
  8361  001E' 6EF7               	movwf	tblptrh,c
  8362  0020'                    	endif
  8363  0020'                    	if	0	;There are less than 3 active tblptr bytes
  8364  0020'                    	endif
  8365  0020' EE20' F000'        	lfsr	2,viPhaseAngle@angle_VoltageP2
  8366  0024' 0E09               	movlw	9
  8367  0026'                    u4420:
  8368  0026' 0009               	tblrd		*+
  8369  0028' CFF5 FFDE          	movff	tablat,postinc2
  8370  002C' 06E8               	decf	wreg,f,c
  8371  002E' E2FB               	bc	u4420
  8372                           
  8373                           ;Phases.c: 1568: const uint8_t angle_VoltageP3[] = "PC VphA: ";
  8374  0030' 0E00'              	movlw	low viPhaseAngle@F3815
  8375  0032' 6EF6               	movwf	tblptrl,c
  8376  0034'                    	if	1	;There is more than 1 active tblptr byte
  8377  0034' 0E00'              	movlw	high viPhaseAngle@F3815
  8378  0036' 6EF7               	movwf	tblptrh,c
  8379  0038'                    	endif
  8380  0038'                    	if	0	;There are less than 3 active tblptr bytes
  8381  0038'                    	endif
  8382  0038' EE20' F000'        	lfsr	2,viPhaseAngle@angle_VoltageP3
  8383  003C' 0E09               	movlw	9
  8384  003E'                    u4430:
  8385  003E' 0009               	tblrd		*+
  8386  0040' CFF5 FFDE          	movff	tablat,postinc2
  8387  0044' 06E8               	decf	wreg,f,c
  8388  0046' E2FB               	bc	u4430
  8389                           
  8390                           ;Phases.c: 1571: static PhasePhaseAngle_Type currentPhaseAngle2;
  8391                           ;Phases.c: 1574: currentPhaseAngle2.phaseState = VI_PA;
  8392  0048' 0E01               	movlw	1
  8393  004A' 0101               	movlb	1	; () banked
  8394  004C' 6F00'              	movwf	(viPhaseAngle@currentPhaseAngle2+1)& (0+255),b
  8395                           
  8396                           ; BSR set to: 1
  8397                           ;Phases.c: 1575: currentPhaseAngle2.stateMain = data.stateMain;
  8398  004E' C028' F0A0'        	movff	viPhaseAngle@data+2,viPhaseAngle@currentPhaseAngle2+2
  8399                           
  8400                           ; BSR set to: 1
  8401                           ;Phases.c: 1577: if(getButton1() == 1)
  8402  0052' EC00' F000'        	call	_getButton1	;wreg free
  8403  0056' 06E8               	decf	wreg,f,c
  8404  0058' A4D8               	btfss	status,2,c
  8405  005A' D003               	goto	l875
  8406                           
  8407                           ;Phases.c: 1578: {
  8408                           ;Phases.c: 1579: currentPhaseAngle2.phaseState = EXIT_PA;
  8409  005C' 0E03               	movlw	3
  8410  005E' 0101               	movlb	1	; () banked
  8411  0060' 6F00'              	movwf	(viPhaseAngle@currentPhaseAngle2+1)& (0+255),b
  8412  0062'                    l875:
  8413                           
  8414                           ;Phases.c: 1580: }
  8415                           ;Phases.c: 1581: if(getButton2() == 1)
  8416                           
  8417                           ; BSR set to: 1
  8418  0062' EC00' F000'        	call	_getButton2	;wreg free
  8419  0066' 06E8               	decf	wreg,f,c
  8420  0068' A4D8               	btfss	status,2,c
  8421  006A' D005               	goto	l876
  8422                           
  8423                           ;Phases.c: 1582: {
  8424                           ;Phases.c: 1583: currentPhaseAngle2.phaseState = THDN_PA;
  8425  006C' 0E02               	movlw	2
  8426  006E' 0101               	movlb	1	; () banked
  8427  0070' 6F00'              	movwf	(viPhaseAngle@currentPhaseAngle2+1)& (0+255),b
  8428                           
  8429                           ; BSR set to: 1
  8430                           ;Phases.c: 1584: LCDNokia_clear();
  8431  0072' EC00' F000'        	call	_LCDNokia_clear	;wreg free
  8432  0076'                    l876:
  8433                           
  8434                           ;Phases.c: 1585: }
  8435                           ;Phases.c: 1587: LCDNokia_gotoXY(0,1);
  8436  0076' 0E01               	movlw	1
  8437  0078' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  8438  007A' 0E00               	movlw	0
  8439  007C' EC00' F000'        	call	_LCDNokia_gotoXY
  8440                           
  8441                           ;Phases.c: 1588: LCDNokia_sendString(angle_VoltageP1);
  8442  0080' 0E00'              	movlw	low viPhaseAngle@angle_VoltageP1
  8443  0082' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  8444  0084' 0E00'              	movlw	high viPhaseAngle@angle_VoltageP1
  8445  0086' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  8446  0088' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  8447                           
  8448                           ;Phases.c: 1589: LCDNokia_printValue(ATM_registers(PHASE_ANGLE_TYPE, PHASE_A_VOLTAGE_ANG
      +                          LE_PHASE));
  8449  008C' 0E50               	movlw	80
  8450  008E' 6E12'              	movwf	ATM_registers@reg,c
  8451  0090' 0E0F               	movlw	15
  8452  0092' EC00' F000'        	call	_ATM_registers
  8453  0096' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
  8454  009A' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
  8455  009E' 6A19'              	clrf	LCDNokia_printValue@value+2,c
  8456  00A0' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
  8457  00A2' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
  8458                           
  8459                           ;Phases.c: 1590: LCDNokia_gotoXY(0,2);
  8460  00A6' 0E02               	movlw	2
  8461  00A8' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  8462  00AA' 0E00               	movlw	0
  8463  00AC' EC00' F000'        	call	_LCDNokia_gotoXY
  8464                           
  8465                           ;Phases.c: 1591: LCDNokia_sendString(angle_VoltageP2);
  8466  00B0' 0E00'              	movlw	low viPhaseAngle@angle_VoltageP2
  8467  00B2' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  8468  00B4' 0E00'              	movlw	high viPhaseAngle@angle_VoltageP2
  8469  00B6' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  8470  00B8' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  8471                           
  8472                           ;Phases.c: 1592: LCDNokia_printValue(ATM_registers(PHASE_ANGLE_TYPE, PHASE_B_VOLTAGE_ANG
      +                          LE_PHASE));
  8473  00BC' 0E51               	movlw	81
  8474  00BE' 6E12'              	movwf	ATM_registers@reg,c
  8475  00C0' 0E0F               	movlw	15
  8476  00C2' EC00' F000'        	call	_ATM_registers
  8477  00C6' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
  8478  00CA' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
  8479  00CE' 6A19'              	clrf	LCDNokia_printValue@value+2,c
  8480  00D0' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
  8481  00D2' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
  8482                           
  8483                           ;Phases.c: 1593: LCDNokia_gotoXY(0,3);
  8484  00D6' 0E03               	movlw	3
  8485  00D8' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  8486  00DA' 0E00               	movlw	0
  8487  00DC' EC00' F000'        	call	_LCDNokia_gotoXY
  8488                           
  8489                           ;Phases.c: 1594: LCDNokia_sendString(angle_VoltageP3);
  8490  00E0' 0E00'              	movlw	low viPhaseAngle@angle_VoltageP3
  8491  00E2' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  8492  00E4' 0E00'              	movlw	high viPhaseAngle@angle_VoltageP3
  8493  00E6' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  8494  00E8' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  8495                           
  8496                           ;Phases.c: 1595: LCDNokia_printValue(ATM_registers(PHASE_ANGLE_TYPE, PHASE_C_VOLTAGE_ANG
      +                          LE_PHASE));
  8497  00EC' 0E52               	movlw	82
  8498  00EE' 6E12'              	movwf	ATM_registers@reg,c
  8499  00F0' 0E0F               	movlw	15
  8500  00F2' EC00' F000'        	call	_ATM_registers
  8501  00F6' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
  8502  00FA' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
  8503  00FE' 6A19'              	clrf	LCDNokia_printValue@value+2,c
  8504  0100' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
  8505  0102' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
  8506                           
  8507                           ;Phases.c: 1597: return (currentPhaseAngle2);
  8508  0106' C09E' F026'        	movff	viPhaseAngle@currentPhaseAngle2,?_viPhaseAngle
  8509  010A' C09F' F027'        	movff	viPhaseAngle@currentPhaseAngle2+1,?_viPhaseAngle+1
  8510  010E' C0A0' F028'        	movff	viPhaseAngle@currentPhaseAngle2+2,?_viPhaseAngle+2
  8511  0112' 0012               	return	
  8512  0114'                    __end_of_viPhaseAngle:
  8513                           	opt stack 0
  8514                           tosu	equ	0xFFF
  8515                           tosh	equ	0xFFE
  8516                           tosl	equ	0xFFD
  8517                           pclath	equ	0xFFA
  8518                           tblptru	equ	0xFF8
  8519                           tblptrh	equ	0xFF7
  8520                           tblptrl	equ	0xFF6
  8521                           tablat	equ	0xFF5
  8522                           prodh	equ	0xFF4
  8523                           prodl	equ	0xFF3
  8524                           postinc0	equ	0xFEE
  8525                           wreg	equ	0xFE8
  8526                           postinc2	equ	0xFDE
  8527                           status	equ	0xFD8
  8528                           
  8529 ;; *************** function _sendData *****************
  8530 ;; Defined at:
  8531 ;;		line 273 in file "Phases.c"
  8532 ;; Parameters:    Size  Location     Type
  8533 ;;  data            2   15[COMRAM] struct .
  8534 ;; Auto vars:     Size  Location     Type
  8535 ;;		None
  8536 ;; Return value:  Size  Location     Type
  8537 ;;                  2   15[COMRAM] struct .
  8538 ;; Registers used:
  8539 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8540 ;; Tracked objects:
  8541 ;;		On entry : 0/0
  8542 ;;		On exit  : 0/0
  8543 ;;		Unchanged: 0/0
  8544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8545 ;;      Params:         2       0       0       0
  8546 ;;      Locals:         0       0       0       0
  8547 ;;      Temps:          0       0       0       0
  8548 ;;      Totals:         2       0       0       0
  8549 ;;Total ram usage:        2 bytes
  8550 ;; Hardware stack levels used:    1
  8551 ;; Hardware stack levels required when called:    4
  8552 ;; This function calls:
  8553 ;;		_LCDNokia_clear
  8554 ;;		_LCDNokia_init
  8555 ;;		_SPI_init
  8556 ;;		_UART_init
  8557 ;; This function is called by:
  8558 ;;		_stateMainMenu
  8559 ;; This function uses a non-reentrant model
  8560 ;;
  8561                           
  8562                           	psect	text27
  8563  0000'                    __ptext27:
  8564                           	opt stack 0
  8565  0000'                    _sendData:
  8566                           	opt stack 25
  8567                           
  8568                           ;Phases.c: 408: static PhaseMainMenu_Type currentMainMenu4;
  8569                           ;Phases.c: 411: UART_init(BD_9600);
  8570                           
  8571                           ;incstack = 0
  8572  0000' 0E25               	movlw	37
  8573  0002' 6E06'              	movwf	UART_init@baudRate+1,c
  8574  0004' 0E80               	movlw	128
  8575  0006' 6E05'              	movwf	UART_init@baudRate,c
  8576  0008' EC00' F000'        	call	_UART_init	;wreg free
  8577                           
  8578                           ;Phases.c: 703: currentMainMenu4.phaseState = GENERAL_VIEW;
  8579  000C' 0E01               	movlw	1
  8580  000E' 0101               	movlb	1	; () banked
  8581  0010' 6F00'              	movwf	sendData@currentMainMenu4& (0+255),b
  8582                           
  8583                           ; BSR set to: 1
  8584                           ;Phases.c: 704: currentMainMenu4.stateMain = MAIN_MENU;
  8585  0012' 0E00               	movlw	0
  8586  0014' 6F00'              	movwf	(sendData@currentMainMenu4+1)& (0+255),b
  8587                           
  8588                           ; BSR set to: 1
  8589                           ;Phases.c: 707: SPI_init(&SPI_Config2);
  8590  0016' 0E00'              	movlw	low _SPI_Config2
  8591  0018' 6E02'              	movwf	SPI_init@SPI_Config,c
  8592  001A' 0E00'              	movlw	high _SPI_Config2
  8593  001C' 6E03'              	movwf	SPI_init@SPI_Config+1,c
  8594  001E' EC00' F000'        	call	_SPI_init	;wreg free
  8595                           
  8596                           ;Phases.c: 708: LCDNokia_init();
  8597  0022' EC00' F000'        	call	_LCDNokia_init	;wreg free
  8598                           
  8599                           ;Phases.c: 709: LCDNokia_clear();
  8600  0026' EC00' F000'        	call	_LCDNokia_clear	;wreg free
  8601                           
  8602                           ;Phases.c: 711: return (currentMainMenu4);
  8603  002A' C0EA' F00F'        	movff	sendData@currentMainMenu4,?_sendData
  8604  002E' C0EB' F010'        	movff	sendData@currentMainMenu4+1,?_sendData+1
  8605  0032' 0012               	return	
  8606  0034'                    __end_of_sendData:
  8607                           	opt stack 0
  8608                           tosu	equ	0xFFF
  8609                           tosh	equ	0xFFE
  8610                           tosl	equ	0xFFD
  8611                           pclath	equ	0xFFA
  8612                           tblptru	equ	0xFF8
  8613                           tblptrh	equ	0xFF7
  8614                           tblptrl	equ	0xFF6
  8615                           tablat	equ	0xFF5
  8616                           prodh	equ	0xFF4
  8617                           prodl	equ	0xFF3
  8618                           postinc0	equ	0xFEE
  8619                           wreg	equ	0xFE8
  8620                           postinc2	equ	0xFDE
  8621                           status	equ	0xFD8
  8622                           
  8623 ;; *************** function _generalView *****************
  8624 ;; Defined at:
  8625 ;;		line 29 in file "Phases.c"
  8626 ;; Parameters:    Size  Location     Type
  8627 ;;  data            2   15[COMRAM] struct .
  8628 ;; Auto vars:     Size  Location     Type
  8629 ;;  msgInitial2    12   29[COMRAM] const unsigned char [12]
  8630 ;;  msgInitial1    12   17[COMRAM] const unsigned char [12]
  8631 ;;  buttonLeft      5   46[COMRAM] const unsigned char [5]
  8632 ;;  buttonRight     5   41[COMRAM] const unsigned char [5]
  8633 ;; Return value:  Size  Location     Type
  8634 ;;                  2   15[COMRAM] struct .
  8635 ;; Registers used:
  8636 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8637 ;; Tracked objects:
  8638 ;;		On entry : 0/0
  8639 ;;		On exit  : 0/0
  8640 ;;		Unchanged: 0/0
  8641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8642 ;;      Params:         2       0       0       0
  8643 ;;      Locals:        34       0       0       0
  8644 ;;      Temps:          0       0       0       0
  8645 ;;      Totals:        36       0       0       0
  8646 ;;Total ram usage:       36 bytes
  8647 ;; Hardware stack levels used:    1
  8648 ;; Hardware stack levels required when called:    4
  8649 ;; This function calls:
  8650 ;;		_LCDNokia_clear
  8651 ;;		_LCDNokia_gotoXY
  8652 ;;		_LCDNokia_sendString
  8653 ;;		_getButton1
  8654 ;;		_getButton3
  8655 ;; This function is called by:
  8656 ;;		_stateMainMenu
  8657 ;; This function uses a non-reentrant model
  8658 ;;
  8659                           
  8660                           	psect	text28
  8661  0000'                    __ptext28:
  8662                           	opt stack 0
  8663  0000'                    _generalView:
  8664                           	opt stack 25
  8665                           
  8666                           ;Phases.c: 31: const uint8_t msgInitial1[] = "Three Phase";
  8667                           
  8668                           ;incstack = 0
  8669  0000' 0E00'              	movlw	low generalView@F3559
  8670  0002' 6EF6               	movwf	tblptrl,c
  8671  0004'                    	if	1	;There is more than 1 active tblptr byte
  8672  0004' 0E00'              	movlw	high generalView@F3559
  8673  0006' 6EF7               	movwf	tblptrh,c
  8674  0008'                    	endif
  8675  0008'                    	if	0	;There are less than 3 active tblptr bytes
  8676  0008'                    	endif
  8677  0008' EE20' F000'        	lfsr	2,generalView@msgInitial1
  8678  000C' 0E0B               	movlw	11
  8679  000E'                    u2970:
  8680  000E' 0009               	tblrd		*+
  8681  0010' CFF5 FFDE          	movff	tablat,postinc2
  8682  0014' 06E8               	decf	wreg,f,c
  8683  0016' E2FB               	bc	u2970
  8684                           
  8685                           ;Phases.c: 32: const uint8_t msgInitial2[] = "Measurement";
  8686  0018' 0E00'              	movlw	low generalView@F3561
  8687  001A' 6EF6               	movwf	tblptrl,c
  8688  001C'                    	if	1	;There is more than 1 active tblptr byte
  8689  001C' 0E00'              	movlw	high generalView@F3561
  8690  001E' 6EF7               	movwf	tblptrh,c
  8691  0020'                    	endif
  8692  0020'                    	if	0	;There are less than 3 active tblptr bytes
  8693  0020'                    	endif
  8694  0020' EE20' F000'        	lfsr	2,generalView@msgInitial2
  8695  0024' 0E0B               	movlw	11
  8696  0026'                    u2980:
  8697  0026' 0009               	tblrd		*+
  8698  0028' CFF5 FFDE          	movff	tablat,postinc2
  8699  002C' 06E8               	decf	wreg,f,c
  8700  002E' E2FB               	bc	u2980
  8701                           
  8702                           ;Phases.c: 33: const uint8_t buttonRight[] = "Send";
  8703  0030' 0E00'              	movlw	low generalView@F3563
  8704  0032' 6EF6               	movwf	tblptrl,c
  8705  0034'                    	if	1	;There is more than 1 active tblptr byte
  8706  0034' 0E00'              	movlw	high generalView@F3563
  8707  0036' 6EF7               	movwf	tblptrh,c
  8708  0038'                    	endif
  8709  0038'                    	if	0	;There are less than 3 active tblptr bytes
  8710  0038'                    	endif
  8711  0038' EE20' F000'        	lfsr	2,generalView@buttonRight
  8712  003C' 0E04               	movlw	4
  8713  003E'                    u2990:
  8714  003E' 0009               	tblrd		*+
  8715  0040' CFF5 FFDE          	movff	tablat,postinc2
  8716  0044' 06E8               	decf	wreg,f,c
  8717  0046' E2FB               	bc	u2990
  8718                           
  8719                           ;Phases.c: 34: const uint8_t buttonLeft[] = "Menu";
  8720  0048' 0E00'              	movlw	low generalView@F3565
  8721  004A' 6EF6               	movwf	tblptrl,c
  8722  004C'                    	if	1	;There is more than 1 active tblptr byte
  8723  004C' 0E00'              	movlw	high generalView@F3565
  8724  004E' 6EF7               	movwf	tblptrh,c
  8725  0050'                    	endif
  8726  0050'                    	if	0	;There are less than 3 active tblptr bytes
  8727  0050'                    	endif
  8728  0050' EE20' F000'        	lfsr	2,generalView@buttonLeft
  8729  0054' 0E04               	movlw	4
  8730  0056'                    u3000:
  8731  0056' 0009               	tblrd		*+
  8732  0058' CFF5 FFDE          	movff	tablat,postinc2
  8733  005C' 06E8               	decf	wreg,f,c
  8734  005E' E2FB               	bc	u3000
  8735                           
  8736                           ;Phases.c: 36: static uint8_t lockClear = 0;
  8737                           ;Phases.c: 37: static uint8_t lockWrite = 0;
  8738                           ;Phases.c: 39: static PhaseMainMenu_Type currentMainMenu2;
  8739                           ;Phases.c: 41: currentMainMenu2.phaseState = GENERAL_VIEW;
  8740  0060' 0E01               	movlw	1
  8741  0062' 0101               	movlb	1	; () banked
  8742  0064' 6F00'              	movwf	generalView@currentMainMenu2& (0+255),b
  8743                           
  8744                           ; BSR set to: 1
  8745                           ;Phases.c: 43: if(0 == lockClear)
  8746  0066' 0100               	movlb	0	; () banked
  8747  0068' 5100'              	movf	generalView@lockClear& (0+255),w,b
  8748  006A' A4D8               	btfss	status,2,c
  8749  006C' D005               	goto	l434
  8750                           
  8751                           ; BSR set to: 0
  8752                           ;Phases.c: 44: {
  8753                           ;Phases.c: 46: LCDNokia_clear();
  8754  006E' EC00' F000'        	call	_LCDNokia_clear	;wreg free
  8755                           
  8756                           ;Phases.c: 48: lockClear = 1;
  8757  0072' 0E01               	movlw	1
  8758  0074' 0100               	movlb	0	; () banked
  8759  0076' 6F00'              	movwf	generalView@lockClear& (0+255),b
  8760  0078'                    l434:
  8761                           
  8762                           ; BSR set to: 0
  8763                           ;Phases.c: 49: }
  8764                           ;Phases.c: 51: if(0 == lockWrite)
  8765                           
  8766                           ; BSR set to: 0
  8767  0078' 5100'              	movf	generalView@lockWrite& (0+255),w,b
  8768  007A' A4D8               	btfss	status,2,c
  8769  007C' D02F               	goto	l435
  8770                           
  8771                           ; BSR set to: 0
  8772                           ;Phases.c: 52: {
  8773                           ;Phases.c: 53: LCDNokia_gotoXY(20,1);
  8774  007E' 0E01               	movlw	1
  8775  0080' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  8776  0082' 0E14               	movlw	20
  8777  0084' EC00' F000'        	call	_LCDNokia_gotoXY
  8778                           
  8779                           ;Phases.c: 54: LCDNokia_sendString(msgInitial1);
  8780  0088' 0E00'              	movlw	low generalView@msgInitial1
  8781  008A' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  8782  008C' 0E00'              	movlw	high generalView@msgInitial1
  8783  008E' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  8784  0090' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  8785                           
  8786                           ;Phases.c: 56: LCDNokia_gotoXY(27,1);
  8787  0094' 0E01               	movlw	1
  8788  0096' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  8789  0098' 0E1B               	movlw	27
  8790  009A' EC00' F000'        	call	_LCDNokia_gotoXY
  8791                           
  8792                           ;Phases.c: 57: LCDNokia_sendString(msgInitial2);
  8793  009E' 0E00'              	movlw	low generalView@msgInitial2
  8794  00A0' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  8795  00A2' 0E00'              	movlw	high generalView@msgInitial2
  8796  00A4' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  8797  00A6' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  8798                           
  8799                           ;Phases.c: 59: LCDNokia_gotoXY(0,4);
  8800  00AA' 0E04               	movlw	4
  8801  00AC' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  8802  00AE' 0E00               	movlw	0
  8803  00B0' EC00' F000'        	call	_LCDNokia_gotoXY
  8804                           
  8805                           ;Phases.c: 60: LCDNokia_sendString(buttonLeft);
  8806  00B4' 0E00'              	movlw	low generalView@buttonLeft
  8807  00B6' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  8808  00B8' 0E00'              	movlw	high generalView@buttonLeft
  8809  00BA' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  8810  00BC' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  8811                           
  8812                           ;Phases.c: 62: LCDNokia_gotoXY(65,4);
  8813  00C0' 0E04               	movlw	4
  8814  00C2' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  8815  00C4' 0E41               	movlw	65
  8816  00C6' EC00' F000'        	call	_LCDNokia_gotoXY
  8817                           
  8818                           ;Phases.c: 63: LCDNokia_sendString(buttonRight);
  8819  00CA' 0E00'              	movlw	low generalView@buttonRight
  8820  00CC' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  8821  00CE' 0E00'              	movlw	high generalView@buttonRight
  8822  00D0' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  8823  00D2' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  8824                           
  8825                           ;Phases.c: 65: lockWrite = 1;
  8826  00D6' 0E01               	movlw	1
  8827  00D8' 0100               	movlb	0	; () banked
  8828  00DA' 6F00'              	movwf	generalView@lockWrite& (0+255),b
  8829  00DC'                    l435:
  8830                           
  8831                           ; BSR set to: 0
  8832                           ;Phases.c: 66: }
  8833                           ;Phases.c: 68: if(getButton1() == 1)
  8834                           
  8835                           ; BSR set to: 0
  8836  00DC' EC00' F000'        	call	_getButton1	;wreg free
  8837  00E0' 06E8               	decf	wreg,f,c
  8838  00E2' A4D8               	btfss	status,2,c
  8839  00E4' D008               	goto	l436
  8840                           
  8841                           ;Phases.c: 69: {
  8842                           ;Phases.c: 70: currentMainMenu2.phaseState = VIEW_MENU;
  8843  00E6' 0E02               	movlw	2
  8844  00E8' 0101               	movlb	1	; () banked
  8845  00EA' 6F00'              	movwf	generalView@currentMainMenu2& (0+255),b
  8846                           
  8847                           ;Phases.c: 71: lockClear = 0;
  8848  00EC' 0E00               	movlw	0
  8849  00EE' 0100               	movlb	0	; () banked
  8850  00F0' 6F00'              	movwf	generalView@lockClear& (0+255),b
  8851                           
  8852                           ;Phases.c: 72: lockWrite = 0;
  8853  00F2' 0E00               	movlw	0
  8854  00F4' 6F00'              	movwf	generalView@lockWrite& (0+255),b
  8855  00F6'                    l436:
  8856                           
  8857                           ;Phases.c: 73: }
  8858                           ;Phases.c: 74: if(getButton3() == 1)
  8859                           
  8860                           ; BSR set to: 0
  8861  00F6' EC00' F000'        	call	_getButton3	;wreg free
  8862  00FA' 06E8               	decf	wreg,f,c
  8863  00FC' A4D8               	btfss	status,2,c
  8864  00FE' D008               	goto	l437
  8865                           
  8866                           ;Phases.c: 75: {
  8867                           ;Phases.c: 76: currentMainMenu2.phaseState = SEND_DATA;
  8868  0100' 0E03               	movlw	3
  8869  0102' 0101               	movlb	1	; () banked
  8870  0104' 6F00'              	movwf	generalView@currentMainMenu2& (0+255),b
  8871                           
  8872                           ;Phases.c: 77: lockClear = 0;
  8873  0106' 0E00               	movlw	0
  8874  0108' 0100               	movlb	0	; () banked
  8875  010A' 6F00'              	movwf	generalView@lockClear& (0+255),b
  8876                           
  8877                           ;Phases.c: 78: lockWrite = 0;
  8878  010C' 0E00               	movlw	0
  8879  010E' 6F00'              	movwf	generalView@lockWrite& (0+255),b
  8880  0110'                    l437:
  8881                           
  8882                           ;Phases.c: 79: }
  8883                           ;Phases.c: 82: currentMainMenu2.stateMain = data.stateMain;
  8884                           
  8885                           ; BSR set to: 0
  8886  0110' C010' F0ED'        	movff	generalView@data+1,generalView@currentMainMenu2+1
  8887                           
  8888                           ;Phases.c: 84: return (currentMainMenu2);
  8889  0114' C0EC' F00F'        	movff	generalView@currentMainMenu2,?_generalView
  8890  0118' C0ED' F010'        	movff	generalView@currentMainMenu2+1,?_generalView+1
  8891  011C' 0012               	return	
  8892  011E'                    __end_of_generalView:
  8893                           	opt stack 0
  8894                           tosu	equ	0xFFF
  8895                           tosh	equ	0xFFE
  8896                           tosl	equ	0xFFD
  8897                           pclath	equ	0xFFA
  8898                           tblptru	equ	0xFF8
  8899                           tblptrh	equ	0xFF7
  8900                           tblptrl	equ	0xFF6
  8901                           tablat	equ	0xFF5
  8902                           prodh	equ	0xFF4
  8903                           prodl	equ	0xFF3
  8904                           postinc0	equ	0xFEE
  8905                           wreg	equ	0xFE8
  8906                           postinc2	equ	0xFDE
  8907                           status	equ	0xFD8
  8908                           
  8909 ;; *************** function _initialLoad *****************
  8910 ;; Defined at:
  8911 ;;		line 12 in file "Phases.c"
  8912 ;; Parameters:    Size  Location     Type
  8913 ;;  data            2   15[COMRAM] struct .
  8914 ;; Auto vars:     Size  Location     Type
  8915 ;;		None
  8916 ;; Return value:  Size  Location     Type
  8917 ;;                  2   15[COMRAM] struct .
  8918 ;; Registers used:
  8919 ;;		wreg, status,2, status,0, cstack
  8920 ;; Tracked objects:
  8921 ;;		On entry : 0/0
  8922 ;;		On exit  : 0/0
  8923 ;;		Unchanged: 0/0
  8924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8925 ;;      Params:         2       0       0       0
  8926 ;;      Locals:         0       0       0       0
  8927 ;;      Temps:          0       0       0       0
  8928 ;;      Totals:         2       0       0       0
  8929 ;;Total ram usage:        2 bytes
  8930 ;; Hardware stack levels used:    1
  8931 ;; Hardware stack levels required when called:    2
  8932 ;; This function calls:
  8933 ;;		_ATM_init
  8934 ;;		_delay
  8935 ;; This function is called by:
  8936 ;;		_stateMainMenu
  8937 ;; This function uses a non-reentrant model
  8938 ;;
  8939                           
  8940                           	psect	text29
  8941  0000'                    __ptext29:
  8942                           	opt stack 0
  8943  0000'                    _initialLoad:
  8944                           	opt stack 27
  8945                           
  8946                           ;Phases.c: 15: static PhaseMainMenu_Type currentMainMenu1;
  8947                           ;Phases.c: 18: ATM_init();
  8948                           
  8949                           ;incstack = 0
  8950  0000' EC00' F000'        	call	_ATM_init	;wreg free
  8951                           
  8952                           ;Phases.c: 20: delay(1500);
  8953  0004' 0EDC               	movlw	220
  8954  0006' 6E00'              	movwf	delay@delay,c
  8955  0008' 0E05               	movlw	5
  8956  000A' 6E01'              	movwf	delay@delay+1,c
  8957  000C' 0E00               	movlw	0
  8958  000E' 6E02'              	movwf	delay@delay+2,c
  8959  0010' 0E00               	movlw	0
  8960  0012' 6E03'              	movwf	delay@delay+3,c
  8961  0014' EC00' F000'        	call	_delay	;wreg free
  8962                           
  8963                           ;Phases.c: 23: currentMainMenu1.phaseState = GENERAL_VIEW;
  8964  0018' 0E01               	movlw	1
  8965  001A' 0101               	movlb	1	; () banked
  8966  001C' 6F00'              	movwf	initialLoad@currentMainMenu1& (0+255),b
  8967                           
  8968                           ; BSR set to: 1
  8969                           ;Phases.c: 24: currentMainMenu1.stateMain = data.stateMain;
  8970  001E' C010' F0EF'        	movff	initialLoad@data+1,initialLoad@currentMainMenu1+1
  8971                           
  8972                           ; BSR set to: 1
  8973                           ;Phases.c: 26: return (currentMainMenu1);
  8974  0022' C0EE' F00F'        	movff	initialLoad@currentMainMenu1,?_initialLoad
  8975  0026' C0EF' F010'        	movff	initialLoad@currentMainMenu1+1,?_initialLoad+1
  8976  002A' 0012               	return	
  8977  002C'                    __end_of_initialLoad:
  8978                           	opt stack 0
  8979                           tosu	equ	0xFFF
  8980                           tosh	equ	0xFFE
  8981                           tosl	equ	0xFFD
  8982                           pclath	equ	0xFFA
  8983                           tblptru	equ	0xFF8
  8984                           tblptrh	equ	0xFF7
  8985                           tblptrl	equ	0xFF6
  8986                           tablat	equ	0xFF5
  8987                           prodh	equ	0xFF4
  8988                           prodl	equ	0xFF3
  8989                           postinc0	equ	0xFEE
  8990                           wreg	equ	0xFE8
  8991                           postinc2	equ	0xFDE
  8992                           status	equ	0xFD8
  8993                           
  8994 ;; *************** function _viewMenu *****************
  8995 ;; Defined at:
  8996 ;;		line 87 in file "Phases.c"
  8997 ;; Parameters:    Size  Location     Type
  8998 ;;  data            2   15[COMRAM] struct .
  8999 ;; Auto vars:     Size  Location     Type
  9000 ;;  string1_RMS    16   16[BANK0 ] const unsigned char [16]
  9001 ;;  string1_Powe   16    0[BANK0 ] const unsigned char [16]
  9002 ;;  string2_Powe   15   32[BANK0 ] const unsigned char [15]
  9003 ;;  string1_Temp   12   59[BANK0 ] const unsigned char [12]
  9004 ;;  string1_Powe   12   47[BANK0 ] const unsigned char [12]
  9005 ;;  string1_Freq   10   71[BANK0 ] const unsigned char [10]
  9006 ;;  string2_Powe    9   81[BANK0 ] const unsigned char [9]
  9007 ;;  string2_Powe    7   97[BANK0 ] const unsigned char [7]
  9008 ;;  string_Energ    7   90[BANK0 ] const unsigned char [7]
  9009 ;;  string2_Phas    6  122[BANK0 ] const unsigned char [6]
  9010 ;;  string1_Phas    6  116[BANK0 ] const unsigned char [6]
  9011 ;;  string1_Powe    6  110[BANK0 ] const unsigned char [6]
  9012 ;;  string3_Powe    6  104[BANK0 ] const unsigned char [6]
  9013 ;;  string2_RMS     4  128[BANK0 ] const unsigned char [4]
  9014 ;;  buttonLeft      2  136[BANK0 ] const unsigned char [2]
  9015 ;;  buttonCenter    2  134[BANK0 ] const unsigned char [2]
  9016 ;;  buttonRight     2  132[BANK0 ] const unsigned char [2]
  9017 ;;  maxScreens      1  138[BANK0 ] const unsigned char 
  9018 ;; Return value:  Size  Location     Type
  9019 ;;                  2   15[COMRAM] struct .
  9020 ;; Registers used:
  9021 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9022 ;; Tracked objects:
  9023 ;;		On entry : 0/0
  9024 ;;		On exit  : 0/0
  9025 ;;		Unchanged: 0/0
  9026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9027 ;;      Params:         2       0       0       0
  9028 ;;      Locals:         0     139       0       0
  9029 ;;      Temps:          0       0       0       0
  9030 ;;      Totals:         2     139       0       0
  9031 ;;Total ram usage:      141 bytes
  9032 ;; Hardware stack levels used:    1
  9033 ;; Hardware stack levels required when called:    4
  9034 ;; This function calls:
  9035 ;;		_LCDNokia_clear
  9036 ;;		_LCDNokia_gotoXY
  9037 ;;		_LCDNokia_sendString
  9038 ;;		_getButton1
  9039 ;;		_getButton2
  9040 ;;		_getButton3
  9041 ;; This function is called by:
  9042 ;;		_stateMainMenu
  9043 ;; This function uses a non-reentrant model
  9044 ;;
  9045                           
  9046                           	psect	text30
  9047  0000'                    __ptext30:
  9048                           	opt stack 0
  9049  0000'                    _viewMenu:
  9050                           	opt stack 25
  9051                           
  9052                           ;Phases.c: 89: const uint8_t maxScreens = 7;
  9053                           
  9054                           ; BSR set to: 1
  9055                           ;incstack = 0
  9056  0000' 0E07               	movlw	7
  9057  0002' 0100               	movlb	0	; () banked
  9058  0004' 6F00'              	movwf	viewMenu@maxScreens& (0+255),b
  9059                           
  9060                           ; BSR set to: 0
  9061                           ;Phases.c: 90: const uint8_t string_Energy[] = "Energy";
  9062  0006' 0E00'              	movlw	low viewMenu@F3572
  9063  0008' 6EF6               	movwf	tblptrl,c
  9064  000A'                    	if	1	;There is more than 1 active tblptr byte
  9065  000A' 0E00'              	movlw	high viewMenu@F3572
  9066  000C' 6EF7               	movwf	tblptrh,c
  9067  000E'                    	endif
  9068  000E'                    	if	0	;There are less than 3 active tblptr bytes
  9069  000E'                    	endif
  9070  000E' EE20' F000'        	lfsr	2,viewMenu@string_Energy
  9071  0012' 0E06               	movlw	6
  9072  0014'                    u3050:
  9073  0014' 0009               	tblrd		*+
  9074  0016' CFF5 FFDE          	movff	tablat,postinc2
  9075  001A' 06E8               	decf	wreg,f,c
  9076  001C' E2FB               	bc	u3050
  9077                           
  9078                           ; BSR set to: 0
  9079                           ;Phases.c: 92: const uint8_t string1_Power1[] = "Active Reactive";
  9080  001E' 0E00'              	movlw	low viewMenu@F3574
  9081  0020' 6EF6               	movwf	tblptrl,c
  9082  0022'                    	if	1	;There is more than 1 active tblptr byte
  9083  0022' 0E00'              	movlw	high viewMenu@F3574
  9084  0024' 6EF7               	movwf	tblptrh,c
  9085  0026'                    	endif
  9086  0026'                    	if	0	;There are less than 3 active tblptr bytes
  9087  0026'                    	endif
  9088  0026' EE20' F000'        	lfsr	2,viewMenu@string1_Power1
  9089  002A' 0E0F               	movlw	15
  9090  002C'                    u3060:
  9091  002C' 0009               	tblrd		*+
  9092  002E' CFF5 FFDE          	movff	tablat,postinc2
  9093  0032' 06E8               	decf	wreg,f,c
  9094  0034' E2FB               	bc	u3060
  9095                           
  9096                           ; BSR set to: 0
  9097                           ;Phases.c: 93: const uint8_t string2_Power1[] = "Apparent Power";
  9098  0036' 0E00'              	movlw	low viewMenu@F3576
  9099  0038' 6EF6               	movwf	tblptrl,c
  9100  003A'                    	if	1	;There is more than 1 active tblptr byte
  9101  003A' 0E00'              	movlw	high viewMenu@F3576
  9102  003C' 6EF7               	movwf	tblptrh,c
  9103  003E'                    	endif
  9104  003E'                    	if	0	;There are less than 3 active tblptr bytes
  9105  003E'                    	endif
  9106  003E' EE20' F000'        	lfsr	2,viewMenu@string2_Power1
  9107  0042' 0E0E               	movlw	14
  9108  0044'                    u3070:
  9109  0044' 0009               	tblrd		*+
  9110  0046' CFF5 FFDE          	movff	tablat,postinc2
  9111  004A' 06E8               	decf	wreg,f,c
  9112  004C' E2FB               	bc	u3070
  9113                           
  9114                           ; BSR set to: 0
  9115                           ;Phases.c: 95: const uint8_t string1_Power2[] = "Fundamental";
  9116  004E' 0E00'              	movlw	low viewMenu@F3578
  9117  0050' 6EF6               	movwf	tblptrl,c
  9118  0052'                    	if	1	;There is more than 1 active tblptr byte
  9119  0052' 0E00'              	movlw	high viewMenu@F3578
  9120  0054' 6EF7               	movwf	tblptrh,c
  9121  0056'                    	endif
  9122  0056'                    	if	0	;There are less than 3 active tblptr bytes
  9123  0056'                    	endif
  9124  0056' EE20' F000'        	lfsr	2,viewMenu@string1_Power2
  9125  005A' 0E0B               	movlw	11
  9126  005C'                    u3080:
  9127  005C' 0009               	tblrd		*+
  9128  005E' CFF5 FFDE          	movff	tablat,postinc2
  9129  0062' 06E8               	decf	wreg,f,c
  9130  0064' E2FB               	bc	u3080
  9131                           
  9132                           ; BSR set to: 0
  9133                           ;Phases.c: 96: const uint8_t string2_Power2[] = "Harmonic";
  9134  0066' 0E00'              	movlw	low viewMenu@F3580
  9135  0068' 6EF6               	movwf	tblptrl,c
  9136  006A'                    	if	1	;There is more than 1 active tblptr byte
  9137  006A' 0E00'              	movlw	high viewMenu@F3580
  9138  006C' 6EF7               	movwf	tblptrh,c
  9139  006E'                    	endif
  9140  006E'                    	if	0	;There are less than 3 active tblptr bytes
  9141  006E'                    	endif
  9142  006E' EE20' F000'        	lfsr	2,viewMenu@string2_Power2
  9143  0072' 0E08               	movlw	8
  9144  0074'                    u3090:
  9145  0074' 0009               	tblrd		*+
  9146  0076' CFF5 FFDE          	movff	tablat,postinc2
  9147  007A' 06E8               	decf	wreg,f,c
  9148  007C' E2FB               	bc	u3090
  9149                           
  9150                           ; BSR set to: 0
  9151                           ;Phases.c: 97: const uint8_t string3_Power2[] = "Power";
  9152  007E' 0E00'              	movlw	low viewMenu@F3582
  9153  0080' 6EF6               	movwf	tblptrl,c
  9154  0082'                    	if	1	;There is more than 1 active tblptr byte
  9155  0082' 0E00'              	movlw	high viewMenu@F3582
  9156  0084' 6EF7               	movwf	tblptrh,c
  9157  0086'                    	endif
  9158  0086'                    	if	0	;There are less than 3 active tblptr bytes
  9159  0086'                    	endif
  9160  0086' EE20' F000'        	lfsr	2,viewMenu@string3_Power2
  9161  008A' 0E05               	movlw	5
  9162  008C'                    u3100:
  9163  008C' 0009               	tblrd		*+
  9164  008E' CFF5 FFDE          	movff	tablat,postinc2
  9165  0092' 06E8               	decf	wreg,f,c
  9166  0094' E2FB               	bc	u3100
  9167                           
  9168                           ; BSR set to: 0
  9169                           ;Phases.c: 99: const uint8_t string1_RMS[] = "Voltage Current";
  9170  0096' 0E00'              	movlw	low viewMenu@F3584
  9171  0098' 6EF6               	movwf	tblptrl,c
  9172  009A'                    	if	1	;There is more than 1 active tblptr byte
  9173  009A' 0E00'              	movlw	high viewMenu@F3584
  9174  009C' 6EF7               	movwf	tblptrh,c
  9175  009E'                    	endif
  9176  009E'                    	if	0	;There are less than 3 active tblptr bytes
  9177  009E'                    	endif
  9178  009E' EE20' F000'        	lfsr	2,viewMenu@string1_RMS
  9179  00A2' 0E0F               	movlw	15
  9180  00A4'                    u3110:
  9181  00A4' 0009               	tblrd		*+
  9182  00A6' CFF5 FFDE          	movff	tablat,postinc2
  9183  00AA' 06E8               	decf	wreg,f,c
  9184  00AC' E2FB               	bc	u3110
  9185                           
  9186                           ; BSR set to: 0
  9187                           ;Phases.c: 100: const uint8_t string2_RMS[] = "RMS";
  9188  00AE' 0E00'              	movlw	low viewMenu@F3586
  9189  00B0' 6EF6               	movwf	tblptrl,c
  9190  00B2'                    	if	1	;There is more than 1 active tblptr byte
  9191  00B2' 0E00'              	movlw	high viewMenu@F3586
  9192  00B4' 6EF7               	movwf	tblptrh,c
  9193  00B6'                    	endif
  9194  00B6'                    	if	0	;There are less than 3 active tblptr bytes
  9195  00B6'                    	endif
  9196  00B6' 0009               	tblrd		*+
  9197  00B8' CFF5 F080'         	movff	tablat,viewMenu@string2_RMS
  9198  00BC' 0009               	tblrd		*+
  9199  00BE' CFF5 F081'         	movff	tablat,viewMenu@string2_RMS+1
  9200  00C2' 0009               	tblrd		*+
  9201  00C4' CFF5 F082'         	movff	tablat,viewMenu@string2_RMS+2
  9202  00C8' 000A               	tblrd		*-
  9203  00CA' CFF5 F083'         	movff	tablat,viewMenu@string2_RMS+3
  9204                           
  9205                           ; BSR set to: 0
  9206                           ;Phases.c: 102: const uint8_t string1_PowerFactor[] = "Power";
  9207  00CE' 0E00'              	movlw	low viewMenu@F3588
  9208  00D0' 6EF6               	movwf	tblptrl,c
  9209  00D2'                    	if	1	;There is more than 1 active tblptr byte
  9210  00D2' 0E00'              	movlw	high viewMenu@F3588
  9211  00D4' 6EF7               	movwf	tblptrh,c
  9212  00D6'                    	endif
  9213  00D6'                    	if	0	;There are less than 3 active tblptr bytes
  9214  00D6'                    	endif
  9215  00D6' EE20' F000'        	lfsr	2,viewMenu@string1_PowerFactor
  9216  00DA' 0E05               	movlw	5
  9217  00DC'                    u3120:
  9218  00DC' 0009               	tblrd		*+
  9219  00DE' CFF5 FFDE          	movff	tablat,postinc2
  9220  00E2' 06E8               	decf	wreg,f,c
  9221  00E4' E2FB               	bc	u3120
  9222                           
  9223                           ; BSR set to: 0
  9224                           ;Phases.c: 103: const uint8_t string2_PowerFactor[] = "Factor";
  9225  00E6' 0E00'              	movlw	low viewMenu@F3590
  9226  00E8' 6EF6               	movwf	tblptrl,c
  9227  00EA'                    	if	1	;There is more than 1 active tblptr byte
  9228  00EA' 0E00'              	movlw	high viewMenu@F3590
  9229  00EC' 6EF7               	movwf	tblptrh,c
  9230  00EE'                    	endif
  9231  00EE'                    	if	0	;There are less than 3 active tblptr bytes
  9232  00EE'                    	endif
  9233  00EE' EE20' F000'        	lfsr	2,viewMenu@string2_PowerFactor
  9234  00F2' 0E06               	movlw	6
  9235  00F4'                    u3130:
  9236  00F4' 0009               	tblrd		*+
  9237  00F6' CFF5 FFDE          	movff	tablat,postinc2
  9238  00FA' 06E8               	decf	wreg,f,c
  9239  00FC' E2FB               	bc	u3130
  9240                           
  9241                           ; BSR set to: 0
  9242                           ;Phases.c: 105: const uint8_t string1_PhaseAngle[] = "Phase";
  9243  00FE' 0E00'              	movlw	low viewMenu@F3592
  9244  0100' 6EF6               	movwf	tblptrl,c
  9245  0102'                    	if	1	;There is more than 1 active tblptr byte
  9246  0102' 0E00'              	movlw	high viewMenu@F3592
  9247  0104' 6EF7               	movwf	tblptrh,c
  9248  0106'                    	endif
  9249  0106'                    	if	0	;There are less than 3 active tblptr bytes
  9250  0106'                    	endif
  9251  0106' EE20' F000'        	lfsr	2,viewMenu@string1_PhaseAngle
  9252  010A' 0E05               	movlw	5
  9253  010C'                    u3140:
  9254  010C' 0009               	tblrd		*+
  9255  010E' CFF5 FFDE          	movff	tablat,postinc2
  9256  0112' 06E8               	decf	wreg,f,c
  9257  0114' E2FB               	bc	u3140
  9258                           
  9259                           ; BSR set to: 0
  9260                           ;Phases.c: 106: const uint8_t string2_PhaseAngle[] = "Angle";
  9261  0116' 0E00'              	movlw	low viewMenu@F3594
  9262  0118' 6EF6               	movwf	tblptrl,c
  9263  011A'                    	if	1	;There is more than 1 active tblptr byte
  9264  011A' 0E00'              	movlw	high viewMenu@F3594
  9265  011C' 6EF7               	movwf	tblptrh,c
  9266  011E'                    	endif
  9267  011E'                    	if	0	;There are less than 3 active tblptr bytes
  9268  011E'                    	endif
  9269  011E' EE20' F000'        	lfsr	2,viewMenu@string2_PhaseAngle
  9270  0122' 0E05               	movlw	5
  9271  0124'                    u3150:
  9272  0124' 0009               	tblrd		*+
  9273  0126' CFF5 FFDE          	movff	tablat,postinc2
  9274  012A' 06E8               	decf	wreg,f,c
  9275  012C' E2FB               	bc	u3150
  9276                           
  9277                           ; BSR set to: 0
  9278                           ;Phases.c: 108: const uint8_t string1_Frequency[] = "Frequency";
  9279  012E' 0E00'              	movlw	low viewMenu@F3596
  9280  0130' 6EF6               	movwf	tblptrl,c
  9281  0132'                    	if	1	;There is more than 1 active tblptr byte
  9282  0132' 0E00'              	movlw	high viewMenu@F3596
  9283  0134' 6EF7               	movwf	tblptrh,c
  9284  0136'                    	endif
  9285  0136'                    	if	0	;There are less than 3 active tblptr bytes
  9286  0136'                    	endif
  9287  0136' EE20' F000'        	lfsr	2,viewMenu@string1_Frequency
  9288  013A' 0E09               	movlw	9
  9289  013C'                    u3160:
  9290  013C' 0009               	tblrd		*+
  9291  013E' CFF5 FFDE          	movff	tablat,postinc2
  9292  0142' 06E8               	decf	wreg,f,c
  9293  0144' E2FB               	bc	u3160
  9294                           
  9295                           ; BSR set to: 0
  9296                           ;Phases.c: 110: const uint8_t string1_Temperature[] = "Temperature";
  9297  0146' 0E00'              	movlw	low viewMenu@F3598
  9298  0148' 6EF6               	movwf	tblptrl,c
  9299  014A'                    	if	1	;There is more than 1 active tblptr byte
  9300  014A' 0E00'              	movlw	high viewMenu@F3598
  9301  014C' 6EF7               	movwf	tblptrh,c
  9302  014E'                    	endif
  9303  014E'                    	if	0	;There are less than 3 active tblptr bytes
  9304  014E'                    	endif
  9305  014E' EE20' F000'        	lfsr	2,viewMenu@string1_Temperature
  9306  0152' 0E0B               	movlw	11
  9307  0154'                    u3170:
  9308  0154' 0009               	tblrd		*+
  9309  0156' CFF5 FFDE          	movff	tablat,postinc2
  9310  015A' 06E8               	decf	wreg,f,c
  9311  015C' E2FB               	bc	u3170
  9312                           
  9313                           ; BSR set to: 0
  9314                           ;Phases.c: 112: const uint8_t buttonRight[] = "R";
  9315  015E' 0E00'              	movlw	low viewMenu@F3600
  9316  0160' 6EF6               	movwf	tblptrl,c
  9317  0162'                    	if	1	;There is more than 1 active tblptr byte
  9318  0162' 0E00'              	movlw	high viewMenu@F3600
  9319  0164' 6EF7               	movwf	tblptrh,c
  9320  0166'                    	endif
  9321  0166'                    	if	0	;There are less than 3 active tblptr bytes
  9322  0166'                    	endif
  9323  0166' 0009               	tblrd		*+
  9324  0168' CFF5 F084'         	movff	tablat,viewMenu@buttonRight
  9325  016C' 000A               	tblrd		*-
  9326  016E' CFF5 F085'         	movff	tablat,viewMenu@buttonRight+1
  9327                           
  9328                           ; BSR set to: 0
  9329                           ;Phases.c: 113: const uint8_t buttonCenter[] = "E";
  9330  0172' 0E00'              	movlw	low viewMenu@F3602
  9331  0174' 6EF6               	movwf	tblptrl,c
  9332  0176'                    	if	1	;There is more than 1 active tblptr byte
  9333  0176' 0E00'              	movlw	high viewMenu@F3602
  9334  0178' 6EF7               	movwf	tblptrh,c
  9335  017A'                    	endif
  9336  017A'                    	if	0	;There are less than 3 active tblptr bytes
  9337  017A'                    	endif
  9338  017A' 0009               	tblrd		*+
  9339  017C' CFF5 F086'         	movff	tablat,viewMenu@buttonCenter
  9340  0180' 000A               	tblrd		*-
  9341  0182' CFF5 F087'         	movff	tablat,viewMenu@buttonCenter+1
  9342                           
  9343                           ; BSR set to: 0
  9344                           ;Phases.c: 114: const uint8_t buttonLeft[] = "L";
  9345  0186' 0E00'              	movlw	low viewMenu@F3604
  9346  0188' 6EF6               	movwf	tblptrl,c
  9347  018A'                    	if	1	;There is more than 1 active tblptr byte
  9348  018A' 0E00'              	movlw	high viewMenu@F3604
  9349  018C' 6EF7               	movwf	tblptrh,c
  9350  018E'                    	endif
  9351  018E'                    	if	0	;There are less than 3 active tblptr bytes
  9352  018E'                    	endif
  9353  018E' 0009               	tblrd		*+
  9354  0190' CFF5 F088'         	movff	tablat,viewMenu@buttonLeft
  9355  0194' 000A               	tblrd		*-
  9356  0196' CFF5 F089'         	movff	tablat,viewMenu@buttonLeft+1
  9357                           
  9358                           ; BSR set to: 0
  9359                           ;Phases.c: 116: static uint8_t lockClear = 0;
  9360                           ;Phases.c: 117: static uint8_t lockWrite = 0;
  9361                           ;Phases.c: 118: static uint8_t counterMenu = 0;
  9362                           ;Phases.c: 120: static PhaseMainMenu_Type currentMainMenu3;
  9363                           ;Phases.c: 122: currentMainMenu3.phaseState = VIEW_MENU;
  9364  019A' 0E02               	movlw	2
  9365  019C' 6E00'              	movwf	viewMenu@currentMainMenu3,c
  9366                           
  9367                           ; BSR set to: 0
  9368                           ;Phases.c: 123: currentMainMenu3.stateMain = data.stateMain;
  9369  019E' C010' F001'        	movff	viewMenu@data+1,viewMenu@currentMainMenu3+1
  9370                           
  9371                           ; BSR set to: 0
  9372                           ;Phases.c: 125: if(0 == lockClear)
  9373  01A2' 5100'              	movf	viewMenu@lockClear& (0+255),w,b
  9374  01A4' A4D8               	btfss	status,2,c
  9375  01A6' D005               	goto	l483
  9376                           
  9377                           ; BSR set to: 0
  9378                           ;Phases.c: 126: {
  9379                           ;Phases.c: 128: LCDNokia_clear();
  9380  01A8' EC00' F000'        	call	_LCDNokia_clear	;wreg free
  9381                           
  9382                           ;Phases.c: 130: lockClear = 1;
  9383  01AC' 0E01               	movlw	1
  9384  01AE' 0100               	movlb	0	; () banked
  9385  01B0' 6F00'              	movwf	viewMenu@lockClear& (0+255),b
  9386  01B2'                    l483:
  9387                           
  9388                           ; BSR set to: 0
  9389                           ;Phases.c: 131: }
  9390                           ;Phases.c: 133: if(0 == lockWrite)
  9391                           
  9392                           ; BSR set to: 0
  9393  01B2' 5100'              	movf	viewMenu@lockWrite& (0+255),w,b
  9394  01B4' B4D8               	btfsc	status,2,c
  9395  01B6' D0A3               	goto	l485
  9396  01B8' D0DF               	goto	l484
  9397  01BA'                    
  9398                           ;Phases.c: 138: LCDNokia_gotoXY(15,1);
  9399                           
  9400                           ; BSR set to: 0
  9401  01BA' 0E01               	movlw	1
  9402  01BC' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  9403  01BE' 0E0F               	movlw	15
  9404  01C0' EC00' F000'        	call	_LCDNokia_gotoXY
  9405                           
  9406                           ;Phases.c: 139: LCDNokia_sendString(string_Energy);
  9407  01C4' 0E00'              	movlw	low viewMenu@string_Energy
  9408  01C6' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  9409  01C8' 0E00'              	movlw	high viewMenu@string_Energy
  9410  01CA' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  9411  01CC' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  9412                           
  9413                           ;Phases.c: 140: break;
  9414  01D0' D0AF               	goto	l487
  9415  01D2'                    
  9416                           ;Phases.c: 142: LCDNokia_gotoXY(15,1);
  9417  01D2' 0E01               	movlw	1
  9418  01D4' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  9419  01D6' 0E0F               	movlw	15
  9420  01D8' EC00' F000'        	call	_LCDNokia_gotoXY
  9421                           
  9422                           ;Phases.c: 143: LCDNokia_sendString(string1_Power1);
  9423  01DC' 0E00'              	movlw	low viewMenu@string1_Power1
  9424  01DE' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  9425  01E0' 0E00'              	movlw	high viewMenu@string1_Power1
  9426  01E2' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  9427  01E4' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  9428                           
  9429                           ;Phases.c: 145: LCDNokia_gotoXY(0,2);
  9430  01E8' 0E02               	movlw	2
  9431  01EA' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  9432  01EC' 0E00               	movlw	0
  9433  01EE' EC00' F000'        	call	_LCDNokia_gotoXY
  9434                           
  9435                           ;Phases.c: 146: LCDNokia_sendString(string2_Power1);
  9436  01F2' 0E00'              	movlw	low viewMenu@string2_Power1
  9437  01F4' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  9438  01F6' 0E00'              	movlw	high viewMenu@string2_Power1
  9439  01F8' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  9440  01FA' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  9441                           
  9442                           ;Phases.c: 147: break;
  9443  01FE' D098               	goto	l487
  9444  0200'                    
  9445                           ;Phases.c: 149: LCDNokia_gotoXY(15,1);
  9446  0200' 0E01               	movlw	1
  9447  0202' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  9448  0204' 0E0F               	movlw	15
  9449  0206' EC00' F000'        	call	_LCDNokia_gotoXY
  9450                           
  9451                           ;Phases.c: 150: LCDNokia_sendString(string1_Power2);
  9452  020A' 0E00'              	movlw	low viewMenu@string1_Power2
  9453  020C' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  9454  020E' 0E00'              	movlw	high viewMenu@string1_Power2
  9455  0210' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  9456  0212' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  9457                           
  9458                           ;Phases.c: 152: LCDNokia_gotoXY(15,2);
  9459  0216' 0E02               	movlw	2
  9460  0218' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  9461  021A' 0E0F               	movlw	15
  9462  021C' EC00' F000'        	call	_LCDNokia_gotoXY
  9463                           
  9464                           ;Phases.c: 153: LCDNokia_sendString(string2_Power2);
  9465  0220' 0E00'              	movlw	low viewMenu@string2_Power2
  9466  0222' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  9467  0224' 0E00'              	movlw	high viewMenu@string2_Power2
  9468  0226' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  9469  0228' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  9470                           
  9471                           ;Phases.c: 155: LCDNokia_gotoXY(15,3);
  9472  022C' 0E03               	movlw	3
  9473  022E' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  9474  0230' 0E0F               	movlw	15
  9475  0232' EC00' F000'        	call	_LCDNokia_gotoXY
  9476                           
  9477                           ;Phases.c: 156: LCDNokia_sendString(string3_Power2);
  9478  0236' 0E00'              	movlw	low viewMenu@string3_Power2
  9479  0238' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  9480  023A' 0E00'              	movlw	high viewMenu@string3_Power2
  9481  023C' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  9482  023E' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  9483                           
  9484                           ;Phases.c: 157: break;
  9485  0242' D076               	goto	l487
  9486  0244'                    
  9487                           ;Phases.c: 159: LCDNokia_gotoXY(15,1);
  9488  0244' 0E01               	movlw	1
  9489  0246' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  9490  0248' 0E0F               	movlw	15
  9491  024A' EC00' F000'        	call	_LCDNokia_gotoXY
  9492                           
  9493                           ;Phases.c: 160: LCDNokia_sendString(string1_RMS);
  9494  024E' 0E00'              	movlw	low viewMenu@string1_RMS
  9495  0250' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  9496  0252' 0E00'              	movlw	high viewMenu@string1_RMS
  9497  0254' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  9498  0256' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  9499                           
  9500                           ;Phases.c: 162: LCDNokia_gotoXY(15,2);
  9501  025A' 0E02               	movlw	2
  9502  025C' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  9503  025E' 0E0F               	movlw	15
  9504  0260' EC00' F000'        	call	_LCDNokia_gotoXY
  9505                           
  9506                           ;Phases.c: 163: LCDNokia_sendString(string2_RMS);
  9507  0264' 0E00'              	movlw	low viewMenu@string2_RMS
  9508  0266' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  9509  0268' 0E00'              	movlw	high viewMenu@string2_RMS
  9510  026A' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  9511  026C' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  9512                           
  9513                           ;Phases.c: 164: break;
  9514  0270' D05F               	goto	l487
  9515  0272'                    
  9516                           ;Phases.c: 166: LCDNokia_gotoXY(15,1);
  9517  0272' 0E01               	movlw	1
  9518  0274' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  9519  0276' 0E0F               	movlw	15
  9520  0278' EC00' F000'        	call	_LCDNokia_gotoXY
  9521                           
  9522                           ;Phases.c: 167: LCDNokia_sendString(string1_PowerFactor);
  9523  027C' 0E00'              	movlw	low viewMenu@string1_PowerFactor
  9524  027E' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  9525  0280' 0E00'              	movlw	high viewMenu@string1_PowerFactor
  9526  0282' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  9527  0284' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  9528                           
  9529                           ;Phases.c: 169: LCDNokia_gotoXY(15,2);
  9530  0288' 0E02               	movlw	2
  9531  028A' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  9532  028C' 0E0F               	movlw	15
  9533  028E' EC00' F000'        	call	_LCDNokia_gotoXY
  9534                           
  9535                           ;Phases.c: 170: LCDNokia_sendString(string2_PowerFactor);
  9536  0292' 0E00'              	movlw	low viewMenu@string2_PowerFactor
  9537  0294' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  9538  0296' 0E00'              	movlw	high viewMenu@string2_PowerFactor
  9539  0298' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  9540  029A' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  9541                           
  9542                           ;Phases.c: 171: break;
  9543  029E' D048               	goto	l487
  9544  02A0'                    
  9545                           ;Phases.c: 173: LCDNokia_gotoXY(15,1);
  9546  02A0' 0E01               	movlw	1
  9547  02A2' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  9548  02A4' 0E0F               	movlw	15
  9549  02A6' EC00' F000'        	call	_LCDNokia_gotoXY
  9550                           
  9551                           ;Phases.c: 174: LCDNokia_sendString(string1_PhaseAngle);
  9552  02AA' 0E00'              	movlw	low viewMenu@string1_PhaseAngle
  9553  02AC' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  9554  02AE' 0E00'              	movlw	high viewMenu@string1_PhaseAngle
  9555  02B0' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  9556  02B2' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  9557                           
  9558                           ;Phases.c: 176: LCDNokia_gotoXY(15,2);
  9559  02B6' 0E02               	movlw	2
  9560  02B8' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  9561  02BA' 0E0F               	movlw	15
  9562  02BC' EC00' F000'        	call	_LCDNokia_gotoXY
  9563                           
  9564                           ;Phases.c: 177: LCDNokia_sendString(string2_PhaseAngle);
  9565  02C0' 0E00'              	movlw	low viewMenu@string2_PhaseAngle
  9566  02C2' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  9567  02C4' 0E00'              	movlw	high viewMenu@string2_PhaseAngle
  9568  02C6' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  9569  02C8' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  9570                           
  9571                           ;Phases.c: 178: break;
  9572  02CC' D031               	goto	l487
  9573  02CE'                    
  9574                           ;Phases.c: 180: LCDNokia_gotoXY(15,1);
  9575  02CE' 0E01               	movlw	1
  9576  02D0' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  9577  02D2' 0E0F               	movlw	15
  9578  02D4' EC00' F000'        	call	_LCDNokia_gotoXY
  9579                           
  9580                           ;Phases.c: 181: LCDNokia_sendString(string1_Frequency);
  9581  02D8' 0E00'              	movlw	low viewMenu@string1_Frequency
  9582  02DA' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  9583  02DC' 0E00'              	movlw	high viewMenu@string1_Frequency
  9584  02DE' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  9585  02E0' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  9586                           
  9587                           ;Phases.c: 182: break;
  9588  02E4' D025               	goto	l487
  9589  02E6'                    
  9590                           ;Phases.c: 184: LCDNokia_gotoXY(15,1);
  9591  02E6' 0E01               	movlw	1
  9592  02E8' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  9593  02EA' 0E0F               	movlw	15
  9594  02EC' EC00' F000'        	call	_LCDNokia_gotoXY
  9595                           
  9596                           ;Phases.c: 185: LCDNokia_sendString(string1_Temperature);
  9597  02F0' 0E00'              	movlw	low viewMenu@string1_Temperature
  9598  02F2' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  9599  02F4' 0E00'              	movlw	high viewMenu@string1_Temperature
  9600  02F6' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  9601  02F8' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  9602                           
  9603                           ;Phases.c: 189: }
  9604                           
  9605                           ;Phases.c: 188: break;
  9606                           
  9607                           ;Phases.c: 187: default:
  9608                           
  9609                           ;Phases.c: 186: break;
  9610  02FC' D019               	goto	l487
  9611  02FE'                    l485:
  9612  02FE' 5008'              	movf	viewMenu@counterMenu,w,c
  9613                           
  9614                           ; Switch size 1, requested type "space"
  9615                           ; Number of cases is 8, Range of values is 0 to 7
  9616                           ; switch strategies available:
  9617                           ; Name         Instructions Cycles
  9618                           ; simple_byte           25    13 (average)
  9619                           ;	Chosen strategy is simple_byte
  9620  0300' 0A00               	xorlw	0	; case 0
  9621  0302' B4D8               	btfsc	status,2,c
  9622  0304' D75A               	goto	l486
  9623  0306' 0A01               	xorlw	1	; case 1
  9624  0308' B4D8               	btfsc	status,2,c
  9625  030A' D763               	goto	l488
  9626  030C' 0A03               	xorlw	3	; case 2
  9627  030E' B4D8               	btfsc	status,2,c
  9628  0310' D777               	goto	l489
  9629  0312' 0A01               	xorlw	1	; case 3
  9630  0314' B4D8               	btfsc	status,2,c
  9631  0316' D796               	goto	l490
  9632  0318' 0A07               	xorlw	7	; case 4
  9633  031A' B4D8               	btfsc	status,2,c
  9634  031C' D7AA               	goto	l491
  9635  031E' 0A01               	xorlw	1	; case 5
  9636  0320' B4D8               	btfsc	status,2,c
  9637  0322' D7BE               	goto	l492
  9638  0324' 0A03               	xorlw	3	; case 6
  9639  0326' B4D8               	btfsc	status,2,c
  9640  0328' D7D2               	goto	l493
  9641  032A' 0A01               	xorlw	1	; case 7
  9642  032C' B4D8               	btfsc	status,2,c
  9643  032E' D7DB               	goto	l494
  9644  0330'                    l487:
  9645                           
  9646                           ;Phases.c: 191: LCDNokia_gotoXY(0,4);
  9647  0330' 0E04               	movlw	4
  9648  0332' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  9649  0334' 0E00               	movlw	0
  9650  0336' EC00' F000'        	call	_LCDNokia_gotoXY
  9651                           
  9652                           ;Phases.c: 192: LCDNokia_sendString(buttonLeft);
  9653  033A' 0E00'              	movlw	low viewMenu@buttonLeft
  9654  033C' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  9655  033E' 0E00'              	movlw	high viewMenu@buttonLeft
  9656  0340' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  9657  0342' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  9658                           
  9659                           ;Phases.c: 194: LCDNokia_gotoXY(40,4);
  9660  0346' 0E04               	movlw	4
  9661  0348' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  9662  034A' 0E28               	movlw	40
  9663  034C' EC00' F000'        	call	_LCDNokia_gotoXY
  9664                           
  9665                           ;Phases.c: 195: LCDNokia_sendString(buttonCenter);
  9666  0350' 0E00'              	movlw	low viewMenu@buttonCenter
  9667  0352' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  9668  0354' 0E00'              	movlw	high viewMenu@buttonCenter
  9669  0356' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  9670  0358' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  9671                           
  9672                           ;Phases.c: 197: LCDNokia_gotoXY(80,4);
  9673  035C' 0E04               	movlw	4
  9674  035E' 6E08'              	movwf	LCDNokia_gotoXY@y,c
  9675  0360' 0E50               	movlw	80
  9676  0362' EC00' F000'        	call	_LCDNokia_gotoXY
  9677                           
  9678                           ;Phases.c: 198: LCDNokia_sendString(buttonRight);
  9679  0366' 0E00'              	movlw	low viewMenu@buttonRight
  9680  0368' 6E0D'              	movwf	LCDNokia_sendString@characters,c
  9681  036A' 0E00'              	movlw	high viewMenu@buttonRight
  9682  036C' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
  9683  036E' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
  9684                           
  9685                           ;Phases.c: 200: lockWrite = 1;
  9686  0372' 0E01               	movlw	1
  9687  0374' 0100               	movlb	0	; () banked
  9688  0376' 6F00'              	movwf	viewMenu@lockWrite& (0+255),b
  9689  0378'                    l484:
  9690                           
  9691                           ; BSR set to: 0
  9692                           ;Phases.c: 201: }
  9693                           ;Phases.c: 203: if(getButton1() == 1)
  9694                           
  9695                           ; BSR set to: 0
  9696  0378' EC00' F000'        	call	_getButton1	;wreg free
  9697  037C' 06E8               	decf	wreg,f,c
  9698  037E' A4D8               	btfss	status,2,c
  9699  0380' D00C               	goto	l496
  9700                           
  9701                           ;Phases.c: 204: {
  9702                           ;Phases.c: 205: if(0 == counterMenu)
  9703  0382' 5008'              	movf	viewMenu@counterMenu,w,c
  9704  0384' A4D8               	btfss	status,2,c
  9705  0386' D003               	goto	l497
  9706                           
  9707                           ;Phases.c: 206: {
  9708                           ;Phases.c: 207: counterMenu = maxScreens;
  9709  0388' C08A' F008'        	movff	viewMenu@maxScreens,viewMenu@counterMenu
  9710                           
  9711                           ;Phases.c: 208: }
  9712  038C' D001               	goto	l498
  9713  038E'                    l497:
  9714                           
  9715                           ;Phases.c: 209: else
  9716                           ;Phases.c: 210: {
  9717                           ;Phases.c: 211: counterMenu--;
  9718  038E' 0608'              	decf	viewMenu@counterMenu,f,c
  9719  0390'                    l498:
  9720                           
  9721                           ;Phases.c: 212: }
  9722                           ;Phases.c: 214: lockClear = 0;
  9723  0390' 0E00               	movlw	0
  9724  0392' 0100               	movlb	0	; () banked
  9725  0394' 6F00'              	movwf	viewMenu@lockClear& (0+255),b
  9726                           
  9727                           ; BSR set to: 0
  9728                           ;Phases.c: 215: lockWrite = 0;
  9729  0396' 0E00               	movlw	0
  9730  0398' 6F00'              	movwf	viewMenu@lockWrite& (0+255),b
  9731  039A'                    l496:
  9732                           
  9733                           ;Phases.c: 216: }
  9734                           ;Phases.c: 217: if(getButton2() == 1)
  9735                           
  9736                           ; BSR set to: 0
  9737  039A' EC00' F000'        	call	_getButton2	;wreg free
  9738  039E' 06E8               	decf	wreg,f,c
  9739  03A0' B4D8               	btfsc	status,2,c
  9740  03A2' D022               	goto	l500
  9741  03A4' D03F               	goto	l499
  9742  03A6'                    
  9743                           ;Phases.c: 222: currentMainMenu3.phaseState = ACTIVE_ENERGY;
  9744  03A6' 0E00               	movlw	0
  9745  03A8' 6E00'              	movwf	viewMenu@currentMainMenu3,c
  9746                           
  9747                           ;Phases.c: 223: currentMainMenu3.stateMain = ENERGY;
  9748  03AA' 0E01               	movlw	1
  9749  03AC' D01B               	goto	L7
  9750  03AE'                    
  9751                           ;Phases.c: 226: currentMainMenu3.phaseState = TYPES_POWER1;
  9752  03AE' 0E00               	movlw	0
  9753  03B0' 6E00'              	movwf	viewMenu@currentMainMenu3,c
  9754                           
  9755                           ;Phases.c: 227: currentMainMenu3.stateMain = POWER_1;
  9756  03B2' 0E02               	movlw	2
  9757  03B4' D017               	goto	L7
  9758  03B6'                    
  9759                           ;Phases.c: 230: currentMainMenu3.phaseState = FH_POWER2;
  9760  03B6' 0E00               	movlw	0
  9761  03B8' 6E00'              	movwf	viewMenu@currentMainMenu3,c
  9762                           
  9763                           ;Phases.c: 231: currentMainMenu3.stateMain = POWER_2;
  9764  03BA' 0E03               	movlw	3
  9765  03BC' D013               	goto	L7
  9766  03BE'                    
  9767                           ;Phases.c: 234: currentMainMenu3.phaseState = PHASES_RMSVI;
  9768  03BE' 0E00               	movlw	0
  9769  03C0' 6E00'              	movwf	viewMenu@currentMainMenu3,c
  9770                           
  9771                           ;Phases.c: 235: currentMainMenu3.stateMain = RMS_VI;
  9772  03C2' 0E04               	movlw	4
  9773  03C4' D00F               	goto	L7
  9774  03C6'                    
  9775                           ;Phases.c: 238: currentMainMenu3.phaseState = PHASES_PF;
  9776  03C6' 0E00               	movlw	0
  9777  03C8' 6E00'              	movwf	viewMenu@currentMainMenu3,c
  9778                           
  9779                           ;Phases.c: 239: currentMainMenu3.stateMain = POWER_FACTOR;
  9780  03CA' 0E05               	movlw	5
  9781  03CC' D00B               	goto	L7
  9782  03CE'                    
  9783                           ;Phases.c: 242: currentMainMenu3.phaseState = PHASES_PA;
  9784  03CE' 0E00               	movlw	0
  9785  03D0' 6E00'              	movwf	viewMenu@currentMainMenu3,c
  9786                           
  9787                           ;Phases.c: 243: currentMainMenu3.stateMain = PHASE_ANGLE;
  9788  03D2' 0E06               	movlw	6
  9789  03D4' D007               	goto	L7
  9790  03D6'                    
  9791                           ;Phases.c: 246: currentMainMenu3.phaseState = SHOW_FREQUENCY;
  9792  03D6' 0E00               	movlw	0
  9793  03D8' 6E00'              	movwf	viewMenu@currentMainMenu3,c
  9794                           
  9795                           ;Phases.c: 247: currentMainMenu3.stateMain = FREQUENCY;
  9796  03DA' 0E07               	movlw	7
  9797  03DC' D003               	goto	L7
  9798  03DE'                    
  9799                           ;Phases.c: 250: currentMainMenu3.phaseState = SHOW_TEMPERATURE;
  9800  03DE' 0E00               	movlw	0
  9801  03E0' 6E00'              	movwf	viewMenu@currentMainMenu3,c
  9802                           
  9803                           ;Phases.c: 251: currentMainMenu3.stateMain = TEMPERATURE;
  9804  03E2' 0E08               	movlw	8
  9805  03E4'                    L7:
  9806  03E4' 6E01'              	movwf	viewMenu@currentMainMenu3+1,c
  9807                           
  9808                           ;Phases.c: 255: }
  9809                           
  9810                           ;Phases.c: 254: break;
  9811                           
  9812                           ;Phases.c: 253: default:
  9813                           
  9814                           ;Phases.c: 252: break;
  9815  03E6' D019               	goto	l502
  9816  03E8'                    l500:
  9817  03E8' 5008'              	movf	viewMenu@counterMenu,w,c
  9818                           
  9819                           ; Switch size 1, requested type "space"
  9820                           ; Number of cases is 8, Range of values is 0 to 7
  9821                           ; switch strategies available:
  9822                           ; Name         Instructions Cycles
  9823                           ; simple_byte           25    13 (average)
  9824                           ;	Chosen strategy is simple_byte
  9825  03EA' 0A00               	xorlw	0	; case 0
  9826  03EC' B4D8               	btfsc	status,2,c
  9827  03EE' D7DB               	goto	l501
  9828  03F0' 0A01               	xorlw	1	; case 1
  9829  03F2' B4D8               	btfsc	status,2,c
  9830  03F4' D7DC               	goto	l503
  9831  03F6' 0A03               	xorlw	3	; case 2
  9832  03F8' B4D8               	btfsc	status,2,c
  9833  03FA' D7DD               	goto	l504
  9834  03FC' 0A01               	xorlw	1	; case 3
  9835  03FE' B4D8               	btfsc	status,2,c
  9836  0400' D7DE               	goto	l505
  9837  0402' 0A07               	xorlw	7	; case 4
  9838  0404' B4D8               	btfsc	status,2,c
  9839  0406' D7DF               	goto	l506
  9840  0408' 0A01               	xorlw	1	; case 5
  9841  040A' B4D8               	btfsc	status,2,c
  9842  040C' D7E0               	goto	l507
  9843  040E' 0A03               	xorlw	3	; case 6
  9844  0410' B4D8               	btfsc	status,2,c
  9845  0412' D7E1               	goto	l508
  9846  0414' 0A01               	xorlw	1	; case 7
  9847  0416' B4D8               	btfsc	status,2,c
  9848  0418' D7E2               	goto	l509
  9849  041A'                    l502:
  9850                           
  9851                           ;Phases.c: 256: lockClear = 0;
  9852  041A' 0E00               	movlw	0
  9853  041C' 0100               	movlb	0	; () banked
  9854  041E' 6F00'              	movwf	viewMenu@lockClear& (0+255),b
  9855                           
  9856                           ;Phases.c: 257: lockWrite = 0;
  9857  0420' 0E00               	movlw	0
  9858  0422' 6F00'              	movwf	viewMenu@lockWrite& (0+255),b
  9859  0424'                    l499:
  9860                           
  9861                           ;Phases.c: 258: }
  9862                           ;Phases.c: 259: if(getButton3() == 1)
  9863                           
  9864                           ; BSR set to: 0
  9865  0424' EC00' F000'        	call	_getButton3	;wreg free
  9866  0428' 06E8               	decf	wreg,f,c
  9867  042A' A4D8               	btfss	status,2,c
  9868  042C' D00C               	goto	l511
  9869                           
  9870                           ;Phases.c: 260: {
  9871                           ;Phases.c: 261: counterMenu++;
  9872  042E' 2A08'              	incf	viewMenu@counterMenu,f,c
  9873                           
  9874                           ;Phases.c: 262: if(counterMenu > maxScreens)
  9875  0430' 5008'              	movf	viewMenu@counterMenu,w,c
  9876  0432' 0100               	movlb	0	; () banked
  9877  0434' 5D00'              	subwf	viewMenu@maxScreens& (0+255),w,b
  9878  0436' B0D8               	btfsc	status,0,c
  9879  0438' D002               	goto	l512
  9880                           
  9881                           ; BSR set to: 0
  9882                           ;Phases.c: 263: {
  9883                           ;Phases.c: 264: counterMenu = 0;
  9884  043A' 0E00               	movlw	0
  9885  043C' 6E08'              	movwf	viewMenu@counterMenu,c
  9886  043E'                    l512:
  9887                           
  9888                           ; BSR set to: 0
  9889                           ;Phases.c: 265: }
  9890                           ;Phases.c: 266: lockClear = 0;
  9891  043E' 0E00               	movlw	0
  9892  0440' 6F00'              	movwf	viewMenu@lockClear& (0+255),b
  9893                           
  9894                           ;Phases.c: 267: lockWrite = 0;
  9895  0442' 0E00               	movlw	0
  9896  0444' 6F00'              	movwf	viewMenu@lockWrite& (0+255),b
  9897  0446'                    l511:
  9898                           
  9899                           ;Phases.c: 268: }
  9900                           ;Phases.c: 270: return (currentMainMenu3);
  9901                           
  9902                           ; BSR set to: 0
  9903  0446' C000' F00F'        	movff	viewMenu@currentMainMenu3,?_viewMenu
  9904  044A' C001' F010'        	movff	viewMenu@currentMainMenu3+1,?_viewMenu+1
  9905  044E' 0012               	return	
  9906  0450'                    __end_of_viewMenu:
  9907                           	opt stack 0
  9908                           tosu	equ	0xFFF
  9909                           tosh	equ	0xFFE
  9910                           tosl	equ	0xFFD
  9911                           pclath	equ	0xFFA
  9912                           tblptru	equ	0xFF8
  9913                           tblptrh	equ	0xFF7
  9914                           tblptrl	equ	0xFF6
  9915                           tablat	equ	0xFF5
  9916                           prodh	equ	0xFF4
  9917                           prodl	equ	0xFF3
  9918                           postinc0	equ	0xFEE
  9919                           wreg	equ	0xFE8
  9920                           postinc2	equ	0xFDE
  9921                           status	equ	0xFD8
  9922                           
  9923 ;; *************** function _UART_init *****************
  9924 ;; Defined at:
  9925 ;;		line 11 in file "UART.c"
  9926 ;; Parameters:    Size  Location     Type
  9927 ;;  baudRate        2    5[COMRAM] enum E3061
  9928 ;; Auto vars:     Size  Location     Type
  9929 ;;		None
  9930 ;; Return value:  Size  Location     Type
  9931 ;;                  1    wreg      void 
  9932 ;; Registers used:
  9933 ;;		wreg, status,2, status,0, cstack
  9934 ;; Tracked objects:
  9935 ;;		On entry : 0/0
  9936 ;;		On exit  : 0/0
  9937 ;;		Unchanged: 0/0
  9938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9939 ;;      Params:         2       0       0       0
  9940 ;;      Locals:         0       0       0       0
  9941 ;;      Temps:          2       0       0       0
  9942 ;;      Totals:         4       0       0       0
  9943 ;;Total ram usage:        4 bytes
  9944 ;; Hardware stack levels used:    1
  9945 ;; Hardware stack levels required when called:    1
  9946 ;; This function calls:
  9947 ;;		_GPIO_dataDirectionPIN
  9948 ;; This function is called by:
  9949 ;;		_sendData
  9950 ;; This function uses a non-reentrant model
  9951 ;;
  9952                           
  9953                           	psect	text31
  9954  0000'                    __ptext31:
  9955                           	opt stack 0
  9956  0000'                    _UART_init:
  9957                           	opt stack 27
  9958                           
  9959                           ;UART.c: 14: GPIO_dataDirectionPIN(GPIO_C, 6, GPIO_OUTPUT);
  9960                           
  9961                           ;incstack = 0
  9962  0000' 0E06               	movlw	6
  9963  0002' 6E00'              	movwf	GPIO_dataDirectionPIN@pin,c
  9964  0004' 0E01               	movlw	1
  9965  0006' 6E01'              	movwf	GPIO_dataDirectionPIN@state,c
  9966  0008' 0E02               	movlw	2
  9967  000A' EC00' F000'        	call	_GPIO_dataDirectionPIN
  9968                           
  9969                           ;UART.c: 17: switch(baudRate)
  9970  000E' D007               	goto	l206
  9971  0010'                    l207:
  9972                           
  9973                           ;UART.c: 20: SPBRG = (255);
  9974  0010' 68AF               	setf	4015,c	;volatile
  9975                           
  9976                           ;UART.c: 21: break;
  9977  0012' D022               	goto	l208
  9978  0014'                    
  9979                           ;UART.c: 23: SPBRG = (129);
  9980  0014' 0E81               	movlw	129
  9981  0016' D001               	goto	L8
  9982  0018'                    
  9983                           ;UART.c: 26: SPBRG = (31);
  9984  0018' 0E1F               	movlw	31
  9985  001A'                    L8:
  9986  001A' 6EAF               	movwf	4015,c	;volatile
  9987                           
  9988                           ;UART.c: 30: }
  9989                           
  9990                           ;UART.c: 29: break;
  9991                           
  9992                           ;UART.c: 28: default:
  9993                           
  9994                           ;UART.c: 27: break;
  9995  001C' D01D               	goto	l208
  9996  001E'                    l206:
  9997  001E' C005' F007'        	movff	UART_init@baudRate,??_UART_init
  9998  0022' C006' F008'        	movff	UART_init@baudRate+1,??_UART_init+1
  9999                           
 10000                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 10001                           ; Switch size 1, requested type "space"
 10002                           ; Number of cases is 3, Range of values is 4 to 37
 10003                           ; switch strategies available:
 10004                           ; Name         Instructions Cycles
 10005                           ; simple_byte           10     6 (average)
 10006                           ;	Chosen strategy is simple_byte
 10007  0026' 5008'              	movf	??_UART_init+1,w,c
 10008  0028' 0A04               	xorlw	4	; case 4
 10009  002A' B4D8               	btfsc	status,2,c
 10010  002C' D007               	goto	l7366
 10011  002E' 0A0D               	xorlw	13	; case 9
 10012  0030' B4D8               	btfsc	status,2,c
 10013  0032' D009               	goto	l7368
 10014  0034' 0A2C               	xorlw	44	; case 37
 10015  0036' B4D8               	btfsc	status,2,c
 10016  0038' D00B               	goto	l7370
 10017  003A' D00E               	goto	l208
 10018  003C'                    l7366:
 10019                           
 10020                           ; Switch size 1, requested type "space"
 10021                           ; Number of cases is 1, Range of values is 176 to 176
 10022                           ; switch strategies available:
 10023                           ; Name         Instructions Cycles
 10024                           ; simple_byte            4     3 (average)
 10025                           ;	Chosen strategy is simple_byte
 10026  003C' 5007'              	movf	??_UART_init,w,c
 10027  003E' 0AB0               	xorlw	176	; case 176
 10028  0040' B4D8               	btfsc	status,2,c
 10029  0042' D7E6               	goto	l207
 10030  0044' D009               	goto	l208
 10031  0046'                    l7368:
 10032                           
 10033                           ; Switch size 1, requested type "space"
 10034                           ; Number of cases is 1, Range of values is 96 to 96
 10035                           ; switch strategies available:
 10036                           ; Name         Instructions Cycles
 10037                           ; simple_byte            4     3 (average)
 10038                           ;	Chosen strategy is simple_byte
 10039  0046' 5007'              	movf	??_UART_init,w,c
 10040  0048' 0A60               	xorlw	96	; case 96
 10041  004A' B4D8               	btfsc	status,2,c
 10042  004C' D7E3               	goto	l209
 10043  004E' D004               	goto	l208
 10044  0050'                    l7370:
 10045                           
 10046                           ; Switch size 1, requested type "space"
 10047                           ; Number of cases is 1, Range of values is 128 to 128
 10048                           ; switch strategies available:
 10049                           ; Name         Instructions Cycles
 10050                           ; simple_byte            4     3 (average)
 10051                           ;	Chosen strategy is simple_byte
 10052  0050' 5007'              	movf	??_UART_init,w,c
 10053  0052' 0A80               	xorlw	128	; case 128
 10054  0054' B4D8               	btfsc	status,2,c
 10055  0056' D7E0               	goto	l210
 10056  0058'                    l208:
 10057                           
 10058                           ;UART.c: 33: TXSTAbits.SYNC = 0;
 10059  0058' 98AC               	bcf	4012,4,c	;volatile
 10060                           
 10061                           ;UART.c: 35: TXSTAbits.TX9 = 0;
 10062  005A' 9CAC               	bcf	4012,6,c	;volatile
 10063                           
 10064                           ;UART.c: 37: TXSTAbits.TXEN = 1;
 10065  005C' 8AAC               	bsf	4012,5,c	;volatile
 10066                           
 10067                           ;UART.c: 44: RCSTAbits.SPEN = 1;
 10068  005E' 8EAB               	bsf	4011,7,c	;volatile
 10069                           
 10070                           ;UART.c: 47: BAUDCTLbits.BRG16 = 0;
 10071  0060' 96AA               	bcf	4010,3,c	;volatile
 10072                           
 10073                           ;UART.c: 49: TXSTAbits.BRGH = 0;
 10074  0062' 94AC               	bcf	4012,2,c	;volatile
 10075  0064' 0012               	return		;funcret
 10076  0066'                    __end_of_UART_init:
 10077                           	opt stack 0
 10078                           tosu	equ	0xFFF
 10079                           tosh	equ	0xFFE
 10080                           tosl	equ	0xFFD
 10081                           pclath	equ	0xFFA
 10082                           tblptru	equ	0xFF8
 10083                           tblptrh	equ	0xFF7
 10084                           tblptrl	equ	0xFF6
 10085                           tablat	equ	0xFF5
 10086                           prodh	equ	0xFF4
 10087                           prodl	equ	0xFF3
 10088                           postinc0	equ	0xFEE
 10089                           wreg	equ	0xFE8
 10090                           postinc2	equ	0xFDE
 10091                           status	equ	0xFD8
 10092                           
 10093 ;; *************** function _SPI_init *****************
 10094 ;; Defined at:
 10095 ;;		line 80 in file "SPI.c"
 10096 ;; Parameters:    Size  Location     Type
 10097 ;;  SPI_Config      2    2[COMRAM] PTR const struct .
 10098 ;;		 -> SPI_Config2(3), SPI_Config(3), 
 10099 ;; Auto vars:     Size  Location     Type
 10100 ;;		None
 10101 ;; Return value:  Size  Location     Type
 10102 ;;                  1    wreg      void 
 10103 ;; Registers used:
 10104 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10105 ;; Tracked objects:
 10106 ;;		On entry : 0/0
 10107 ;;		On exit  : 0/0
 10108 ;;		Unchanged: 0/0
 10109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10110 ;;      Params:         2       0       0       0
 10111 ;;      Locals:         0       0       0       0
 10112 ;;      Temps:          2       0       0       0
 10113 ;;      Totals:         4       0       0       0
 10114 ;;Total ram usage:        4 bytes
 10115 ;; Hardware stack levels used:    1
 10116 ;; Hardware stack levels required when called:    1
 10117 ;; This function calls:
 10118 ;;		_SPI_enableClock
 10119 ;;		_SPI_enablePins
 10120 ;; This function is called by:
 10121 ;;		_main
 10122 ;;		_sendData
 10123 ;; This function uses a non-reentrant model
 10124 ;;
 10125                           
 10126                           	psect	text32
 10127  0000'                    __ptext32:
 10128                           	opt stack 0
 10129  0000'                    _SPI_init:
 10130                           	opt stack 27
 10131                           
 10132                           ;SPI.c: 82: SPI_enableClock(SPI_Config->SPI_Polarity, SPI_Config->SPI_Phase);
 10133                           
 10134                           ;incstack = 0
 10135  0000' 0E01               	movlw	1
 10136  0002' 2402'              	addwf	SPI_init@SPI_Config,w,c
 10137  0004' 6E00'              	movwf	??_SPI_init& (0+255),c
 10138  0006' 0E00               	movlw	0
 10139  0008' 2003'              	addwfc	SPI_init@SPI_Config+1,w,c
 10140  000A' 6E00'              	movwf	(??_SPI_init+1)& (0+255),c
 10141  000C' C004' FFF6         	movff	??_SPI_init,tblptrl
 10142  0010' C005' FFF7         	movff	??_SPI_init+1,tblptrh
 10143  0014'                    	if	0	;tblptru may be non-zero
 10144  0014'                    	endif
 10145  0014'                    	if	0	;tblptru may be non-zero
 10146  0014'                    	endif
 10147  0014' 0008               	tblrd		*
 10148  0016' CFF5 F000'         	movff	tablat,SPI_enableClock@cpol
 10149  001A' C002' FFF6         	movff	SPI_init@SPI_Config,tblptrl
 10150  001E' C003' FFF7         	movff	SPI_init@SPI_Config+1,tblptrh
 10151  0022'                    	if	0	;tblptru may be non-zero
 10152  0022'                    	endif
 10153  0022'                    	if	0	;tblptru may be non-zero
 10154  0022'                    	endif
 10155  0022' 0008               	tblrd		*
 10156  0024' 50F5               	movf	tablat,w,c
 10157  0026' EC00' F000'        	call	_SPI_enableClock
 10158                           
 10159                           ;SPI.c: 83: SPI_enablePins(SPI_Config->SPI_Clk);
 10160  002A' 0E02               	movlw	2
 10161  002C' 2402'              	addwf	SPI_init@SPI_Config,w,c
 10162  002E' 6E00'              	movwf	??_SPI_init& (0+255),c
 10163  0030' 0E00               	movlw	0
 10164  0032' 2003'              	addwfc	SPI_init@SPI_Config+1,w,c
 10165  0034' 6E00'              	movwf	(??_SPI_init+1)& (0+255),c
 10166  0036' C004' FFF6         	movff	??_SPI_init,tblptrl
 10167  003A' C005' FFF7         	movff	??_SPI_init+1,tblptrh
 10168  003E'                    	if	0	;tblptru may be non-zero
 10169  003E'                    	endif
 10170  003E'                    	if	0	;tblptru may be non-zero
 10171  003E'                    	endif
 10172  003E' 0008               	tblrd		*
 10173  0040' 50F5               	movf	tablat,w,c
 10174  0042' EC00' F000'        	call	_SPI_enablePins
 10175  0046' 0012               	return		;funcret
 10176  0048'                    __end_of_SPI_init:
 10177                           	opt stack 0
 10178                           tosu	equ	0xFFF
 10179                           tosh	equ	0xFFE
 10180                           tosl	equ	0xFFD
 10181                           pclath	equ	0xFFA
 10182                           tblptru	equ	0xFF8
 10183                           tblptrh	equ	0xFF7
 10184                           tblptrl	equ	0xFF6
 10185                           tablat	equ	0xFF5
 10186                           prodh	equ	0xFF4
 10187                           prodl	equ	0xFF3
 10188                           postinc0	equ	0xFEE
 10189                           wreg	equ	0xFE8
 10190                           postinc2	equ	0xFDE
 10191                           status	equ	0xFD8
 10192                           
 10193 ;; *************** function _SPI_enablePins *****************
 10194 ;; Defined at:
 10195 ;;		line 56 in file "SPI.c"
 10196 ;; Parameters:    Size  Location     Type
 10197 ;;  serial          1    wreg     enum E3069
 10198 ;; Auto vars:     Size  Location     Type
 10199 ;;  serial          1    0[COMRAM] enum E3069
 10200 ;; Return value:  Size  Location     Type
 10201 ;;                  1    wreg      void 
 10202 ;; Registers used:
 10203 ;;		wreg, status,2, status,0
 10204 ;; Tracked objects:
 10205 ;;		On entry : 0/0
 10206 ;;		On exit  : 0/0
 10207 ;;		Unchanged: 0/0
 10208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10209 ;;      Params:         0       0       0       0
 10210 ;;      Locals:         1       0       0       0
 10211 ;;      Temps:          0       0       0       0
 10212 ;;      Totals:         1       0       0       0
 10213 ;;Total ram usage:        1 bytes
 10214 ;; Hardware stack levels used:    1
 10215 ;; This function calls:
 10216 ;;		Nothing
 10217 ;; This function is called by:
 10218 ;;		_SPI_init
 10219 ;; This function uses a non-reentrant model
 10220 ;;
 10221                           
 10222                           	psect	text33
 10223  0000'                    __ptext33:
 10224                           	opt stack 0
 10225  0000'                    _SPI_enablePins:
 10226                           	opt stack 27
 10227                           
 10228                           ;incstack = 0
 10229                           ;SPI_enablePins@serial stored from wreg
 10230  0000' 6E00'              	movwf	SPI_enablePins@serial,c
 10231                           
 10232                           ;SPI.c: 58: switch(serial)
 10233  0002' D007               	goto	l168
 10234  0004'                    
 10235                           ;SPI.c: 61: SSPCON &= (0x00);
 10236  0004' 0E00               	movlw	0
 10237  0006' 6EC6               	movwf	4038,c	;volatile
 10238                           
 10239                           ;SPI.c: 62: break;
 10240  0008' D00E               	goto	l170
 10241  000A'                    
 10242                           ;SPI.c: 64: SSPCON |= (0x01);
 10243  000A' 80C6               	bsf	4038,0,c	;volatile
 10244                           
 10245                           ;SPI.c: 65: break;
 10246  000C' D00C               	goto	l170
 10247  000E'                    
 10248                           ;SPI.c: 67: SSPCON |= (0x02);
 10249  000E' 82C6               	bsf	4038,1,c	;volatile
 10250                           
 10251                           ;SPI.c: 71: }
 10252                           
 10253                           ;SPI.c: 70: break;
 10254                           
 10255                           ;SPI.c: 69: default:
 10256                           
 10257                           ;SPI.c: 68: break;
 10258  0010' D00A               	goto	l170
 10259  0012'                    l168:
 10260  0012' 5000'              	movf	SPI_enablePins@serial,w,c
 10261                           
 10262                           ; Switch size 1, requested type "space"
 10263                           ; Number of cases is 3, Range of values is 0 to 2
 10264                           ; switch strategies available:
 10265                           ; Name         Instructions Cycles
 10266                           ; simple_byte           10     6 (average)
 10267                           ;	Chosen strategy is simple_byte
 10268  0014' 0A00               	xorlw	0	; case 0
 10269  0016' B4D8               	btfsc	status,2,c
 10270  0018' D7F5               	goto	l169
 10271  001A' 0A01               	xorlw	1	; case 1
 10272  001C' B4D8               	btfsc	status,2,c
 10273  001E' D7F5               	goto	l171
 10274  0020' 0A03               	xorlw	3	; case 2
 10275  0022' B4D8               	btfsc	status,2,c
 10276  0024' D7F4               	goto	l172
 10277  0026'                    l170:
 10278                           
 10279                           ;SPI.c: 74: SSPCON |= (0x20);
 10280  0026' 8AC6               	bsf	4038,5,c	;volatile
 10281                           
 10282                           ;SPI.c: 77: PIR1bits.SSPIF = 0;
 10283  0028' 969E               	bcf	3998,3,c	;volatile
 10284  002A' 0012               	return		;funcret
 10285  002C'                    __end_of_SPI_enablePins:
 10286                           	opt stack 0
 10287                           tosu	equ	0xFFF
 10288                           tosh	equ	0xFFE
 10289                           tosl	equ	0xFFD
 10290                           pclath	equ	0xFFA
 10291                           tblptru	equ	0xFF8
 10292                           tblptrh	equ	0xFF7
 10293                           tblptrl	equ	0xFF6
 10294                           tablat	equ	0xFF5
 10295                           prodh	equ	0xFF4
 10296                           prodl	equ	0xFF3
 10297                           postinc0	equ	0xFEE
 10298                           wreg	equ	0xFE8
 10299                           postinc2	equ	0xFDE
 10300                           status	equ	0xFD8
 10301                           
 10302 ;; *************** function _SPI_enableClock *****************
 10303 ;; Defined at:
 10304 ;;		line 14 in file "SPI.c"
 10305 ;; Parameters:    Size  Location     Type
 10306 ;;  phase           1    wreg     enum E3065
 10307 ;;  cpol            1    0[COMRAM] enum E3061
 10308 ;; Auto vars:     Size  Location     Type
 10309 ;;  phase           1    1[COMRAM] enum E3065
 10310 ;; Return value:  Size  Location     Type
 10311 ;;                  1    wreg      void 
 10312 ;; Registers used:
 10313 ;;		wreg, status,2, status,0
 10314 ;; Tracked objects:
 10315 ;;		On entry : 0/0
 10316 ;;		On exit  : 0/0
 10317 ;;		Unchanged: 0/0
 10318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10319 ;;      Params:         1       0       0       0
 10320 ;;      Locals:         1       0       0       0
 10321 ;;      Temps:          0       0       0       0
 10322 ;;      Totals:         2       0       0       0
 10323 ;;Total ram usage:        2 bytes
 10324 ;; Hardware stack levels used:    1
 10325 ;; This function calls:
 10326 ;;		Nothing
 10327 ;; This function is called by:
 10328 ;;		_SPI_init
 10329 ;; This function uses a non-reentrant model
 10330 ;;
 10331                           
 10332                           	psect	text34
 10333  0000'                    __ptext34:
 10334                           	opt stack 0
 10335  0000'                    _SPI_enableClock:
 10336                           	opt stack 27
 10337                           
 10338                           ;incstack = 0
 10339                           ;SPI_enableClock@phase stored from wreg
 10340  0000' 6E01'              	movwf	SPI_enableClock@phase,c
 10341                           
 10342                           ;SPI.c: 17: TRISCbits.TRISC5 = 0;
 10343  0002' 9A94               	bcf	3988,5,c	;volatile
 10344                           
 10345                           ;SPI.c: 19: TRISCbits.TRISC4 = 1;
 10346  0004' 8894               	bsf	3988,4,c	;volatile
 10347                           
 10348                           ;SPI.c: 21: TRISCbits.TRISC7 = 0;
 10349  0006' 9E94               	bcf	3988,7,c	;volatile
 10350                           
 10351                           ;SPI.c: 28: SSPSTAT |= (0x40);
 10352  0008' 8CC7               	bsf	4039,6,c	;volatile
 10353                           
 10354                           ;SPI.c: 29: SSPSTATbits.BF = 0;
 10355  000A' 90C7               	bcf	4039,0,c	;volatile
 10356                           
 10357                           ;SPI.c: 31: switch(phase)
 10358  000C' D004               	goto	l155
 10359  000E'                    l156:
 10360                           
 10361                           ;SPI.c: 34: SSPCONbits.CKP = 0;
 10362  000E' 98C6               	bcf	4038,4,c	;volatile
 10363                           
 10364                           ;SPI.c: 35: break;
 10365  0010' D00E               	goto	l160
 10366  0012'                    l158:
 10367                           
 10368                           ;SPI.c: 37: SSPCONbits.CKP = 1;
 10369  0012' 88C6               	bsf	4038,4,c	;volatile
 10370                           
 10371                           ;SPI.c: 41: }
 10372                           
 10373                           ;SPI.c: 40: break;
 10374                           
 10375                           ;SPI.c: 39: default:
 10376                           
 10377                           ;SPI.c: 38: break;
 10378  0014' D00C               	goto	l160
 10379  0016'                    l155:
 10380  0016' 5001'              	movf	SPI_enableClock@phase,w,c
 10381                           
 10382                           ; Switch size 1, requested type "space"
 10383                           ; Number of cases is 2, Range of values is 0 to 1
 10384                           ; switch strategies available:
 10385                           ; Name         Instructions Cycles
 10386                           ; simple_byte            7     4 (average)
 10387                           ;	Chosen strategy is simple_byte
 10388  0018' 0A00               	xorlw	0	; case 0
 10389  001A' B4D8               	btfsc	status,2,c
 10390  001C' D7F8               	goto	l156
 10391  001E' 0A01               	xorlw	1	; case 1
 10392  0020' B4D8               	btfsc	status,2,c
 10393  0022' D7F7               	goto	l158
 10394                           
 10395                           ;SPI.c: 43: switch(cpol)
 10396  0024' D004               	goto	l160
 10397  0026'                    l161:
 10398                           
 10399                           ;SPI.c: 46: SSPSTATbits.CKE = 0;
 10400  0026' 9CC7               	bcf	4039,6,c	;volatile
 10401                           
 10402                           ;SPI.c: 47: break;
 10403  0028' 0012               	return	
 10404  002A'                    l163:
 10405                           
 10406                           ;SPI.c: 49: SSPSTATbits.CKE = 1;
 10407  002A' 8CC7               	bsf	4039,6,c	;volatile
 10408                           
 10409                           ;SPI.c: 53: }
 10410                           
 10411                           ;SPI.c: 52: break;
 10412                           
 10413                           ;SPI.c: 51: default:
 10414                           
 10415                           ;SPI.c: 50: break;
 10416  002C' 0012               	return	
 10417  002E'                    l160:
 10418  002E' 5000'              	movf	SPI_enableClock@cpol,w,c
 10419                           
 10420                           ; Switch size 1, requested type "space"
 10421                           ; Number of cases is 2, Range of values is 0 to 1
 10422                           ; switch strategies available:
 10423                           ; Name         Instructions Cycles
 10424                           ; simple_byte            7     4 (average)
 10425                           ;	Chosen strategy is simple_byte
 10426  0030' 0A00               	xorlw	0	; case 0
 10427  0032' B4D8               	btfsc	status,2,c
 10428  0034' D7F8               	goto	l161
 10429  0036' 0A01               	xorlw	1	; case 1
 10430  0038' A4D8               	btfss	status,2,c
 10431  003A' 0012               	return	
 10432  003C' D7F6               	goto	l163
 10433  003E'                    __end_of_SPI_enableClock:
 10434                           	opt stack 0
 10435                           tosu	equ	0xFFF
 10436                           tosh	equ	0xFFE
 10437                           tosl	equ	0xFFD
 10438                           pclath	equ	0xFFA
 10439                           tblptru	equ	0xFF8
 10440                           tblptrh	equ	0xFF7
 10441                           tblptrl	equ	0xFF6
 10442                           tablat	equ	0xFF5
 10443                           prodh	equ	0xFF4
 10444                           prodl	equ	0xFF3
 10445                           postinc0	equ	0xFEE
 10446                           wreg	equ	0xFE8
 10447                           postinc2	equ	0xFDE
 10448                           status	equ	0xFD8
 10449                           
 10450 ;; *************** function _LCDNokia_init *****************
 10451 ;; Defined at:
 10452 ;;		line 110 in file "LCDNokia5110.c"
 10453 ;; Parameters:    Size  Location     Type
 10454 ;;		None
 10455 ;; Auto vars:     Size  Location     Type
 10456 ;;		None
 10457 ;; Return value:  Size  Location     Type
 10458 ;;                  1    wreg      void 
 10459 ;; Registers used:
 10460 ;;		wreg, status,2, status,0, cstack
 10461 ;; Tracked objects:
 10462 ;;		On entry : 0/0
 10463 ;;		On exit  : 0/0
 10464 ;;		Unchanged: 0/0
 10465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10466 ;;      Params:         0       0       0       0
 10467 ;;      Locals:         0       0       0       0
 10468 ;;      Temps:          0       0       0       0
 10469 ;;      Totals:         0       0       0       0
 10470 ;;Total ram usage:        0 bytes
 10471 ;; Hardware stack levels used:    1
 10472 ;; Hardware stack levels required when called:    2
 10473 ;; This function calls:
 10474 ;;		_GPIO_clearPIN
 10475 ;;		_GPIO_dataDirectionPIN
 10476 ;;		_GPIO_setPIN
 10477 ;;		_LCDNokia_writeByte
 10478 ;;		_LCD_delay
 10479 ;; This function is called by:
 10480 ;;		_main
 10481 ;;		_sendData
 10482 ;; This function uses a non-reentrant model
 10483 ;;
 10484                           
 10485                           	psect	text35
 10486  0000'                    __ptext35:
 10487                           	opt stack 0
 10488  0000'                    _LCDNokia_init:
 10489                           	opt stack 26
 10490                           
 10491                           ;LCDNokia5110.c: 113: GPIO_dataDirectionPIN(GPIO_B, 2, GPIO_OUTPUT);
 10492                           
 10493                           ;incstack = 0
 10494  0000' 0E02               	movlw	2
 10495  0002' 6E00'              	movwf	GPIO_dataDirectionPIN@pin,c
 10496  0004' 0E01               	movlw	1
 10497  0006' 6E01'              	movwf	GPIO_dataDirectionPIN@state,c
 10498  0008' 0E01               	movlw	1
 10499  000A' EC00' F000'        	call	_GPIO_dataDirectionPIN
 10500                           
 10501                           ;LCDNokia5110.c: 114: GPIO_dataDirectionPIN(GPIO_B, 1, GPIO_OUTPUT);
 10502  000E' 0E01               	movlw	1
 10503  0010' 6E00'              	movwf	GPIO_dataDirectionPIN@pin,c
 10504  0012' 0E01               	movlw	1
 10505  0014' 6E01'              	movwf	GPIO_dataDirectionPIN@state,c
 10506  0016' 0E01               	movlw	1
 10507  0018' EC00' F000'        	call	_GPIO_dataDirectionPIN
 10508                           
 10509                           ;LCDNokia5110.c: 115: GPIO_dataDirectionPIN(GPIO_B, 0, GPIO_OUTPUT);
 10510  001C' 0E00               	movlw	0
 10511  001E' 6E00'              	movwf	GPIO_dataDirectionPIN@pin,c
 10512  0020' 0E01               	movlw	1
 10513  0022' 6E01'              	movwf	GPIO_dataDirectionPIN@state,c
 10514  0024' 0E01               	movlw	1
 10515  0026' EC00' F000'        	call	_GPIO_dataDirectionPIN
 10516                           
 10517                           ;LCDNokia5110.c: 117: GPIO_clearPIN(GPIO_B, 1);
 10518  002A' 0E01               	movlw	1
 10519  002C' 6E00'              	movwf	GPIO_clearPIN@pin,c
 10520  002E' 0E01               	movlw	1
 10521  0030' EC00' F000'        	call	_GPIO_clearPIN
 10522                           
 10523                           ;LCDNokia5110.c: 118: LCD_delay();
 10524  0034' EC00' F000'        	call	_LCD_delay	;wreg free
 10525                           
 10526                           ;LCDNokia5110.c: 119: GPIO_setPIN(GPIO_B, 1);
 10527  0038' 0E01               	movlw	1
 10528  003A' 6E00'              	movwf	GPIO_setPIN@pin,c
 10529  003C' 0E01               	movlw	1
 10530  003E' EC00' F000'        	call	_GPIO_setPIN
 10531                           
 10532                           ;LCDNokia5110.c: 121: LCDNokia_writeByte(0, 0x21);
 10533  0042' 0E21               	movlw	33
 10534  0044' 6E06'              	movwf	LCDNokia_writeByte@data,c
 10535  0046' 0E00               	movlw	0
 10536  0048' EC00' F000'        	call	_LCDNokia_writeByte
 10537                           
 10538                           ;LCDNokia5110.c: 122: LCDNokia_writeByte(0, 0xBF);
 10539  004C' 0EBF               	movlw	191
 10540  004E' 6E06'              	movwf	LCDNokia_writeByte@data,c
 10541  0050' 0E00               	movlw	0
 10542  0052' EC00' F000'        	call	_LCDNokia_writeByte
 10543                           
 10544                           ;LCDNokia5110.c: 123: LCDNokia_writeByte(0, 0x04);
 10545  0056' 0E04               	movlw	4
 10546  0058' 6E06'              	movwf	LCDNokia_writeByte@data,c
 10547  005A' 0E00               	movlw	0
 10548  005C' EC00' F000'        	call	_LCDNokia_writeByte
 10549                           
 10550                           ;LCDNokia5110.c: 124: LCDNokia_writeByte(0, 0x14);
 10551  0060' 0E14               	movlw	20
 10552  0062' 6E06'              	movwf	LCDNokia_writeByte@data,c
 10553  0064' 0E00               	movlw	0
 10554  0066' EC00' F000'        	call	_LCDNokia_writeByte
 10555                           
 10556                           ;LCDNokia5110.c: 125: LCDNokia_writeByte(0, 0x20);
 10557  006A' 0E20               	movlw	32
 10558  006C' 6E06'              	movwf	LCDNokia_writeByte@data,c
 10559  006E' 0E00               	movlw	0
 10560  0070' EC00' F000'        	call	_LCDNokia_writeByte
 10561                           
 10562                           ;LCDNokia5110.c: 126: LCDNokia_writeByte(0, 0x0C);
 10563  0074' 0E0C               	movlw	12
 10564  0076' 6E06'              	movwf	LCDNokia_writeByte@data,c
 10565  0078' 0E00               	movlw	0
 10566  007A' EC00' F000'        	call	_LCDNokia_writeByte
 10567  007E' 0012               	return		;funcret
 10568  0080'                    __end_of_LCDNokia_init:
 10569                           	opt stack 0
 10570                           tosu	equ	0xFFF
 10571                           tosh	equ	0xFFE
 10572                           tosl	equ	0xFFD
 10573                           pclath	equ	0xFFA
 10574                           tblptru	equ	0xFF8
 10575                           tblptrh	equ	0xFF7
 10576                           tblptrl	equ	0xFF6
 10577                           tablat	equ	0xFF5
 10578                           prodh	equ	0xFF4
 10579                           prodl	equ	0xFF3
 10580                           postinc0	equ	0xFEE
 10581                           wreg	equ	0xFE8
 10582                           postinc2	equ	0xFDE
 10583                           status	equ	0xFD8
 10584                           
 10585 ;; *************** function _LCD_delay *****************
 10586 ;; Defined at:
 10587 ;;		line 215 in file "LCDNokia5110.c"
 10588 ;; Parameters:    Size  Location     Type
 10589 ;;		None
 10590 ;; Auto vars:     Size  Location     Type
 10591 ;;  counter         4    0[COMRAM] unsigned long 
 10592 ;; Return value:  Size  Location     Type
 10593 ;;                  1    wreg      void 
 10594 ;; Registers used:
 10595 ;;		wreg, status,2, status,0
 10596 ;; Tracked objects:
 10597 ;;		On entry : 0/0
 10598 ;;		On exit  : 0/0
 10599 ;;		Unchanged: 0/0
 10600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10601 ;;      Params:         0       0       0       0
 10602 ;;      Locals:         4       0       0       0
 10603 ;;      Temps:          0       0       0       0
 10604 ;;      Totals:         4       0       0       0
 10605 ;;Total ram usage:        4 bytes
 10606 ;; Hardware stack levels used:    1
 10607 ;; This function calls:
 10608 ;;		Nothing
 10609 ;; This function is called by:
 10610 ;;		_LCDNokia_init
 10611 ;; This function uses a non-reentrant model
 10612 ;;
 10613                           
 10614                           	psect	text36
 10615  0000'                    __ptext36:
 10616                           	opt stack 0
 10617  0000'                    _LCD_delay:
 10618                           	opt stack 27
 10619                           
 10620                           ;LCDNokia5110.c: 217: uint32_t counter;
 10621                           ;LCDNokia5110.c: 219: for(counter = 0; counter < 2500; counter++)
 10622                           
 10623                           ;incstack = 0
 10624  0000' 0E00               	movlw	0
 10625  0002' 6E00'              	movwf	LCD_delay@counter,c
 10626  0004' 0E00               	movlw	0
 10627  0006' 6E01'              	movwf	LCD_delay@counter+1,c
 10628  0008' 0E00               	movlw	0
 10629  000A' 6E02'              	movwf	LCD_delay@counter+2,c
 10630  000C' 0E00               	movlw	0
 10631  000E' 6E03'              	movwf	LCD_delay@counter+3,c
 10632  0010'                    l4624:
 10633  0010' 5003'              	movf	LCD_delay@counter+3,w,c
 10634  0012' 1002'              	iorwf	LCD_delay@counter+2,w,c
 10635  0014' E10D               	bnz	l993
 10636  0016' 0EC4               	movlw	196
 10637  0018' 5C00'              	subwf	LCD_delay@counter,w,c
 10638  001A' 0E09               	movlw	9
 10639  001C' 5801'              	subwfb	LCD_delay@counter+1,w,c
 10640  001E' B0D8               	btfsc	status,0,c
 10641  0020' 0012               	return	
 10642                           
 10643                           ;LCDNokia5110.c: 220: {
 10644  0022' 0E01               	movlw	1
 10645  0024' 2600'              	addwf	LCD_delay@counter,f,c
 10646  0026' 0E00               	movlw	0
 10647  0028' 2201'              	addwfc	LCD_delay@counter+1,f,c
 10648  002A' 2202'              	addwfc	LCD_delay@counter+2,f,c
 10649  002C' 2203'              	addwfc	LCD_delay@counter+3,f,c
 10650  002E' D7F0               	goto	l4624
 10651  0030'                    l993:
 10652  0030' 0012               	return		;funcret
 10653  0032'                    __end_of_LCD_delay:
 10654                           	opt stack 0
 10655                           tosu	equ	0xFFF
 10656                           tosh	equ	0xFFE
 10657                           tosl	equ	0xFFD
 10658                           pclath	equ	0xFFA
 10659                           tblptru	equ	0xFF8
 10660                           tblptrh	equ	0xFF7
 10661                           tblptrl	equ	0xFF6
 10662                           tablat	equ	0xFF5
 10663                           prodh	equ	0xFF4
 10664                           prodl	equ	0xFF3
 10665                           postinc0	equ	0xFEE
 10666                           wreg	equ	0xFE8
 10667                           postinc2	equ	0xFDE
 10668                           status	equ	0xFD8
 10669                           
 10670 ;; *************** function _delay *****************
 10671 ;; Defined at:
 10672 ;;		line 189 in file "GPIO.c"
 10673 ;; Parameters:    Size  Location     Type
 10674 ;;  delay           4    0[COMRAM] unsigned long 
 10675 ;; Auto vars:     Size  Location     Type
 10676 ;;  counter         4    4[COMRAM] volatile unsigned long 
 10677 ;; Return value:  Size  Location     Type
 10678 ;;                  1    wreg      void 
 10679 ;; Registers used:
 10680 ;;		wreg, status,2, status,0
 10681 ;; Tracked objects:
 10682 ;;		On entry : 0/0
 10683 ;;		On exit  : 0/0
 10684 ;;		Unchanged: 0/0
 10685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10686 ;;      Params:         4       0       0       0
 10687 ;;      Locals:         4       0       0       0
 10688 ;;      Temps:          0       0       0       0
 10689 ;;      Totals:         8       0       0       0
 10690 ;;Total ram usage:        8 bytes
 10691 ;; Hardware stack levels used:    1
 10692 ;; This function calls:
 10693 ;;		Nothing
 10694 ;; This function is called by:
 10695 ;;		_initialLoad
 10696 ;;		_UART_putString
 10697 ;; This function uses a non-reentrant model
 10698 ;;
 10699                           
 10700                           	psect	text37
 10701  0000'                    __ptext37:
 10702                           	opt stack 0
 10703  0000'                    _delay:
 10704                           	opt stack 28
 10705                           
 10706                           ;GPIO.c: 191: volatile uint32_t counter;
 10707                           ;GPIO.c: 193: for(counter = delay; counter > 0; counter--)
 10708                           
 10709                           ;incstack = 0
 10710  0000' C000' F004'        	movff	delay@delay,delay@counter	;volatile
 10711  0004' C001' F005'        	movff	delay@delay+1,delay@counter+1	;volatile
 10712  0008' C002' F006'        	movff	delay@delay+2,delay@counter+2	;volatile
 10713  000C' C003' F007'        	movff	delay@delay+3,delay@counter+3	;volatile
 10714  0010'                    l4750:
 10715  0010' 5004'              	movf	delay@counter,w,c	;volatile
 10716  0012' 1005'              	iorwf	delay@counter+1,w,c	;volatile
 10717  0014' 1006'              	iorwf	delay@counter+2,w,c	;volatile
 10718  0016' 1007'              	iorwf	delay@counter+3,w,c	;volatile
 10719  0018' B4D8               	btfsc	status,2,c
 10720  001A' 0012               	return	
 10721                           
 10722                           ;GPIO.c: 194: {}
 10723  001C' 0604'              	decf	delay@counter,f,c	;volatile
 10724  001E' 0E00               	movlw	0
 10725  0020' 5A05'              	subwfb	delay@counter+1,f,c	;volatile
 10726  0022' 5A06'              	subwfb	delay@counter+2,f,c	;volatile
 10727  0024' 5A07'              	subwfb	delay@counter+3,f,c	;volatile
 10728  0026' D7F4               	goto	l4750
 10729  0028'                    __end_of_delay:
 10730                           	opt stack 0
 10731                           tosu	equ	0xFFF
 10732                           tosh	equ	0xFFE
 10733                           tosl	equ	0xFFD
 10734                           pclath	equ	0xFFA
 10735                           tblptru	equ	0xFF8
 10736                           tblptrh	equ	0xFF7
 10737                           tblptrl	equ	0xFF6
 10738                           tablat	equ	0xFF5
 10739                           prodh	equ	0xFF4
 10740                           prodl	equ	0xFF3
 10741                           postinc0	equ	0xFEE
 10742                           wreg	equ	0xFE8
 10743                           postinc2	equ	0xFDE
 10744                           status	equ	0xFD8
 10745                           
 10746 ;; *************** function _ATM_init *****************
 10747 ;; Defined at:
 10748 ;;		line 304 in file "ATM90E36A.c"
 10749 ;; Parameters:    Size  Location     Type
 10750 ;;		None
 10751 ;; Auto vars:     Size  Location     Type
 10752 ;;		None
 10753 ;; Return value:  Size  Location     Type
 10754 ;;                  1    wreg      void 
 10755 ;; Registers used:
 10756 ;;		wreg, status,2, status,0, cstack
 10757 ;; Tracked objects:
 10758 ;;		On entry : 0/0
 10759 ;;		On exit  : 0/0
 10760 ;;		Unchanged: 0/0
 10761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10762 ;;      Params:         0       0       0       0
 10763 ;;      Locals:         0       0       0       0
 10764 ;;      Temps:          0       0       0       0
 10765 ;;      Totals:         0       0       0       0
 10766 ;;Total ram usage:        0 bytes
 10767 ;; Hardware stack levels used:    1
 10768 ;; Hardware stack levels required when called:    1
 10769 ;; This function calls:
 10770 ;;		_GPIO_clearPIN
 10771 ;;		_GPIO_dataDirectionPIN
 10772 ;;		_GPIO_setPIN
 10773 ;; This function is called by:
 10774 ;;		_initialLoad
 10775 ;; This function uses a non-reentrant model
 10776 ;;
 10777                           
 10778                           	psect	text38
 10779  0000'                    __ptext38:
 10780                           	opt stack 0
 10781  0000'                    _ATM_init:
 10782                           	opt stack 27
 10783                           
 10784                           ;ATM90E36A.c: 307: GPIO_dataDirectionPIN(GPIO_B, 3, GPIO_OUTPUT);
 10785                           
 10786                           ;incstack = 0
 10787  0000' 0E03               	movlw	3
 10788  0002' 6E00'              	movwf	GPIO_dataDirectionPIN@pin,c
 10789  0004' 0E01               	movlw	1
 10790  0006' 6E01'              	movwf	GPIO_dataDirectionPIN@state,c
 10791  0008' 0E01               	movlw	1
 10792  000A' EC00' F000'        	call	_GPIO_dataDirectionPIN
 10793                           
 10794                           ;ATM90E36A.c: 309: GPIO_dataDirectionPIN(GPIO_B, 4, GPIO_OUTPUT);
 10795  000E' 0E04               	movlw	4
 10796  0010' 6E00'              	movwf	GPIO_dataDirectionPIN@pin,c
 10797  0012' 0E01               	movlw	1
 10798  0014' 6E01'              	movwf	GPIO_dataDirectionPIN@state,c
 10799  0016' 0E01               	movlw	1
 10800  0018' EC00' F000'        	call	_GPIO_dataDirectionPIN
 10801                           
 10802                           ;ATM90E36A.c: 311: GPIO_dataDirectionPIN(GPIO_B, 5, GPIO_OUTPUT);
 10803  001C' 0E05               	movlw	5
 10804  001E' 6E00'              	movwf	GPIO_dataDirectionPIN@pin,c
 10805  0020' 0E01               	movlw	1
 10806  0022' 6E01'              	movwf	GPIO_dataDirectionPIN@state,c
 10807  0024' 0E01               	movlw	1
 10808  0026' EC00' F000'        	call	_GPIO_dataDirectionPIN
 10809                           
 10810                           ;ATM90E36A.c: 313: GPIO_dataDirectionPIN(GPIO_B, 6, GPIO_OUTPUT);
 10811  002A' 0E06               	movlw	6
 10812  002C' 6E00'              	movwf	GPIO_dataDirectionPIN@pin,c
 10813  002E' 0E01               	movlw	1
 10814  0030' 6E01'              	movwf	GPIO_dataDirectionPIN@state,c
 10815  0032' 0E01               	movlw	1
 10816  0034' EC00' F000'        	call	_GPIO_dataDirectionPIN
 10817                           
 10818                           ;ATM90E36A.c: 315: GPIO_dataDirectionPIN(GPIO_B, 7, GPIO_INPUT);
 10819  0038' 0E07               	movlw	7
 10820  003A' 6E00'              	movwf	GPIO_dataDirectionPIN@pin,c
 10821  003C' 0E00               	movlw	0
 10822  003E' 6E01'              	movwf	GPIO_dataDirectionPIN@state,c
 10823  0040' 0E01               	movlw	1
 10824  0042' EC00' F000'        	call	_GPIO_dataDirectionPIN
 10825                           
 10826                           ;ATM90E36A.c: 318: GPIO_dataDirectionPIN(GPIO_C, 2, GPIO_INPUT);
 10827  0046' 0E02               	movlw	2
 10828  0048' 6E00'              	movwf	GPIO_dataDirectionPIN@pin,c
 10829  004A' 0E00               	movlw	0
 10830  004C' 6E01'              	movwf	GPIO_dataDirectionPIN@state,c
 10831  004E' 0E02               	movlw	2
 10832  0050' EC00' F000'        	call	_GPIO_dataDirectionPIN
 10833                           
 10834                           ;ATM90E36A.c: 320: GPIO_dataDirectionPIN(GPIO_C, 1, GPIO_INPUT);
 10835  0054' 0E01               	movlw	1
 10836  0056' 6E00'              	movwf	GPIO_dataDirectionPIN@pin,c
 10837  0058' 0E00               	movlw	0
 10838  005A' 6E01'              	movwf	GPIO_dataDirectionPIN@state,c
 10839  005C' 0E02               	movlw	2
 10840  005E' EC00' F000'        	call	_GPIO_dataDirectionPIN
 10841                           
 10842                           ;ATM90E36A.c: 323: GPIO_dataDirectionPIN(GPIO_C, 0, GPIO_INPUT);
 10843  0062' 0E00               	movlw	0
 10844  0064' 6E00'              	movwf	GPIO_dataDirectionPIN@pin,c
 10845  0066' 0E00               	movlw	0
 10846  0068' 6E01'              	movwf	GPIO_dataDirectionPIN@state,c
 10847  006A' 0E02               	movlw	2
 10848  006C' EC00' F000'        	call	_GPIO_dataDirectionPIN
 10849                           
 10850                           ;ATM90E36A.c: 325: GPIO_dataDirectionPIN(GPIO_A, 2, GPIO_INPUT);
 10851  0070' 0E02               	movlw	2
 10852  0072' 6E00'              	movwf	GPIO_dataDirectionPIN@pin,c
 10853  0074' 0E00               	movlw	0
 10854  0076' 6E01'              	movwf	GPIO_dataDirectionPIN@state,c
 10855  0078' 0E00               	movlw	0
 10856  007A' EC00' F000'        	call	_GPIO_dataDirectionPIN
 10857                           
 10858                           ;ATM90E36A.c: 326: ANS2 = 0;
 10859  007E' 94B8               	bcf	4024,2,c	;volatile
 10860                           
 10861                           ;ATM90E36A.c: 328: GPIO_dataDirectionPIN(GPIO_A, 1, GPIO_INPUT);
 10862  0080' 0E01               	movlw	1
 10863  0082' 6E00'              	movwf	GPIO_dataDirectionPIN@pin,c
 10864  0084' 0E00               	movlw	0
 10865  0086' 6E01'              	movwf	GPIO_dataDirectionPIN@state,c
 10866  0088' 0E00               	movlw	0
 10867  008A' EC00' F000'        	call	_GPIO_dataDirectionPIN
 10868                           
 10869                           ;ATM90E36A.c: 329: ANS1 = 0;
 10870  008E' 92B8               	bcf	4024,1,c	;volatile
 10871                           
 10872                           ;ATM90E36A.c: 331: GPIO_dataDirectionPIN(GPIO_A, 0, GPIO_INPUT);
 10873  0090' 0E00               	movlw	0
 10874  0092' 6E00'              	movwf	GPIO_dataDirectionPIN@pin,c
 10875  0094' 0E00               	movlw	0
 10876  0096' 6E01'              	movwf	GPIO_dataDirectionPIN@state,c
 10877  0098' 0E00               	movlw	0
 10878  009A' EC00' F000'        	call	_GPIO_dataDirectionPIN
 10879                           
 10880                           ;ATM90E36A.c: 332: ANS0 = 0;
 10881  009E' 90B8               	bcf	4024,0,c	;volatile
 10882                           
 10883                           ;ATM90E36A.c: 335: GPIO_setPIN(GPIO_B, 5);
 10884  00A0' 0E05               	movlw	5
 10885  00A2' 6E00'              	movwf	GPIO_setPIN@pin,c
 10886  00A4' 0E01               	movlw	1
 10887  00A6' EC00' F000'        	call	_GPIO_setPIN
 10888                           
 10889                           ;ATM90E36A.c: 336: GPIO_setPIN(GPIO_B, 6);
 10890  00AA' 0E06               	movlw	6
 10891  00AC' 6E00'              	movwf	GPIO_setPIN@pin,c
 10892  00AE' 0E01               	movlw	1
 10893  00B0' EC00' F000'        	call	_GPIO_setPIN
 10894                           
 10895                           ;ATM90E36A.c: 339: GPIO_clearPIN(GPIO_B, 3);
 10896  00B4' 0E03               	movlw	3
 10897  00B6' 6E00'              	movwf	GPIO_clearPIN@pin,c
 10898  00B8' 0E01               	movlw	1
 10899  00BA' EC00' F000'        	call	_GPIO_clearPIN
 10900  00BE' 0012               	return		;funcret
 10901  00C0'                    __end_of_ATM_init:
 10902                           	opt stack 0
 10903                           tosu	equ	0xFFF
 10904                           tosh	equ	0xFFE
 10905                           tosl	equ	0xFFD
 10906                           pclath	equ	0xFFA
 10907                           tblptru	equ	0xFF8
 10908                           tblptrh	equ	0xFF7
 10909                           tblptrl	equ	0xFF6
 10910                           tablat	equ	0xFF5
 10911                           prodh	equ	0xFF4
 10912                           prodl	equ	0xFF3
 10913                           postinc0	equ	0xFEE
 10914                           wreg	equ	0xFE8
 10915                           postinc2	equ	0xFDE
 10916                           status	equ	0xFD8
 10917                           
 10918 ;; *************** function _GPIO_setPIN *****************
 10919 ;; Defined at:
 10920 ;;		line 151 in file "GPIO.c"
 10921 ;; Parameters:    Size  Location     Type
 10922 ;;  portName        1    wreg     enum E3075
 10923 ;;  pin             1    0[COMRAM] unsigned char 
 10924 ;; Auto vars:     Size  Location     Type
 10925 ;;  portName        1    3[COMRAM] enum E3075
 10926 ;; Return value:  Size  Location     Type
 10927 ;;                  1    wreg      void 
 10928 ;; Registers used:
 10929 ;;		wreg, status,2, status,0
 10930 ;; Tracked objects:
 10931 ;;		On entry : 0/0
 10932 ;;		On exit  : 0/0
 10933 ;;		Unchanged: 0/0
 10934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10935 ;;      Params:         1       0       0       0
 10936 ;;      Locals:         1       0       0       0
 10937 ;;      Temps:          2       0       0       0
 10938 ;;      Totals:         4       0       0       0
 10939 ;;Total ram usage:        4 bytes
 10940 ;; Hardware stack levels used:    1
 10941 ;; This function calls:
 10942 ;;		Nothing
 10943 ;; This function is called by:
 10944 ;;		_LCDNokia_init
 10945 ;;		_ATM_init
 10946 ;; This function uses a non-reentrant model
 10947 ;;
 10948                           
 10949                           	psect	text39
 10950  0000'                    __ptext39:
 10951                           	opt stack 0
 10952  0000'                    _GPIO_setPIN:
 10953                           	opt stack 27
 10954                           
 10955                           ;incstack = 0
 10956                           ;GPIO_setPIN@portName stored from wreg
 10957  0000' 6E03'              	movwf	GPIO_setPIN@portName,c
 10958                           
 10959                           ;GPIO.c: 154: switch(portName)
 10960  0002' D027               	goto	l118
 10961  0004'                    
 10962                           ;GPIO.c: 157: PORTA |= (1<<pin);
 10963  0004' C000' F001'        	movff	GPIO_setPIN@pin,??_GPIO_setPIN
 10964  0008' 0E01               	movlw	1
 10965  000A' 6E00'              	movwf	(??_GPIO_setPIN+1)& (0+255),c
 10966  000C' 2A01'              	incf	??_GPIO_setPIN,f,c
 10967  000E' D002               	goto	u2674
 10968  0010'                    u2675:
 10969  0010' 90D8               	bcf	status,0,c
 10970  0012' 3602'              	rlcf	??_GPIO_setPIN+1,f,c
 10971  0014'                    u2674:
 10972  0014' 2E01'              	decfsz	??_GPIO_setPIN,f,c
 10973  0016' D7FC               	goto	u2675
 10974  0018' 5002'              	movf	??_GPIO_setPIN+1,w,c
 10975  001A' 1280               	iorwf	3968,f,c	;volatile
 10976                           
 10977                           ;GPIO.c: 158: break;
 10978  001C' 0012               	return	
 10979  001E'                    
 10980                           ;GPIO.c: 160: PORTB |= (1<<pin);
 10981  001E' C000' F001'        	movff	GPIO_setPIN@pin,??_GPIO_setPIN
 10982  0022' 0E01               	movlw	1
 10983  0024' 6E00'              	movwf	(??_GPIO_setPIN+1)& (0+255),c
 10984  0026' 2A01'              	incf	??_GPIO_setPIN,f,c
 10985  0028' D002               	goto	u2684
 10986  002A'                    u2685:
 10987  002A' 90D8               	bcf	status,0,c
 10988  002C' 3602'              	rlcf	??_GPIO_setPIN+1,f,c
 10989  002E'                    u2684:
 10990  002E' 2E01'              	decfsz	??_GPIO_setPIN,f,c
 10991  0030' D7FC               	goto	u2685
 10992  0032' 5002'              	movf	??_GPIO_setPIN+1,w,c
 10993  0034' 1281               	iorwf	3969,f,c	;volatile
 10994                           
 10995                           ;GPIO.c: 161: break;
 10996  0036' 0012               	return	
 10997  0038'                    
 10998                           ;GPIO.c: 163: PORTC |= (1<<pin);
 10999  0038' C000' F001'        	movff	GPIO_setPIN@pin,??_GPIO_setPIN
 11000  003C' 0E01               	movlw	1
 11001  003E' 6E00'              	movwf	(??_GPIO_setPIN+1)& (0+255),c
 11002  0040' 2A01'              	incf	??_GPIO_setPIN,f,c
 11003  0042' D002               	goto	u2694
 11004  0044'                    u2695:
 11005  0044' 90D8               	bcf	status,0,c
 11006  0046' 3602'              	rlcf	??_GPIO_setPIN+1,f,c
 11007  0048'                    u2694:
 11008  0048' 2E01'              	decfsz	??_GPIO_setPIN,f,c
 11009  004A' D7FC               	goto	u2695
 11010  004C' 5002'              	movf	??_GPIO_setPIN+1,w,c
 11011  004E' 1282               	iorwf	3970,f,c	;volatile
 11012                           
 11013                           ;GPIO.c: 167: }
 11014                           
 11015                           ;GPIO.c: 166: break;
 11016                           
 11017                           ;GPIO.c: 165: default:
 11018                           
 11019                           ;GPIO.c: 164: break;
 11020  0050' 0012               	return	
 11021  0052'                    l118:
 11022  0052' 5003'              	movf	GPIO_setPIN@portName,w,c
 11023                           
 11024                           ; Switch size 1, requested type "space"
 11025                           ; Number of cases is 3, Range of values is 0 to 2
 11026                           ; switch strategies available:
 11027                           ; Name         Instructions Cycles
 11028                           ; simple_byte           10     6 (average)
 11029                           ;	Chosen strategy is simple_byte
 11030  0054' 0A00               	xorlw	0	; case 0
 11031  0056' B4D8               	btfsc	status,2,c
 11032  0058' D7D5               	goto	l119
 11033  005A' 0A01               	xorlw	1	; case 1
 11034  005C' B4D8               	btfsc	status,2,c
 11035  005E' D7DF               	goto	l121
 11036  0060' 0A03               	xorlw	3	; case 2
 11037  0062' A4D8               	btfss	status,2,c
 11038  0064' 0012               	return	
 11039  0066' D7E8               	goto	l122
 11040  0068'                    __end_of_GPIO_setPIN:
 11041                           	opt stack 0
 11042                           tosu	equ	0xFFF
 11043                           tosh	equ	0xFFE
 11044                           tosl	equ	0xFFD
 11045                           pclath	equ	0xFFA
 11046                           tblptru	equ	0xFF8
 11047                           tblptrh	equ	0xFF7
 11048                           tblptrl	equ	0xFF6
 11049                           tablat	equ	0xFF5
 11050                           prodh	equ	0xFF4
 11051                           prodl	equ	0xFF3
 11052                           postinc0	equ	0xFEE
 11053                           wreg	equ	0xFE8
 11054                           postinc2	equ	0xFDE
 11055                           status	equ	0xFD8
 11056                           
 11057 ;; *************** function _GPIO_clearPIN *****************
 11058 ;; Defined at:
 11059 ;;		line 170 in file "GPIO.c"
 11060 ;; Parameters:    Size  Location     Type
 11061 ;;  portName        1    wreg     enum E3075
 11062 ;;  pin             1    0[COMRAM] unsigned char 
 11063 ;; Auto vars:     Size  Location     Type
 11064 ;;  portName        1    3[COMRAM] enum E3075
 11065 ;; Return value:  Size  Location     Type
 11066 ;;                  1    wreg      void 
 11067 ;; Registers used:
 11068 ;;		wreg, status,2, status,0
 11069 ;; Tracked objects:
 11070 ;;		On entry : 0/0
 11071 ;;		On exit  : 0/0
 11072 ;;		Unchanged: 0/0
 11073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11074 ;;      Params:         1       0       0       0
 11075 ;;      Locals:         1       0       0       0
 11076 ;;      Temps:          2       0       0       0
 11077 ;;      Totals:         4       0       0       0
 11078 ;;Total ram usage:        4 bytes
 11079 ;; Hardware stack levels used:    1
 11080 ;; This function calls:
 11081 ;;		Nothing
 11082 ;; This function is called by:
 11083 ;;		_LCDNokia_init
 11084 ;;		_ATM_init
 11085 ;; This function uses a non-reentrant model
 11086 ;;
 11087                           
 11088                           	psect	text40
 11089  0000'                    __ptext40:
 11090                           	opt stack 0
 11091  0000'                    _GPIO_clearPIN:
 11092                           	opt stack 27
 11093                           
 11094                           ;incstack = 0
 11095                           ;GPIO_clearPIN@portName stored from wreg
 11096  0000' 6E03'              	movwf	GPIO_clearPIN@portName,c
 11097                           
 11098                           ;GPIO.c: 173: switch(portName)
 11099  0002' D02A               	goto	l127
 11100  0004'                    
 11101                           ;GPIO.c: 176: PORTA &= ~(1<<pin);
 11102  0004' C000' F001'        	movff	GPIO_clearPIN@pin,??_GPIO_clearPIN
 11103  0008' 0E01               	movlw	1
 11104  000A' 6E00'              	movwf	(??_GPIO_clearPIN+1)& (0+255),c
 11105  000C' 2A01'              	incf	??_GPIO_clearPIN,f,c
 11106  000E' D002               	goto	u2704
 11107  0010'                    u2705:
 11108  0010' 90D8               	bcf	status,0,c
 11109  0012' 3602'              	rlcf	??_GPIO_clearPIN+1,f,c
 11110  0014'                    u2704:
 11111  0014' 2E01'              	decfsz	??_GPIO_clearPIN,f,c
 11112  0016' D7FC               	goto	u2705
 11113  0018' 5002'              	movf	??_GPIO_clearPIN+1,w,c
 11114  001A' 0AFF               	xorlw	255
 11115  001C' 1680               	andwf	3968,f,c	;volatile
 11116                           
 11117                           ;GPIO.c: 177: break;
 11118  001E' 0012               	return	
 11119  0020'                    
 11120                           ;GPIO.c: 179: PORTB &= ~(1<<pin);
 11121  0020' C000' F001'        	movff	GPIO_clearPIN@pin,??_GPIO_clearPIN
 11122  0024' 0E01               	movlw	1
 11123  0026' 6E00'              	movwf	(??_GPIO_clearPIN+1)& (0+255),c
 11124  0028' 2A01'              	incf	??_GPIO_clearPIN,f,c
 11125  002A' D002               	goto	u2714
 11126  002C'                    u2715:
 11127  002C' 90D8               	bcf	status,0,c
 11128  002E' 3602'              	rlcf	??_GPIO_clearPIN+1,f,c
 11129  0030'                    u2714:
 11130  0030' 2E01'              	decfsz	??_GPIO_clearPIN,f,c
 11131  0032' D7FC               	goto	u2715
 11132  0034' 5002'              	movf	??_GPIO_clearPIN+1,w,c
 11133  0036' 0AFF               	xorlw	255
 11134  0038' 1681               	andwf	3969,f,c	;volatile
 11135                           
 11136                           ;GPIO.c: 180: break;
 11137  003A' 0012               	return	
 11138  003C'                    
 11139                           ;GPIO.c: 182: PORTC &= ~(1<<pin);
 11140  003C' C000' F001'        	movff	GPIO_clearPIN@pin,??_GPIO_clearPIN
 11141  0040' 0E01               	movlw	1
 11142  0042' 6E00'              	movwf	(??_GPIO_clearPIN+1)& (0+255),c
 11143  0044' 2A01'              	incf	??_GPIO_clearPIN,f,c
 11144  0046' D002               	goto	u2724
 11145  0048'                    u2725:
 11146  0048' 90D8               	bcf	status,0,c
 11147  004A' 3602'              	rlcf	??_GPIO_clearPIN+1,f,c
 11148  004C'                    u2724:
 11149  004C' 2E01'              	decfsz	??_GPIO_clearPIN,f,c
 11150  004E' D7FC               	goto	u2725
 11151  0050' 5002'              	movf	??_GPIO_clearPIN+1,w,c
 11152  0052' 0AFF               	xorlw	255
 11153  0054' 1682               	andwf	3970,f,c	;volatile
 11154                           
 11155                           ;GPIO.c: 186: }
 11156                           
 11157                           ;GPIO.c: 185: break;
 11158                           
 11159                           ;GPIO.c: 184: default:
 11160                           
 11161                           ;GPIO.c: 183: break;
 11162  0056' 0012               	return	
 11163  0058'                    l127:
 11164  0058' 5003'              	movf	GPIO_clearPIN@portName,w,c
 11165                           
 11166                           ; Switch size 1, requested type "space"
 11167                           ; Number of cases is 3, Range of values is 0 to 2
 11168                           ; switch strategies available:
 11169                           ; Name         Instructions Cycles
 11170                           ; simple_byte           10     6 (average)
 11171                           ;	Chosen strategy is simple_byte
 11172  005A' 0A00               	xorlw	0	; case 0
 11173  005C' B4D8               	btfsc	status,2,c
 11174  005E' D7D2               	goto	l128
 11175  0060' 0A01               	xorlw	1	; case 1
 11176  0062' B4D8               	btfsc	status,2,c
 11177  0064' D7DD               	goto	l130
 11178  0066' 0A03               	xorlw	3	; case 2
 11179  0068' A4D8               	btfss	status,2,c
 11180  006A' 0012               	return	
 11181  006C' D7E7               	goto	l131
 11182  006E'                    __end_of_GPIO_clearPIN:
 11183                           	opt stack 0
 11184                           tosu	equ	0xFFF
 11185                           tosh	equ	0xFFE
 11186                           tosl	equ	0xFFD
 11187                           pclath	equ	0xFFA
 11188                           tblptru	equ	0xFF8
 11189                           tblptrh	equ	0xFF7
 11190                           tblptrl	equ	0xFF6
 11191                           tablat	equ	0xFF5
 11192                           prodh	equ	0xFF4
 11193                           prodl	equ	0xFF3
 11194                           postinc0	equ	0xFEE
 11195                           wreg	equ	0xFE8
 11196                           postinc2	equ	0xFDE
 11197                           status	equ	0xFD8
 11198                           
 11199 ;; *************** function _exitFrequency *****************
 11200 ;; Defined at:
 11201 ;;		line 1705 in file "Phases.c"
 11202 ;; Parameters:    Size  Location     Type
 11203 ;;  data            3   38[COMRAM] struct .
 11204 ;; Auto vars:     Size  Location     Type
 11205 ;;		None
 11206 ;; Return value:  Size  Location     Type
 11207 ;;                  3   38[COMRAM] struct .
 11208 ;; Registers used:
 11209 ;;		wreg, status,2, status,0, cstack
 11210 ;; Tracked objects:
 11211 ;;		On entry : 0/0
 11212 ;;		On exit  : 0/0
 11213 ;;		Unchanged: 0/0
 11214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11215 ;;      Params:         3       0       0       0
 11216 ;;      Locals:         0       0       0       0
 11217 ;;      Temps:          0       0       0       0
 11218 ;;      Totals:         3       0       0       0
 11219 ;;Total ram usage:        3 bytes
 11220 ;; Hardware stack levels used:    1
 11221 ;; Hardware stack levels required when called:    4
 11222 ;; This function calls:
 11223 ;;		_LCDNokia_clear
 11224 ;; This function is called by:
 11225 ;;		_stateFrequency
 11226 ;; This function uses a non-reentrant model
 11227 ;;
 11228                           
 11229                           	psect	text41
 11230  0000'                    __ptext41:
 11231                           	opt stack 0
 11232  0000'                    _exitFrequency:
 11233                           	opt stack 25
 11234                           
 11235                           ;Phases.c: 1708: static PhaseFrequency_Type currentFrequency2;
 11236                           ;Phases.c: 1710: LCDNokia_clear();
 11237                           
 11238                           ;incstack = 0
 11239  0000' EC00' F000'        	call	_LCDNokia_clear	;wreg free
 11240                           
 11241                           ;Phases.c: 1712: currentFrequency2.phaseState = data.phaseState;
 11242  0004' C027' F093'        	movff	exitFrequency@data+1,exitFrequency@currentFrequency2+1
 11243                           
 11244                           ;Phases.c: 1713: currentFrequency2.stateMain = data.stateMain;
 11245  0008' C028' F094'        	movff	exitFrequency@data+2,exitFrequency@currentFrequency2+2
 11246                           
 11247                           ;Phases.c: 1715: return (currentFrequency2);
 11248  000C' C092' F026'        	movff	exitFrequency@currentFrequency2,?_exitFrequency
 11249  0010' C093' F027'        	movff	exitFrequency@currentFrequency2+1,?_exitFrequency+1
 11250  0014' C094' F028'        	movff	exitFrequency@currentFrequency2+2,?_exitFrequency+2
 11251  0018' 0012               	return	
 11252  001A'                    __end_of_exitFrequency:
 11253                           	opt stack 0
 11254                           tosu	equ	0xFFF
 11255                           tosh	equ	0xFFE
 11256                           tosl	equ	0xFFD
 11257                           pclath	equ	0xFFA
 11258                           tblptru	equ	0xFF8
 11259                           tblptrh	equ	0xFF7
 11260                           tblptrl	equ	0xFF6
 11261                           tablat	equ	0xFF5
 11262                           prodh	equ	0xFF4
 11263                           prodl	equ	0xFF3
 11264                           postinc0	equ	0xFEE
 11265                           wreg	equ	0xFE8
 11266                           postinc2	equ	0xFDE
 11267                           status	equ	0xFD8
 11268                           
 11269 ;; *************** function _showFrequency *****************
 11270 ;; Defined at:
 11271 ;;		line 1680 in file "Phases.c"
 11272 ;; Parameters:    Size  Location     Type
 11273 ;;  data            3   38[COMRAM] struct .
 11274 ;; Auto vars:     Size  Location     Type
 11275 ;;  frequency       7   41[COMRAM] const unsigned char [7]
 11276 ;; Return value:  Size  Location     Type
 11277 ;;                  3   38[COMRAM] struct .
 11278 ;; Registers used:
 11279 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11280 ;; Tracked objects:
 11281 ;;		On entry : 0/0
 11282 ;;		On exit  : 0/0
 11283 ;;		Unchanged: 0/0
 11284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11285 ;;      Params:         3       0       0       0
 11286 ;;      Locals:         7       0       0       0
 11287 ;;      Temps:          0       0       0       0
 11288 ;;      Totals:        10       0       0       0
 11289 ;;Total ram usage:       10 bytes
 11290 ;; Hardware stack levels used:    1
 11291 ;; Hardware stack levels required when called:    4
 11292 ;; This function calls:
 11293 ;;		_ATM_registers
 11294 ;;		_LCDNokia_gotoXY
 11295 ;;		_LCDNokia_printValue
 11296 ;;		_LCDNokia_sendString
 11297 ;;		_getButton1
 11298 ;;		_getButton2
 11299 ;; This function is called by:
 11300 ;;		_stateFrequency
 11301 ;; This function uses a non-reentrant model
 11302 ;;
 11303                           
 11304                           	psect	text42
 11305  0000'                    __ptext42:
 11306                           	opt stack 0
 11307  0000'                    _showFrequency:
 11308                           	opt stack 25
 11309                           
 11310                           ;Phases.c: 1682: const uint8_t frequency[] = "Freq: ";
 11311                           
 11312                           ;incstack = 0
 11313  0000' 0E00'              	movlw	low showFrequency@F3837
 11314  0002' 6EF6               	movwf	tblptrl,c
 11315  0004'                    	if	1	;There is more than 1 active tblptr byte
 11316  0004' 0E00'              	movlw	high showFrequency@F3837
 11317  0006' 6EF7               	movwf	tblptrh,c
 11318  0008'                    	endif
 11319  0008'                    	if	0	;There are less than 3 active tblptr bytes
 11320  0008'                    	endif
 11321  0008' EE20' F000'        	lfsr	2,showFrequency@frequency
 11322  000C' 0E06               	movlw	6
 11323  000E'                    u4560:
 11324  000E' 0009               	tblrd		*+
 11325  0010' CFF5 FFDE          	movff	tablat,postinc2
 11326  0014' 06E8               	decf	wreg,f,c
 11327  0016' E2FB               	bc	u4560
 11328                           
 11329                           ;Phases.c: 1684: static PhaseFrequency_Type currentFrequency1;
 11330                           ;Phases.c: 1687: currentFrequency1.phaseState = SHOW_FREQUENCY;
 11331  0018' 0E00               	movlw	0
 11332  001A' 0101               	movlb	1	; () banked
 11333  001C' 6F00'              	movwf	(showFrequency@currentFrequency1+1)& (0+255),b
 11334                           
 11335                           ; BSR set to: 1
 11336                           ;Phases.c: 1688: currentFrequency1.stateMain = data.stateMain;
 11337  001E' C028' F097'        	movff	showFrequency@data+2,showFrequency@currentFrequency1+2
 11338                           
 11339                           ; BSR set to: 1
 11340                           ;Phases.c: 1690: if(getButton1() == 1)
 11341  0022' EC00' F000'        	call	_getButton1	;wreg free
 11342  0026' 06E8               	decf	wreg,f,c
 11343  0028' A4D8               	btfss	status,2,c
 11344  002A' D003               	goto	l917
 11345                           
 11346                           ;Phases.c: 1691: {
 11347                           ;Phases.c: 1692: currentFrequency1.phaseState = EXIT_FREQUENCY;
 11348  002C' 0E01               	movlw	1
 11349  002E' 0101               	movlb	1	; () banked
 11350  0030' 6F00'              	movwf	(showFrequency@currentFrequency1+1)& (0+255),b
 11351  0032'                    l917:
 11352                           
 11353                           ;Phases.c: 1693: }
 11354                           ;Phases.c: 1694: if(getButton2() == 1)
 11355                           
 11356                           ; BSR set to: 1
 11357  0032' EC00' F000'        	call	_getButton2	;wreg free
 11358  0036' 06E8               	decf	wreg,f,c
 11359  0038' A4D8               	btfss	status,2,c
 11360  003A' D003               	goto	l918
 11361                           
 11362                           ;Phases.c: 1695: {
 11363                           ;Phases.c: 1696: currentFrequency1.phaseState = EXIT_FREQUENCY;
 11364  003C' 0E01               	movlw	1
 11365  003E' 0101               	movlb	1	; () banked
 11366  0040' 6F00'              	movwf	(showFrequency@currentFrequency1+1)& (0+255),b
 11367  0042'                    l918:
 11368                           
 11369                           ;Phases.c: 1697: }
 11370                           ;Phases.c: 1698: LCDNokia_gotoXY(0,1);
 11371                           
 11372                           ; BSR set to: 1
 11373  0042' 0E01               	movlw	1
 11374  0044' 6E08'              	movwf	LCDNokia_gotoXY@y,c
 11375  0046' 0E00               	movlw	0
 11376  0048' EC00' F000'        	call	_LCDNokia_gotoXY
 11377                           
 11378                           ;Phases.c: 1699: LCDNokia_sendString(frequency);
 11379  004C' 0E00'              	movlw	low showFrequency@frequency
 11380  004E' 6E0D'              	movwf	LCDNokia_sendString@characters,c
 11381  0050' 0E00'              	movlw	high showFrequency@frequency
 11382  0052' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
 11383  0054' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
 11384                           
 11385                           ;Phases.c: 1700: LCDNokia_printValue(ATM_registers(FREQUENCY_TYPE, FREQUENCY_REG));
 11386  0058' 0E4B               	movlw	75
 11387  005A' 6E12'              	movwf	ATM_registers@reg,c
 11388  005C' 0E0E               	movlw	14
 11389  005E' EC00' F000'        	call	_ATM_registers
 11390  0062' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
 11391  0066' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
 11392  006A' 6A19'              	clrf	LCDNokia_printValue@value+2,c
 11393  006C' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
 11394  006E' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
 11395                           
 11396                           ;Phases.c: 1702: return (currentFrequency1);
 11397  0072' C095' F026'        	movff	showFrequency@currentFrequency1,?_showFrequency
 11398  0076' C096' F027'        	movff	showFrequency@currentFrequency1+1,?_showFrequency+1
 11399  007A' C097' F028'        	movff	showFrequency@currentFrequency1+2,?_showFrequency+2
 11400  007E' 0012               	return	
 11401  0080'                    __end_of_showFrequency:
 11402                           	opt stack 0
 11403                           tosu	equ	0xFFF
 11404                           tosh	equ	0xFFE
 11405                           tosl	equ	0xFFD
 11406                           pclath	equ	0xFFA
 11407                           tblptru	equ	0xFF8
 11408                           tblptrh	equ	0xFF7
 11409                           tblptrl	equ	0xFF6
 11410                           tablat	equ	0xFF5
 11411                           prodh	equ	0xFF4
 11412                           prodl	equ	0xFF3
 11413                           postinc0	equ	0xFEE
 11414                           wreg	equ	0xFE8
 11415                           postinc2	equ	0xFDE
 11416                           status	equ	0xFD8
 11417                           
 11418 ;; *************** function _exitEnergy *****************
 11419 ;; Defined at:
 11420 ;;		line 1092 in file "Phases.c"
 11421 ;; Parameters:    Size  Location     Type
 11422 ;;  data            3   38[COMRAM] struct .
 11423 ;; Auto vars:     Size  Location     Type
 11424 ;;		None
 11425 ;; Return value:  Size  Location     Type
 11426 ;;                  3   38[COMRAM] struct .
 11427 ;; Registers used:
 11428 ;;		wreg, status,2, status,0, cstack
 11429 ;; Tracked objects:
 11430 ;;		On entry : 0/0
 11431 ;;		On exit  : 0/0
 11432 ;;		Unchanged: 0/0
 11433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11434 ;;      Params:         3       0       0       0
 11435 ;;      Locals:         0       0       0       0
 11436 ;;      Temps:          0       0       0       0
 11437 ;;      Totals:         3       0       0       0
 11438 ;;Total ram usage:        3 bytes
 11439 ;; Hardware stack levels used:    1
 11440 ;; Hardware stack levels required when called:    4
 11441 ;; This function calls:
 11442 ;;		_LCDNokia_clear
 11443 ;; This function is called by:
 11444 ;;		_stateEnergy
 11445 ;; This function uses a non-reentrant model
 11446 ;;
 11447                           
 11448                           	psect	text43
 11449  0000'                    __ptext43:
 11450                           	opt stack 0
 11451  0000'                    _exitEnergy:
 11452                           	opt stack 25
 11453                           
 11454                           ;Phases.c: 1095: static PhaseEnergy_Type currentEnergy6;
 11455                           ;Phases.c: 1097: LCDNokia_clear();
 11456                           
 11457                           ;incstack = 0
 11458  0000' EC00' F000'        	call	_LCDNokia_clear	;wreg free
 11459                           
 11460                           ;Phases.c: 1099: currentEnergy6.phaseState = VIEW_MENU;
 11461  0004' 0E02               	movlw	2
 11462  0006' 0101               	movlb	1	; () banked
 11463  0008' 6F00'              	movwf	(exitEnergy@currentEnergy6+1)& (0+255),b
 11464                           
 11465                           ; BSR set to: 1
 11466                           ;Phases.c: 1100: currentEnergy6.stateMain = MAIN_MENU;
 11467  000A' 0E00               	movlw	0
 11468  000C' 6F00'              	movwf	(exitEnergy@currentEnergy6+2)& (0+255),b
 11469                           
 11470                           ; BSR set to: 1
 11471                           ;Phases.c: 1102: return (currentEnergy6);
 11472  000E' C0BF' F026'        	movff	exitEnergy@currentEnergy6,?_exitEnergy
 11473  0012' C0C0' F027'        	movff	exitEnergy@currentEnergy6+1,?_exitEnergy+1
 11474  0016' C0C1' F028'        	movff	exitEnergy@currentEnergy6+2,?_exitEnergy+2
 11475  001A' 0012               	return	
 11476  001C'                    __end_of_exitEnergy:
 11477                           	opt stack 0
 11478                           tosu	equ	0xFFF
 11479                           tosh	equ	0xFFE
 11480                           tosl	equ	0xFFD
 11481                           pclath	equ	0xFFA
 11482                           tblptru	equ	0xFF8
 11483                           tblptrh	equ	0xFF7
 11484                           tblptrl	equ	0xFF6
 11485                           tablat	equ	0xFF5
 11486                           prodh	equ	0xFF4
 11487                           prodl	equ	0xFF3
 11488                           postinc0	equ	0xFEE
 11489                           wreg	equ	0xFE8
 11490                           postinc2	equ	0xFDE
 11491                           status	equ	0xFD8
 11492                           
 11493 ;; *************** function _harmonicEnergy *****************
 11494 ;; Defined at:
 11495 ;;		line 1015 in file "Phases.c"
 11496 ;; Parameters:    Size  Location     Type
 11497 ;;  data            3   38[COMRAM] struct .
 11498 ;; Auto vars:     Size  Location     Type
 11499 ;;  harmonic_For   15    0[BANK0 ] const unsigned char [15]
 11500 ;;  harmonic_Rev   14   15[BANK0 ] const unsigned char [14]
 11501 ;;  harmonic_For   12   53[BANK0 ] const unsigned char [12]
 11502 ;;  harmonic_For   12   41[BANK0 ] const unsigned char [12]
 11503 ;;  harmonic_For   12   29[BANK0 ] const unsigned char [12]
 11504 ;;  harmonic_Rev   11   87[BANK0 ] const unsigned char [11]
 11505 ;;  harmonic_Rev   11   76[BANK0 ] const unsigned char [11]
 11506 ;;  harmonic_Rev   11   65[BANK0 ] const unsigned char [11]
 11507 ;;  maxScreens      1   98[BANK0 ] const unsigned char 
 11508 ;; Return value:  Size  Location     Type
 11509 ;;                  3   38[COMRAM] struct .
 11510 ;; Registers used:
 11511 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11512 ;; Tracked objects:
 11513 ;;		On entry : 0/0
 11514 ;;		On exit  : 0/0
 11515 ;;		Unchanged: 0/0
 11516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11517 ;;      Params:         3       0       0       0
 11518 ;;      Locals:         0      99       0       0
 11519 ;;      Temps:          0       0       0       0
 11520 ;;      Totals:         3      99       0       0
 11521 ;;Total ram usage:      102 bytes
 11522 ;; Hardware stack levels used:    1
 11523 ;; Hardware stack levels required when called:    4
 11524 ;; This function calls:
 11525 ;;		_ATM_registers
 11526 ;;		_LCDNokia_clear
 11527 ;;		_LCDNokia_gotoXY
 11528 ;;		_LCDNokia_printValue
 11529 ;;		_LCDNokia_sendString
 11530 ;;		_getButton1
 11531 ;;		_getButton2
 11532 ;;		_getButton3
 11533 ;; This function is called by:
 11534 ;;		_stateEnergy
 11535 ;; This function uses a non-reentrant model
 11536 ;;
 11537                           
 11538                           	psect	text44
 11539  0000'                    __ptext44:
 11540                           	opt stack 0
 11541  0000'                    _harmonicEnergy:
 11542                           	opt stack 25
 11543                           
 11544                           ;Phases.c: 1017: static uint8_t counter = 0;
 11545                           ;Phases.c: 1018: const uint8_t maxScreens = 2;
 11546                           
 11547                           ; BSR set to: 1
 11548                           ;incstack = 0
 11549  0000' 0E02               	movlw	2
 11550  0002' 0100               	movlb	0	; () banked
 11551  0004' 6F00'              	movwf	harmonicEnergy@maxScreens& (0+255),b
 11552                           
 11553                           ; BSR set to: 0
 11554                           ;Phases.c: 1019: const uint8_t harmonic_ForwardP1[] = "PA ForwHE: ";
 11555  0006' 0E00'              	movlw	low harmonicEnergy@F3689
 11556  0008' 6EF6               	movwf	tblptrl,c
 11557  000A'                    	if	1	;There is more than 1 active tblptr byte
 11558  000A' 0E00'              	movlw	high harmonicEnergy@F3689
 11559  000C' 6EF7               	movwf	tblptrh,c
 11560  000E'                    	endif
 11561  000E'                    	if	0	;There are less than 3 active tblptr bytes
 11562  000E'                    	endif
 11563  000E' EE20' F000'        	lfsr	2,harmonicEnergy@harmonic_ForwardP1
 11564  0012' 0E0B               	movlw	11
 11565  0014'                    u3700:
 11566  0014' 0009               	tblrd		*+
 11567  0016' CFF5 FFDE          	movff	tablat,postinc2
 11568  001A' 06E8               	decf	wreg,f,c
 11569  001C' E2FB               	bc	u3700
 11570                           
 11571                           ; BSR set to: 0
 11572                           ;Phases.c: 1020: const uint8_t harmonic_ForwardP2[] = "PB ForwHE: ";
 11573  001E' 0E00'              	movlw	low harmonicEnergy@F3691
 11574  0020' 6EF6               	movwf	tblptrl,c
 11575  0022'                    	if	1	;There is more than 1 active tblptr byte
 11576  0022' 0E00'              	movlw	high harmonicEnergy@F3691
 11577  0024' 6EF7               	movwf	tblptrh,c
 11578  0026'                    	endif
 11579  0026'                    	if	0	;There are less than 3 active tblptr bytes
 11580  0026'                    	endif
 11581  0026' EE20' F000'        	lfsr	2,harmonicEnergy@harmonic_ForwardP2
 11582  002A' 0E0B               	movlw	11
 11583  002C'                    u3710:
 11584  002C' 0009               	tblrd		*+
 11585  002E' CFF5 FFDE          	movff	tablat,postinc2
 11586  0032' 06E8               	decf	wreg,f,c
 11587  0034' E2FB               	bc	u3710
 11588                           
 11589                           ; BSR set to: 0
 11590                           ;Phases.c: 1021: const uint8_t harmonic_ForwardP3[] = "PC ForwHE: ";
 11591  0036' 0E00'              	movlw	low harmonicEnergy@F3693
 11592  0038' 6EF6               	movwf	tblptrl,c
 11593  003A'                    	if	1	;There is more than 1 active tblptr byte
 11594  003A' 0E00'              	movlw	high harmonicEnergy@F3693
 11595  003C' 6EF7               	movwf	tblptrh,c
 11596  003E'                    	endif
 11597  003E'                    	if	0	;There are less than 3 active tblptr bytes
 11598  003E'                    	endif
 11599  003E' EE20' F000'        	lfsr	2,harmonicEnergy@harmonic_ForwardP3
 11600  0042' 0E0B               	movlw	11
 11601  0044'                    u3720:
 11602  0044' 0009               	tblrd		*+
 11603  0046' CFF5 FFDE          	movff	tablat,postinc2
 11604  004A' 06E8               	decf	wreg,f,c
 11605  004C' E2FB               	bc	u3720
 11606                           
 11607                           ; BSR set to: 0
 11608                           ;Phases.c: 1023: const uint8_t harmonic_ReverseP1[] = "PA RevHE: ";
 11609  004E' 0E00'              	movlw	low harmonicEnergy@F3695
 11610  0050' 6EF6               	movwf	tblptrl,c
 11611  0052'                    	if	1	;There is more than 1 active tblptr byte
 11612  0052' 0E00'              	movlw	high harmonicEnergy@F3695
 11613  0054' 6EF7               	movwf	tblptrh,c
 11614  0056'                    	endif
 11615  0056'                    	if	0	;There are less than 3 active tblptr bytes
 11616  0056'                    	endif
 11617  0056' EE20' F000'        	lfsr	2,harmonicEnergy@harmonic_ReverseP1
 11618  005A' 0E0A               	movlw	10
 11619  005C'                    u3730:
 11620  005C' 0009               	tblrd		*+
 11621  005E' CFF5 FFDE          	movff	tablat,postinc2
 11622  0062' 06E8               	decf	wreg,f,c
 11623  0064' E2FB               	bc	u3730
 11624                           
 11625                           ; BSR set to: 0
 11626                           ;Phases.c: 1024: const uint8_t harmonic_ReverseP2[] = "PB RevHE: ";
 11627  0066' 0E00'              	movlw	low harmonicEnergy@F3697
 11628  0068' 6EF6               	movwf	tblptrl,c
 11629  006A'                    	if	1	;There is more than 1 active tblptr byte
 11630  006A' 0E00'              	movlw	high harmonicEnergy@F3697
 11631  006C' 6EF7               	movwf	tblptrh,c
 11632  006E'                    	endif
 11633  006E'                    	if	0	;There are less than 3 active tblptr bytes
 11634  006E'                    	endif
 11635  006E' EE20' F000'        	lfsr	2,harmonicEnergy@harmonic_ReverseP2
 11636  0072' 0E0A               	movlw	10
 11637  0074'                    u3740:
 11638  0074' 0009               	tblrd		*+
 11639  0076' CFF5 FFDE          	movff	tablat,postinc2
 11640  007A' 06E8               	decf	wreg,f,c
 11641  007C' E2FB               	bc	u3740
 11642                           
 11643                           ; BSR set to: 0
 11644                           ;Phases.c: 1025: const uint8_t harmonic_ReverseP3[] = "PC RevHE: ";
 11645  007E' 0E00'              	movlw	low harmonicEnergy@F3699
 11646  0080' 6EF6               	movwf	tblptrl,c
 11647  0082'                    	if	1	;There is more than 1 active tblptr byte
 11648  0082' 0E00'              	movlw	high harmonicEnergy@F3699
 11649  0084' 6EF7               	movwf	tblptrh,c
 11650  0086'                    	endif
 11651  0086'                    	if	0	;There are less than 3 active tblptr bytes
 11652  0086'                    	endif
 11653  0086' EE20' F000'        	lfsr	2,harmonicEnergy@harmonic_ReverseP3
 11654  008A' 0E0A               	movlw	10
 11655  008C'                    u3750:
 11656  008C' 0009               	tblrd		*+
 11657  008E' CFF5 FFDE          	movff	tablat,postinc2
 11658  0092' 06E8               	decf	wreg,f,c
 11659  0094' E2FB               	bc	u3750
 11660                           
 11661                           ; BSR set to: 0
 11662                           ;Phases.c: 1027: const uint8_t harmonic_ForwardTotal[] = "Total ForwHE: ";
 11663  0096' 0E00'              	movlw	low harmonicEnergy@F3701
 11664  0098' 6EF6               	movwf	tblptrl,c
 11665  009A'                    	if	1	;There is more than 1 active tblptr byte
 11666  009A' 0E00'              	movlw	high harmonicEnergy@F3701
 11667  009C' 6EF7               	movwf	tblptrh,c
 11668  009E'                    	endif
 11669  009E'                    	if	0	;There are less than 3 active tblptr bytes
 11670  009E'                    	endif
 11671  009E' EE20' F000'        	lfsr	2,harmonicEnergy@harmonic_ForwardTotal
 11672  00A2' 0E0E               	movlw	14
 11673  00A4'                    u3760:
 11674  00A4' 0009               	tblrd		*+
 11675  00A6' CFF5 FFDE          	movff	tablat,postinc2
 11676  00AA' 06E8               	decf	wreg,f,c
 11677  00AC' E2FB               	bc	u3760
 11678                           
 11679                           ; BSR set to: 0
 11680                           ;Phases.c: 1028: const uint8_t harmonic_ReverseTotal[] = "Total RevHE: ";
 11681  00AE' 0E00'              	movlw	low harmonicEnergy@F3703
 11682  00B0' 6EF6               	movwf	tblptrl,c
 11683  00B2'                    	if	1	;There is more than 1 active tblptr byte
 11684  00B2' 0E00'              	movlw	high harmonicEnergy@F3703
 11685  00B4' 6EF7               	movwf	tblptrh,c
 11686  00B6'                    	endif
 11687  00B6'                    	if	0	;There are less than 3 active tblptr bytes
 11688  00B6'                    	endif
 11689  00B6' EE20' F000'        	lfsr	2,harmonicEnergy@harmonic_ReverseTotal
 11690  00BA' 0E0D               	movlw	13
 11691  00BC'                    u3770:
 11692  00BC' 0009               	tblrd		*+
 11693  00BE' CFF5 FFDE          	movff	tablat,postinc2
 11694  00C2' 06E8               	decf	wreg,f,c
 11695  00C4' E2FB               	bc	u3770
 11696                           
 11697                           ;Phases.c: 1031: static PhaseEnergy_Type currentEnergy5;
 11698                           ;Phases.c: 1034: currentEnergy5.phaseState = HARMONIC_ENERGY;
 11699  00C6' 0E04               	movlw	4
 11700  00C8' 0101               	movlb	1	; () banked
 11701  00CA' 6F00'              	movwf	(harmonicEnergy@currentEnergy5+1)& (0+255),b
 11702                           
 11703                           ; BSR set to: 1
 11704                           ;Phases.c: 1035: currentEnergy5.stateMain = data.stateMain;
 11705  00CC' C028' F0C4'        	movff	harmonicEnergy@data+2,harmonicEnergy@currentEnergy5+2
 11706                           
 11707                           ; BSR set to: 1
 11708                           ;Phases.c: 1037: if(getButton1() == 1)
 11709  00D0' EC00' F000'        	call	_getButton1	;wreg free
 11710  00D4' 06E8               	decf	wreg,f,c
 11711  00D6' A4D8               	btfss	status,2,c
 11712  00D8' D003               	goto	l666
 11713                           
 11714                           ;Phases.c: 1038: {
 11715                           ;Phases.c: 1039: currentEnergy5.phaseState = EXIT_ENERGY;
 11716  00DA' 0E05               	movlw	5
 11717  00DC' 0101               	movlb	1	; () banked
 11718  00DE' 6F00'              	movwf	(harmonicEnergy@currentEnergy5+1)& (0+255),b
 11719  00E0'                    l666:
 11720                           
 11721                           ;Phases.c: 1040: }
 11722                           ;Phases.c: 1041: if(getButton2() == 1)
 11723                           
 11724                           ; BSR set to: 1
 11725  00E0' EC00' F000'        	call	_getButton2	;wreg free
 11726  00E4' 06E8               	decf	wreg,f,c
 11727  00E6' A4D8               	btfss	status,2,c
 11728  00E8' D003               	goto	l667
 11729                           
 11730                           ;Phases.c: 1042: {
 11731                           ;Phases.c: 1043: currentEnergy5.phaseState = EXIT_ENERGY;
 11732  00EA' 0E05               	movlw	5
 11733  00EC' 0101               	movlb	1	; () banked
 11734  00EE' 6F00'              	movwf	(harmonicEnergy@currentEnergy5+1)& (0+255),b
 11735  00F0'                    l667:
 11736                           
 11737                           ;Phases.c: 1044: }
 11738                           ;Phases.c: 1045: if(getButton3() == 1)
 11739                           
 11740                           ; BSR set to: 1
 11741  00F0' EC00' F000'        	call	_getButton3	;wreg free
 11742  00F4' 06E8               	decf	wreg,f,c
 11743  00F6' A4D8               	btfss	status,2,c
 11744  00F8' D0CE               	goto	l670
 11745                           
 11746                           ;Phases.c: 1046: {
 11747                           ;Phases.c: 1047: counter++;
 11748  00FA' 2A03'              	incf	harmonicEnergy@counter,f,c
 11749                           
 11750                           ;Phases.c: 1048: LCDNokia_clear();
 11751  00FC' EC00' F000'        	call	_LCDNokia_clear	;wreg free
 11752                           
 11753                           ;Phases.c: 1049: if(counter > maxScreens)
 11754  0100' 5003'              	movf	harmonicEnergy@counter,w,c
 11755  0102' 0100               	movlb	0	; () banked
 11756  0104' 5D00'              	subwf	harmonicEnergy@maxScreens& (0+255),w,b
 11757  0106' B0D8               	btfsc	status,0,c
 11758  0108' D0C6               	goto	l670
 11759                           
 11760                           ; BSR set to: 0
 11761                           ;Phases.c: 1050: {
 11762                           ;Phases.c: 1051: counter = 0;
 11763  010A' 0E00               	movlw	0
 11764  010C' 6E03'              	movwf	harmonicEnergy@counter,c
 11765                           
 11766                           ; BSR set to: 0
 11767                           ;Phases.c: 1052: }
 11768                           ;Phases.c: 1053: }
 11769                           ;Phases.c: 1054: switch(counter)
 11770                           
 11771                           ; BSR set to: 0
 11772  010E' D0C3               	goto	l670
 11773  0110'                    
 11774                           ;Phases.c: 1057: LCDNokia_gotoXY(0,1);
 11775                           
 11776                           ; BSR set to: 0
 11777  0110' 0E01               	movlw	1
 11778  0112' 6E08'              	movwf	LCDNokia_gotoXY@y,c
 11779  0114' 0E00               	movlw	0
 11780  0116' EC00' F000'        	call	_LCDNokia_gotoXY
 11781                           
 11782                           ;Phases.c: 1058: LCDNokia_sendString(harmonic_ForwardP1);
 11783  011A' 0E00'              	movlw	low harmonicEnergy@harmonic_ForwardP1
 11784  011C' 6E0D'              	movwf	LCDNokia_sendString@characters,c
 11785  011E' 0E00'              	movlw	high harmonicEnergy@harmonic_ForwardP1
 11786  0120' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
 11787  0122' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
 11788                           
 11789                           ;Phases.c: 1059: LCDNokia_printValue(ATM_registers(HARMONIC_ENERGY_TYPE, PHASE_A_FORW_AC
      +                          TIVE_HARM_ENERGY));
 11790  0126' 0E1E               	movlw	30
 11791  0128' 6E12'              	movwf	ATM_registers@reg,c
 11792  012A' 0E04               	movlw	4
 11793  012C' EC00' F000'        	call	_ATM_registers
 11794  0130' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
 11795  0134' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
 11796  0138' 6A19'              	clrf	LCDNokia_printValue@value+2,c
 11797  013A' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
 11798  013C' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
 11799                           
 11800                           ;Phases.c: 1060: LCDNokia_gotoXY(0,2);
 11801  0140' 0E02               	movlw	2
 11802  0142' 6E08'              	movwf	LCDNokia_gotoXY@y,c
 11803  0144' 0E00               	movlw	0
 11804  0146' EC00' F000'        	call	_LCDNokia_gotoXY
 11805                           
 11806                           ;Phases.c: 1061: LCDNokia_sendString(harmonic_ForwardP2);
 11807  014A' 0E00'              	movlw	low harmonicEnergy@harmonic_ForwardP2
 11808  014C' 6E0D'              	movwf	LCDNokia_sendString@characters,c
 11809  014E' 0E00'              	movlw	high harmonicEnergy@harmonic_ForwardP2
 11810  0150' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
 11811  0152' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
 11812                           
 11813                           ;Phases.c: 1062: LCDNokia_printValue(ATM_registers(HARMONIC_ENERGY_TYPE, PHASE_B_FORW_AC
      +                          TIVE_HARM_ENERGY));
 11814  0156' 0E1F               	movlw	31
 11815  0158' 6E12'              	movwf	ATM_registers@reg,c
 11816  015A' 0E04               	movlw	4
 11817  015C' EC00' F000'        	call	_ATM_registers
 11818  0160' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
 11819  0164' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
 11820  0168' 6A19'              	clrf	LCDNokia_printValue@value+2,c
 11821  016A' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
 11822  016C' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
 11823                           
 11824                           ;Phases.c: 1063: LCDNokia_gotoXY(0,3);
 11825  0170' 0E03               	movlw	3
 11826  0172' 6E08'              	movwf	LCDNokia_gotoXY@y,c
 11827  0174' 0E00               	movlw	0
 11828  0176' EC00' F000'        	call	_LCDNokia_gotoXY
 11829                           
 11830                           ;Phases.c: 1064: LCDNokia_sendString(harmonic_ForwardP3);
 11831  017A' 0E00'              	movlw	low harmonicEnergy@harmonic_ForwardP3
 11832  017C' 6E0D'              	movwf	LCDNokia_sendString@characters,c
 11833  017E' 0E00'              	movlw	high harmonicEnergy@harmonic_ForwardP3
 11834  0180' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
 11835  0182' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
 11836                           
 11837                           ;Phases.c: 1065: LCDNokia_printValue(ATM_registers(HARMONIC_ENERGY_TYPE, PHASE_C_FORW_AC
      +                          TIVE_HARM_ENERGY));
 11838  0186' 0E20               	movlw	32
 11839  0188' 6E12'              	movwf	ATM_registers@reg,c
 11840  018A' 0E04               	movlw	4
 11841  018C' EC00' F000'        	call	_ATM_registers
 11842  0190' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
 11843  0194' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
 11844  0198' 6A19'              	clrf	LCDNokia_printValue@value+2,c
 11845  019A' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
 11846  019C' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
 11847                           
 11848                           ;Phases.c: 1066: break;
 11849  01A0' D084               	goto	l672
 11850  01A2'                    
 11851                           ;Phases.c: 1068: LCDNokia_gotoXY(0,1);
 11852  01A2' 0E01               	movlw	1
 11853  01A4' 6E08'              	movwf	LCDNokia_gotoXY@y,c
 11854  01A6' 0E00               	movlw	0
 11855  01A8' EC00' F000'        	call	_LCDNokia_gotoXY
 11856                           
 11857                           ;Phases.c: 1069: LCDNokia_sendString(harmonic_ReverseP1);
 11858  01AC' 0E00'              	movlw	low harmonicEnergy@harmonic_ReverseP1
 11859  01AE' 6E0D'              	movwf	LCDNokia_sendString@characters,c
 11860  01B0' 0E00'              	movlw	high harmonicEnergy@harmonic_ReverseP1
 11861  01B2' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
 11862  01B4' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
 11863                           
 11864                           ;Phases.c: 1070: LCDNokia_printValue(ATM_registers(HARMONIC_ENERGY_TYPE, PHASE_A_REV_ACT
      +                          IVE_HARM_ENERGY));
 11865  01B8' 0E22               	movlw	34
 11866  01BA' 6E12'              	movwf	ATM_registers@reg,c
 11867  01BC' 0E04               	movlw	4
 11868  01BE' EC00' F000'        	call	_ATM_registers
 11869  01C2' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
 11870  01C6' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
 11871  01CA' 6A19'              	clrf	LCDNokia_printValue@value+2,c
 11872  01CC' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
 11873  01CE' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
 11874                           
 11875                           ;Phases.c: 1071: LCDNokia_gotoXY(0,2);
 11876  01D2' 0E02               	movlw	2
 11877  01D4' 6E08'              	movwf	LCDNokia_gotoXY@y,c
 11878  01D6' 0E00               	movlw	0
 11879  01D8' EC00' F000'        	call	_LCDNokia_gotoXY
 11880                           
 11881                           ;Phases.c: 1072: LCDNokia_sendString(harmonic_ReverseP2);
 11882  01DC' 0E00'              	movlw	low harmonicEnergy@harmonic_ReverseP2
 11883  01DE' 6E0D'              	movwf	LCDNokia_sendString@characters,c
 11884  01E0' 0E00'              	movlw	high harmonicEnergy@harmonic_ReverseP2
 11885  01E2' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
 11886  01E4' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
 11887                           
 11888                           ;Phases.c: 1073: LCDNokia_printValue(ATM_registers(HARMONIC_ENERGY_TYPE, PHASE_B_REV_ACT
      +                          IVE_HARM_ENERGY));
 11889  01E8' 0E23               	movlw	35
 11890  01EA' 6E12'              	movwf	ATM_registers@reg,c
 11891  01EC' 0E04               	movlw	4
 11892  01EE' EC00' F000'        	call	_ATM_registers
 11893  01F2' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
 11894  01F6' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
 11895  01FA' 6A19'              	clrf	LCDNokia_printValue@value+2,c
 11896  01FC' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
 11897  01FE' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
 11898                           
 11899                           ;Phases.c: 1074: LCDNokia_gotoXY(0,3);
 11900  0202' 0E03               	movlw	3
 11901  0204' 6E08'              	movwf	LCDNokia_gotoXY@y,c
 11902  0206' 0E00               	movlw	0
 11903  0208' EC00' F000'        	call	_LCDNokia_gotoXY
 11904                           
 11905                           ;Phases.c: 1075: LCDNokia_sendString(harmonic_ReverseP3);
 11906  020C' 0E00'              	movlw	low harmonicEnergy@harmonic_ReverseP3
 11907  020E' 6E0D'              	movwf	LCDNokia_sendString@characters,c
 11908  0210' 0E00'              	movlw	high harmonicEnergy@harmonic_ReverseP3
 11909  0212' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
 11910  0214' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
 11911                           
 11912                           ;Phases.c: 1076: LCDNokia_printValue(ATM_registers(HARMONIC_ENERGY_TYPE, PHASE_C_REV_ACT
      +                          IVE_HARM_ENERGY));
 11913  0218' 0E24               	movlw	36
 11914  021A' 6E12'              	movwf	ATM_registers@reg,c
 11915  021C' 0E04               	movlw	4
 11916  021E' EC00' F000'        	call	_ATM_registers
 11917  0222' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
 11918  0226' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
 11919  022A' 6A19'              	clrf	LCDNokia_printValue@value+2,c
 11920  022C' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
 11921  022E' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
 11922                           
 11923                           ;Phases.c: 1077: break;
 11924  0232' D03B               	goto	l672
 11925  0234'                    
 11926                           ;Phases.c: 1079: LCDNokia_gotoXY(0,1);
 11927  0234' 0E01               	movlw	1
 11928  0236' 6E08'              	movwf	LCDNokia_gotoXY@y,c
 11929  0238' 0E00               	movlw	0
 11930  023A' EC00' F000'        	call	_LCDNokia_gotoXY
 11931                           
 11932                           ;Phases.c: 1080: LCDNokia_sendString(harmonic_ForwardTotal);
 11933  023E' 0E00'              	movlw	low harmonicEnergy@harmonic_ForwardTotal
 11934  0240' 6E0D'              	movwf	LCDNokia_sendString@characters,c
 11935  0242' 0E00'              	movlw	high harmonicEnergy@harmonic_ForwardTotal
 11936  0244' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
 11937  0246' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
 11938                           
 11939                           ;Phases.c: 1081: LCDNokia_printValue(ATM_registers(HARMONIC_ENERGY_TYPE, TOTAL_FORW_ACTI
      +                          VE_HARM_ENERGY));
 11940  024A' 0E1D               	movlw	29
 11941  024C' 6E12'              	movwf	ATM_registers@reg,c
 11942  024E' 0E04               	movlw	4
 11943  0250' EC00' F000'        	call	_ATM_registers
 11944  0254' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
 11945  0258' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
 11946  025C' 6A19'              	clrf	LCDNokia_printValue@value+2,c
 11947  025E' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
 11948  0260' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
 11949                           
 11950                           ;Phases.c: 1082: LCDNokia_gotoXY(0,2);
 11951  0264' 0E02               	movlw	2
 11952  0266' 6E08'              	movwf	LCDNokia_gotoXY@y,c
 11953  0268' 0E00               	movlw	0
 11954  026A' EC00' F000'        	call	_LCDNokia_gotoXY
 11955                           
 11956                           ;Phases.c: 1083: LCDNokia_sendString(harmonic_ReverseTotal);
 11957  026E' 0E00'              	movlw	low harmonicEnergy@harmonic_ReverseTotal
 11958  0270' 6E0D'              	movwf	LCDNokia_sendString@characters,c
 11959  0272' 0E00'              	movlw	high harmonicEnergy@harmonic_ReverseTotal
 11960  0274' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
 11961  0276' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
 11962                           
 11963                           ;Phases.c: 1084: LCDNokia_printValue(ATM_registers(HARMONIC_ENERGY_TYPE, TOTAL_REV_ACTIV
      +                          E_HARM_ENERGY));
 11964  027A' 0E21               	movlw	33
 11965  027C' 6E12'              	movwf	ATM_registers@reg,c
 11966  027E' 0E04               	movlw	4
 11967  0280' EC00' F000'        	call	_ATM_registers
 11968  0284' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
 11969  0288' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
 11970  028C' 6A19'              	clrf	LCDNokia_printValue@value+2,c
 11971  028E' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
 11972  0290' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
 11973                           
 11974                           ;Phases.c: 1088: }
 11975                           
 11976                           ;Phases.c: 1087: break;
 11977                           
 11978                           ;Phases.c: 1086: default:
 11979                           
 11980                           ;Phases.c: 1085: break;
 11981  0294' D00A               	goto	l672
 11982  0296'                    l670:
 11983  0296' 5003'              	movf	harmonicEnergy@counter,w,c
 11984                           
 11985                           ; Switch size 1, requested type "space"
 11986                           ; Number of cases is 3, Range of values is 0 to 2
 11987                           ; switch strategies available:
 11988                           ; Name         Instructions Cycles
 11989                           ; simple_byte           10     6 (average)
 11990                           ;	Chosen strategy is simple_byte
 11991  0298' 0A00               	xorlw	0	; case 0
 11992  029A' B4D8               	btfsc	status,2,c
 11993  029C' D739               	goto	l671
 11994  029E' 0A01               	xorlw	1	; case 1
 11995  02A0' B4D8               	btfsc	status,2,c
 11996  02A2' D77F               	goto	l673
 11997  02A4' 0A03               	xorlw	3	; case 2
 11998  02A6' B4D8               	btfsc	status,2,c
 11999  02A8' D7C5               	goto	l674
 12000  02AA'                    l672:
 12001                           
 12002                           ;Phases.c: 1089: return (currentEnergy5);
 12003  02AA' C0C2' F026'        	movff	harmonicEnergy@currentEnergy5,?_harmonicEnergy
 12004  02AE' C0C3' F027'        	movff	harmonicEnergy@currentEnergy5+1,?_harmonicEnergy+1
 12005  02B2' C0C4' F028'        	movff	harmonicEnergy@currentEnergy5+2,?_harmonicEnergy+2
 12006  02B6' 0012               	return		;funcret
 12007  02B8'                    __end_of_harmonicEnergy:
 12008                           	opt stack 0
 12009                           tosu	equ	0xFFF
 12010                           tosh	equ	0xFFE
 12011                           tosl	equ	0xFFD
 12012                           pclath	equ	0xFFA
 12013                           tblptru	equ	0xFF8
 12014                           tblptrh	equ	0xFF7
 12015                           tblptrl	equ	0xFF6
 12016                           tablat	equ	0xFF5
 12017                           prodh	equ	0xFF4
 12018                           prodl	equ	0xFF3
 12019                           postinc0	equ	0xFEE
 12020                           wreg	equ	0xFE8
 12021                           postinc2	equ	0xFDE
 12022                           status	equ	0xFD8
 12023                           
 12024 ;; *************** function _fundamentalEnergy *****************
 12025 ;; Defined at:
 12026 ;;		line 936 in file "Phases.c"
 12027 ;; Parameters:    Size  Location     Type
 12028 ;;  data            3   38[COMRAM] struct .
 12029 ;; Auto vars:     Size  Location     Type
 12030 ;;  fund_Forward   19    0[BANK0 ] const unsigned char [19]
 12031 ;;  fund_Reverse   18   19[BANK0 ] const unsigned char [18]
 12032 ;;  fund_Forward   16   69[BANK0 ] const unsigned char [16]
 12033 ;;  fund_Forward   16   53[BANK0 ] const unsigned char [16]
 12034 ;;  fund_Forward   16   37[BANK0 ] const unsigned char [16]
 12035 ;;  fund_Reverse   15  115[BANK0 ] const unsigned char [15]
 12036 ;;  fund_Reverse   15  100[BANK0 ] const unsigned char [15]
 12037 ;;  fund_Reverse   15   85[BANK0 ] const unsigned char [15]
 12038 ;;  maxScreens      1  130[BANK0 ] const unsigned char 
 12039 ;; Return value:  Size  Location     Type
 12040 ;;                  3   38[COMRAM] struct .
 12041 ;; Registers used:
 12042 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12043 ;; Tracked objects:
 12044 ;;		On entry : 0/0
 12045 ;;		On exit  : 0/0
 12046 ;;		Unchanged: 0/0
 12047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12048 ;;      Params:         3       0       0       0
 12049 ;;      Locals:         0     131       0       0
 12050 ;;      Temps:          0       0       0       0
 12051 ;;      Totals:         3     131       0       0
 12052 ;;Total ram usage:      134 bytes
 12053 ;; Hardware stack levels used:    1
 12054 ;; Hardware stack levels required when called:    4
 12055 ;; This function calls:
 12056 ;;		_ATM_registers
 12057 ;;		_LCDNokia_clear
 12058 ;;		_LCDNokia_gotoXY
 12059 ;;		_LCDNokia_printValue
 12060 ;;		_LCDNokia_sendString
 12061 ;;		_getButton1
 12062 ;;		_getButton2
 12063 ;;		_getButton3
 12064 ;; This function is called by:
 12065 ;;		_stateEnergy
 12066 ;; This function uses a non-reentrant model
 12067 ;;
 12068                           
 12069                           	psect	text45
 12070  0000'                    __ptext45:
 12071                           	opt stack 0
 12072  0000'                    _fundamentalEnergy:
 12073                           	opt stack 25
 12074                           
 12075                           ;Phases.c: 938: static uint8_t counter = 0;
 12076                           ;Phases.c: 939: const uint8_t maxScreens = 2;
 12077                           
 12078                           ;incstack = 0
 12079  0000' 0E02               	movlw	2
 12080  0002' 0100               	movlb	0	; () banked
 12081  0004' 6F00'              	movwf	fundamentalEnergy@maxScreens& (0+255),b
 12082                           
 12083                           ; BSR set to: 0
 12084                           ;Phases.c: 940: const uint8_t fund_ForwardP1[] = "PA ForwFund E: ";
 12085  0006' 0E00'              	movlw	low fundamentalEnergy@F3669
 12086  0008' 6EF6               	movwf	tblptrl,c
 12087  000A'                    	if	1	;There is more than 1 active tblptr byte
 12088  000A' 0E00'              	movlw	high fundamentalEnergy@F3669
 12089  000C' 6EF7               	movwf	tblptrh,c
 12090  000E'                    	endif
 12091  000E'                    	if	0	;There are less than 3 active tblptr bytes
 12092  000E'                    	endif
 12093  000E' EE20' F000'        	lfsr	2,fundamentalEnergy@fund_ForwardP1
 12094  0012' 0E0F               	movlw	15
 12095  0014'                    u3580:
 12096  0014' 0009               	tblrd		*+
 12097  0016' CFF5 FFDE          	movff	tablat,postinc2
 12098  001A' 06E8               	decf	wreg,f,c
 12099  001C' E2FB               	bc	u3580
 12100                           
 12101                           ; BSR set to: 0
 12102                           ;Phases.c: 941: const uint8_t fund_ForwardP2[] = "PB ForwFund E: ";
 12103  001E' 0E00'              	movlw	low fundamentalEnergy@F3671
 12104  0020' 6EF6               	movwf	tblptrl,c
 12105  0022'                    	if	1	;There is more than 1 active tblptr byte
 12106  0022' 0E00'              	movlw	high fundamentalEnergy@F3671
 12107  0024' 6EF7               	movwf	tblptrh,c
 12108  0026'                    	endif
 12109  0026'                    	if	0	;There are less than 3 active tblptr bytes
 12110  0026'                    	endif
 12111  0026' EE20' F000'        	lfsr	2,fundamentalEnergy@fund_ForwardP2
 12112  002A' 0E0F               	movlw	15
 12113  002C'                    u3590:
 12114  002C' 0009               	tblrd		*+
 12115  002E' CFF5 FFDE          	movff	tablat,postinc2
 12116  0032' 06E8               	decf	wreg,f,c
 12117  0034' E2FB               	bc	u3590
 12118                           
 12119                           ; BSR set to: 0
 12120                           ;Phases.c: 942: const uint8_t fund_ForwardP3[] = "PC ForwFund E: ";
 12121  0036' 0E00'              	movlw	low fundamentalEnergy@F3673
 12122  0038' 6EF6               	movwf	tblptrl,c
 12123  003A'                    	if	1	;There is more than 1 active tblptr byte
 12124  003A' 0E00'              	movlw	high fundamentalEnergy@F3673
 12125  003C' 6EF7               	movwf	tblptrh,c
 12126  003E'                    	endif
 12127  003E'                    	if	0	;There are less than 3 active tblptr bytes
 12128  003E'                    	endif
 12129  003E' EE20' F000'        	lfsr	2,fundamentalEnergy@fund_ForwardP3
 12130  0042' 0E0F               	movlw	15
 12131  0044'                    u3600:
 12132  0044' 0009               	tblrd		*+
 12133  0046' CFF5 FFDE          	movff	tablat,postinc2
 12134  004A' 06E8               	decf	wreg,f,c
 12135  004C' E2FB               	bc	u3600
 12136                           
 12137                           ; BSR set to: 0
 12138                           ;Phases.c: 944: const uint8_t fund_ReverseP1[] = "PA RevFund E: ";
 12139  004E' 0E00'              	movlw	low fundamentalEnergy@F3675
 12140  0050' 6EF6               	movwf	tblptrl,c
 12141  0052'                    	if	1	;There is more than 1 active tblptr byte
 12142  0052' 0E00'              	movlw	high fundamentalEnergy@F3675
 12143  0054' 6EF7               	movwf	tblptrh,c
 12144  0056'                    	endif
 12145  0056'                    	if	0	;There are less than 3 active tblptr bytes
 12146  0056'                    	endif
 12147  0056' EE20' F000'        	lfsr	2,fundamentalEnergy@fund_ReverseP1
 12148  005A' 0E0E               	movlw	14
 12149  005C'                    u3610:
 12150  005C' 0009               	tblrd		*+
 12151  005E' CFF5 FFDE          	movff	tablat,postinc2
 12152  0062' 06E8               	decf	wreg,f,c
 12153  0064' E2FB               	bc	u3610
 12154                           
 12155                           ; BSR set to: 0
 12156                           ;Phases.c: 945: const uint8_t fund_ReverseP2[] = "PB RevFund E: ";
 12157  0066' 0E00'              	movlw	low fundamentalEnergy@F3677
 12158  0068' 6EF6               	movwf	tblptrl,c
 12159  006A'                    	if	1	;There is more than 1 active tblptr byte
 12160  006A' 0E00'              	movlw	high fundamentalEnergy@F3677
 12161  006C' 6EF7               	movwf	tblptrh,c
 12162  006E'                    	endif
 12163  006E'                    	if	0	;There are less than 3 active tblptr bytes
 12164  006E'                    	endif
 12165  006E' EE20' F000'        	lfsr	2,fundamentalEnergy@fund_ReverseP2
 12166  0072' 0E0E               	movlw	14
 12167  0074'                    u3620:
 12168  0074' 0009               	tblrd		*+
 12169  0076' CFF5 FFDE          	movff	tablat,postinc2
 12170  007A' 06E8               	decf	wreg,f,c
 12171  007C' E2FB               	bc	u3620
 12172                           
 12173                           ; BSR set to: 0
 12174                           ;Phases.c: 946: const uint8_t fund_ReverseP3[] = "PC RevFund E: ";
 12175  007E' 0E00'              	movlw	low fundamentalEnergy@F3679
 12176  0080' 6EF6               	movwf	tblptrl,c
 12177  0082'                    	if	1	;There is more than 1 active tblptr byte
 12178  0082' 0E00'              	movlw	high fundamentalEnergy@F3679
 12179  0084' 6EF7               	movwf	tblptrh,c
 12180  0086'                    	endif
 12181  0086'                    	if	0	;There are less than 3 active tblptr bytes
 12182  0086'                    	endif
 12183  0086' EE20' F000'        	lfsr	2,fundamentalEnergy@fund_ReverseP3
 12184  008A' 0E0E               	movlw	14
 12185  008C'                    u3630:
 12186  008C' 0009               	tblrd		*+
 12187  008E' CFF5 FFDE          	movff	tablat,postinc2
 12188  0092' 06E8               	decf	wreg,f,c
 12189  0094' E2FB               	bc	u3630
 12190                           
 12191                           ; BSR set to: 0
 12192                           ;Phases.c: 948: const uint8_t fund_ForwardTotal[] = "Total ForwFund E: ";
 12193  0096' 0E00'              	movlw	low fundamentalEnergy@F3681
 12194  0098' 6EF6               	movwf	tblptrl,c
 12195  009A'                    	if	1	;There is more than 1 active tblptr byte
 12196  009A' 0E00'              	movlw	high fundamentalEnergy@F3681
 12197  009C' 6EF7               	movwf	tblptrh,c
 12198  009E'                    	endif
 12199  009E'                    	if	0	;There are less than 3 active tblptr bytes
 12200  009E'                    	endif
 12201  009E' EE20' F000'        	lfsr	2,fundamentalEnergy@fund_ForwardTotal
 12202  00A2' 0E12               	movlw	18
 12203  00A4'                    u3640:
 12204  00A4' 0009               	tblrd		*+
 12205  00A6' CFF5 FFDE          	movff	tablat,postinc2
 12206  00AA' 06E8               	decf	wreg,f,c
 12207  00AC' E2FB               	bc	u3640
 12208                           
 12209                           ; BSR set to: 0
 12210                           ;Phases.c: 949: const uint8_t fund_ReverseTotal[] = "Total RevFund E: ";
 12211  00AE' 0E00'              	movlw	low fundamentalEnergy@F3683
 12212  00B0' 6EF6               	movwf	tblptrl,c
 12213  00B2'                    	if	1	;There is more than 1 active tblptr byte
 12214  00B2' 0E00'              	movlw	high fundamentalEnergy@F3683
 12215  00B4' 6EF7               	movwf	tblptrh,c
 12216  00B6'                    	endif
 12217  00B6'                    	if	0	;There are less than 3 active tblptr bytes
 12218  00B6'                    	endif
 12219  00B6' EE20' F000'        	lfsr	2,fundamentalEnergy@fund_ReverseTotal
 12220  00BA' 0E11               	movlw	17
 12221  00BC'                    u3650:
 12222  00BC' 0009               	tblrd		*+
 12223  00BE' CFF5 FFDE          	movff	tablat,postinc2
 12224  00C2' 06E8               	decf	wreg,f,c
 12225  00C4' E2FB               	bc	u3650
 12226                           
 12227                           ;Phases.c: 952: static PhaseEnergy_Type currentEnergy4;
 12228                           ;Phases.c: 955: currentEnergy4.phaseState = FUNDAMENTAL_ENERGY;
 12229  00C6' 0E03               	movlw	3
 12230  00C8' 0101               	movlb	1	; () banked
 12231  00CA' 6F00'              	movwf	(fundamentalEnergy@currentEnergy4+1)& (0+255),b
 12232                           
 12233                           ; BSR set to: 1
 12234                           ;Phases.c: 956: currentEnergy4.stateMain = data.stateMain;
 12235  00CC' C028' F0C7'        	movff	fundamentalEnergy@data+2,fundamentalEnergy@currentEnergy4+2
 12236                           
 12237                           ; BSR set to: 1
 12238                           ;Phases.c: 958: if(getButton1() == 1)
 12239  00D0' EC00' F000'        	call	_getButton1	;wreg free
 12240  00D4' 06E8               	decf	wreg,f,c
 12241  00D6' A4D8               	btfss	status,2,c
 12242  00D8' D003               	goto	l633
 12243                           
 12244                           ;Phases.c: 959: {
 12245                           ;Phases.c: 960: currentEnergy4.phaseState = EXIT_ENERGY;
 12246  00DA' 0E05               	movlw	5
 12247  00DC' 0101               	movlb	1	; () banked
 12248  00DE' 6F00'              	movwf	(fundamentalEnergy@currentEnergy4+1)& (0+255),b
 12249  00E0'                    l633:
 12250                           
 12251                           ;Phases.c: 961: }
 12252                           ;Phases.c: 962: if(getButton2() == 1)
 12253                           
 12254                           ; BSR set to: 1
 12255  00E0' EC00' F000'        	call	_getButton2	;wreg free
 12256  00E4' 06E8               	decf	wreg,f,c
 12257  00E6' A4D8               	btfss	status,2,c
 12258  00E8' D005               	goto	l634
 12259                           
 12260                           ;Phases.c: 963: {
 12261                           ;Phases.c: 964: currentEnergy4.phaseState = HARMONIC_ENERGY;
 12262  00EA' 0E04               	movlw	4
 12263  00EC' 0101               	movlb	1	; () banked
 12264  00EE' 6F00'              	movwf	(fundamentalEnergy@currentEnergy4+1)& (0+255),b
 12265                           
 12266                           ; BSR set to: 1
 12267                           ;Phases.c: 965: LCDNokia_clear();
 12268  00F0' EC00' F000'        	call	_LCDNokia_clear	;wreg free
 12269  00F4'                    l634:
 12270                           
 12271                           ;Phases.c: 966: }
 12272                           ;Phases.c: 967: if(getButton3() == 1)
 12273  00F4' EC00' F000'        	call	_getButton3	;wreg free
 12274  00F8' 06E8               	decf	wreg,f,c
 12275  00FA' A4D8               	btfss	status,2,c
 12276  00FC' D0CE               	goto	l637
 12277                           
 12278                           ;Phases.c: 968: {
 12279                           ;Phases.c: 969: counter++;
 12280  00FE' 2A04'              	incf	fundamentalEnergy@counter,f,c
 12281                           
 12282                           ;Phases.c: 970: LCDNokia_clear();
 12283  0100' EC00' F000'        	call	_LCDNokia_clear	;wreg free
 12284                           
 12285                           ;Phases.c: 971: if(counter > maxScreens)
 12286  0104' 5004'              	movf	fundamentalEnergy@counter,w,c
 12287  0106' 0100               	movlb	0	; () banked
 12288  0108' 5D00'              	subwf	fundamentalEnergy@maxScreens& (0+255),w,b
 12289  010A' B0D8               	btfsc	status,0,c
 12290  010C' D0C6               	goto	l637
 12291                           
 12292                           ; BSR set to: 0
 12293                           ;Phases.c: 972: {
 12294                           ;Phases.c: 973: counter = 0;
 12295  010E' 0E00               	movlw	0
 12296  0110' 6E04'              	movwf	fundamentalEnergy@counter,c
 12297                           
 12298                           ; BSR set to: 0
 12299                           ;Phases.c: 974: }
 12300                           ;Phases.c: 975: }
 12301                           ;Phases.c: 976: switch(counter)
 12302                           
 12303                           ; BSR set to: 0
 12304  0112' D0C3               	goto	l637
 12305  0114'                    
 12306                           ;Phases.c: 979: LCDNokia_gotoXY(0,1);
 12307                           
 12308                           ; BSR set to: 0
 12309  0114' 0E01               	movlw	1
 12310  0116' 6E08'              	movwf	LCDNokia_gotoXY@y,c
 12311  0118' 0E00               	movlw	0
 12312  011A' EC00' F000'        	call	_LCDNokia_gotoXY
 12313                           
 12314                           ;Phases.c: 980: LCDNokia_sendString(fund_ForwardP1);
 12315  011E' 0E00'              	movlw	low fundamentalEnergy@fund_ForwardP1
 12316  0120' 6E0D'              	movwf	LCDNokia_sendString@characters,c
 12317  0122' 0E00'              	movlw	high fundamentalEnergy@fund_ForwardP1
 12318  0124' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
 12319  0126' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
 12320                           
 12321                           ;Phases.c: 981: LCDNokia_printValue(ATM_registers(FUNDAMENTAL_ENERGY_TYPE, PHASE_A_FORW_
      +                          ACTIVE_FUND_ENERGY));
 12322  012A' 0E16               	movlw	22
 12323  012C' 6E12'              	movwf	ATM_registers@reg,c
 12324  012E' 0E03               	movlw	3
 12325  0130' EC00' F000'        	call	_ATM_registers
 12326  0134' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
 12327  0138' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
 12328  013C' 6A19'              	clrf	LCDNokia_printValue@value+2,c
 12329  013E' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
 12330  0140' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
 12331                           
 12332                           ;Phases.c: 982: LCDNokia_gotoXY(0,2);
 12333  0144' 0E02               	movlw	2
 12334  0146' 6E08'              	movwf	LCDNokia_gotoXY@y,c
 12335  0148' 0E00               	movlw	0
 12336  014A' EC00' F000'        	call	_LCDNokia_gotoXY
 12337                           
 12338                           ;Phases.c: 983: LCDNokia_sendString(fund_ForwardP2);
 12339  014E' 0E00'              	movlw	low fundamentalEnergy@fund_ForwardP2
 12340  0150' 6E0D'              	movwf	LCDNokia_sendString@characters,c
 12341  0152' 0E00'              	movlw	high fundamentalEnergy@fund_ForwardP2
 12342  0154' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
 12343  0156' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
 12344                           
 12345                           ;Phases.c: 984: LCDNokia_printValue(ATM_registers(FUNDAMENTAL_ENERGY_TYPE, PHASE_B_FORW_
      +                          ACTIVE_FUND_ENERGY));
 12346  015A' 0E17               	movlw	23
 12347  015C' 6E12'              	movwf	ATM_registers@reg,c
 12348  015E' 0E03               	movlw	3
 12349  0160' EC00' F000'        	call	_ATM_registers
 12350  0164' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
 12351  0168' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
 12352  016C' 6A19'              	clrf	LCDNokia_printValue@value+2,c
 12353  016E' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
 12354  0170' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
 12355                           
 12356                           ;Phases.c: 985: LCDNokia_gotoXY(0,3);
 12357  0174' 0E03               	movlw	3
 12358  0176' 6E08'              	movwf	LCDNokia_gotoXY@y,c
 12359  0178' 0E00               	movlw	0
 12360  017A' EC00' F000'        	call	_LCDNokia_gotoXY
 12361                           
 12362                           ;Phases.c: 986: LCDNokia_sendString(fund_ForwardP3);
 12363  017E' 0E00'              	movlw	low fundamentalEnergy@fund_ForwardP3
 12364  0180' 6E0D'              	movwf	LCDNokia_sendString@characters,c
 12365  0182' 0E00'              	movlw	high fundamentalEnergy@fund_ForwardP3
 12366  0184' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
 12367  0186' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
 12368                           
 12369                           ;Phases.c: 987: LCDNokia_printValue(ATM_registers(FUNDAMENTAL_ENERGY_TYPE, PHASE_C_FORW_
      +                          ACTIVE_FUND_ENERGY));
 12370  018A' 0E18               	movlw	24
 12371  018C' 6E12'              	movwf	ATM_registers@reg,c
 12372  018E' 0E03               	movlw	3
 12373  0190' EC00' F000'        	call	_ATM_registers
 12374  0194' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
 12375  0198' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
 12376  019C' 6A19'              	clrf	LCDNokia_printValue@value+2,c
 12377  019E' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
 12378  01A0' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
 12379                           
 12380                           ;Phases.c: 988: break;
 12381  01A4' D084               	goto	l639
 12382  01A6'                    
 12383                           ;Phases.c: 990: LCDNokia_gotoXY(0,1);
 12384  01A6' 0E01               	movlw	1
 12385  01A8' 6E08'              	movwf	LCDNokia_gotoXY@y,c
 12386  01AA' 0E00               	movlw	0
 12387  01AC' EC00' F000'        	call	_LCDNokia_gotoXY
 12388                           
 12389                           ;Phases.c: 991: LCDNokia_sendString(fund_ReverseP1);
 12390  01B0' 0E00'              	movlw	low fundamentalEnergy@fund_ReverseP1
 12391  01B2' 6E0D'              	movwf	LCDNokia_sendString@characters,c
 12392  01B4' 0E00'              	movlw	high fundamentalEnergy@fund_ReverseP1
 12393  01B6' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
 12394  01B8' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
 12395                           
 12396                           ;Phases.c: 992: LCDNokia_printValue(ATM_registers(FUNDAMENTAL_ENERGY_TYPE, PHASE_A_REV_A
      +                          CTIVE_FUND_ENERGY));
 12397  01BC' 0E1A               	movlw	26
 12398  01BE' 6E12'              	movwf	ATM_registers@reg,c
 12399  01C0' 0E03               	movlw	3
 12400  01C2' EC00' F000'        	call	_ATM_registers
 12401  01C6' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
 12402  01CA' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
 12403  01CE' 6A19'              	clrf	LCDNokia_printValue@value+2,c
 12404  01D0' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
 12405  01D2' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
 12406                           
 12407                           ;Phases.c: 993: LCDNokia_gotoXY(0,2);
 12408  01D6' 0E02               	movlw	2
 12409  01D8' 6E08'              	movwf	LCDNokia_gotoXY@y,c
 12410  01DA' 0E00               	movlw	0
 12411  01DC' EC00' F000'        	call	_LCDNokia_gotoXY
 12412                           
 12413                           ;Phases.c: 994: LCDNokia_sendString(fund_ReverseP2);
 12414  01E0' 0E00'              	movlw	low fundamentalEnergy@fund_ReverseP2
 12415  01E2' 6E0D'              	movwf	LCDNokia_sendString@characters,c
 12416  01E4' 0E00'              	movlw	high fundamentalEnergy@fund_ReverseP2
 12417  01E6' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
 12418  01E8' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
 12419                           
 12420                           ;Phases.c: 995: LCDNokia_printValue(ATM_registers(FUNDAMENTAL_ENERGY_TYPE, PHASE_B_REV_A
      +                          CTIVE_FUND_ENERGY));
 12421  01EC' 0E1B               	movlw	27
 12422  01EE' 6E12'              	movwf	ATM_registers@reg,c
 12423  01F0' 0E03               	movlw	3
 12424  01F2' EC00' F000'        	call	_ATM_registers
 12425  01F6' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
 12426  01FA' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
 12427  01FE' 6A19'              	clrf	LCDNokia_printValue@value+2,c
 12428  0200' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
 12429  0202' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
 12430                           
 12431                           ;Phases.c: 996: LCDNokia_gotoXY(0,3);
 12432  0206' 0E03               	movlw	3
 12433  0208' 6E08'              	movwf	LCDNokia_gotoXY@y,c
 12434  020A' 0E00               	movlw	0
 12435  020C' EC00' F000'        	call	_LCDNokia_gotoXY
 12436                           
 12437                           ;Phases.c: 997: LCDNokia_sendString(fund_ReverseP3);
 12438  0210' 0E00'              	movlw	low fundamentalEnergy@fund_ReverseP3
 12439  0212' 6E0D'              	movwf	LCDNokia_sendString@characters,c
 12440  0214' 0E00'              	movlw	high fundamentalEnergy@fund_ReverseP3
 12441  0216' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
 12442  0218' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
 12443                           
 12444                           ;Phases.c: 998: LCDNokia_printValue(ATM_registers(FUNDAMENTAL_ENERGY_TYPE, PHASE_C_REV_A
      +                          CTIVE_FUND_ENERGY));
 12445  021C' 0E1C               	movlw	28
 12446  021E' 6E12'              	movwf	ATM_registers@reg,c
 12447  0220' 0E03               	movlw	3
 12448  0222' EC00' F000'        	call	_ATM_registers
 12449  0226' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
 12450  022A' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
 12451  022E' 6A19'              	clrf	LCDNokia_printValue@value+2,c
 12452  0230' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
 12453  0232' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
 12454                           
 12455                           ;Phases.c: 999: break;
 12456  0236' D03B               	goto	l639
 12457  0238'                    
 12458                           ;Phases.c: 1001: LCDNokia_gotoXY(0,1);
 12459  0238' 0E01               	movlw	1
 12460  023A' 6E08'              	movwf	LCDNokia_gotoXY@y,c
 12461  023C' 0E00               	movlw	0
 12462  023E' EC00' F000'        	call	_LCDNokia_gotoXY
 12463                           
 12464                           ;Phases.c: 1002: LCDNokia_sendString(fund_ForwardTotal);
 12465  0242' 0E00'              	movlw	low fundamentalEnergy@fund_ForwardTotal
 12466  0244' 6E0D'              	movwf	LCDNokia_sendString@characters,c
 12467  0246' 0E00'              	movlw	high fundamentalEnergy@fund_ForwardTotal
 12468  0248' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
 12469  024A' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
 12470                           
 12471                           ;Phases.c: 1003: LCDNokia_printValue(ATM_registers(FUNDAMENTAL_ENERGY_TYPE, TOTAL_FORW_A
      +                          CTIVE_FUND_ENERGY));
 12472  024E' 0E15               	movlw	21
 12473  0250' 6E12'              	movwf	ATM_registers@reg,c
 12474  0252' 0E03               	movlw	3
 12475  0254' EC00' F000'        	call	_ATM_registers
 12476  0258' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
 12477  025C' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
 12478  0260' 6A19'              	clrf	LCDNokia_printValue@value+2,c
 12479  0262' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
 12480  0264' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
 12481                           
 12482                           ;Phases.c: 1004: LCDNokia_gotoXY(0,2);
 12483  0268' 0E02               	movlw	2
 12484  026A' 6E08'              	movwf	LCDNokia_gotoXY@y,c
 12485  026C' 0E00               	movlw	0
 12486  026E' EC00' F000'        	call	_LCDNokia_gotoXY
 12487                           
 12488                           ;Phases.c: 1005: LCDNokia_sendString(fund_ReverseTotal);
 12489  0272' 0E00'              	movlw	low fundamentalEnergy@fund_ReverseTotal
 12490  0274' 6E0D'              	movwf	LCDNokia_sendString@characters,c
 12491  0276' 0E00'              	movlw	high fundamentalEnergy@fund_ReverseTotal
 12492  0278' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
 12493  027A' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
 12494                           
 12495                           ;Phases.c: 1006: LCDNokia_printValue(ATM_registers(FUNDAMENTAL_ENERGY_TYPE, TOTAL_REV_AC
      +                          TIVE_FUND_ENERGY));
 12496  027E' 0E19               	movlw	25
 12497  0280' 6E12'              	movwf	ATM_registers@reg,c
 12498  0282' 0E03               	movlw	3
 12499  0284' EC00' F000'        	call	_ATM_registers
 12500  0288' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
 12501  028C' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
 12502  0290' 6A19'              	clrf	LCDNokia_printValue@value+2,c
 12503  0292' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
 12504  0294' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
 12505                           
 12506                           ;Phases.c: 1010: }
 12507                           
 12508                           ;Phases.c: 1009: break;
 12509                           
 12510                           ;Phases.c: 1008: default:
 12511                           
 12512                           ;Phases.c: 1007: break;
 12513  0298' D00A               	goto	l639
 12514  029A'                    l637:
 12515  029A' 5004'              	movf	fundamentalEnergy@counter,w,c
 12516                           
 12517                           ; Switch size 1, requested type "space"
 12518                           ; Number of cases is 3, Range of values is 0 to 2
 12519                           ; switch strategies available:
 12520                           ; Name         Instructions Cycles
 12521                           ; simple_byte           10     6 (average)
 12522                           ;	Chosen strategy is simple_byte
 12523  029C' 0A00               	xorlw	0	; case 0
 12524  029E' B4D8               	btfsc	status,2,c
 12525  02A0' D739               	goto	l638
 12526  02A2' 0A01               	xorlw	1	; case 1
 12527  02A4' B4D8               	btfsc	status,2,c
 12528  02A6' D77F               	goto	l640
 12529  02A8' 0A03               	xorlw	3	; case 2
 12530  02AA' B4D8               	btfsc	status,2,c
 12531  02AC' D7C5               	goto	l641
 12532  02AE'                    l639:
 12533                           
 12534                           ;Phases.c: 1012: return (currentEnergy4);
 12535  02AE' C0C5' F026'        	movff	fundamentalEnergy@currentEnergy4,?_fundamentalEnergy
 12536  02B2' C0C6' F027'        	movff	fundamentalEnergy@currentEnergy4+1,?_fundamentalEnergy+1
 12537  02B6' C0C7' F028'        	movff	fundamentalEnergy@currentEnergy4+2,?_fundamentalEnergy+2
 12538  02BA' 0012               	return		;funcret
 12539  02BC'                    __end_of_fundamentalEnergy:
 12540                           	opt stack 0
 12541                           tosu	equ	0xFFF
 12542                           tosh	equ	0xFFE
 12543                           tosl	equ	0xFFD
 12544                           pclath	equ	0xFFA
 12545                           tblptru	equ	0xFF8
 12546                           tblptrh	equ	0xFF7
 12547                           tblptrl	equ	0xFF6
 12548                           tablat	equ	0xFF5
 12549                           prodh	equ	0xFF4
 12550                           prodl	equ	0xFF3
 12551                           postinc0	equ	0xFEE
 12552                           wreg	equ	0xFE8
 12553                           postinc2	equ	0xFDE
 12554                           status	equ	0xFD8
 12555                           
 12556 ;; *************** function _apparentEnergy *****************
 12557 ;; Defined at:
 12558 ;;		line 872 in file "Phases.c"
 12559 ;; Parameters:    Size  Location     Type
 12560 ;;  data            3   38[COMRAM] struct .
 12561 ;; Auto vars:     Size  Location     Type
 12562 ;;  apparentVec_   18   18[BANK0 ] const unsigned char [18]
 12563 ;;  apparentAri_   18    0[BANK0 ] const unsigned char [18]
 12564 ;;  apparent_ene    9   54[BANK0 ] const unsigned char [9]
 12565 ;;  apparent_ene    9   45[BANK0 ] const unsigned char [9]
 12566 ;;  apparent_ene    9   36[BANK0 ] const unsigned char [9]
 12567 ;;  maxScreens      1   63[BANK0 ] const unsigned char 
 12568 ;; Return value:  Size  Location     Type
 12569 ;;                  3   38[COMRAM] struct .
 12570 ;; Registers used:
 12571 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12572 ;; Tracked objects:
 12573 ;;		On entry : 0/0
 12574 ;;		On exit  : 0/0
 12575 ;;		Unchanged: 0/0
 12576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12577 ;;      Params:         3       0       0       0
 12578 ;;      Locals:         0      64       0       0
 12579 ;;      Temps:          0       0       0       0
 12580 ;;      Totals:         3      64       0       0
 12581 ;;Total ram usage:       67 bytes
 12582 ;; Hardware stack levels used:    1
 12583 ;; Hardware stack levels required when called:    4
 12584 ;; This function calls:
 12585 ;;		_ATM_registers
 12586 ;;		_LCDNokia_clear
 12587 ;;		_LCDNokia_gotoXY
 12588 ;;		_LCDNokia_printValue
 12589 ;;		_LCDNokia_sendString
 12590 ;;		_getButton1
 12591 ;;		_getButton2
 12592 ;;		_getButton3
 12593 ;; This function is called by:
 12594 ;;		_stateEnergy
 12595 ;; This function uses a non-reentrant model
 12596 ;;
 12597                           
 12598                           	psect	text46
 12599  0000'                    __ptext46:
 12600                           	opt stack 0
 12601  0000'                    _apparentEnergy:
 12602                           	opt stack 25
 12603                           
 12604                           ;Phases.c: 874: static uint8_t counter = 0;
 12605                           ;Phases.c: 875: const uint8_t maxScreens = 1;
 12606                           
 12607                           ;incstack = 0
 12608  0000' 0E01               	movlw	1
 12609  0002' 0100               	movlb	0	; () banked
 12610  0004' 6F00'              	movwf	apparentEnergy@maxScreens& (0+255),b
 12611                           
 12612                           ; BSR set to: 0
 12613                           ;Phases.c: 876: const uint8_t apparent_energyP1[] = "PA App: ";
 12614  0006' 0E00'              	movlw	low apparentEnergy@F3655
 12615  0008' 6EF6               	movwf	tblptrl,c
 12616  000A'                    	if	1	;There is more than 1 active tblptr byte
 12617  000A' 0E00'              	movlw	high apparentEnergy@F3655
 12618  000C' 6EF7               	movwf	tblptrh,c
 12619  000E'                    	endif
 12620  000E'                    	if	0	;There are less than 3 active tblptr bytes
 12621  000E'                    	endif
 12622  000E' EE20' F000'        	lfsr	2,apparentEnergy@apparent_energyP1
 12623  0012' 0E08               	movlw	8
 12624  0014'                    u3490:
 12625  0014' 0009               	tblrd		*+
 12626  0016' CFF5 FFDE          	movff	tablat,postinc2
 12627  001A' 06E8               	decf	wreg,f,c
 12628  001C' E2FB               	bc	u3490
 12629                           
 12630                           ; BSR set to: 0
 12631                           ;Phases.c: 877: const uint8_t apparent_energyP2[] = "PB App: ";
 12632  001E' 0E00'              	movlw	low apparentEnergy@F3657
 12633  0020' 6EF6               	movwf	tblptrl,c
 12634  0022'                    	if	1	;There is more than 1 active tblptr byte
 12635  0022' 0E00'              	movlw	high apparentEnergy@F3657
 12636  0024' 6EF7               	movwf	tblptrh,c
 12637  0026'                    	endif
 12638  0026'                    	if	0	;There are less than 3 active tblptr bytes
 12639  0026'                    	endif
 12640  0026' EE20' F000'        	lfsr	2,apparentEnergy@apparent_energyP2
 12641  002A' 0E08               	movlw	8
 12642  002C'                    u3500:
 12643  002C' 0009               	tblrd		*+
 12644  002E' CFF5 FFDE          	movff	tablat,postinc2
 12645  0032' 06E8               	decf	wreg,f,c
 12646  0034' E2FB               	bc	u3500
 12647                           
 12648                           ; BSR set to: 0
 12649                           ;Phases.c: 878: const uint8_t apparent_energyP3[] = "PC App: ";
 12650  0036' 0E00'              	movlw	low apparentEnergy@F3659
 12651  0038' 6EF6               	movwf	tblptrl,c
 12652  003A'                    	if	1	;There is more than 1 active tblptr byte
 12653  003A' 0E00'              	movlw	high apparentEnergy@F3659
 12654  003C' 6EF7               	movwf	tblptrh,c
 12655  003E'                    	endif
 12656  003E'                    	if	0	;There are less than 3 active tblptr bytes
 12657  003E'                    	endif
 12658  003E' EE20' F000'        	lfsr	2,apparentEnergy@apparent_energyP3
 12659  0042' 0E08               	movlw	8
 12660  0044'                    u3510:
 12661  0044' 0009               	tblrd		*+
 12662  0046' CFF5 FFDE          	movff	tablat,postinc2
 12663  004A' 06E8               	decf	wreg,f,c
 12664  004C' E2FB               	bc	u3510
 12665                           
 12666                           ; BSR set to: 0
 12667                           ;Phases.c: 880: const uint8_t apparentAri_energyTotal[] = "Total AriApp En: ";
 12668  004E' 0E00'              	movlw	low apparentEnergy@F3661
 12669  0050' 6EF6               	movwf	tblptrl,c
 12670  0052'                    	if	1	;There is more than 1 active tblptr byte
 12671  0052' 0E00'              	movlw	high apparentEnergy@F3661
 12672  0054' 6EF7               	movwf	tblptrh,c
 12673  0056'                    	endif
 12674  0056'                    	if	0	;There are less than 3 active tblptr bytes
 12675  0056'                    	endif
 12676  0056' EE20' F000'        	lfsr	2,apparentEnergy@apparentAri_energyTotal
 12677  005A' 0E11               	movlw	17
 12678  005C'                    u3520:
 12679  005C' 0009               	tblrd		*+
 12680  005E' CFF5 FFDE          	movff	tablat,postinc2
 12681  0062' 06E8               	decf	wreg,f,c
 12682  0064' E2FB               	bc	u3520
 12683                           
 12684                           ; BSR set to: 0
 12685                           ;Phases.c: 881: const uint8_t apparentVec_energyTotal[] = "Total VecApp En: ";
 12686  0066' 0E00'              	movlw	low apparentEnergy@F3663
 12687  0068' 6EF6               	movwf	tblptrl,c
 12688  006A'                    	if	1	;There is more than 1 active tblptr byte
 12689  006A' 0E00'              	movlw	high apparentEnergy@F3663
 12690  006C' 6EF7               	movwf	tblptrh,c
 12691  006E'                    	endif
 12692  006E'                    	if	0	;There are less than 3 active tblptr bytes
 12693  006E'                    	endif
 12694  006E' EE20' F000'        	lfsr	2,apparentEnergy@apparentVec_energyTotal
 12695  0072' 0E11               	movlw	17
 12696  0074'                    u3530:
 12697  0074' 0009               	tblrd		*+
 12698  0076' CFF5 FFDE          	movff	tablat,postinc2
 12699  007A' 06E8               	decf	wreg,f,c
 12700  007C' E2FB               	bc	u3530
 12701                           
 12702                           ; BSR set to: 0
 12703                           ;Phases.c: 884: static PhaseEnergy_Type currentEnergy3;
 12704                           ;Phases.c: 887: currentEnergy3.phaseState = APPARENT_ENERGY;
 12705  007E' 0E02               	movlw	2
 12706  0080' 0101               	movlb	1	; () banked
 12707  0082' 6F00'              	movwf	(apparentEnergy@currentEnergy3+1)& (0+255),b
 12708                           
 12709                           ; BSR set to: 1
 12710                           ;Phases.c: 888: currentEnergy3.stateMain = data.stateMain;
 12711  0084' C028' F0CA'        	movff	apparentEnergy@data+2,apparentEnergy@currentEnergy3+2
 12712                           
 12713                           ; BSR set to: 1
 12714                           ;Phases.c: 890: if(getButton1() == 1)
 12715  0088' EC00' F000'        	call	_getButton1	;wreg free
 12716  008C' 06E8               	decf	wreg,f,c
 12717  008E' A4D8               	btfss	status,2,c
 12718  0090' D003               	goto	l601
 12719                           
 12720                           ;Phases.c: 891: {
 12721                           ;Phases.c: 892: currentEnergy3.phaseState = EXIT_ENERGY;
 12722  0092' 0E05               	movlw	5
 12723  0094' 0101               	movlb	1	; () banked
 12724  0096' 6F00'              	movwf	(apparentEnergy@currentEnergy3+1)& (0+255),b
 12725  0098'                    l601:
 12726                           
 12727                           ;Phases.c: 893: }
 12728                           ;Phases.c: 894: if(getButton2() == 1)
 12729                           
 12730                           ; BSR set to: 1
 12731  0098' EC00' F000'        	call	_getButton2	;wreg free
 12732  009C' 06E8               	decf	wreg,f,c
 12733  009E' A4D8               	btfss	status,2,c
 12734  00A0' D005               	goto	l602
 12735                           
 12736                           ;Phases.c: 895: {
 12737                           ;Phases.c: 896: currentEnergy3.phaseState = FUNDAMENTAL_ENERGY;
 12738  00A2' 0E03               	movlw	3
 12739  00A4' 0101               	movlb	1	; () banked
 12740  00A6' 6F00'              	movwf	(apparentEnergy@currentEnergy3+1)& (0+255),b
 12741                           
 12742                           ; BSR set to: 1
 12743                           ;Phases.c: 897: LCDNokia_clear();
 12744  00A8' EC00' F000'        	call	_LCDNokia_clear	;wreg free
 12745  00AC'                    l602:
 12746                           
 12747                           ;Phases.c: 898: }
 12748                           ;Phases.c: 899: if(getButton3() == 1)
 12749  00AC' EC00' F000'        	call	_getButton3	;wreg free
 12750  00B0' 06E8               	decf	wreg,f,c
 12751  00B2' A4D8               	btfss	status,2,c
 12752  00B4' D085               	goto	l605
 12753                           
 12754                           ;Phases.c: 900: {
 12755                           ;Phases.c: 901: counter++;
 12756  00B6' 2A05'              	incf	apparentEnergy@counter,f,c
 12757                           
 12758                           ;Phases.c: 902: LCDNokia_clear();
 12759  00B8' EC00' F000'        	call	_LCDNokia_clear	;wreg free
 12760                           
 12761                           ;Phases.c: 903: if(counter > maxScreens)
 12762  00BC' 5005'              	movf	apparentEnergy@counter,w,c
 12763  00BE' 0100               	movlb	0	; () banked
 12764  00C0' 5D00'              	subwf	apparentEnergy@maxScreens& (0+255),w,b
 12765  00C2' B0D8               	btfsc	status,0,c
 12766  00C4' D07D               	goto	l605
 12767                           
 12768                           ; BSR set to: 0
 12769                           ;Phases.c: 904: {
 12770                           ;Phases.c: 905: counter = 0;
 12771  00C6' 0E00               	movlw	0
 12772  00C8' 6E05'              	movwf	apparentEnergy@counter,c
 12773                           
 12774                           ; BSR set to: 0
 12775                           ;Phases.c: 906: }
 12776                           ;Phases.c: 907: }
 12777                           ;Phases.c: 908: switch(counter)
 12778                           
 12779                           ; BSR set to: 0
 12780  00CA' D07A               	goto	l605
 12781  00CC'                    
 12782                           ;Phases.c: 911: LCDNokia_gotoXY(0,1);
 12783                           
 12784                           ; BSR set to: 0
 12785  00CC' 0E01               	movlw	1
 12786  00CE' 6E08'              	movwf	LCDNokia_gotoXY@y,c
 12787  00D0' 0E00               	movlw	0
 12788  00D2' EC00' F000'        	call	_LCDNokia_gotoXY
 12789                           
 12790                           ;Phases.c: 912: LCDNokia_sendString(apparent_energyP1);
 12791  00D6' 0E00'              	movlw	low apparentEnergy@apparent_energyP1
 12792  00D8' 6E0D'              	movwf	LCDNokia_sendString@characters,c
 12793  00DA' 0E00'              	movlw	high apparentEnergy@apparent_energyP1
 12794  00DC' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
 12795  00DE' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
 12796                           
 12797                           ;Phases.c: 913: LCDNokia_printValue(ATM_registers(APPARENT_ENERGY_TYPE, PHASE_A_APPARENT
      +                          _ENERGY));
 12798  00E2' 0E11               	movlw	17
 12799  00E4' 6E12'              	movwf	ATM_registers@reg,c
 12800  00E6' 0E02               	movlw	2
 12801  00E8' EC00' F000'        	call	_ATM_registers
 12802  00EC' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
 12803  00F0' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
 12804  00F4' 6A19'              	clrf	LCDNokia_printValue@value+2,c
 12805  00F6' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
 12806  00F8' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
 12807                           
 12808                           ;Phases.c: 914: LCDNokia_gotoXY(0,2);
 12809  00FC' 0E02               	movlw	2
 12810  00FE' 6E08'              	movwf	LCDNokia_gotoXY@y,c
 12811  0100' 0E00               	movlw	0
 12812  0102' EC00' F000'        	call	_LCDNokia_gotoXY
 12813                           
 12814                           ;Phases.c: 915: LCDNokia_sendString(apparent_energyP2);
 12815  0106' 0E00'              	movlw	low apparentEnergy@apparent_energyP2
 12816  0108' 6E0D'              	movwf	LCDNokia_sendString@characters,c
 12817  010A' 0E00'              	movlw	high apparentEnergy@apparent_energyP2
 12818  010C' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
 12819  010E' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
 12820                           
 12821                           ;Phases.c: 916: LCDNokia_printValue(ATM_registers(APPARENT_ENERGY_TYPE, PHASE_B_APPARENT
      +                          _ENERGY));
 12822  0112' 0E12               	movlw	18
 12823  0114' 6E12'              	movwf	ATM_registers@reg,c
 12824  0116' 0E02               	movlw	2
 12825  0118' EC00' F000'        	call	_ATM_registers
 12826  011C' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
 12827  0120' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
 12828  0124' 6A19'              	clrf	LCDNokia_printValue@value+2,c
 12829  0126' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
 12830  0128' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
 12831                           
 12832                           ;Phases.c: 917: LCDNokia_gotoXY(0,3);
 12833  012C' 0E03               	movlw	3
 12834  012E' 6E08'              	movwf	LCDNokia_gotoXY@y,c
 12835  0130' 0E00               	movlw	0
 12836  0132' EC00' F000'        	call	_LCDNokia_gotoXY
 12837                           
 12838                           ;Phases.c: 918: LCDNokia_sendString(apparent_energyP3);
 12839  0136' 0E00'              	movlw	low apparentEnergy@apparent_energyP3
 12840  0138' 6E0D'              	movwf	LCDNokia_sendString@characters,c
 12841  013A' 0E00'              	movlw	high apparentEnergy@apparent_energyP3
 12842  013C' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
 12843  013E' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
 12844                           
 12845                           ;Phases.c: 919: LCDNokia_printValue(ATM_registers(APPARENT_ENERGY_TYPE, PHASE_C_APPARENT
      +                          _ENERGY));
 12846  0142' 0E13               	movlw	19
 12847  0144' 6E12'              	movwf	ATM_registers@reg,c
 12848  0146' 0E02               	movlw	2
 12849  0148' EC00' F000'        	call	_ATM_registers
 12850  014C' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
 12851  0150' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
 12852  0154' 6A19'              	clrf	LCDNokia_printValue@value+2,c
 12853  0156' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
 12854  0158' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
 12855                           
 12856                           ;Phases.c: 920: break;
 12857  015C' D038               	goto	l607
 12858  015E'                    
 12859                           ;Phases.c: 922: LCDNokia_gotoXY(0,1);
 12860  015E' 0E01               	movlw	1
 12861  0160' 6E08'              	movwf	LCDNokia_gotoXY@y,c
 12862  0162' 0E00               	movlw	0
 12863  0164' EC00' F000'        	call	_LCDNokia_gotoXY
 12864                           
 12865                           ;Phases.c: 923: LCDNokia_sendString(apparentAri_energyTotal);
 12866  0168' 0E00'              	movlw	low apparentEnergy@apparentAri_energyTotal
 12867  016A' 6E0D'              	movwf	LCDNokia_sendString@characters,c
 12868  016C' 0E00'              	movlw	high apparentEnergy@apparentAri_energyTotal
 12869  016E' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
 12870  0170' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
 12871                           
 12872                           ;Phases.c: 924: LCDNokia_printValue(ATM_registers(APPARENT_ENERGY_TYPE, TOTAL_ARIT_APPAR
      +                          ENT_ENERGY));
 12873  0174' 0E10               	movlw	16
 12874  0176' 6E12'              	movwf	ATM_registers@reg,c
 12875  0178' 0E02               	movlw	2
 12876  017A' EC00' F000'        	call	_ATM_registers
 12877  017E' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
 12878  0182' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
 12879  0186' 6A19'              	clrf	LCDNokia_printValue@value+2,c
 12880  0188' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
 12881  018A' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
 12882                           
 12883                           ;Phases.c: 925: LCDNokia_gotoXY(0,2);
 12884  018E' 0E02               	movlw	2
 12885  0190' 6E08'              	movwf	LCDNokia_gotoXY@y,c
 12886  0192' 0E00               	movlw	0
 12887  0194' EC00' F000'        	call	_LCDNokia_gotoXY
 12888                           
 12889                           ;Phases.c: 926: LCDNokia_sendString(apparentVec_energyTotal);
 12890  0198' 0E00'              	movlw	low apparentEnergy@apparentVec_energyTotal
 12891  019A' 6E0D'              	movwf	LCDNokia_sendString@characters,c
 12892  019C' 0E00'              	movlw	high apparentEnergy@apparentVec_energyTotal
 12893  019E' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
 12894  01A0' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
 12895                           
 12896                           ;Phases.c: 927: LCDNokia_printValue(ATM_registers(APPARENT_ENERGY_TYPE, TOTAL_VECT_APPAR
      +                          ENT_ENERGY));
 12897  01A4' 0E14               	movlw	20
 12898  01A6' 6E12'              	movwf	ATM_registers@reg,c
 12899  01A8' 0E02               	movlw	2
 12900  01AA' EC00' F000'        	call	_ATM_registers
 12901  01AE' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
 12902  01B2' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
 12903  01B6' 6A19'              	clrf	LCDNokia_printValue@value+2,c
 12904  01B8' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
 12905  01BA' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
 12906                           
 12907                           ;Phases.c: 931: }
 12908                           
 12909                           ;Phases.c: 930: break;
 12910                           
 12911                           ;Phases.c: 929: default:
 12912                           
 12913                           ;Phases.c: 928: break;
 12914  01BE' D007               	goto	l607
 12915  01C0'                    l605:
 12916  01C0' 5005'              	movf	apparentEnergy@counter,w,c
 12917                           
 12918                           ; Switch size 1, requested type "space"
 12919                           ; Number of cases is 2, Range of values is 0 to 1
 12920                           ; switch strategies available:
 12921                           ; Name         Instructions Cycles
 12922                           ; simple_byte            7     4 (average)
 12923                           ;	Chosen strategy is simple_byte
 12924  01C2' 0A00               	xorlw	0	; case 0
 12925  01C4' B4D8               	btfsc	status,2,c
 12926  01C6' D782               	goto	l606
 12927  01C8' 0A01               	xorlw	1	; case 1
 12928  01CA' B4D8               	btfsc	status,2,c
 12929  01CC' D7C8               	goto	l608
 12930  01CE'                    l607:
 12931                           
 12932                           ;Phases.c: 933: return (currentEnergy3);
 12933  01CE' C0C8' F026'        	movff	apparentEnergy@currentEnergy3,?_apparentEnergy
 12934  01D2' C0C9' F027'        	movff	apparentEnergy@currentEnergy3+1,?_apparentEnergy+1
 12935  01D6' C0CA' F028'        	movff	apparentEnergy@currentEnergy3+2,?_apparentEnergy+2
 12936  01DA' 0012               	return		;funcret
 12937  01DC'                    __end_of_apparentEnergy:
 12938                           	opt stack 0
 12939                           tosu	equ	0xFFF
 12940                           tosh	equ	0xFFE
 12941                           tosl	equ	0xFFD
 12942                           pclath	equ	0xFFA
 12943                           tblptru	equ	0xFF8
 12944                           tblptrh	equ	0xFF7
 12945                           tblptrl	equ	0xFF6
 12946                           tablat	equ	0xFF5
 12947                           prodh	equ	0xFF4
 12948                           prodl	equ	0xFF3
 12949                           postinc0	equ	0xFEE
 12950                           wreg	equ	0xFE8
 12951                           postinc2	equ	0xFDE
 12952                           status	equ	0xFD8
 12953                           
 12954 ;; *************** function _activeEnergy *****************
 12955 ;; Defined at:
 12956 ;;		line 714 in file "Phases.c"
 12957 ;; Parameters:    Size  Location     Type
 12958 ;;  data            3   38[COMRAM] struct .
 12959 ;; Auto vars:     Size  Location     Type
 12960 ;;  active_Forwa   17    0[BANK0 ] const unsigned char [17]
 12961 ;;  active_Rever   16   17[BANK0 ] const unsigned char [16]
 12962 ;;  active_Forwa   14   61[BANK0 ] const unsigned char [14]
 12963 ;;  active_Forwa   14   47[BANK0 ] const unsigned char [14]
 12964 ;;  active_Forwa   14   33[BANK0 ] const unsigned char [14]
 12965 ;;  active_Rever   13  101[BANK0 ] const unsigned char [13]
 12966 ;;  active_Rever   13   88[BANK0 ] const unsigned char [13]
 12967 ;;  active_Rever   13   75[BANK0 ] const unsigned char [13]
 12968 ;;  maxScreens      1  114[BANK0 ] const unsigned char 
 12969 ;; Return value:  Size  Location     Type
 12970 ;;                  3   38[COMRAM] struct .
 12971 ;; Registers used:
 12972 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12973 ;; Tracked objects:
 12974 ;;		On entry : 0/0
 12975 ;;		On exit  : 0/0
 12976 ;;		Unchanged: 0/0
 12977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12978 ;;      Params:         3       0       0       0
 12979 ;;      Locals:         0     115       0       0
 12980 ;;      Temps:          0       0       0       0
 12981 ;;      Totals:         3     115       0       0
 12982 ;;Total ram usage:      118 bytes
 12983 ;; Hardware stack levels used:    1
 12984 ;; Hardware stack levels required when called:    4
 12985 ;; This function calls:
 12986 ;;		_ATM_registers
 12987 ;;		_LCDNokia_clear
 12988 ;;		_LCDNokia_gotoXY
 12989 ;;		_LCDNokia_printValue
 12990 ;;		_LCDNokia_sendString
 12991 ;;		_getButton1
 12992 ;;		_getButton2
 12993 ;;		_getButton3
 12994 ;; This function is called by:
 12995 ;;		_stateEnergy
 12996 ;; This function uses a non-reentrant model
 12997 ;;
 12998                           
 12999                           	psect	text47
 13000  0000'                    __ptext47:
 13001                           	opt stack 0
 13002  0000'                    _activeEnergy:
 13003                           	opt stack 25
 13004                           
 13005                           ;Phases.c: 716: static uint8_t counter = 0;
 13006                           ;Phases.c: 717: const uint8_t maxScreens = 3;
 13007                           
 13008                           ;incstack = 0
 13009  0000' 0E03               	movlw	3
 13010  0002' 0100               	movlb	0	; () banked
 13011  0004' 6F00'              	movwf	activeEnergy@maxScreens& (0+255),b
 13012                           
 13013                           ; BSR set to: 0
 13014                           ;Phases.c: 718: const uint8_t active_Forward1[] = "PA Forw Act: ";
 13015  0006' 0E00'              	movlw	low activeEnergy@F3615
 13016  0008' 6EF6               	movwf	tblptrl,c
 13017  000A'                    	if	1	;There is more than 1 active tblptr byte
 13018  000A' 0E00'              	movlw	high activeEnergy@F3615
 13019  000C' 6EF7               	movwf	tblptrh,c
 13020  000E'                    	endif
 13021  000E'                    	if	0	;There are less than 3 active tblptr bytes
 13022  000E'                    	endif
 13023  000E' EE20' F000'        	lfsr	2,activeEnergy@active_Forward1
 13024  0012' 0E0D               	movlw	13
 13025  0014'                    u3250:
 13026  0014' 0009               	tblrd		*+
 13027  0016' CFF5 FFDE          	movff	tablat,postinc2
 13028  001A' 06E8               	decf	wreg,f,c
 13029  001C' E2FB               	bc	u3250
 13030                           
 13031                           ; BSR set to: 0
 13032                           ;Phases.c: 719: const uint8_t active_Forward2[] = "PB Forw Act: ";
 13033  001E' 0E00'              	movlw	low activeEnergy@F3617
 13034  0020' 6EF6               	movwf	tblptrl,c
 13035  0022'                    	if	1	;There is more than 1 active tblptr byte
 13036  0022' 0E00'              	movlw	high activeEnergy@F3617
 13037  0024' 6EF7               	movwf	tblptrh,c
 13038  0026'                    	endif
 13039  0026'                    	if	0	;There are less than 3 active tblptr bytes
 13040  0026'                    	endif
 13041  0026' EE20' F000'        	lfsr	2,activeEnergy@active_Forward2
 13042  002A' 0E0D               	movlw	13
 13043  002C'                    u3260:
 13044  002C' 0009               	tblrd		*+
 13045  002E' CFF5 FFDE          	movff	tablat,postinc2
 13046  0032' 06E8               	decf	wreg,f,c
 13047  0034' E2FB               	bc	u3260
 13048                           
 13049                           ; BSR set to: 0
 13050                           ;Phases.c: 720: const uint8_t active_Forward3[] = "PC Forw Act: ";
 13051  0036' 0E00'              	movlw	low activeEnergy@F3619
 13052  0038' 6EF6               	movwf	tblptrl,c
 13053  003A'                    	if	1	;There is more than 1 active tblptr byte
 13054  003A' 0E00'              	movlw	high activeEnergy@F3619
 13055  003C' 6EF7               	movwf	tblptrh,c
 13056  003E'                    	endif
 13057  003E'                    	if	0	;There are less than 3 active tblptr bytes
 13058  003E'                    	endif
 13059  003E' EE20' F000'        	lfsr	2,activeEnergy@active_Forward3
 13060  0042' 0E0D               	movlw	13
 13061  0044'                    u3270:
 13062  0044' 0009               	tblrd		*+
 13063  0046' CFF5 FFDE          	movff	tablat,postinc2
 13064  004A' 06E8               	decf	wreg,f,c
 13065  004C' E2FB               	bc	u3270
 13066                           
 13067                           ; BSR set to: 0
 13068                           ;Phases.c: 722: const uint8_t active_Reverse1[] = "PA Rev Act: ";
 13069  004E' 0E00'              	movlw	low activeEnergy@F3621
 13070  0050' 6EF6               	movwf	tblptrl,c
 13071  0052'                    	if	1	;There is more than 1 active tblptr byte
 13072  0052' 0E00'              	movlw	high activeEnergy@F3621
 13073  0054' 6EF7               	movwf	tblptrh,c
 13074  0056'                    	endif
 13075  0056'                    	if	0	;There are less than 3 active tblptr bytes
 13076  0056'                    	endif
 13077  0056' EE20' F000'        	lfsr	2,activeEnergy@active_Reverse1
 13078  005A' 0E0C               	movlw	12
 13079  005C'                    u3280:
 13080  005C' 0009               	tblrd		*+
 13081  005E' CFF5 FFDE          	movff	tablat,postinc2
 13082  0062' 06E8               	decf	wreg,f,c
 13083  0064' E2FB               	bc	u3280
 13084                           
 13085                           ; BSR set to: 0
 13086                           ;Phases.c: 723: const uint8_t active_Reverse2[] = "PB Rev Act: ";
 13087  0066' 0E00'              	movlw	low activeEnergy@F3623
 13088  0068' 6EF6               	movwf	tblptrl,c
 13089  006A'                    	if	1	;There is more than 1 active tblptr byte
 13090  006A' 0E00'              	movlw	high activeEnergy@F3623
 13091  006C' 6EF7               	movwf	tblptrh,c
 13092  006E'                    	endif
 13093  006E'                    	if	0	;There are less than 3 active tblptr bytes
 13094  006E'                    	endif
 13095  006E' EE20' F000'        	lfsr	2,activeEnergy@active_Reverse2
 13096  0072' 0E0C               	movlw	12
 13097  0074'                    u3290:
 13098  0074' 0009               	tblrd		*+
 13099  0076' CFF5 FFDE          	movff	tablat,postinc2
 13100  007A' 06E8               	decf	wreg,f,c
 13101  007C' E2FB               	bc	u3290
 13102                           
 13103                           ; BSR set to: 0
 13104                           ;Phases.c: 724: const uint8_t active_Reverse3[] = "PC Rev Act: ";
 13105  007E' 0E00'              	movlw	low activeEnergy@F3625
 13106  0080' 6EF6               	movwf	tblptrl,c
 13107  0082'                    	if	1	;There is more than 1 active tblptr byte
 13108  0082' 0E00'              	movlw	high activeEnergy@F3625
 13109  0084' 6EF7               	movwf	tblptrh,c
 13110  0086'                    	endif
 13111  0086'                    	if	0	;There are less than 3 active tblptr bytes
 13112  0086'                    	endif
 13113  0086' EE20' F000'        	lfsr	2,activeEnergy@active_Reverse3
 13114  008A' 0E0C               	movlw	12
 13115  008C'                    u3300:
 13116  008C' 0009               	tblrd		*+
 13117  008E' CFF5 FFDE          	movff	tablat,postinc2
 13118  0092' 06E8               	decf	wreg,f,c
 13119  0094' E2FB               	bc	u3300
 13120                           
 13121                           ; BSR set to: 0
 13122                           ;Phases.c: 726: const uint8_t active_Forward_Total[] = "Total Forw Act: ";
 13123  0096' 0E00'              	movlw	low activeEnergy@F3627
 13124  0098' 6EF6               	movwf	tblptrl,c
 13125  009A'                    	if	1	;There is more than 1 active tblptr byte
 13126  009A' 0E00'              	movlw	high activeEnergy@F3627
 13127  009C' 6EF7               	movwf	tblptrh,c
 13128  009E'                    	endif
 13129  009E'                    	if	0	;There are less than 3 active tblptr bytes
 13130  009E'                    	endif
 13131  009E' EE20' F000'        	lfsr	2,activeEnergy@active_Forward_Total
 13132  00A2' 0E10               	movlw	16
 13133  00A4'                    u3310:
 13134  00A4' 0009               	tblrd		*+
 13135  00A6' CFF5 FFDE          	movff	tablat,postinc2
 13136  00AA' 06E8               	decf	wreg,f,c
 13137  00AC' E2FB               	bc	u3310
 13138                           
 13139                           ; BSR set to: 0
 13140                           ;Phases.c: 727: const uint8_t active_Reverse_Total[] = "Total Rev Act: ";
 13141  00AE' 0E00'              	movlw	low activeEnergy@F3629
 13142  00B0' 6EF6               	movwf	tblptrl,c
 13143  00B2'                    	if	1	;There is more than 1 active tblptr byte
 13144  00B2' 0E00'              	movlw	high activeEnergy@F3629
 13145  00B4' 6EF7               	movwf	tblptrh,c
 13146  00B6'                    	endif
 13147  00B6'                    	if	0	;There are less than 3 active tblptr bytes
 13148  00B6'                    	endif
 13149  00B6' EE20' F000'        	lfsr	2,activeEnergy@active_Reverse_Total
 13150  00BA' 0E0F               	movlw	15
 13151  00BC'                    u3320:
 13152  00BC' 0009               	tblrd		*+
 13153  00BE' CFF5 FFDE          	movff	tablat,postinc2
 13154  00C2' 06E8               	decf	wreg,f,c
 13155  00C4' E2FB               	bc	u3320
 13156                           
 13157                           ;Phases.c: 730: static PhaseEnergy_Type currentEnergy1;
 13158                           ;Phases.c: 733: currentEnergy1.phaseState = ACTIVE_ENERGY;
 13159  00C6' 0E00               	movlw	0
 13160  00C8' 0101               	movlb	1	; () banked
 13161  00CA' 6F00'              	movwf	(activeEnergy@currentEnergy1+1)& (0+255),b
 13162                           
 13163                           ; BSR set to: 1
 13164                           ;Phases.c: 734: currentEnergy1.stateMain = data.stateMain;
 13165  00CC' C028' F0D0'        	movff	activeEnergy@data+2,activeEnergy@currentEnergy1+2
 13166                           
 13167                           ; BSR set to: 1
 13168                           ;Phases.c: 736: if(getButton1() == 1)
 13169  00D0' EC00' F000'        	call	_getButton1	;wreg free
 13170  00D4' 06E8               	decf	wreg,f,c
 13171  00D6' A4D8               	btfss	status,2,c
 13172  00D8' D003               	goto	l541
 13173                           
 13174                           ;Phases.c: 737: {
 13175                           ;Phases.c: 738: currentEnergy1.phaseState = EXIT_ENERGY;
 13176  00DA' 0E05               	movlw	5
 13177  00DC' 0101               	movlb	1	; () banked
 13178  00DE' 6F00'              	movwf	(activeEnergy@currentEnergy1+1)& (0+255),b
 13179  00E0'                    l541:
 13180                           
 13181                           ;Phases.c: 739: }
 13182                           ;Phases.c: 740: if(getButton2() == 1)
 13183                           
 13184                           ; BSR set to: 1
 13185  00E0' EC00' F000'        	call	_getButton2	;wreg free
 13186  00E4' 06E8               	decf	wreg,f,c
 13187  00E6' A4D8               	btfss	status,2,c
 13188  00E8' D005               	goto	l542
 13189                           
 13190                           ;Phases.c: 741: {
 13191                           ;Phases.c: 742: currentEnergy1.phaseState = REACTIVE_ENERGY;
 13192  00EA' 0E01               	movlw	1
 13193  00EC' 0101               	movlb	1	; () banked
 13194  00EE' 6F00'              	movwf	(activeEnergy@currentEnergy1+1)& (0+255),b
 13195                           
 13196                           ; BSR set to: 1
 13197                           ;Phases.c: 743: LCDNokia_clear();
 13198  00F0' EC00' F000'        	call	_LCDNokia_clear	;wreg free
 13199  00F4'                    l542:
 13200                           
 13201                           ;Phases.c: 744: }
 13202                           ;Phases.c: 745: if(getButton3() == 1)
 13203  00F4' EC00' F000'        	call	_getButton3	;wreg free
 13204  00F8' 06E8               	decf	wreg,f,c
 13205  00FA' A4D8               	btfss	status,2,c
 13206  00FC' D0CE               	goto	l545
 13207                           
 13208                           ;Phases.c: 746: {
 13209                           ;Phases.c: 747: counter++;
 13210  00FE' 2A07'              	incf	activeEnergy@counter,f,c
 13211                           
 13212                           ;Phases.c: 748: LCDNokia_clear();
 13213  0100' EC00' F000'        	call	_LCDNokia_clear	;wreg free
 13214                           
 13215                           ;Phases.c: 749: if(counter > maxScreens)
 13216  0104' 5007'              	movf	activeEnergy@counter,w,c
 13217  0106' 0100               	movlb	0	; () banked
 13218  0108' 5D00'              	subwf	activeEnergy@maxScreens& (0+255),w,b
 13219  010A' B0D8               	btfsc	status,0,c
 13220  010C' D0C6               	goto	l545
 13221                           
 13222                           ; BSR set to: 0
 13223                           ;Phases.c: 750: {
 13224                           ;Phases.c: 751: counter = 0;
 13225  010E' 0E00               	movlw	0
 13226  0110' 6E07'              	movwf	activeEnergy@counter,c
 13227                           
 13228                           ; BSR set to: 0
 13229                           ;Phases.c: 752: }
 13230                           ;Phases.c: 753: }
 13231                           ;Phases.c: 754: switch(counter)
 13232                           
 13233                           ; BSR set to: 0
 13234  0112' D0C3               	goto	l545
 13235  0114'                    
 13236                           ;Phases.c: 757: LCDNokia_gotoXY(0,1);
 13237                           
 13238                           ; BSR set to: 0
 13239  0114' 0E01               	movlw	1
 13240  0116' 6E08'              	movwf	LCDNokia_gotoXY@y,c
 13241  0118' 0E00               	movlw	0
 13242  011A' EC00' F000'        	call	_LCDNokia_gotoXY
 13243                           
 13244                           ;Phases.c: 758: LCDNokia_sendString(active_Forward1);
 13245  011E' 0E00'              	movlw	low activeEnergy@active_Forward1
 13246  0120' 6E0D'              	movwf	LCDNokia_sendString@characters,c
 13247  0122' 0E00'              	movlw	high activeEnergy@active_Forward1
 13248  0124' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
 13249  0126' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
 13250                           
 13251                           ;Phases.c: 759: LCDNokia_printValue(ATM_registers(ACTIVE_ENERGY_TYPE, PHASE_A_FORW_ACTIV
      +                          E_ENERGY));
 13252  012A' 0E01               	movlw	1
 13253  012C' 6E12'              	movwf	ATM_registers@reg,c
 13254  012E' 0E00               	movlw	0
 13255  0130' EC00' F000'        	call	_ATM_registers
 13256  0134' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
 13257  0138' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
 13258  013C' 6A19'              	clrf	LCDNokia_printValue@value+2,c
 13259  013E' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
 13260  0140' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
 13261                           
 13262                           ;Phases.c: 760: LCDNokia_gotoXY(0,2);
 13263  0144' 0E02               	movlw	2
 13264  0146' 6E08'              	movwf	LCDNokia_gotoXY@y,c
 13265  0148' 0E00               	movlw	0
 13266  014A' EC00' F000'        	call	_LCDNokia_gotoXY
 13267                           
 13268                           ;Phases.c: 761: LCDNokia_sendString(active_Forward2);
 13269  014E' 0E00'              	movlw	low activeEnergy@active_Forward2
 13270  0150' 6E0D'              	movwf	LCDNokia_sendString@characters,c
 13271  0152' 0E00'              	movlw	high activeEnergy@active_Forward2
 13272  0154' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
 13273  0156' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
 13274                           
 13275                           ;Phases.c: 762: LCDNokia_printValue(ATM_registers(ACTIVE_ENERGY_TYPE, PHASE_B_FORW_ACTIV
      +                          E_ENERGY));
 13276  015A' 0E02               	movlw	2
 13277  015C' 6E12'              	movwf	ATM_registers@reg,c
 13278  015E' 0E00               	movlw	0
 13279  0160' EC00' F000'        	call	_ATM_registers
 13280  0164' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
 13281  0168' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
 13282  016C' 6A19'              	clrf	LCDNokia_printValue@value+2,c
 13283  016E' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
 13284  0170' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
 13285                           
 13286                           ;Phases.c: 763: LCDNokia_gotoXY(0,3);
 13287  0174' 0E03               	movlw	3
 13288  0176' 6E08'              	movwf	LCDNokia_gotoXY@y,c
 13289  0178' 0E00               	movlw	0
 13290  017A' EC00' F000'        	call	_LCDNokia_gotoXY
 13291                           
 13292                           ;Phases.c: 764: LCDNokia_sendString(active_Forward3);
 13293  017E' 0E00'              	movlw	low activeEnergy@active_Forward3
 13294  0180' 6E0D'              	movwf	LCDNokia_sendString@characters,c
 13295  0182' 0E00'              	movlw	high activeEnergy@active_Forward3
 13296  0184' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
 13297  0186' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
 13298                           
 13299                           ;Phases.c: 765: LCDNokia_printValue(ATM_registers(ACTIVE_ENERGY_TYPE, PHASE_C_FORW_ACTIV
      +                          E_ENERGY));
 13300  018A' 0E03               	movlw	3
 13301  018C' 6E12'              	movwf	ATM_registers@reg,c
 13302  018E' 0E00               	movlw	0
 13303  0190' EC00' F000'        	call	_ATM_registers
 13304  0194' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
 13305  0198' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
 13306  019C' 6A19'              	clrf	LCDNokia_printValue@value+2,c
 13307  019E' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
 13308  01A0' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
 13309                           
 13310                           ;Phases.c: 766: break;
 13311  01A4' D084               	goto	l547
 13312  01A6'                    
 13313                           ;Phases.c: 768: LCDNokia_gotoXY(0,1);
 13314  01A6' 0E01               	movlw	1
 13315  01A8' 6E08'              	movwf	LCDNokia_gotoXY@y,c
 13316  01AA' 0E00               	movlw	0
 13317  01AC' EC00' F000'        	call	_LCDNokia_gotoXY
 13318                           
 13319                           ;Phases.c: 769: LCDNokia_sendString(active_Reverse1);
 13320  01B0' 0E00'              	movlw	low activeEnergy@active_Reverse1
 13321  01B2' 6E0D'              	movwf	LCDNokia_sendString@characters,c
 13322  01B4' 0E00'              	movlw	high activeEnergy@active_Reverse1
 13323  01B6' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
 13324  01B8' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
 13325                           
 13326                           ;Phases.c: 770: LCDNokia_printValue(ATM_registers(ACTIVE_ENERGY_TYPE, PHASE_A_REV_ACTIVE
      +                          _ENERGY));
 13327  01BC' 0E05               	movlw	5
 13328  01BE' 6E12'              	movwf	ATM_registers@reg,c
 13329  01C0' 0E00               	movlw	0
 13330  01C2' EC00' F000'        	call	_ATM_registers
 13331  01C6' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
 13332  01CA' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
 13333  01CE' 6A19'              	clrf	LCDNokia_printValue@value+2,c
 13334  01D0' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
 13335  01D2' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
 13336                           
 13337                           ;Phases.c: 771: LCDNokia_gotoXY(0,2);
 13338  01D6' 0E02               	movlw	2
 13339  01D8' 6E08'              	movwf	LCDNokia_gotoXY@y,c
 13340  01DA' 0E00               	movlw	0
 13341  01DC' EC00' F000'        	call	_LCDNokia_gotoXY
 13342                           
 13343                           ;Phases.c: 772: LCDNokia_sendString(active_Reverse2);
 13344  01E0' 0E00'              	movlw	low activeEnergy@active_Reverse2
 13345  01E2' 6E0D'              	movwf	LCDNokia_sendString@characters,c
 13346  01E4' 0E00'              	movlw	high activeEnergy@active_Reverse2
 13347  01E6' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
 13348  01E8' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
 13349                           
 13350                           ;Phases.c: 773: LCDNokia_printValue(ATM_registers(ACTIVE_ENERGY_TYPE, PHASE_B_REV_ACTIVE
      +                          _ENERGY));
 13351  01EC' 0E06               	movlw	6
 13352  01EE' 6E12'              	movwf	ATM_registers@reg,c
 13353  01F0' 0E00               	movlw	0
 13354  01F2' EC00' F000'        	call	_ATM_registers
 13355  01F6' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
 13356  01FA' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
 13357  01FE' 6A19'              	clrf	LCDNokia_printValue@value+2,c
 13358  0200' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
 13359  0202' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
 13360                           
 13361                           ;Phases.c: 774: LCDNokia_gotoXY(0,3);
 13362  0206' 0E03               	movlw	3
 13363  0208' 6E08'              	movwf	LCDNokia_gotoXY@y,c
 13364  020A' 0E00               	movlw	0
 13365  020C' EC00' F000'        	call	_LCDNokia_gotoXY
 13366                           
 13367                           ;Phases.c: 775: LCDNokia_sendString(active_Reverse3);
 13368  0210' 0E00'              	movlw	low activeEnergy@active_Reverse3
 13369  0212' 6E0D'              	movwf	LCDNokia_sendString@characters,c
 13370  0214' 0E00'              	movlw	high activeEnergy@active_Reverse3
 13371  0216' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
 13372  0218' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
 13373                           
 13374                           ;Phases.c: 776: LCDNokia_printValue(ATM_registers(ACTIVE_ENERGY_TYPE, PHASE_C_REV_ACTIVE
      +                          _ENERGY));
 13375  021C' 0E07               	movlw	7
 13376  021E' 6E12'              	movwf	ATM_registers@reg,c
 13377  0220' 0E00               	movlw	0
 13378  0222' EC00' F000'        	call	_ATM_registers
 13379  0226' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
 13380  022A' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
 13381  022E' 6A19'              	clrf	LCDNokia_printValue@value+2,c
 13382  0230' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
 13383  0232' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
 13384                           
 13385                           ;Phases.c: 777: break;
 13386  0236' D03B               	goto	l547
 13387  0238'                    
 13388                           ;Phases.c: 779: LCDNokia_gotoXY(0,1);
 13389  0238' 0E01               	movlw	1
 13390  023A' 6E08'              	movwf	LCDNokia_gotoXY@y,c
 13391  023C' 0E00               	movlw	0
 13392  023E' EC00' F000'        	call	_LCDNokia_gotoXY
 13393                           
 13394                           ;Phases.c: 780: LCDNokia_sendString(active_Forward_Total);
 13395  0242' 0E00'              	movlw	low activeEnergy@active_Forward_Total
 13396  0244' 6E0D'              	movwf	LCDNokia_sendString@characters,c
 13397  0246' 0E00'              	movlw	high activeEnergy@active_Forward_Total
 13398  0248' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
 13399  024A' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
 13400                           
 13401                           ;Phases.c: 781: LCDNokia_printValue(ATM_registers(ACTIVE_ENERGY_TYPE, TOTAL_FORW_ACTIVE_
      +                          ENERGY));
 13402  024E' 0E00               	movlw	0
 13403  0250' 6E12'              	movwf	ATM_registers@reg,c
 13404  0252' 0E00               	movlw	0
 13405  0254' EC00' F000'        	call	_ATM_registers
 13406  0258' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
 13407  025C' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
 13408  0260' 6A19'              	clrf	LCDNokia_printValue@value+2,c
 13409  0262' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
 13410  0264' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
 13411                           
 13412                           ;Phases.c: 782: LCDNokia_gotoXY(0,2);
 13413  0268' 0E02               	movlw	2
 13414  026A' 6E08'              	movwf	LCDNokia_gotoXY@y,c
 13415  026C' 0E00               	movlw	0
 13416  026E' EC00' F000'        	call	_LCDNokia_gotoXY
 13417                           
 13418                           ;Phases.c: 783: LCDNokia_sendString(active_Reverse_Total);
 13419  0272' 0E00'              	movlw	low activeEnergy@active_Reverse_Total
 13420  0274' 6E0D'              	movwf	LCDNokia_sendString@characters,c
 13421  0276' 0E00'              	movlw	high activeEnergy@active_Reverse_Total
 13422  0278' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
 13423  027A' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
 13424                           
 13425                           ;Phases.c: 784: LCDNokia_printValue(ATM_registers(ACTIVE_ENERGY_TYPE, TOTAL_REV_ACTIVE_E
      +                          NERGY));
 13426  027E' 0E04               	movlw	4
 13427  0280' 6E12'              	movwf	ATM_registers@reg,c
 13428  0282' 0E00               	movlw	0
 13429  0284' EC00' F000'        	call	_ATM_registers
 13430  0288' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
 13431  028C' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
 13432  0290' 6A19'              	clrf	LCDNokia_printValue@value+2,c
 13433  0292' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
 13434  0294' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
 13435                           
 13436                           ;Phases.c: 788: }
 13437                           
 13438                           ;Phases.c: 787: break;
 13439                           
 13440                           ;Phases.c: 786: default:
 13441                           
 13442                           ;Phases.c: 785: break;
 13443  0298' D00A               	goto	l547
 13444  029A'                    l545:
 13445  029A' 5007'              	movf	activeEnergy@counter,w,c
 13446                           
 13447                           ; Switch size 1, requested type "space"
 13448                           ; Number of cases is 3, Range of values is 0 to 2
 13449                           ; switch strategies available:
 13450                           ; Name         Instructions Cycles
 13451                           ; simple_byte           10     6 (average)
 13452                           ;	Chosen strategy is simple_byte
 13453  029C' 0A00               	xorlw	0	; case 0
 13454  029E' B4D8               	btfsc	status,2,c
 13455  02A0' D739               	goto	l546
 13456  02A2' 0A01               	xorlw	1	; case 1
 13457  02A4' B4D8               	btfsc	status,2,c
 13458  02A6' D77F               	goto	l548
 13459  02A8' 0A03               	xorlw	3	; case 2
 13460  02AA' B4D8               	btfsc	status,2,c
 13461  02AC' D7C5               	goto	l549
 13462  02AE'                    l547:
 13463                           
 13464                           ;Phases.c: 790: return (currentEnergy1);
 13465  02AE' C0CE' F026'        	movff	activeEnergy@currentEnergy1,?_activeEnergy
 13466  02B2' C0CF' F027'        	movff	activeEnergy@currentEnergy1+1,?_activeEnergy+1
 13467  02B6' C0D0' F028'        	movff	activeEnergy@currentEnergy1+2,?_activeEnergy+2
 13468  02BA' 0012               	return		;funcret
 13469  02BC'                    __end_of_activeEnergy:
 13470                           	opt stack 0
 13471                           tosu	equ	0xFFF
 13472                           tosh	equ	0xFFE
 13473                           tosl	equ	0xFFD
 13474                           pclath	equ	0xFFA
 13475                           tblptru	equ	0xFF8
 13476                           tblptrh	equ	0xFF7
 13477                           tblptrl	equ	0xFF6
 13478                           tablat	equ	0xFF5
 13479                           prodh	equ	0xFF4
 13480                           prodl	equ	0xFF3
 13481                           postinc0	equ	0xFEE
 13482                           wreg	equ	0xFE8
 13483                           postinc2	equ	0xFDE
 13484                           status	equ	0xFD8
 13485                           
 13486 ;; *************** function _reactiveEnergy *****************
 13487 ;; Defined at:
 13488 ;;		line 793 in file "Phases.c"
 13489 ;; Parameters:    Size  Location     Type
 13490 ;;  data            3   38[COMRAM] struct .
 13491 ;; Auto vars:     Size  Location     Type
 13492 ;;  reactive_For   19    0[BANK0 ] const unsigned char [19]
 13493 ;;  reactive_Rev   18   19[BANK0 ] const unsigned char [18]
 13494 ;;  reactive_For   16   53[BANK0 ] const unsigned char [16]
 13495 ;;  reactive_For   16   37[BANK0 ] const unsigned char [16]
 13496 ;;  reactive_Rev   15  114[BANK0 ] const unsigned char [15]
 13497 ;;  reactive_Rev   15   99[BANK0 ] const unsigned char [15]
 13498 ;;  reactive_Rev   15   84[BANK0 ] const unsigned char [15]
 13499 ;;  reactive_For   15   69[BANK0 ] const unsigned char [15]
 13500 ;;  maxScreens      1  129[BANK0 ] const unsigned char 
 13501 ;; Return value:  Size  Location     Type
 13502 ;;                  3   38[COMRAM] struct .
 13503 ;; Registers used:
 13504 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13505 ;; Tracked objects:
 13506 ;;		On entry : 0/0
 13507 ;;		On exit  : 0/0
 13508 ;;		Unchanged: 0/0
 13509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13510 ;;      Params:         3       0       0       0
 13511 ;;      Locals:         0     130       0       0
 13512 ;;      Temps:          0       0       0       0
 13513 ;;      Totals:         3     130       0       0
 13514 ;;Total ram usage:      133 bytes
 13515 ;; Hardware stack levels used:    1
 13516 ;; Hardware stack levels required when called:    4
 13517 ;; This function calls:
 13518 ;;		_ATM_registers
 13519 ;;		_LCDNokia_clear
 13520 ;;		_LCDNokia_gotoXY
 13521 ;;		_LCDNokia_printValue
 13522 ;;		_LCDNokia_sendString
 13523 ;;		_getButton1
 13524 ;;		_getButton2
 13525 ;;		_getButton3
 13526 ;; This function is called by:
 13527 ;;		_stateEnergy
 13528 ;; This function uses a non-reentrant model
 13529 ;;
 13530                           
 13531                           	psect	text48
 13532  0000'                    __ptext48:
 13533                           	opt stack 0
 13534  0000'                    _reactiveEnergy:
 13535                           	opt stack 25
 13536                           
 13537                           ;Phases.c: 795: static uint8_t counter = 0;
 13538                           ;Phases.c: 796: const uint8_t maxScreens = 3;
 13539                           
 13540                           ;incstack = 0
 13541  0000' 0E03               	movlw	3
 13542  0002' 0100               	movlb	0	; () banked
 13543  0004' 6F00'              	movwf	reactiveEnergy@maxScreens& (0+255),b
 13544                           
 13545                           ; BSR set to: 0
 13546                           ;Phases.c: 797: const uint8_t reactive_Forward1[] = "PA Forw React: ";
 13547  0006' 0E00'              	movlw	low reactiveEnergy@F3635
 13548  0008' 6EF6               	movwf	tblptrl,c
 13549  000A'                    	if	1	;There is more than 1 active tblptr byte
 13550  000A' 0E00'              	movlw	high reactiveEnergy@F3635
 13551  000C' 6EF7               	movwf	tblptrh,c
 13552  000E'                    	endif
 13553  000E'                    	if	0	;There are less than 3 active tblptr bytes
 13554  000E'                    	endif
 13555  000E' EE20' F000'        	lfsr	2,reactiveEnergy@reactive_Forward1
 13556  0012' 0E0F               	movlw	15
 13557  0014'                    u3370:
 13558  0014' 0009               	tblrd		*+
 13559  0016' CFF5 FFDE          	movff	tablat,postinc2
 13560  001A' 06E8               	decf	wreg,f,c
 13561  001C' E2FB               	bc	u3370
 13562                           
 13563                           ; BSR set to: 0
 13564                           ;Phases.c: 798: const uint8_t reactive_Forward2[] = "PB Forw Reac: ";
 13565  001E' 0E00'              	movlw	low reactiveEnergy@F3637
 13566  0020' 6EF6               	movwf	tblptrl,c
 13567  0022'                    	if	1	;There is more than 1 active tblptr byte
 13568  0022' 0E00'              	movlw	high reactiveEnergy@F3637
 13569  0024' 6EF7               	movwf	tblptrh,c
 13570  0026'                    	endif
 13571  0026'                    	if	0	;There are less than 3 active tblptr bytes
 13572  0026'                    	endif
 13573  0026' EE20' F000'        	lfsr	2,reactiveEnergy@reactive_Forward2
 13574  002A' 0E0E               	movlw	14
 13575  002C'                    u3380:
 13576  002C' 0009               	tblrd		*+
 13577  002E' CFF5 FFDE          	movff	tablat,postinc2
 13578  0032' 06E8               	decf	wreg,f,c
 13579  0034' E2FB               	bc	u3380
 13580                           
 13581                           ; BSR set to: 0
 13582                           ;Phases.c: 799: const uint8_t reactive_Forward3[] = "PC Forw React: ";
 13583  0036' 0E00'              	movlw	low reactiveEnergy@F3639
 13584  0038' 6EF6               	movwf	tblptrl,c
 13585  003A'                    	if	1	;There is more than 1 active tblptr byte
 13586  003A' 0E00'              	movlw	high reactiveEnergy@F3639
 13587  003C' 6EF7               	movwf	tblptrh,c
 13588  003E'                    	endif
 13589  003E'                    	if	0	;There are less than 3 active tblptr bytes
 13590  003E'                    	endif
 13591  003E' EE20' F000'        	lfsr	2,reactiveEnergy@reactive_Forward3
 13592  0042' 0E0F               	movlw	15
 13593  0044'                    u3390:
 13594  0044' 0009               	tblrd		*+
 13595  0046' CFF5 FFDE          	movff	tablat,postinc2
 13596  004A' 06E8               	decf	wreg,f,c
 13597  004C' E2FB               	bc	u3390
 13598                           
 13599                           ; BSR set to: 0
 13600                           ;Phases.c: 801: const uint8_t reactive_Reverse1[] = "PA Rev React: ";
 13601  004E' 0E00'              	movlw	low reactiveEnergy@F3641
 13602  0050' 6EF6               	movwf	tblptrl,c
 13603  0052'                    	if	1	;There is more than 1 active tblptr byte
 13604  0052' 0E00'              	movlw	high reactiveEnergy@F3641
 13605  0054' 6EF7               	movwf	tblptrh,c
 13606  0056'                    	endif
 13607  0056'                    	if	0	;There are less than 3 active tblptr bytes
 13608  0056'                    	endif
 13609  0056' EE20' F000'        	lfsr	2,reactiveEnergy@reactive_Reverse1
 13610  005A' 0E0E               	movlw	14
 13611  005C'                    u3400:
 13612  005C' 0009               	tblrd		*+
 13613  005E' CFF5 FFDE          	movff	tablat,postinc2
 13614  0062' 06E8               	decf	wreg,f,c
 13615  0064' E2FB               	bc	u3400
 13616                           
 13617                           ; BSR set to: 0
 13618                           ;Phases.c: 802: const uint8_t reactive_Reverse2[] = "PB Rev React: ";
 13619  0066' 0E00'              	movlw	low reactiveEnergy@F3643
 13620  0068' 6EF6               	movwf	tblptrl,c
 13621  006A'                    	if	1	;There is more than 1 active tblptr byte
 13622  006A' 0E00'              	movlw	high reactiveEnergy@F3643
 13623  006C' 6EF7               	movwf	tblptrh,c
 13624  006E'                    	endif
 13625  006E'                    	if	0	;There are less than 3 active tblptr bytes
 13626  006E'                    	endif
 13627  006E' EE20' F000'        	lfsr	2,reactiveEnergy@reactive_Reverse2
 13628  0072' 0E0E               	movlw	14
 13629  0074'                    u3410:
 13630  0074' 0009               	tblrd		*+
 13631  0076' CFF5 FFDE          	movff	tablat,postinc2
 13632  007A' 06E8               	decf	wreg,f,c
 13633  007C' E2FB               	bc	u3410
 13634                           
 13635                           ; BSR set to: 0
 13636                           ;Phases.c: 803: const uint8_t reactive_Reverse3[] = "PC Rev React: ";
 13637  007E' 0E00'              	movlw	low reactiveEnergy@F3645
 13638  0080' 6EF6               	movwf	tblptrl,c
 13639  0082'                    	if	1	;There is more than 1 active tblptr byte
 13640  0082' 0E00'              	movlw	high reactiveEnergy@F3645
 13641  0084' 6EF7               	movwf	tblptrh,c
 13642  0086'                    	endif
 13643  0086'                    	if	0	;There are less than 3 active tblptr bytes
 13644  0086'                    	endif
 13645  0086' EE20' F000'        	lfsr	2,reactiveEnergy@reactive_Reverse3
 13646  008A' 0E0E               	movlw	14
 13647  008C'                    u3420:
 13648  008C' 0009               	tblrd		*+
 13649  008E' CFF5 FFDE          	movff	tablat,postinc2
 13650  0092' 06E8               	decf	wreg,f,c
 13651  0094' E2FB               	bc	u3420
 13652                           
 13653                           ; BSR set to: 0
 13654                           ;Phases.c: 805: const uint8_t reactive_Forward_Total[] = "Total Forw React: ";
 13655  0096' 0E00'              	movlw	low reactiveEnergy@F3647
 13656  0098' 6EF6               	movwf	tblptrl,c
 13657  009A'                    	if	1	;There is more than 1 active tblptr byte
 13658  009A' 0E00'              	movlw	high reactiveEnergy@F3647
 13659  009C' 6EF7               	movwf	tblptrh,c
 13660  009E'                    	endif
 13661  009E'                    	if	0	;There are less than 3 active tblptr bytes
 13662  009E'                    	endif
 13663  009E' EE20' F000'        	lfsr	2,reactiveEnergy@reactive_Forward_Total
 13664  00A2' 0E12               	movlw	18
 13665  00A4'                    u3430:
 13666  00A4' 0009               	tblrd		*+
 13667  00A6' CFF5 FFDE          	movff	tablat,postinc2
 13668  00AA' 06E8               	decf	wreg,f,c
 13669  00AC' E2FB               	bc	u3430
 13670                           
 13671                           ; BSR set to: 0
 13672                           ;Phases.c: 806: const uint8_t reactive_Reverse_Total[] = "Total Rev React: ";
 13673  00AE' 0E00'              	movlw	low reactiveEnergy@F3649
 13674  00B0' 6EF6               	movwf	tblptrl,c
 13675  00B2'                    	if	1	;There is more than 1 active tblptr byte
 13676  00B2' 0E00'              	movlw	high reactiveEnergy@F3649
 13677  00B4' 6EF7               	movwf	tblptrh,c
 13678  00B6'                    	endif
 13679  00B6'                    	if	0	;There are less than 3 active tblptr bytes
 13680  00B6'                    	endif
 13681  00B6' EE20' F000'        	lfsr	2,reactiveEnergy@reactive_Reverse_Total
 13682  00BA' 0E11               	movlw	17
 13683  00BC'                    u3440:
 13684  00BC' 0009               	tblrd		*+
 13685  00BE' CFF5 FFDE          	movff	tablat,postinc2
 13686  00C2' 06E8               	decf	wreg,f,c
 13687  00C4' E2FB               	bc	u3440
 13688                           
 13689                           ;Phases.c: 809: static PhaseEnergy_Type currentEnergy2;
 13690                           ;Phases.c: 812: currentEnergy2.phaseState = REACTIVE_ENERGY;
 13691  00C6' 0E01               	movlw	1
 13692  00C8' 0101               	movlb	1	; () banked
 13693  00CA' 6F00'              	movwf	(reactiveEnergy@currentEnergy2+1)& (0+255),b
 13694                           
 13695                           ; BSR set to: 1
 13696                           ;Phases.c: 813: currentEnergy2.stateMain = data.stateMain;
 13697  00CC' C028' F0CD'        	movff	reactiveEnergy@data+2,reactiveEnergy@currentEnergy2+2
 13698                           
 13699                           ; BSR set to: 1
 13700                           ;Phases.c: 815: if(getButton1() == 1)
 13701  00D0' EC00' F000'        	call	_getButton1	;wreg free
 13702  00D4' 06E8               	decf	wreg,f,c
 13703  00D6' A4D8               	btfss	status,2,c
 13704  00D8' D003               	goto	l574
 13705                           
 13706                           ;Phases.c: 816: {
 13707                           ;Phases.c: 817: currentEnergy2.phaseState = EXIT_ENERGY;
 13708  00DA' 0E05               	movlw	5
 13709  00DC' 0101               	movlb	1	; () banked
 13710  00DE' 6F00'              	movwf	(reactiveEnergy@currentEnergy2+1)& (0+255),b
 13711  00E0'                    l574:
 13712                           
 13713                           ;Phases.c: 818: }
 13714                           ;Phases.c: 819: if(getButton2() == 1)
 13715                           
 13716                           ; BSR set to: 1
 13717  00E0' EC00' F000'        	call	_getButton2	;wreg free
 13718  00E4' 06E8               	decf	wreg,f,c
 13719  00E6' A4D8               	btfss	status,2,c
 13720  00E8' D005               	goto	l575
 13721                           
 13722                           ;Phases.c: 820: {
 13723                           ;Phases.c: 821: currentEnergy2.phaseState = APPARENT_ENERGY;
 13724  00EA' 0E02               	movlw	2
 13725  00EC' 0101               	movlb	1	; () banked
 13726  00EE' 6F00'              	movwf	(reactiveEnergy@currentEnergy2+1)& (0+255),b
 13727                           
 13728                           ; BSR set to: 1
 13729                           ;Phases.c: 822: LCDNokia_clear();
 13730  00F0' EC00' F000'        	call	_LCDNokia_clear	;wreg free
 13731  00F4'                    l575:
 13732                           
 13733                           ;Phases.c: 823: }
 13734                           ;Phases.c: 824: if(getButton3() == 1)
 13735  00F4' EC00' F000'        	call	_getButton3	;wreg free
 13736  00F8' 06E8               	decf	wreg,f,c
 13737  00FA' A4D8               	btfss	status,2,c
 13738  00FC' D0CE               	goto	l578
 13739                           
 13740                           ;Phases.c: 825: {
 13741                           ;Phases.c: 826: counter++;
 13742  00FE' 2A06'              	incf	reactiveEnergy@counter,f,c
 13743                           
 13744                           ;Phases.c: 827: LCDNokia_clear();
 13745  0100' EC00' F000'        	call	_LCDNokia_clear	;wreg free
 13746                           
 13747                           ;Phases.c: 828: if(counter > maxScreens)
 13748  0104' 5006'              	movf	reactiveEnergy@counter,w,c
 13749  0106' 0100               	movlb	0	; () banked
 13750  0108' 5D00'              	subwf	reactiveEnergy@maxScreens& (0+255),w,b
 13751  010A' B0D8               	btfsc	status,0,c
 13752  010C' D0C6               	goto	l578
 13753                           
 13754                           ; BSR set to: 0
 13755                           ;Phases.c: 829: {
 13756                           ;Phases.c: 830: counter = 0;
 13757  010E' 0E00               	movlw	0
 13758  0110' 6E06'              	movwf	reactiveEnergy@counter,c
 13759                           
 13760                           ; BSR set to: 0
 13761                           ;Phases.c: 831: }
 13762                           ;Phases.c: 832: }
 13763                           ;Phases.c: 833: switch(counter)
 13764                           
 13765                           ; BSR set to: 0
 13766  0112' D0C3               	goto	l578
 13767  0114'                    
 13768                           ;Phases.c: 836: LCDNokia_gotoXY(0,1);
 13769                           
 13770                           ; BSR set to: 0
 13771  0114' 0E01               	movlw	1
 13772  0116' 6E08'              	movwf	LCDNokia_gotoXY@y,c
 13773  0118' 0E00               	movlw	0
 13774  011A' EC00' F000'        	call	_LCDNokia_gotoXY
 13775                           
 13776                           ;Phases.c: 837: LCDNokia_sendString(reactive_Forward1);
 13777  011E' 0E00'              	movlw	low reactiveEnergy@reactive_Forward1
 13778  0120' 6E0D'              	movwf	LCDNokia_sendString@characters,c
 13779  0122' 0E00'              	movlw	high reactiveEnergy@reactive_Forward1
 13780  0124' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
 13781  0126' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
 13782                           
 13783                           ;Phases.c: 838: LCDNokia_printValue(ATM_registers(REACTIVE_ENERGY_TYPE, PHASE_A_FORW_REA
      +                          CTIVE_ENERGY));
 13784  012A' 0E09               	movlw	9
 13785  012C' 6E12'              	movwf	ATM_registers@reg,c
 13786  012E' 0E01               	movlw	1
 13787  0130' EC00' F000'        	call	_ATM_registers
 13788  0134' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
 13789  0138' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
 13790  013C' 6A19'              	clrf	LCDNokia_printValue@value+2,c
 13791  013E' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
 13792  0140' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
 13793                           
 13794                           ;Phases.c: 839: LCDNokia_gotoXY(0,2);
 13795  0144' 0E02               	movlw	2
 13796  0146' 6E08'              	movwf	LCDNokia_gotoXY@y,c
 13797  0148' 0E00               	movlw	0
 13798  014A' EC00' F000'        	call	_LCDNokia_gotoXY
 13799                           
 13800                           ;Phases.c: 840: LCDNokia_sendString(reactive_Forward2);
 13801  014E' 0E00'              	movlw	low reactiveEnergy@reactive_Forward2
 13802  0150' 6E0D'              	movwf	LCDNokia_sendString@characters,c
 13803  0152' 0E00'              	movlw	high reactiveEnergy@reactive_Forward2
 13804  0154' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
 13805  0156' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
 13806                           
 13807                           ;Phases.c: 841: LCDNokia_printValue(ATM_registers(REACTIVE_ENERGY_TYPE, PHASE_B_FORW_REA
      +                          CTIVE_ENERGY));
 13808  015A' 0E0A               	movlw	10
 13809  015C' 6E12'              	movwf	ATM_registers@reg,c
 13810  015E' 0E01               	movlw	1
 13811  0160' EC00' F000'        	call	_ATM_registers
 13812  0164' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
 13813  0168' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
 13814  016C' 6A19'              	clrf	LCDNokia_printValue@value+2,c
 13815  016E' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
 13816  0170' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
 13817                           
 13818                           ;Phases.c: 842: LCDNokia_gotoXY(0,3);
 13819  0174' 0E03               	movlw	3
 13820  0176' 6E08'              	movwf	LCDNokia_gotoXY@y,c
 13821  0178' 0E00               	movlw	0
 13822  017A' EC00' F000'        	call	_LCDNokia_gotoXY
 13823                           
 13824                           ;Phases.c: 843: LCDNokia_sendString(reactive_Forward3);
 13825  017E' 0E00'              	movlw	low reactiveEnergy@reactive_Forward3
 13826  0180' 6E0D'              	movwf	LCDNokia_sendString@characters,c
 13827  0182' 0E00'              	movlw	high reactiveEnergy@reactive_Forward3
 13828  0184' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
 13829  0186' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
 13830                           
 13831                           ;Phases.c: 844: LCDNokia_printValue(ATM_registers(REACTIVE_ENERGY_TYPE, PHASE_C_FORW_REA
      +                          CTIVE_ENERGY));
 13832  018A' 0E0B               	movlw	11
 13833  018C' 6E12'              	movwf	ATM_registers@reg,c
 13834  018E' 0E01               	movlw	1
 13835  0190' EC00' F000'        	call	_ATM_registers
 13836  0194' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
 13837  0198' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
 13838  019C' 6A19'              	clrf	LCDNokia_printValue@value+2,c
 13839  019E' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
 13840  01A0' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
 13841                           
 13842                           ;Phases.c: 845: break;
 13843  01A4' D084               	goto	l580
 13844  01A6'                    
 13845                           ;Phases.c: 847: LCDNokia_gotoXY(0,1);
 13846  01A6' 0E01               	movlw	1
 13847  01A8' 6E08'              	movwf	LCDNokia_gotoXY@y,c
 13848  01AA' 0E00               	movlw	0
 13849  01AC' EC00' F000'        	call	_LCDNokia_gotoXY
 13850                           
 13851                           ;Phases.c: 848: LCDNokia_sendString(reactive_Reverse1);
 13852  01B0' 0E00'              	movlw	low reactiveEnergy@reactive_Reverse1
 13853  01B2' 6E0D'              	movwf	LCDNokia_sendString@characters,c
 13854  01B4' 0E00'              	movlw	high reactiveEnergy@reactive_Reverse1
 13855  01B6' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
 13856  01B8' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
 13857                           
 13858                           ;Phases.c: 849: LCDNokia_printValue(ATM_registers(REACTIVE_ENERGY_TYPE, PHASE_A_REV_REAC
      +                          TIVE_ENERGY));
 13859  01BC' 0E0D               	movlw	13
 13860  01BE' 6E12'              	movwf	ATM_registers@reg,c
 13861  01C0' 0E01               	movlw	1
 13862  01C2' EC00' F000'        	call	_ATM_registers
 13863  01C6' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
 13864  01CA' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
 13865  01CE' 6A19'              	clrf	LCDNokia_printValue@value+2,c
 13866  01D0' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
 13867  01D2' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
 13868                           
 13869                           ;Phases.c: 850: LCDNokia_gotoXY(0,2);
 13870  01D6' 0E02               	movlw	2
 13871  01D8' 6E08'              	movwf	LCDNokia_gotoXY@y,c
 13872  01DA' 0E00               	movlw	0
 13873  01DC' EC00' F000'        	call	_LCDNokia_gotoXY
 13874                           
 13875                           ;Phases.c: 851: LCDNokia_sendString(reactive_Reverse2);
 13876  01E0' 0E00'              	movlw	low reactiveEnergy@reactive_Reverse2
 13877  01E2' 6E0D'              	movwf	LCDNokia_sendString@characters,c
 13878  01E4' 0E00'              	movlw	high reactiveEnergy@reactive_Reverse2
 13879  01E6' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
 13880  01E8' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
 13881                           
 13882                           ;Phases.c: 852: LCDNokia_printValue(ATM_registers(REACTIVE_ENERGY_TYPE, PHASE_B_REV_REAC
      +                          TIVE_ENERGY));
 13883  01EC' 0E0E               	movlw	14
 13884  01EE' 6E12'              	movwf	ATM_registers@reg,c
 13885  01F0' 0E01               	movlw	1
 13886  01F2' EC00' F000'        	call	_ATM_registers
 13887  01F6' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
 13888  01FA' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
 13889  01FE' 6A19'              	clrf	LCDNokia_printValue@value+2,c
 13890  0200' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
 13891  0202' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
 13892                           
 13893                           ;Phases.c: 853: LCDNokia_gotoXY(0,3);
 13894  0206' 0E03               	movlw	3
 13895  0208' 6E08'              	movwf	LCDNokia_gotoXY@y,c
 13896  020A' 0E00               	movlw	0
 13897  020C' EC00' F000'        	call	_LCDNokia_gotoXY
 13898                           
 13899                           ;Phases.c: 854: LCDNokia_sendString(reactive_Reverse3);
 13900  0210' 0E00'              	movlw	low reactiveEnergy@reactive_Reverse3
 13901  0212' 6E0D'              	movwf	LCDNokia_sendString@characters,c
 13902  0214' 0E00'              	movlw	high reactiveEnergy@reactive_Reverse3
 13903  0216' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
 13904  0218' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
 13905                           
 13906                           ;Phases.c: 855: LCDNokia_printValue(ATM_registers(REACTIVE_ENERGY_TYPE, PHASE_C_REV_REAC
      +                          TIVE_ENERGY));
 13907  021C' 0E0F               	movlw	15
 13908  021E' 6E12'              	movwf	ATM_registers@reg,c
 13909  0220' 0E01               	movlw	1
 13910  0222' EC00' F000'        	call	_ATM_registers
 13911  0226' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
 13912  022A' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
 13913  022E' 6A19'              	clrf	LCDNokia_printValue@value+2,c
 13914  0230' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
 13915  0232' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
 13916                           
 13917                           ;Phases.c: 856: break;
 13918  0236' D03B               	goto	l580
 13919  0238'                    
 13920                           ;Phases.c: 858: LCDNokia_gotoXY(0,1);
 13921  0238' 0E01               	movlw	1
 13922  023A' 6E08'              	movwf	LCDNokia_gotoXY@y,c
 13923  023C' 0E00               	movlw	0
 13924  023E' EC00' F000'        	call	_LCDNokia_gotoXY
 13925                           
 13926                           ;Phases.c: 859: LCDNokia_sendString(reactive_Forward_Total);
 13927  0242' 0E00'              	movlw	low reactiveEnergy@reactive_Forward_Total
 13928  0244' 6E0D'              	movwf	LCDNokia_sendString@characters,c
 13929  0246' 0E00'              	movlw	high reactiveEnergy@reactive_Forward_Total
 13930  0248' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
 13931  024A' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
 13932                           
 13933                           ;Phases.c: 860: LCDNokia_printValue(ATM_registers(REACTIVE_ENERGY_TYPE, TOTAL_FORW_REACT
      +                          IVE_ENERGY));
 13934  024E' 0E08               	movlw	8
 13935  0250' 6E12'              	movwf	ATM_registers@reg,c
 13936  0252' 0E01               	movlw	1
 13937  0254' EC00' F000'        	call	_ATM_registers
 13938  0258' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
 13939  025C' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
 13940  0260' 6A19'              	clrf	LCDNokia_printValue@value+2,c
 13941  0262' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
 13942  0264' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
 13943                           
 13944                           ;Phases.c: 861: LCDNokia_gotoXY(0,2);
 13945  0268' 0E02               	movlw	2
 13946  026A' 6E08'              	movwf	LCDNokia_gotoXY@y,c
 13947  026C' 0E00               	movlw	0
 13948  026E' EC00' F000'        	call	_LCDNokia_gotoXY
 13949                           
 13950                           ;Phases.c: 862: LCDNokia_sendString(reactive_Reverse_Total);
 13951  0272' 0E00'              	movlw	low reactiveEnergy@reactive_Reverse_Total
 13952  0274' 6E0D'              	movwf	LCDNokia_sendString@characters,c
 13953  0276' 0E00'              	movlw	high reactiveEnergy@reactive_Reverse_Total
 13954  0278' 6E0E'              	movwf	LCDNokia_sendString@characters+1,c
 13955  027A' EC00' F000'        	call	_LCDNokia_sendString	;wreg free
 13956                           
 13957                           ;Phases.c: 863: LCDNokia_printValue(ATM_registers(REACTIVE_ENERGY_TYPE, TOTAL_REVERSE_RE
      +                          ACTIVE_ENERGY));
 13958  027E' 0E0C               	movlw	12
 13959  0280' 6E12'              	movwf	ATM_registers@reg,c
 13960  0282' 0E01               	movlw	1
 13961  0284' EC00' F000'        	call	_ATM_registers
 13962  0288' C012' F017'        	movff	?_ATM_registers,LCDNokia_printValue@value
 13963  028C' C013' F018'        	movff	?_ATM_registers+1,LCDNokia_printValue@value+1
 13964  0290' 6A19'              	clrf	LCDNokia_printValue@value+2,c
 13965  0292' 6A1A'              	clrf	LCDNokia_printValue@value+3,c
 13966  0294' EC00' F000'        	call	_LCDNokia_printValue	;wreg free
 13967                           
 13968                           ;Phases.c: 867: }
 13969                           
 13970                           ;Phases.c: 866: break;
 13971                           
 13972                           ;Phases.c: 865: default:
 13973                           
 13974                           ;Phases.c: 864: break;
 13975  0298' D00A               	goto	l580
 13976  029A'                    l578:
 13977  029A' 5006'              	movf	reactiveEnergy@counter,w,c
 13978                           
 13979                           ; Switch size 1, requested type "space"
 13980                           ; Number of cases is 3, Range of values is 0 to 2
 13981                           ; switch strategies available:
 13982                           ; Name         Instructions Cycles
 13983                           ; simple_byte           10     6 (average)
 13984                           ;	Chosen strategy is simple_byte
 13985  029C' 0A00               	xorlw	0	; case 0
 13986  029E' B4D8               	btfsc	status,2,c
 13987  02A0' D739               	goto	l579
 13988  02A2' 0A01               	xorlw	1	; case 1
 13989  02A4' B4D8               	btfsc	status,2,c
 13990  02A6' D77F               	goto	l581
 13991  02A8' 0A03               	xorlw	3	; case 2
 13992  02AA' B4D8               	btfsc	status,2,c
 13993  02AC' D7C5               	goto	l582
 13994  02AE'                    l580:
 13995                           
 13996                           ;Phases.c: 869: return (currentEnergy2);
 13997  02AE' C0CB' F026'        	movff	reactiveEnergy@currentEnergy2,?_reactiveEnergy
 13998  02B2' C0CC' F027'        	movff	reactiveEnergy@currentEnergy2+1,?_reactiveEnergy+1
 13999  02B6' C0CD' F028'        	movff	reactiveEnergy@currentEnergy2+2,?_reactiveEnergy+2
 14000  02BA' 0012               	return		;funcret
 14001  02BC'                    __end_of_reactiveEnergy:
 14002                           	opt stack 0
 14003                           tosu	equ	0xFFF
 14004                           tosh	equ	0xFFE
 14005                           tosl	equ	0xFFD
 14006                           pclath	equ	0xFFA
 14007                           tblptru	equ	0xFF8
 14008                           tblptrh	equ	0xFF7
 14009                           tblptrl	equ	0xFF6
 14010                           tablat	equ	0xFF5
 14011                           prodh	equ	0xFF4
 14012                           prodl	equ	0xFF3
 14013                           postinc0	equ	0xFEE
 14014                           wreg	equ	0xFE8
 14015                           postinc2	equ	0xFDE
 14016                           status	equ	0xFD8
 14017                           
 14018 ;; *************** function _getButton3 *****************
 14019 ;; Defined at:
 14020 ;;		line 45 in file "Buttons.c"
 14021 ;; Parameters:    Size  Location     Type
 14022 ;;		None
 14023 ;; Auto vars:     Size  Location     Type
 14024 ;;		None
 14025 ;; Return value:  Size  Location     Type
 14026 ;;                  1    wreg      unsigned char 
 14027 ;; Registers used:
 14028 ;;		wreg, status,2
 14029 ;; Tracked objects:
 14030 ;;		On entry : 0/0
 14031 ;;		On exit  : 0/0
 14032 ;;		Unchanged: 0/0
 14033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14034 ;;      Params:         0       0       0       0
 14035 ;;      Locals:         0       0       0       0
 14036 ;;      Temps:          0       0       0       0
 14037 ;;      Totals:         0       0       0       0
 14038 ;;Total ram usage:        0 bytes
 14039 ;; Hardware stack levels used:    1
 14040 ;; This function calls:
 14041 ;;		Nothing
 14042 ;; This function is called by:
 14043 ;;		_generalView
 14044 ;;		_viewMenu
 14045 ;;		_activeEnergy
 14046 ;;		_reactiveEnergy
 14047 ;;		_apparentEnergy
 14048 ;;		_fundamentalEnergy
 14049 ;;		_harmonicEnergy
 14050 ;;		_typesPower1
 14051 ;;		_fhPower2
 14052 ;;		_phRmsVI
 14053 ;;		_phPowerFactor
 14054 ;;		_THDNPhaseAngle
 14055 ;; This function uses a non-reentrant model
 14056 ;;
 14057                           
 14058                           	psect	text49
 14059  0000'                    __ptext49:
 14060                           	opt stack 0
 14061  0000'                    _getButton3:
 14062                           	opt stack 28
 14063                           
 14064                           ;Buttons.c: 47: if(1 == PORTCbits.RC3)
 14065                           
 14066                           ;incstack = 0
 14067  0000' A682               	btfss	3970,3,c	;volatile
 14068  0002' D002               	goto	l1260
 14069                           
 14070                           ;Buttons.c: 48: {
 14071                           ;Buttons.c: 49: FlagButton3 = 1;
 14072  0004' 0E01               	movlw	1
 14073  0006' D001               	goto	L9
 14074  0008'                    l1260:
 14075                           
 14076                           ;Buttons.c: 51: else
 14077                           ;Buttons.c: 52: {
 14078                           ;Buttons.c: 53: FlagButton3 = 0;
 14079                           
 14080                           ; BSR set to: 0
 14081  0008' 0E00               	movlw	0
 14082  000A'                    L9:
 14083  000A' 0100               	movlb	0	; () banked
 14084  000C' 6F00'              	movwf	_FlagButton3& (0+255),b
 14085                           
 14086                           ; BSR set to: 0
 14087                           ;Buttons.c: 54: }
 14088                           ;Buttons.c: 55: return (FlagButton3);
 14089  000E' 5100'              	movf	_FlagButton3& (0+255),w,b
 14090  0010' 0012               	return	
 14091  0012'                    __end_of_getButton3:
 14092                           	opt stack 0
 14093                           tosu	equ	0xFFF
 14094                           tosh	equ	0xFFE
 14095                           tosl	equ	0xFFD
 14096                           pclath	equ	0xFFA
 14097                           tblptru	equ	0xFF8
 14098                           tblptrh	equ	0xFF7
 14099                           tblptrl	equ	0xFF6
 14100                           tablat	equ	0xFF5
 14101                           prodh	equ	0xFF4
 14102                           prodl	equ	0xFF3
 14103                           postinc0	equ	0xFEE
 14104                           wreg	equ	0xFE8
 14105                           postinc2	equ	0xFDE
 14106                           status	equ	0xFD8
 14107                           
 14108 ;; *************** function _getButton2 *****************
 14109 ;; Defined at:
 14110 ;;		line 27 in file "Buttons.c"
 14111 ;; Parameters:    Size  Location     Type
 14112 ;;		None
 14113 ;; Auto vars:     Size  Location     Type
 14114 ;;		None
 14115 ;; Return value:  Size  Location     Type
 14116 ;;                  1    wreg      unsigned char 
 14117 ;; Registers used:
 14118 ;;		wreg, status,2
 14119 ;; Tracked objects:
 14120 ;;		On entry : 0/0
 14121 ;;		On exit  : 0/0
 14122 ;;		Unchanged: 0/0
 14123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14124 ;;      Params:         0       0       0       0
 14125 ;;      Locals:         0       0       0       0
 14126 ;;      Temps:          0       0       0       0
 14127 ;;      Totals:         0       0       0       0
 14128 ;;Total ram usage:        0 bytes
 14129 ;; Hardware stack levels used:    1
 14130 ;; This function calls:
 14131 ;;		Nothing
 14132 ;; This function is called by:
 14133 ;;		_viewMenu
 14134 ;;		_activeEnergy
 14135 ;;		_reactiveEnergy
 14136 ;;		_apparentEnergy
 14137 ;;		_fundamentalEnergy
 14138 ;;		_harmonicEnergy
 14139 ;;		_typesPower1
 14140 ;;		_phPower1
 14141 ;;		_fhPower2
 14142 ;;		_phPower2
 14143 ;;		_phRmsVI
 14144 ;;		_neutralRmsVI
 14145 ;;		_phPowerFactor
 14146 ;;		_phPhaseAngle
 14147 ;;		_viPhaseAngle
 14148 ;;		_THDNPhaseAngle
 14149 ;;		_showFrequency
 14150 ;;		_showTemperature
 14151 ;; This function uses a non-reentrant model
 14152 ;;
 14153                           
 14154                           	psect	text50
 14155  0000'                    __ptext50:
 14156                           	opt stack 0
 14157  0000'                    _getButton2:
 14158                           	opt stack 28
 14159                           
 14160                           ;Buttons.c: 29: if(1 == PORTAbits.RA4)
 14161                           
 14162                           ; BSR set to: 0
 14163                           ;incstack = 0
 14164  0000' A880               	btfss	3968,4,c	;volatile
 14165  0002' D002               	goto	l1252
 14166                           
 14167                           ;Buttons.c: 30: {
 14168                           ;Buttons.c: 31: FlagButton2 = 1;
 14169  0004' 0E01               	movlw	1
 14170  0006' D001               	goto	L10
 14171  0008'                    l1252:
 14172                           
 14173                           ;Buttons.c: 33: else
 14174                           ;Buttons.c: 34: {
 14175                           ;Buttons.c: 35: FlagButton2 = 0;
 14176                           
 14177                           ; BSR set to: 0
 14178  0008' 0E00               	movlw	0
 14179  000A'                    L10:
 14180  000A' 0100               	movlb	0	; () banked
 14181  000C' 6F00'              	movwf	_FlagButton2& (0+255),b
 14182                           
 14183                           ; BSR set to: 0
 14184                           ;Buttons.c: 36: }
 14185                           ;Buttons.c: 37: return (FlagButton2);
 14186  000E' 5100'              	movf	_FlagButton2& (0+255),w,b
 14187  0010' 0012               	return	
 14188  0012'                    __end_of_getButton2:
 14189                           	opt stack 0
 14190                           tosu	equ	0xFFF
 14191                           tosh	equ	0xFFE
 14192                           tosl	equ	0xFFD
 14193                           pclath	equ	0xFFA
 14194                           tblptru	equ	0xFF8
 14195                           tblptrh	equ	0xFF7
 14196                           tblptrl	equ	0xFF6
 14197                           tablat	equ	0xFF5
 14198                           prodh	equ	0xFF4
 14199                           prodl	equ	0xFF3
 14200                           postinc0	equ	0xFEE
 14201                           wreg	equ	0xFE8
 14202                           postinc2	equ	0xFDE
 14203                           status	equ	0xFD8
 14204                           
 14205 ;; *************** function _getButton1 *****************
 14206 ;; Defined at:
 14207 ;;		line 9 in file "Buttons.c"
 14208 ;; Parameters:    Size  Location     Type
 14209 ;;		None
 14210 ;; Auto vars:     Size  Location     Type
 14211 ;;		None
 14212 ;; Return value:  Size  Location     Type
 14213 ;;                  1    wreg      unsigned char 
 14214 ;; Registers used:
 14215 ;;		wreg, status,2
 14216 ;; Tracked objects:
 14217 ;;		On entry : 0/0
 14218 ;;		On exit  : 0/0
 14219 ;;		Unchanged: 0/0
 14220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14221 ;;      Params:         0       0       0       0
 14222 ;;      Locals:         0       0       0       0
 14223 ;;      Temps:          0       0       0       0
 14224 ;;      Totals:         0       0       0       0
 14225 ;;Total ram usage:        0 bytes
 14226 ;; Hardware stack levels used:    1
 14227 ;; This function calls:
 14228 ;;		Nothing
 14229 ;; This function is called by:
 14230 ;;		_generalView
 14231 ;;		_viewMenu
 14232 ;;		_activeEnergy
 14233 ;;		_reactiveEnergy
 14234 ;;		_apparentEnergy
 14235 ;;		_fundamentalEnergy
 14236 ;;		_harmonicEnergy
 14237 ;;		_typesPower1
 14238 ;;		_phPower1
 14239 ;;		_fhPower2
 14240 ;;		_phPower2
 14241 ;;		_phRmsVI
 14242 ;;		_neutralRmsVI
 14243 ;;		_phPowerFactor
 14244 ;;		_phPhaseAngle
 14245 ;;		_viPhaseAngle
 14246 ;;		_THDNPhaseAngle
 14247 ;;		_showFrequency
 14248 ;;		_showTemperature
 14249 ;; This function uses a non-reentrant model
 14250 ;;
 14251                           
 14252                           	psect	text51
 14253  0000'                    __ptext51:
 14254                           	opt stack 0
 14255  0000'                    _getButton1:
 14256                           	opt stack 28
 14257                           
 14258                           ;Buttons.c: 11: if(1 == PORTAbits.RA3)
 14259                           
 14260                           ; BSR set to: 0
 14261                           ;incstack = 0
 14262  0000' A680               	btfss	3968,3,c	;volatile
 14263  0002' D002               	goto	l1244
 14264                           
 14265                           ;Buttons.c: 12: {
 14266                           ;Buttons.c: 13: FlagButton1 = 1;
 14267  0004' 0E01               	movlw	1
 14268  0006' D001               	goto	L11
 14269  0008'                    l1244:
 14270                           
 14271                           ;Buttons.c: 15: else
 14272                           ;Buttons.c: 16: {
 14273                           ;Buttons.c: 17: FlagButton1 = 0;
 14274                           
 14275                           ; BSR set to: 0
 14276  0008' 0E00               	movlw	0
 14277  000A'                    L11:
 14278  000A' 0100               	movlb	0	; () banked
 14279  000C' 6F00'              	movwf	_FlagButton1& (0+255),b
 14280                           
 14281                           ; BSR set to: 0
 14282                           ;Buttons.c: 18: }
 14283                           ;Buttons.c: 19: return (FlagButton1);
 14284  000E' 5100'              	movf	_FlagButton1& (0+255),w,b
 14285  0010' 0012               	return	
 14286  0012'                    __end_of_getButton1:
 14287                           	opt stack 0
 14288                           tosu	equ	0xFFF
 14289                           tosh	equ	0xFFE
 14290                           tosl	equ	0xFFD
 14291                           pclath	equ	0xFFA
 14292                           tblptru	equ	0xFF8
 14293                           tblptrh	equ	0xFF7
 14294                           tblptrl	equ	0xFF6
 14295                           tablat	equ	0xFF5
 14296                           prodh	equ	0xFF4
 14297                           prodl	equ	0xFF3
 14298                           postinc0	equ	0xFEE
 14299                           wreg	equ	0xFE8
 14300                           postinc2	equ	0xFDE
 14301                           status	equ	0xFD8
 14302                           
 14303 ;; *************** function _LCDNokia_sendString *****************
 14304 ;; Defined at:
 14305 ;;		line 189 in file "LCDNokia5110.c"
 14306 ;; Parameters:    Size  Location     Type
 14307 ;;  characters      2   13[COMRAM] PTR const unsigned char 
 14308 ;;		 -> showTemperature@temperature(7), showFrequency@frequency(7), THDNPhaseAngle@current3_THDN(11), THDNPhaseAngle@cur
      +rent2_THDN(11), 
 14309 ;;		 -> THDNPhaseAngle@current1_THDN(11), THDNPhaseAngle@voltage3_THDN(11), THDNPhaseAngle@voltage2_THDN(11), THDNPhaseA
      +ngle@voltage1_THDN(11), 
 14310 ;;		 -> viPhaseAngle@angle_VoltageP3(10), viPhaseAngle@angle_VoltageP2(10), viPhaseAngle@angle_VoltageP1(10), phPhaseAng
      +le@anglePhase3(9), 
 14311 ;;		 -> phPhaseAngle@anglePhase2(9), phPhaseAngle@anglePhase1(9), phPowerFactor@total_factor_power(11), phPowerFactor@fa
      +ctor_powerP3(8), 
 14312 ;;		 -> phPowerFactor@factor_powerP2(8), phPowerFactor@factor_powerP1(8), neutralRmsVI@nline_sampled_RMS(12), neutralRms
      +VI@nline_calculated_RMS(12), 
 14313 ;;		 -> phRmsVI@current3_RMS(10), phRmsVI@current2_RMS(10), phRmsVI@current1_RMS(10), phRmsVI@voltage3_RMS(10), 
 14314 ;;		 -> phRmsVI@voltage2_RMS(10), phRmsVI@voltage1_RMS(10), phPower2@harmonic_Total_Power(13), phPower2@fundamental_Tota
      +l_Power(13), 
 14315 ;;		 -> fhPower2@harmonic_PowerP3(10), fhPower2@harmonic_PowerP2(10), fhPower2@harmonic_PowerP1(10), fhPower2@fundamenta
      +l_PowerP3(10), 
 14316 ;;		 -> fhPower2@fundamental_PowerP2(10), fhPower2@fundamental_PowerP1(10), phPower1@total_apparent_power(14), phPower1@
      +total_reactive_power(13), 
 14317 ;;		 -> phPower1@total_active_power(13), typesPower1@apparent_powerP3(11), typesPower1@apparent_powerP2(11), typesPower1
      +@apparent_powerP1(11), 
 14318 ;;		 -> typesPower1@reactive_powerP3(10), typesPower1@reactive_powerP2(10), typesPower1@reactive_powerP1(10), typesPower
      +1@active_powerP3(10), 
 14319 ;;		 -> typesPower1@active_powerP2(10), typesPower1@active_powerP1(10), harmonicEnergy@harmonic_ReverseTotal(14), harmon
      +icEnergy@harmonic_ForwardTotal(15), 
 14320 ;;		 -> harmonicEnergy@harmonic_ReverseP3(11), harmonicEnergy@harmonic_ReverseP2(11), harmonicEnergy@harmonic_ReverseP1(
      +11), harmonicEnergy@harmonic_ForwardP3(12), 
 14321 ;;		 -> harmonicEnergy@harmonic_ForwardP2(12), harmonicEnergy@harmonic_ForwardP1(12), fundamentalEnergy@fund_ReverseTota
      +l(18), fundamentalEnergy@fund_ForwardTotal(19), 
 14322 ;;		 -> fundamentalEnergy@fund_ReverseP3(15), fundamentalEnergy@fund_ReverseP2(15), fundamentalEnergy@fund_ReverseP1(15)
      +, fundamentalEnergy@fund_ForwardP3(16), 
 14323 ;;		 -> fundamentalEnergy@fund_ForwardP2(16), fundamentalEnergy@fund_ForwardP1(16), apparentEnergy@apparentVec_energyTot
      +al(18), apparentEnergy@apparentAri_energyTotal(18), 
 14324 ;;		 -> apparentEnergy@apparent_energyP3(9), apparentEnergy@apparent_energyP2(9), apparentEnergy@apparent_energyP1(9), r
      +eactiveEnergy@reactive_Reverse_Total(18), 
 14325 ;;		 -> reactiveEnergy@reactive_Forward_Total(19), reactiveEnergy@reactive_Reverse3(15), reactiveEnergy@reactive_Reverse
      +2(15), reactiveEnergy@reactive_Reverse1(15), 
 14326 ;;		 -> reactiveEnergy@reactive_Forward3(16), reactiveEnergy@reactive_Forward2(15), reactiveEnergy@reactive_Forward1(16)
      +, activeEnergy@active_Reverse_Total(16), 
 14327 ;;		 -> activeEnergy@active_Forward_Total(17), activeEnergy@active_Reverse3(13), activeEnergy@active_Reverse2(13), activ
      +eEnergy@active_Reverse1(13), 
 14328 ;;		 -> activeEnergy@active_Forward3(14), activeEnergy@active_Forward2(14), activeEnergy@active_Forward1(14), viewMenu@b
      +uttonLeft(2), 
 14329 ;;		 -> viewMenu@buttonCenter(2), viewMenu@buttonRight(2), viewMenu@string1_Temperature(12), viewMenu@string1_Frequency(
      +10), 
 14330 ;;		 -> viewMenu@string2_PhaseAngle(6), viewMenu@string1_PhaseAngle(6), viewMenu@string2_PowerFactor(7), viewMenu@string
      +1_PowerFactor(6), 
 14331 ;;		 -> viewMenu@string2_RMS(4), viewMenu@string1_RMS(16), viewMenu@string3_Power2(6), viewMenu@string2_Power2(9), 
 14332 ;;		 -> viewMenu@string1_Power2(12), viewMenu@string2_Power1(15), viewMenu@string1_Power1(16), viewMenu@string_Energy(7)
      +, 
 14333 ;;		 -> generalView@buttonLeft(5), generalView@buttonRight(5), generalView@msgInitial2(12), generalView@msgInitial1(12),
      + 
 14334 ;; Auto vars:     Size  Location     Type
 14335 ;;		None
 14336 ;; Return value:  Size  Location     Type
 14337 ;;                  1    wreg      void 
 14338 ;; Registers used:
 14339 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14340 ;; Tracked objects:
 14341 ;;		On entry : 0/0
 14342 ;;		On exit  : 0/0
 14343 ;;		Unchanged: 0/0
 14344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14345 ;;      Params:         2       0       0       0
 14346 ;;      Locals:         0       0       0       0
 14347 ;;      Temps:          0       0       0       0
 14348 ;;      Totals:         2       0       0       0
 14349 ;;Total ram usage:        2 bytes
 14350 ;; Hardware stack levels used:    1
 14351 ;; Hardware stack levels required when called:    3
 14352 ;; This function calls:
 14353 ;;		_LCDNokia_sendChar
 14354 ;; This function is called by:
 14355 ;;		_generalView
 14356 ;;		_viewMenu
 14357 ;;		_activeEnergy
 14358 ;;		_reactiveEnergy
 14359 ;;		_apparentEnergy
 14360 ;;		_fundamentalEnergy
 14361 ;;		_harmonicEnergy
 14362 ;;		_typesPower1
 14363 ;;		_phPower1
 14364 ;;		_fhPower2
 14365 ;;		_phPower2
 14366 ;;		_phRmsVI
 14367 ;;		_neutralRmsVI
 14368 ;;		_phPowerFactor
 14369 ;;		_phPhaseAngle
 14370 ;;		_viPhaseAngle
 14371 ;;		_THDNPhaseAngle
 14372 ;;		_showFrequency
 14373 ;;		_showTemperature
 14374 ;; This function uses a non-reentrant model
 14375 ;;
 14376                           
 14377                           	psect	text52
 14378  0000'                    __ptext52:
 14379                           	opt stack 0
 14380  0000'                    _LCDNokia_sendString:
 14381                           	opt stack 25
 14382                           
 14383                           ;LCDNokia5110.c: 191: while (*characters)
 14384                           
 14385                           ; BSR set to: 0
 14386                           ;incstack = 0
 14387  0000' D009               	goto	l977
 14388  0002'                    
 14389                           ;LCDNokia5110.c: 192: {
 14390                           ;LCDNokia5110.c: 193: LCDNokia_sendChar(*characters++);
 14391  0002' C00D' FFD9         	movff	LCDNokia_sendString@characters,fsr2l
 14392  0006' C00E' FFDA         	movff	LCDNokia_sendString@characters+1,fsr2h
 14393  000A' 50DF               	movf	indf2,w,c
 14394  000C' EC00' F000'        	call	_LCDNokia_sendChar
 14395  0010' 4A0D'              	infsnz	LCDNokia_sendString@characters,f,c
 14396  0012' 2A0E'              	incf	LCDNokia_sendString@characters+1,f,c
 14397  0014'                    l977:
 14398  0014' C00D' FFD9         	movff	LCDNokia_sendString@characters,fsr2l
 14399  0018' C00E' FFDA         	movff	LCDNokia_sendString@characters+1,fsr2h
 14400  001C' 50DF               	movf	indf2,w,c
 14401  001E' B4D8               	btfsc	status,2,c
 14402  0020' 0012               	return	
 14403  0022' D7EF               	goto	l978
 14404  0024'                    __end_of_LCDNokia_sendString:
 14405                           	opt stack 0
 14406                           tosu	equ	0xFFF
 14407                           tosh	equ	0xFFE
 14408                           tosl	equ	0xFFD
 14409                           pclath	equ	0xFFA
 14410                           tblptru	equ	0xFF8
 14411                           tblptrh	equ	0xFF7
 14412                           tblptrl	equ	0xFF6
 14413                           tablat	equ	0xFF5
 14414                           prodh	equ	0xFF4
 14415                           prodl	equ	0xFF3
 14416                           postinc0	equ	0xFEE
 14417                           wreg	equ	0xFE8
 14418                           indf2	equ	0xFDF
 14419                           postinc2	equ	0xFDE
 14420                           fsr2h	equ	0xFDA
 14421                           fsr2l	equ	0xFD9
 14422                           status	equ	0xFD8
 14423                           
 14424 ;; *************** function _LCDNokia_printValue *****************
 14425 ;; Defined at:
 14426 ;;		line 224 in file "LCDNokia5110.c"
 14427 ;; Parameters:    Size  Location     Type
 14428 ;;  value           4   23[COMRAM] unsigned long 
 14429 ;; Auto vars:     Size  Location     Type
 14430 ;;  real_Value      8   30[COMRAM] struct .
 14431 ;;  counter         1   29[COMRAM] unsigned char 
 14432 ;;  temp_digit      1   28[COMRAM] unsigned char 
 14433 ;;  zero            1   27[COMRAM] const unsigned char 
 14434 ;; Return value:  Size  Location     Type
 14435 ;;                  1    wreg      void 
 14436 ;; Registers used:
 14437 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14438 ;; Tracked objects:
 14439 ;;		On entry : 0/0
 14440 ;;		On exit  : 0/0
 14441 ;;		Unchanged: 0/0
 14442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14443 ;;      Params:         4       0       0       0
 14444 ;;      Locals:        11       0       0       0
 14445 ;;      Temps:          0       0       0       0
 14446 ;;      Totals:        15       0       0       0
 14447 ;;Total ram usage:       15 bytes
 14448 ;; Hardware stack levels used:    1
 14449 ;; Hardware stack levels required when called:    3
 14450 ;; This function calls:
 14451 ;;		_LCDNokia_sendChar
 14452 ;;		___lldiv
 14453 ;;		___llmod
 14454 ;; This function is called by:
 14455 ;;		_activeEnergy
 14456 ;;		_reactiveEnergy
 14457 ;;		_apparentEnergy
 14458 ;;		_fundamentalEnergy
 14459 ;;		_harmonicEnergy
 14460 ;;		_typesPower1
 14461 ;;		_phPower1
 14462 ;;		_fhPower2
 14463 ;;		_phPower2
 14464 ;;		_phRmsVI
 14465 ;;		_neutralRmsVI
 14466 ;;		_phPowerFactor
 14467 ;;		_phPhaseAngle
 14468 ;;		_viPhaseAngle
 14469 ;;		_THDNPhaseAngle
 14470 ;;		_showFrequency
 14471 ;;		_showTemperature
 14472 ;;		_LCDNokia_printFloatValue
 14473 ;; This function uses a non-reentrant model
 14474 ;;
 14475                           
 14476                           	psect	text53
 14477  0000'                    __ptext53:
 14478                           	opt stack 0
 14479  0000'                    _LCDNokia_printValue:
 14480                           	opt stack 25
 14481                           
 14482                           ;LCDNokia5110.c: 227: formatASCII real_Value;
 14483                           ;LCDNokia5110.c: 229: uint8_t temp_digit;
 14484                           ;LCDNokia5110.c: 231: uint8_t counter;
 14485                           ;LCDNokia5110.c: 233: const uint8_t zero = 48;
 14486                           
 14487                           ;incstack = 0
 14488  0000' 0E30               	movlw	48
 14489  0002' 6E1B'              	movwf	LCDNokia_printValue@zero,c
 14490                           
 14491                           ;LCDNokia5110.c: 235: real_Value.numberDigits = 0;
 14492  0004' 0E00               	movlw	0
 14493  0006' 6E1E'              	movwf	LCDNokia_printValue@real_Value,c
 14494                           
 14495                           ;LCDNokia5110.c: 238: if(value != 0)
 14496  0008' 5017'              	movf	LCDNokia_printValue@value,w,c
 14497  000A' 1018'              	iorwf	LCDNokia_printValue@value+1,w,c
 14498  000C' 1019'              	iorwf	LCDNokia_printValue@value+2,w,c
 14499  000E' 101A'              	iorwf	LCDNokia_printValue@value+3,w,c
 14500  0010' A4D8               	btfss	status,2,c
 14501  0012' D041               	goto	l997
 14502  0014' D056               	goto	l996
 14503  0016'                    
 14504                           ;LCDNokia5110.c: 241: {
 14505                           ;LCDNokia5110.c: 243: temp_digit = value % 10;
 14506  0016' C017' F000'        	movff	LCDNokia_printValue@value,___llmod@dividend
 14507  001A' C018' F001'        	movff	LCDNokia_printValue@value+1,___llmod@dividend+1
 14508  001E' C019' F002'        	movff	LCDNokia_printValue@value+2,___llmod@dividend+2
 14509  0022' C01A' F003'        	movff	LCDNokia_printValue@value+3,___llmod@dividend+3
 14510  0026' 0E0A               	movlw	10
 14511  0028' 6E04'              	movwf	___llmod@divisor,c
 14512  002A' 0E00               	movlw	0
 14513  002C' 6E05'              	movwf	___llmod@divisor+1,c
 14514  002E' 0E00               	movlw	0
 14515  0030' 6E06'              	movwf	___llmod@divisor+2,c
 14516  0032' 0E00               	movlw	0
 14517  0034' 6E07'              	movwf	___llmod@divisor+3,c
 14518  0036' EC00' F000'        	call	___llmod	;wreg free
 14519  003A' 5000'              	movf	?___llmod,w,c
 14520  003C' 6E1C'              	movwf	LCDNokia_printValue@temp_digit,c
 14521                           
 14522                           ;LCDNokia5110.c: 245: temp_digit = '0' + temp_digit;
 14523  003E' 501C'              	movf	LCDNokia_printValue@temp_digit,w,c
 14524  0040' 0F30               	addlw	48
 14525  0042' 6E1C'              	movwf	LCDNokia_printValue@temp_digit,c
 14526                           
 14527                           ;LCDNokia5110.c: 247: real_Value.realDigit[real_Value.numberDigits] = temp_digit;
 14528  0044' 501E'              	movf	LCDNokia_printValue@real_Value,w,c
 14529  0046' 0D01               	mullw	1
 14530  0048' 0E01               	movlw	1
 14531  004A' 26F3               	addwf	prodl,f,c
 14532  004C' 0E00               	movlw	0
 14533  004E' 22F4               	addwfc	prodh,f,c
 14534  0050' 0E00'              	movlw	low LCDNokia_printValue@real_Value
 14535  0052' 24F3               	addwf	prodl,w,c
 14536  0054' 6ED9               	movwf	fsr2l,c
 14537  0056' 0E00'              	movlw	high LCDNokia_printValue@real_Value
 14538  0058' 20F4               	addwfc	prodh,w,c
 14539  005A' 6EDA               	movwf	fsr2h,c
 14540  005C' C01C' FFDF         	movff	LCDNokia_printValue@temp_digit,indf2
 14541                           
 14542                           ;LCDNokia5110.c: 249: value /= 10;
 14543  0060' C017' F000'        	movff	LCDNokia_printValue@value,___lldiv@dividend
 14544  0064' C018' F001'        	movff	LCDNokia_printValue@value+1,___lldiv@dividend+1
 14545  0068' C019' F002'        	movff	LCDNokia_printValue@value+2,___lldiv@dividend+2
 14546  006C' C01A' F003'        	movff	LCDNokia_printValue@value+3,___lldiv@dividend+3
 14547  0070' 0E0A               	movlw	10
 14548  0072' 6E04'              	movwf	___lldiv@divisor,c
 14549  0074' 0E00               	movlw	0
 14550  0076' 6E05'              	movwf	___lldiv@divisor+1,c
 14551  0078' 0E00               	movlw	0
 14552  007A' 6E06'              	movwf	___lldiv@divisor+2,c
 14553  007C' 0E00               	movlw	0
 14554  007E' 6E07'              	movwf	___lldiv@divisor+3,c
 14555  0080' EC00' F000'        	call	___lldiv	;wreg free
 14556  0084' C000' F017'        	movff	?___lldiv,LCDNokia_printValue@value
 14557  0088' C001' F018'        	movff	?___lldiv+1,LCDNokia_printValue@value+1
 14558  008C' C002' F019'        	movff	?___lldiv+2,LCDNokia_printValue@value+2
 14559  0090' C003' F01A'        	movff	?___lldiv+3,LCDNokia_printValue@value+3
 14560                           
 14561                           ;LCDNokia5110.c: 251: real_Value.numberDigits++;
 14562  0094' 2A1E'              	incf	LCDNokia_printValue@real_Value,f,c
 14563  0096'                    l997:
 14564  0096' 5017'              	movf	LCDNokia_printValue@value,w,c
 14565  0098' 1018'              	iorwf	LCDNokia_printValue@value+1,w,c
 14566  009A' 1019'              	iorwf	LCDNokia_printValue@value+2,w,c
 14567  009C' 101A'              	iorwf	LCDNokia_printValue@value+3,w,c
 14568  009E' A4D8               	btfss	status,2,c
 14569  00A0' D7BA               	goto	l998
 14570                           
 14571                           ;LCDNokia5110.c: 252: }
 14572                           ;LCDNokia5110.c: 255: for(counter = real_Value.numberDigits; counter != 0 ; counter--)
 14573  00A2' C01E' F01D'        	movff	LCDNokia_printValue@real_Value,LCDNokia_printValue@counter
 14574  00A6'                    l5072:
 14575  00A6' 501D'              	movf	LCDNokia_printValue@counter,w,c
 14576  00A8' B4D8               	btfsc	status,2,c
 14577  00AA' 0012               	return	
 14578                           
 14579                           ;LCDNokia5110.c: 256: {
 14580                           ;LCDNokia5110.c: 257: LCDNokia_sendChar(real_Value.realDigit[counter-1]);
 14581  00AC' 0E00'              	movlw	low LCDNokia_printValue@real_Value
 14582  00AE' 241D'              	addwf	LCDNokia_printValue@counter,w,c
 14583  00B0' 6ED9               	movwf	fsr2l,c
 14584  00B2' 6ADA               	clrf	fsr2h,c
 14585  00B4' 0E00'              	movlw	high LCDNokia_printValue@real_Value
 14586  00B6' 22DA               	addwfc	fsr2h,f,c
 14587  00B8' 50DF               	movf	indf2,w,c
 14588  00BA' EC00' F000'        	call	_LCDNokia_sendChar
 14589  00BE' 061D'              	decf	LCDNokia_printValue@counter,f,c
 14590  00C0' D7F2               	goto	l5072
 14591  00C2'                    l996:
 14592                           
 14593                           ;LCDNokia5110.c: 260: else
 14594                           ;LCDNokia5110.c: 261: {
 14595                           ;LCDNokia5110.c: 262: LCDNokia_sendChar(zero);
 14596  00C2' 501B'              	movf	LCDNokia_printValue@zero,w,c
 14597  00C4' EC00' F000'        	call	_LCDNokia_sendChar
 14598  00C8' 0012               	return	
 14599  00CA'                    __end_of_LCDNokia_printValue:
 14600                           	opt stack 0
 14601                           tosu	equ	0xFFF
 14602                           tosh	equ	0xFFE
 14603                           tosl	equ	0xFFD
 14604                           pclath	equ	0xFFA
 14605                           tblptru	equ	0xFF8
 14606                           tblptrh	equ	0xFF7
 14607                           tblptrl	equ	0xFF6
 14608                           tablat	equ	0xFF5
 14609                           prodh	equ	0xFF4
 14610                           prodl	equ	0xFF3
 14611                           postinc0	equ	0xFEE
 14612                           wreg	equ	0xFE8
 14613                           indf2	equ	0xFDF
 14614                           postinc2	equ	0xFDE
 14615                           fsr2h	equ	0xFDA
 14616                           fsr2l	equ	0xFD9
 14617                           status	equ	0xFD8
 14618                           
 14619 ;; *************** function ___llmod *****************
 14620 ;; Defined at:
 14621 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\llmod.c"
 14622 ;; Parameters:    Size  Location     Type
 14623 ;;  dividend        4    0[COMRAM] unsigned long 
 14624 ;;  divisor         4    4[COMRAM] unsigned long 
 14625 ;; Auto vars:     Size  Location     Type
 14626 ;;  counter         1    8[COMRAM] unsigned char 
 14627 ;; Return value:  Size  Location     Type
 14628 ;;                  4    0[COMRAM] unsigned long 
 14629 ;; Registers used:
 14630 ;;		wreg, status,2, status,0
 14631 ;; Tracked objects:
 14632 ;;		On entry : 0/0
 14633 ;;		On exit  : 0/0
 14634 ;;		Unchanged: 0/0
 14635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14636 ;;      Params:         8       0       0       0
 14637 ;;      Locals:         1       0       0       0
 14638 ;;      Temps:          0       0       0       0
 14639 ;;      Totals:         9       0       0       0
 14640 ;;Total ram usage:        9 bytes
 14641 ;; Hardware stack levels used:    1
 14642 ;; This function calls:
 14643 ;;		Nothing
 14644 ;; This function is called by:
 14645 ;;		_LCDNokia_printValue
 14646 ;; This function uses a non-reentrant model
 14647 ;;
 14648                           
 14649                           	psect	text54
 14650  0000'                    __ptext54:
 14651                           	opt stack 0
 14652  0000'                    ___llmod:
 14653                           	opt stack 27
 14654                           
 14655                           ;incstack = 0
 14656  0000' 5004'              	movf	___llmod@divisor,w,c
 14657  0002' 1005'              	iorwf	___llmod@divisor+1,w,c
 14658  0004' 1006'              	iorwf	___llmod@divisor+2,w,c
 14659  0006' 1007'              	iorwf	___llmod@divisor+3,w,c
 14660  0008' B4D8               	btfsc	status,2,c
 14661  000A' D024               	goto	l1634
 14662  000C' 0E01               	movlw	1
 14663  000E' 6E08'              	movwf	___llmod@counter,c
 14664  0010' D006               	goto	l1629
 14665  0012' 90D8               	bcf	status,0,c
 14666  0014' 3604'              	rlcf	___llmod@divisor,f,c
 14667  0016' 3605'              	rlcf	___llmod@divisor+1,f,c
 14668  0018' 3606'              	rlcf	___llmod@divisor+2,f,c
 14669  001A' 3607'              	rlcf	___llmod@divisor+3,f,c
 14670  001C' 2A08'              	incf	___llmod@counter,f,c
 14671  001E'                    l1629:
 14672  001E' AE07'              	btfss	___llmod@divisor+3,7,c
 14673  0020' D7F8               	goto	l1630
 14674  0022'                    u2810:
 14675  0022' 5004'              	movf	___llmod@divisor,w,c
 14676  0024' 5C00'              	subwf	___llmod@dividend,w,c
 14677  0026' 5005'              	movf	___llmod@divisor+1,w,c
 14678  0028' 5801'              	subwfb	___llmod@dividend+1,w,c
 14679  002A' 5006'              	movf	___llmod@divisor+2,w,c
 14680  002C' 5802'              	subwfb	___llmod@dividend+2,w,c
 14681  002E' 5007'              	movf	___llmod@divisor+3,w,c
 14682  0030' 5803'              	subwfb	___llmod@dividend+3,w,c
 14683  0032' A0D8               	btfss	status,0,c
 14684  0034' D008               	goto	l1633
 14685  0036' 5004'              	movf	___llmod@divisor,w,c
 14686  0038' 5E00'              	subwf	___llmod@dividend,f,c
 14687  003A' 5005'              	movf	___llmod@divisor+1,w,c
 14688  003C' 5A01'              	subwfb	___llmod@dividend+1,f,c
 14689  003E' 5006'              	movf	___llmod@divisor+2,w,c
 14690  0040' 5A02'              	subwfb	___llmod@dividend+2,f,c
 14691  0042' 5007'              	movf	___llmod@divisor+3,w,c
 14692  0044' 5A03'              	subwfb	___llmod@dividend+3,f,c
 14693  0046'                    l1633:
 14694  0046' 90D8               	bcf	status,0,c
 14695  0048' 3207'              	rrcf	___llmod@divisor+3,f,c
 14696  004A' 3206'              	rrcf	___llmod@divisor+2,f,c
 14697  004C' 3205'              	rrcf	___llmod@divisor+1,f,c
 14698  004E' 3204'              	rrcf	___llmod@divisor,f,c
 14699  0050' 2E08'              	decfsz	___llmod@counter,f,c
 14700  0052' D7E7               	goto	u2810
 14701  0054'                    l1634:
 14702  0054' C000' F000'        	movff	___llmod@dividend,?___llmod
 14703  0058' C001' F001'        	movff	___llmod@dividend+1,?___llmod+1
 14704  005C' C002' F002'        	movff	___llmod@dividend+2,?___llmod+2
 14705  0060' C003' F003'        	movff	___llmod@dividend+3,?___llmod+3
 14706  0064' 0012               	return		;funcret
 14707  0066'                    __end_of___llmod:
 14708                           	opt stack 0
 14709                           tosu	equ	0xFFF
 14710                           tosh	equ	0xFFE
 14711                           tosl	equ	0xFFD
 14712                           pclath	equ	0xFFA
 14713                           tblptru	equ	0xFF8
 14714                           tblptrh	equ	0xFF7
 14715                           tblptrl	equ	0xFF6
 14716                           tablat	equ	0xFF5
 14717                           prodh	equ	0xFF4
 14718                           prodl	equ	0xFF3
 14719                           postinc0	equ	0xFEE
 14720                           wreg	equ	0xFE8
 14721                           indf2	equ	0xFDF
 14722                           postinc2	equ	0xFDE
 14723                           fsr2h	equ	0xFDA
 14724                           fsr2l	equ	0xFD9
 14725                           status	equ	0xFD8
 14726                           
 14727 ;; *************** function ___lldiv *****************
 14728 ;; Defined at:
 14729 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lldiv.c"
 14730 ;; Parameters:    Size  Location     Type
 14731 ;;  dividend        4    0[COMRAM] unsigned long 
 14732 ;;  divisor         4    4[COMRAM] unsigned long 
 14733 ;; Auto vars:     Size  Location     Type
 14734 ;;  quotient        4    8[COMRAM] unsigned long 
 14735 ;;  counter         1   12[COMRAM] unsigned char 
 14736 ;; Return value:  Size  Location     Type
 14737 ;;                  4    0[COMRAM] unsigned long 
 14738 ;; Registers used:
 14739 ;;		wreg, status,2, status,0
 14740 ;; Tracked objects:
 14741 ;;		On entry : 0/0
 14742 ;;		On exit  : 0/0
 14743 ;;		Unchanged: 0/0
 14744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14745 ;;      Params:         8       0       0       0
 14746 ;;      Locals:         5       0       0       0
 14747 ;;      Temps:          0       0       0       0
 14748 ;;      Totals:        13       0       0       0
 14749 ;;Total ram usage:       13 bytes
 14750 ;; Hardware stack levels used:    1
 14751 ;; This function calls:
 14752 ;;		Nothing
 14753 ;; This function is called by:
 14754 ;;		_LCDNokia_printValue
 14755 ;; This function uses a non-reentrant model
 14756 ;;
 14757                           
 14758                           	psect	text55
 14759  0000'                    __ptext55:
 14760                           	opt stack 0
 14761  0000'                    ___lldiv:
 14762                           	opt stack 27
 14763                           
 14764                           ;incstack = 0
 14765  0000' 0E00               	movlw	0
 14766  0002' 6E08'              	movwf	___lldiv@quotient,c
 14767  0004' 0E00               	movlw	0
 14768  0006' 6E09'              	movwf	___lldiv@quotient+1,c
 14769  0008' 0E00               	movlw	0
 14770  000A' 6E0A'              	movwf	___lldiv@quotient+2,c
 14771  000C' 0E00               	movlw	0
 14772  000E' 6E0B'              	movwf	___lldiv@quotient+3,c
 14773  0010' 5004'              	movf	___lldiv@divisor,w,c
 14774  0012' 1005'              	iorwf	___lldiv@divisor+1,w,c
 14775  0014' 1006'              	iorwf	___lldiv@divisor+2,w,c
 14776  0016' 1007'              	iorwf	___lldiv@divisor+3,w,c
 14777  0018' B4D8               	btfsc	status,2,c
 14778  001A' D02A               	goto	l1624
 14779  001C' 0E01               	movlw	1
 14780  001E' 6E0C'              	movwf	___lldiv@counter,c
 14781  0020' D006               	goto	l1619
 14782  0022' 90D8               	bcf	status,0,c
 14783  0024' 3604'              	rlcf	___lldiv@divisor,f,c
 14784  0026' 3605'              	rlcf	___lldiv@divisor+1,f,c
 14785  0028' 3606'              	rlcf	___lldiv@divisor+2,f,c
 14786  002A' 3607'              	rlcf	___lldiv@divisor+3,f,c
 14787  002C' 2A0C'              	incf	___lldiv@counter,f,c
 14788  002E'                    l1619:
 14789  002E' AE07'              	btfss	___lldiv@divisor+3,7,c
 14790  0030' D7F8               	goto	l1620
 14791  0032'                    u2780:
 14792  0032' 90D8               	bcf	status,0,c
 14793  0034' 3608'              	rlcf	___lldiv@quotient,f,c
 14794  0036' 3609'              	rlcf	___lldiv@quotient+1,f,c
 14795  0038' 360A'              	rlcf	___lldiv@quotient+2,f,c
 14796  003A' 360B'              	rlcf	___lldiv@quotient+3,f,c
 14797  003C' 5004'              	movf	___lldiv@divisor,w,c
 14798  003E' 5C00'              	subwf	___lldiv@dividend,w,c
 14799  0040' 5005'              	movf	___lldiv@divisor+1,w,c
 14800  0042' 5801'              	subwfb	___lldiv@dividend+1,w,c
 14801  0044' 5006'              	movf	___lldiv@divisor+2,w,c
 14802  0046' 5802'              	subwfb	___lldiv@dividend+2,w,c
 14803  0048' 5007'              	movf	___lldiv@divisor+3,w,c
 14804  004A' 5803'              	subwfb	___lldiv@dividend+3,w,c
 14805  004C' A0D8               	btfss	status,0,c
 14806  004E' D009               	goto	l1623
 14807  0050' 5004'              	movf	___lldiv@divisor,w,c
 14808  0052' 5E00'              	subwf	___lldiv@dividend,f,c
 14809  0054' 5005'              	movf	___lldiv@divisor+1,w,c
 14810  0056' 5A01'              	subwfb	___lldiv@dividend+1,f,c
 14811  0058' 5006'              	movf	___lldiv@divisor+2,w,c
 14812  005A' 5A02'              	subwfb	___lldiv@dividend+2,f,c
 14813  005C' 5007'              	movf	___lldiv@divisor+3,w,c
 14814  005E' 5A03'              	subwfb	___lldiv@dividend+3,f,c
 14815  0060' 8008'              	bsf	___lldiv@quotient,0,c
 14816  0062'                    l1623:
 14817  0062' 90D8               	bcf	status,0,c
 14818  0064' 3207'              	rrcf	___lldiv@divisor+3,f,c
 14819  0066' 3206'              	rrcf	___lldiv@divisor+2,f,c
 14820  0068' 3205'              	rrcf	___lldiv@divisor+1,f,c
 14821  006A' 3204'              	rrcf	___lldiv@divisor,f,c
 14822  006C' 2E0C'              	decfsz	___lldiv@counter,f,c
 14823  006E' D7E1               	goto	u2780
 14824  0070'                    l1624:
 14825  0070' C008' F000'        	movff	___lldiv@quotient,?___lldiv
 14826  0074' C009' F001'        	movff	___lldiv@quotient+1,?___lldiv+1
 14827  0078' C00A' F002'        	movff	___lldiv@quotient+2,?___lldiv+2
 14828  007C' C00B' F003'        	movff	___lldiv@quotient+3,?___lldiv+3
 14829  0080' 0012               	return		;funcret
 14830  0082'                    __end_of___lldiv:
 14831                           	opt stack 0
 14832                           tosu	equ	0xFFF
 14833                           tosh	equ	0xFFE
 14834                           tosl	equ	0xFFD
 14835                           pclath	equ	0xFFA
 14836                           tblptru	equ	0xFF8
 14837                           tblptrh	equ	0xFF7
 14838                           tblptrl	equ	0xFF6
 14839                           tablat	equ	0xFF5
 14840                           prodh	equ	0xFF4
 14841                           prodl	equ	0xFF3
 14842                           postinc0	equ	0xFEE
 14843                           wreg	equ	0xFE8
 14844                           indf2	equ	0xFDF
 14845                           postinc2	equ	0xFDE
 14846                           fsr2h	equ	0xFDA
 14847                           fsr2l	equ	0xFD9
 14848                           status	equ	0xFD8
 14849                           
 14850 ;; *************** function _LCDNokia_sendChar *****************
 14851 ;; Defined at:
 14852 ;;		line 156 in file "LCDNokia5110.c"
 14853 ;; Parameters:    Size  Location     Type
 14854 ;;  character       1    wreg     unsigned char 
 14855 ;; Auto vars:     Size  Location     Type
 14856 ;;  character       1   10[COMRAM] unsigned char 
 14857 ;;  index           2   11[COMRAM] unsigned int 
 14858 ;; Return value:  Size  Location     Type
 14859 ;;                  1    wreg      void 
 14860 ;; Registers used:
 14861 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14862 ;; Tracked objects:
 14863 ;;		On entry : 0/0
 14864 ;;		On exit  : 0/0
 14865 ;;		Unchanged: 0/0
 14866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14867 ;;      Params:         0       0       0       0
 14868 ;;      Locals:         3       0       0       0
 14869 ;;      Temps:          2       0       0       0
 14870 ;;      Totals:         5       0       0       0
 14871 ;;Total ram usage:        5 bytes
 14872 ;; Hardware stack levels used:    1
 14873 ;; Hardware stack levels required when called:    2
 14874 ;; This function calls:
 14875 ;;		_LCDNokia_writeByte
 14876 ;;		___wmul
 14877 ;; This function is called by:
 14878 ;;		_LCDNokia_sendString
 14879 ;;		_LCDNokia_printValue
 14880 ;;		_LCDNokia_printFloatValue
 14881 ;; This function uses a non-reentrant model
 14882 ;;
 14883                           
 14884                           	psect	text56
 14885  0000'                    __ptext56:
 14886                           	opt stack 0
 14887  0000'                    _LCDNokia_sendChar:
 14888                           	opt stack 25
 14889                           
 14890                           ;incstack = 0
 14891                           ;LCDNokia_sendChar@character stored from wreg
 14892  0000' 6E0A'              	movwf	LCDNokia_sendChar@character,c
 14893                           
 14894                           ;LCDNokia5110.c: 158: uint16_t index = 0;
 14895  0002' 0E00               	movlw	0
 14896  0004' 6E0C'              	movwf	LCDNokia_sendChar@index+1,c
 14897  0006' 0E00               	movlw	0
 14898  0008' 6E0B'              	movwf	LCDNokia_sendChar@index,c
 14899                           
 14900                           ;LCDNokia5110.c: 160: LCDNokia_writeByte(1, 0x00);
 14901  000A' 0E00               	movlw	0
 14902  000C' 6E06'              	movwf	LCDNokia_writeByte@data,c
 14903  000E' 0E01               	movlw	1
 14904  0010' EC00' F000'        	call	_LCDNokia_writeByte
 14905                           
 14906                           ;LCDNokia5110.c: 162: for (index = 0; index < 5; index++)
 14907  0014' 0E00               	movlw	0
 14908  0016' 6E0C'              	movwf	LCDNokia_sendChar@index+1,c
 14909  0018' 0E00               	movlw	0
 14910  001A' 6E0B'              	movwf	LCDNokia_sendChar@index,c
 14911  001C'                    l4636:
 14912  001C' 500C'              	movf	LCDNokia_sendChar@index+1,w,c
 14913  001E' E129               	bnz	l4646
 14914  0020' 0E05               	movlw	5
 14915  0022' 5C0B'              	subwf	LCDNokia_sendChar@index,w,c
 14916  0024' B0D8               	btfsc	status,0,c
 14917  0026' D025               	goto	u2760
 14918                           
 14919                           ;LCDNokia5110.c: 163: {
 14920                           ;LCDNokia5110.c: 164: LCDNokia_writeByte(1, ASCII[character - 0x20][index]);
 14921  0028' 0EE0               	movlw	224
 14922  002A' 240A'              	addwf	LCDNokia_sendChar@character,w,c
 14923  002C' 6E00'              	movwf	___wmul@multiplier,c
 14924  002E' 6A01'              	clrf	___wmul@multiplier+1,c
 14925  0030' 0EFF               	movlw	255
 14926  0032' 2201'              	addwfc	___wmul@multiplier+1,f,c
 14927  0034' 0E00               	movlw	0
 14928  0036' 6E03'              	movwf	___wmul@multiplicand+1,c
 14929  0038' 0E05               	movlw	5
 14930  003A' 6E02'              	movwf	___wmul@multiplicand,c
 14931  003C' EC00' F000'        	call	___wmul	;wreg free
 14932  0040' 0E00'              	movlw	low _ASCII
 14933  0042' 6E00'              	movwf	??_LCDNokia_sendChar& (0+255),c
 14934  0044' 0E00'              	movlw	high _ASCII
 14935  0046' 6E00'              	movwf	(??_LCDNokia_sendChar+1)& (0+255),c
 14936  0048' 5000'              	movf	?___wmul,w,c
 14937  004A' 2608'              	addwf	??_LCDNokia_sendChar,f,c
 14938  004C' 5001'              	movf	?___wmul+1,w,c
 14939  004E' 2209'              	addwfc	??_LCDNokia_sendChar+1,f,c
 14940  0050' 500B'              	movf	LCDNokia_sendChar@index,w,c
 14941  0052' 2608'              	addwf	??_LCDNokia_sendChar,f,c
 14942  0054' 500C'              	movf	LCDNokia_sendChar@index+1,w,c
 14943  0056' 2209'              	addwfc	??_LCDNokia_sendChar+1,f,c
 14944  0058' C008' FFF6         	movff	??_LCDNokia_sendChar,tblptrl
 14945  005C' C009' FFF7         	movff	??_LCDNokia_sendChar+1,tblptrh
 14946  0060'                    	if	0	;tblptru may be non-zero
 14947  0060'                    	endif
 14948  0060'                    	if	0	;tblptru may be non-zero
 14949  0060'                    	endif
 14950  0060' 0008               	tblrd		*
 14951  0062' CFF5 F006'         	movff	tablat,LCDNokia_writeByte@data
 14952  0066' 0E01               	movlw	1
 14953  0068' EC00' F000'        	call	_LCDNokia_writeByte
 14954  006C' 4A0B'              	infsnz	LCDNokia_sendChar@index,f,c
 14955  006E' 2A0C'              	incf	LCDNokia_sendChar@index+1,f,c
 14956  0070' D7D5               	goto	l4636
 14957  0072'                    u2760:
 14958  0072'                    l4646:
 14959                           
 14960                           ;LCDNokia5110.c: 168: }
 14961                           ;LCDNokia5110.c: 169: LCDNokia_writeByte(1, 0x00);
 14962  0072' 0E00               	movlw	0
 14963  0074' 6E06'              	movwf	LCDNokia_writeByte@data,c
 14964  0076' 0E01               	movlw	1
 14965  0078' EC00' F000'        	call	_LCDNokia_writeByte
 14966  007C' 0012               	return		;funcret
 14967  007E'                    __end_of_LCDNokia_sendChar:
 14968                           	opt stack 0
 14969                           tosu	equ	0xFFF
 14970                           tosh	equ	0xFFE
 14971                           tosl	equ	0xFFD
 14972                           pclath	equ	0xFFA
 14973                           tblptru	equ	0xFF8
 14974                           tblptrh	equ	0xFF7
 14975                           tblptrl	equ	0xFF6
 14976                           tablat	equ	0xFF5
 14977                           prodh	equ	0xFF4
 14978                           prodl	equ	0xFF3
 14979                           postinc0	equ	0xFEE
 14980                           wreg	equ	0xFE8
 14981                           indf2	equ	0xFDF
 14982                           postinc2	equ	0xFDE
 14983                           fsr2h	equ	0xFDA
 14984                           fsr2l	equ	0xFD9
 14985                           status	equ	0xFD8
 14986                           
 14987 ;; *************** function ___wmul *****************
 14988 ;; Defined at:
 14989 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
 14990 ;; Parameters:    Size  Location     Type
 14991 ;;  multiplier      2    0[COMRAM] unsigned int 
 14992 ;;  multiplicand    2    2[COMRAM] unsigned int 
 14993 ;; Auto vars:     Size  Location     Type
 14994 ;;  product         2    4[COMRAM] unsigned int 
 14995 ;; Return value:  Size  Location     Type
 14996 ;;                  2    0[COMRAM] unsigned int 
 14997 ;; Registers used:
 14998 ;;		wreg, status,2, status,0, prodl, prodh
 14999 ;; Tracked objects:
 15000 ;;		On entry : 0/0
 15001 ;;		On exit  : 0/0
 15002 ;;		Unchanged: 0/0
 15003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15004 ;;      Params:         4       0       0       0
 15005 ;;      Locals:         2       0       0       0
 15006 ;;      Temps:          0       0       0       0
 15007 ;;      Totals:         6       0       0       0
 15008 ;;Total ram usage:        6 bytes
 15009 ;; Hardware stack levels used:    1
 15010 ;; This function calls:
 15011 ;;		Nothing
 15012 ;; This function is called by:
 15013 ;;		_LCDNokia_sendChar
 15014 ;; This function uses a non-reentrant model
 15015 ;;
 15016                           
 15017                           	psect	text57
 15018  0000'                    __ptext57:
 15019                           	opt stack 0
 15020  0000'                    ___wmul:
 15021                           	opt stack 26
 15022                           
 15023                           ;incstack = 0
 15024  0000' 5000'              	movf	___wmul@multiplier,w,c
 15025  0002' 0202'              	mulwf	___wmul@multiplicand,c
 15026  0004' CFF3 F004'         	movff	prodl,___wmul@product
 15027  0008' CFF4 F005'         	movff	prodh,___wmul@product+1
 15028  000C' 5000'              	movf	___wmul@multiplier,w,c
 15029  000E' 0203'              	mulwf	___wmul@multiplicand+1,c
 15030  0010' 50F3               	movf	prodl,w,c
 15031  0012' 2605'              	addwf	___wmul@product+1,f,c
 15032  0014' 5001'              	movf	___wmul@multiplier+1,w,c
 15033  0016' 0202'              	mulwf	___wmul@multiplicand,c
 15034  0018' 50F3               	movf	prodl,w,c
 15035  001A' 2605'              	addwf	___wmul@product+1,f,c
 15036  001C' C004' F000'        	movff	___wmul@product,?___wmul
 15037  0020' C005' F001'        	movff	___wmul@product+1,?___wmul+1
 15038  0024' 0012               	return	
 15039  0026'                    __end_of___wmul:
 15040                           	opt stack 0
 15041                           tosu	equ	0xFFF
 15042                           tosh	equ	0xFFE
 15043                           tosl	equ	0xFFD
 15044                           pclath	equ	0xFFA
 15045                           tblptru	equ	0xFF8
 15046                           tblptrh	equ	0xFF7
 15047                           tblptrl	equ	0xFF6
 15048                           tablat	equ	0xFF5
 15049                           prodh	equ	0xFF4
 15050                           prodl	equ	0xFF3
 15051                           postinc0	equ	0xFEE
 15052                           wreg	equ	0xFE8
 15053                           indf2	equ	0xFDF
 15054                           postinc2	equ	0xFDE
 15055                           fsr2h	equ	0xFDA
 15056                           fsr2l	equ	0xFD9
 15057                           status	equ	0xFD8
 15058                           
 15059 ;; *************** function _LCDNokia_clear *****************
 15060 ;; Defined at:
 15061 ;;		line 197 in file "LCDNokia5110.c"
 15062 ;; Parameters:    Size  Location     Type
 15063 ;;		None
 15064 ;; Auto vars:     Size  Location     Type
 15065 ;;  index           2   10[COMRAM] unsigned int 
 15066 ;; Return value:  Size  Location     Type
 15067 ;;                  1    wreg      void 
 15068 ;; Registers used:
 15069 ;;		wreg, status,2, status,0, cstack
 15070 ;; Tracked objects:
 15071 ;;		On entry : 0/0
 15072 ;;		On exit  : 0/0
 15073 ;;		Unchanged: 0/0
 15074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15075 ;;      Params:         0       0       0       0
 15076 ;;      Locals:         2       0       0       0
 15077 ;;      Temps:          0       0       0       0
 15078 ;;      Totals:         2       0       0       0
 15079 ;;Total ram usage:        2 bytes
 15080 ;; Hardware stack levels used:    1
 15081 ;; Hardware stack levels required when called:    3
 15082 ;; This function calls:
 15083 ;;		_LCDNokia_gotoXY
 15084 ;;		_LCDNokia_writeByte
 15085 ;; This function is called by:
 15086 ;;		_main
 15087 ;;		_generalView
 15088 ;;		_viewMenu
 15089 ;;		_sendData
 15090 ;;		_activeEnergy
 15091 ;;		_reactiveEnergy
 15092 ;;		_apparentEnergy
 15093 ;;		_fundamentalEnergy
 15094 ;;		_harmonicEnergy
 15095 ;;		_exitEnergy
 15096 ;;		_typesPower1
 15097 ;;		_phPower1
 15098 ;;		_exitPower1
 15099 ;;		_fhPower2
 15100 ;;		_exitPower2
 15101 ;;		_phRmsVI
 15102 ;;		_exitRmsVI
 15103 ;;		_phPowerFactor
 15104 ;;		_exitPowerFactor
 15105 ;;		_phPhaseAngle
 15106 ;;		_viPhaseAngle
 15107 ;;		_THDNPhaseAngle
 15108 ;;		_exitPhaseAngle
 15109 ;;		_exitFrequency
 15110 ;;		_exitTemperature
 15111 ;; This function uses a non-reentrant model
 15112 ;;
 15113                           
 15114                           	psect	text58
 15115  0000'                    __ptext58:
 15116                           	opt stack 0
 15117  0000'                    _LCDNokia_clear:
 15118                           	opt stack 25
 15119                           
 15120                           ;LCDNokia5110.c: 199: uint16_t index = 0;
 15121                           
 15122                           ;incstack = 0
 15123  0000' 0E00               	movlw	0
 15124  0002' 6E0B'              	movwf	LCDNokia_clear@index+1,c
 15125  0004' 0E00               	movlw	0
 15126  0006' 6E0A'              	movwf	LCDNokia_clear@index,c
 15127                           
 15128                           ;LCDNokia5110.c: 201: for (index = 0; index < ((84 * 48) / 8); index++)
 15129  0008' 0E00               	movlw	0
 15130  000A' 6E0B'              	movwf	LCDNokia_clear@index+1,c
 15131  000C' 0E00               	movlw	0
 15132  000E' 6E0A'              	movwf	LCDNokia_clear@index,c
 15133  0010'                    l4736:
 15134  0010' 0EF8               	movlw	248
 15135  0012' 5C0A'              	subwf	LCDNokia_clear@index,w,c
 15136  0014' 0E01               	movlw	1
 15137  0016' 580B'              	subwfb	LCDNokia_clear@index+1,w,c
 15138  0018' B0D8               	btfsc	status,0,c
 15139  001A' D008               	goto	u2840
 15140                           
 15141                           ;LCDNokia5110.c: 202: {
 15142                           ;LCDNokia5110.c: 203: LCDNokia_writeByte(1, 0x00);
 15143  001C' 0E00               	movlw	0
 15144  001E' 6E06'              	movwf	LCDNokia_writeByte@data,c
 15145  0020' 0E01               	movlw	1
 15146  0022' EC00' F000'        	call	_LCDNokia_writeByte
 15147  0026' 4A0A'              	infsnz	LCDNokia_clear@index,f,c
 15148  0028' 2A0B'              	incf	LCDNokia_clear@index+1,f,c
 15149  002A' D7F2               	goto	l4736
 15150  002C'                    u2840:
 15151                           
 15152                           ;LCDNokia5110.c: 204: }
 15153                           ;LCDNokia5110.c: 206: LCDNokia_gotoXY(0, 0);
 15154  002C' 0E00               	movlw	0
 15155  002E' 6E08'              	movwf	LCDNokia_gotoXY@y,c
 15156  0030' 0E00               	movlw	0
 15157  0032' EC00' F000'        	call	_LCDNokia_gotoXY
 15158  0036' 0012               	return		;funcret
 15159  0038'                    __end_of_LCDNokia_clear:
 15160                           	opt stack 0
 15161                           tosu	equ	0xFFF
 15162                           tosh	equ	0xFFE
 15163                           tosl	equ	0xFFD
 15164                           pclath	equ	0xFFA
 15165                           tblptru	equ	0xFF8
 15166                           tblptrh	equ	0xFF7
 15167                           tblptrl	equ	0xFF6
 15168                           tablat	equ	0xFF5
 15169                           prodh	equ	0xFF4
 15170                           prodl	equ	0xFF3
 15171                           postinc0	equ	0xFEE
 15172                           wreg	equ	0xFE8
 15173                           indf2	equ	0xFDF
 15174                           postinc2	equ	0xFDE
 15175                           fsr2h	equ	0xFDA
 15176                           fsr2l	equ	0xFD9
 15177                           status	equ	0xFD8
 15178                           
 15179 ;; *************** function _LCDNokia_gotoXY *****************
 15180 ;; Defined at:
 15181 ;;		line 209 in file "LCDNokia5110.c"
 15182 ;; Parameters:    Size  Location     Type
 15183 ;;  x               1    wreg     unsigned char 
 15184 ;;  y               1    8[COMRAM] unsigned char 
 15185 ;; Auto vars:     Size  Location     Type
 15186 ;;  x               1    9[COMRAM] unsigned char 
 15187 ;; Return value:  Size  Location     Type
 15188 ;;                  1    wreg      void 
 15189 ;; Registers used:
 15190 ;;		wreg, status,2, status,0, cstack
 15191 ;; Tracked objects:
 15192 ;;		On entry : 0/0
 15193 ;;		On exit  : 0/0
 15194 ;;		Unchanged: 0/0
 15195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15196 ;;      Params:         1       0       0       0
 15197 ;;      Locals:         1       0       0       0
 15198 ;;      Temps:          0       0       0       0
 15199 ;;      Totals:         2       0       0       0
 15200 ;;Total ram usage:        2 bytes
 15201 ;; Hardware stack levels used:    1
 15202 ;; Hardware stack levels required when called:    2
 15203 ;; This function calls:
 15204 ;;		_LCDNokia_writeByte
 15205 ;; This function is called by:
 15206 ;;		_generalView
 15207 ;;		_viewMenu
 15208 ;;		_activeEnergy
 15209 ;;		_reactiveEnergy
 15210 ;;		_apparentEnergy
 15211 ;;		_fundamentalEnergy
 15212 ;;		_harmonicEnergy
 15213 ;;		_typesPower1
 15214 ;;		_phPower1
 15215 ;;		_fhPower2
 15216 ;;		_phPower2
 15217 ;;		_phRmsVI
 15218 ;;		_neutralRmsVI
 15219 ;;		_phPowerFactor
 15220 ;;		_phPhaseAngle
 15221 ;;		_viPhaseAngle
 15222 ;;		_THDNPhaseAngle
 15223 ;;		_showFrequency
 15224 ;;		_showTemperature
 15225 ;;		_LCDNokia_clear
 15226 ;; This function uses a non-reentrant model
 15227 ;;
 15228                           
 15229                           	psect	text59
 15230  0000'                    __ptext59:
 15231                           	opt stack 0
 15232  0000'                    _LCDNokia_gotoXY:
 15233                           	opt stack 26
 15234                           
 15235                           ;incstack = 0
 15236                           ;LCDNokia_gotoXY@x stored from wreg
 15237  0000' 6E09'              	movwf	LCDNokia_gotoXY@x,c
 15238                           
 15239                           ;LCDNokia5110.c: 211: LCDNokia_writeByte(0, 0x80 | x);
 15240  0002' 5009'              	movf	LCDNokia_gotoXY@x,w,c
 15241  0004' 0980               	iorlw	128
 15242  0006' 6E06'              	movwf	LCDNokia_writeByte@data,c
 15243  0008' 0E00               	movlw	0
 15244  000A' EC00' F000'        	call	_LCDNokia_writeByte
 15245                           
 15246                           ;LCDNokia5110.c: 212: LCDNokia_writeByte(0, 0x40 | y);
 15247  000E' 5008'              	movf	LCDNokia_gotoXY@y,w,c
 15248  0010' 0940               	iorlw	64
 15249  0012' 6E06'              	movwf	LCDNokia_writeByte@data,c
 15250  0014' 0E00               	movlw	0
 15251  0016' EC00' F000'        	call	_LCDNokia_writeByte
 15252  001A' 0012               	return		;funcret
 15253  001C'                    __end_of_LCDNokia_gotoXY:
 15254                           	opt stack 0
 15255                           tosu	equ	0xFFF
 15256                           tosh	equ	0xFFE
 15257                           tosl	equ	0xFFD
 15258                           pclath	equ	0xFFA
 15259                           tblptru	equ	0xFF8
 15260                           tblptrh	equ	0xFF7
 15261                           tblptrl	equ	0xFF6
 15262                           tablat	equ	0xFF5
 15263                           prodh	equ	0xFF4
 15264                           prodl	equ	0xFF3
 15265                           postinc0	equ	0xFEE
 15266                           wreg	equ	0xFE8
 15267                           indf2	equ	0xFDF
 15268                           postinc2	equ	0xFDE
 15269                           fsr2h	equ	0xFDA
 15270                           fsr2l	equ	0xFD9
 15271                           status	equ	0xFD8
 15272                           
 15273 ;; *************** function _LCDNokia_writeByte *****************
 15274 ;; Defined at:
 15275 ;;		line 139 in file "LCDNokia5110.c"
 15276 ;; Parameters:    Size  Location     Type
 15277 ;;  DataOrCmd       1    wreg     unsigned char 
 15278 ;;  data            1    6[COMRAM] unsigned char 
 15279 ;; Auto vars:     Size  Location     Type
 15280 ;;  DataOrCmd       1    7[COMRAM] unsigned char 
 15281 ;; Return value:  Size  Location     Type
 15282 ;;                  1    wreg      void 
 15283 ;; Registers used:
 15284 ;;		wreg, status,2, cstack
 15285 ;; Tracked objects:
 15286 ;;		On entry : 0/0
 15287 ;;		On exit  : 0/0
 15288 ;;		Unchanged: 0/0
 15289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15290 ;;      Params:         1       0       0       0
 15291 ;;      Locals:         1       0       0       0
 15292 ;;      Temps:          0       0       0       0
 15293 ;;      Totals:         2       0       0       0
 15294 ;;Total ram usage:        2 bytes
 15295 ;; Hardware stack levels used:    1
 15296 ;; Hardware stack levels required when called:    1
 15297 ;; This function calls:
 15298 ;;		_SPI_write
 15299 ;; This function is called by:
 15300 ;;		_LCDNokia_init
 15301 ;;		_LCDNokia_sendChar
 15302 ;;		_LCDNokia_clear
 15303 ;;		_LCDNokia_gotoXY
 15304 ;;		_LCDNokia_bitmap
 15305 ;; This function uses a non-reentrant model
 15306 ;;
 15307                           
 15308                           	psect	text60
 15309  0000'                    __ptext60:
 15310                           	opt stack 0
 15311  0000'                    _LCDNokia_writeByte:
 15312                           	opt stack 25
 15313                           
 15314                           ;incstack = 0
 15315                           ;LCDNokia_writeByte@DataOrCmd stored from wreg
 15316  0000' 6E07'              	movwf	LCDNokia_writeByte@DataOrCmd,c
 15317                           
 15318                           ;LCDNokia5110.c: 141: if(DataOrCmd)
 15319  0002' 5007'              	movf	LCDNokia_writeByte@DataOrCmd,w,c
 15320  0004' B4D8               	btfsc	status,2,c
 15321  0006' D002               	goto	l967
 15322                           
 15323                           ;LCDNokia5110.c: 142: {
 15324                           ;LCDNokia5110.c: 143: PORTBbits.RB2 = 1;
 15325  0008' 8481               	bsf	3969,2,c	;volatile
 15326                           
 15327                           ;LCDNokia5110.c: 145: }
 15328  000A' D001               	goto	l968
 15329  000C'                    l967:
 15330                           
 15331                           ;LCDNokia5110.c: 146: else
 15332                           ;LCDNokia5110.c: 147: {
 15333                           ;LCDNokia5110.c: 148: PORTBbits.RB2 = 0;
 15334  000C' 9481               	bcf	3969,2,c	;volatile
 15335  000E'                    l968:
 15336                           
 15337                           ;LCDNokia5110.c: 150: }
 15338                           ;LCDNokia5110.c: 151: PORTBbits.RB0 = 0;
 15339  000E' 9081               	bcf	3969,0,c	;volatile
 15340                           
 15341                           ;LCDNokia5110.c: 152: SPI_write(data);
 15342  0010' 5006'              	movf	LCDNokia_writeByte@data,w,c
 15343  0012' EC00' F000'        	call	_SPI_write
 15344                           
 15345                           ;LCDNokia5110.c: 153: PORTBbits.RB0 = 1;
 15346  0016' 8081               	bsf	3969,0,c	;volatile
 15347  0018' 0012               	return		;funcret
 15348  001A'                    __end_of_LCDNokia_writeByte:
 15349                           	opt stack 0
 15350                           tosu	equ	0xFFF
 15351                           tosh	equ	0xFFE
 15352                           tosl	equ	0xFFD
 15353                           pclath	equ	0xFFA
 15354                           tblptru	equ	0xFF8
 15355                           tblptrh	equ	0xFF7
 15356                           tblptrl	equ	0xFF6
 15357                           tablat	equ	0xFF5
 15358                           prodh	equ	0xFF4
 15359                           prodl	equ	0xFF3
 15360                           postinc0	equ	0xFEE
 15361                           wreg	equ	0xFE8
 15362                           indf2	equ	0xFDF
 15363                           postinc2	equ	0xFDE
 15364                           fsr2h	equ	0xFDA
 15365                           fsr2l	equ	0xFD9
 15366                           status	equ	0xFD8
 15367                           
 15368 ;; *************** function _ATM_registers *****************
 15369 ;; Defined at:
 15370 ;;		line 721 in file "ATM90E36A.c"
 15371 ;; Parameters:    Size  Location     Type
 15372 ;;  type            1    wreg     enum E3061
 15373 ;;  reg             1   18[COMRAM] enum E3080
 15374 ;; Auto vars:     Size  Location     Type
 15375 ;;  type            1   20[COMRAM] enum E3061
 15376 ;;  info            2   21[COMRAM] unsigned int 
 15377 ;; Return value:  Size  Location     Type
 15378 ;;                  2   18[COMRAM] unsigned int 
 15379 ;; Registers used:
 15380 ;;		wreg, status,2, status,0, cstack
 15381 ;; Tracked objects:
 15382 ;;		On entry : 0/0
 15383 ;;		On exit  : 0/0
 15384 ;;		Unchanged: 0/0
 15385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15386 ;;      Params:         2       0       0       0
 15387 ;;      Locals:         3       0       0       0
 15388 ;;      Temps:          0       0       0       0
 15389 ;;      Totals:         5       0       0       0
 15390 ;;Total ram usage:        5 bytes
 15391 ;; Hardware stack levels used:    1
 15392 ;; Hardware stack levels required when called:    2
 15393 ;; This function calls:
 15394 ;;		_ATM_read
 15395 ;; This function is called by:
 15396 ;;		_activeEnergy
 15397 ;;		_reactiveEnergy
 15398 ;;		_apparentEnergy
 15399 ;;		_fundamentalEnergy
 15400 ;;		_harmonicEnergy
 15401 ;;		_typesPower1
 15402 ;;		_phPower1
 15403 ;;		_fhPower2
 15404 ;;		_phPower2
 15405 ;;		_phRmsVI
 15406 ;;		_neutralRmsVI
 15407 ;;		_phPowerFactor
 15408 ;;		_phPhaseAngle
 15409 ;;		_viPhaseAngle
 15410 ;;		_THDNPhaseAngle
 15411 ;;		_showFrequency
 15412 ;;		_showTemperature
 15413 ;; This function uses a non-reentrant model
 15414 ;;
 15415                           
 15416                           	psect	text61
 15417  0000'                    __ptext61:
 15418                           	opt stack 0
 15419  0000'                    _ATM_registers:
 15420                           	opt stack 26
 15421                           
 15422                           ;incstack = 0
 15423                           ;ATM_registers@type stored from wreg
 15424  0000' 6E14'              	movwf	ATM_registers@type,c
 15425                           
 15426                           ;ATM90E36A.c: 723: uint16_t info;
 15427                           ;ATM90E36A.c: 725: switch(type)
 15428  0002' D361               	goto	l1079
 15429  0004'                    
 15430                           ;ATM90E36A.c: 731: info = ATM_read(0x80);
 15431  0004' 0E00               	movlw	0
 15432  0006' 6E02'              	movwf	ATM_read@register_add+1,c
 15433  0008' 0E80               	movlw	128
 15434  000A' 6E01'              	movwf	ATM_read@register_add,c
 15435  000C' EC00' F000'        	call	_ATM_read	;wreg free
 15436  0010' D355               	goto	L93
 15437  0012'                    
 15438                           ;ATM90E36A.c: 734: info = ATM_read(0x81);
 15439  0012' 0E00               	movlw	0
 15440  0014' 6E02'              	movwf	ATM_read@register_add+1,c
 15441  0016' 0E81               	movlw	129
 15442  0018' 6E01'              	movwf	ATM_read@register_add,c
 15443  001A' EC00' F000'        	call	_ATM_read	;wreg free
 15444  001E' D34E               	goto	L93
 15445  0020'                    
 15446                           ;ATM90E36A.c: 737: info = ATM_read(0x82);
 15447  0020' 0E00               	movlw	0
 15448  0022' 6E02'              	movwf	ATM_read@register_add+1,c
 15449  0024' 0E82               	movlw	130
 15450  0026' 6E01'              	movwf	ATM_read@register_add,c
 15451  0028' EC00' F000'        	call	_ATM_read	;wreg free
 15452  002C' D347               	goto	L93
 15453  002E'                    
 15454                           ;ATM90E36A.c: 740: info = ATM_read(0x83);
 15455  002E' 0E00               	movlw	0
 15456  0030' 6E02'              	movwf	ATM_read@register_add+1,c
 15457  0032' 0E83               	movlw	131
 15458  0034' 6E01'              	movwf	ATM_read@register_add,c
 15459  0036' EC00' F000'        	call	_ATM_read	;wreg free
 15460  003A' D340               	goto	L93
 15461  003C'                    
 15462                           ;ATM90E36A.c: 743: info = ATM_read(0x84);
 15463  003C' 0E00               	movlw	0
 15464  003E' 6E02'              	movwf	ATM_read@register_add+1,c
 15465  0040' 0E84               	movlw	132
 15466  0042' 6E01'              	movwf	ATM_read@register_add,c
 15467  0044' EC00' F000'        	call	_ATM_read	;wreg free
 15468  0048' D339               	goto	L93
 15469  004A'                    
 15470                           ;ATM90E36A.c: 746: info = ATM_read(0x85);
 15471  004A' 0E00               	movlw	0
 15472  004C' 6E02'              	movwf	ATM_read@register_add+1,c
 15473  004E' 0E85               	movlw	133
 15474  0050' 6E01'              	movwf	ATM_read@register_add,c
 15475  0052' EC00' F000'        	call	_ATM_read	;wreg free
 15476  0056' D332               	goto	L93
 15477  0058'                    
 15478                           ;ATM90E36A.c: 749: info = ATM_read(0x86);
 15479  0058' 0E00               	movlw	0
 15480  005A' 6E02'              	movwf	ATM_read@register_add+1,c
 15481  005C' 0E86               	movlw	134
 15482  005E' 6E01'              	movwf	ATM_read@register_add,c
 15483  0060' EC00' F000'        	call	_ATM_read	;wreg free
 15484  0064' D32B               	goto	L93
 15485  0066'                    
 15486                           ;ATM90E36A.c: 752: info = ATM_read(0x87);
 15487  0066' 0E00               	movlw	0
 15488  0068' 6E02'              	movwf	ATM_read@register_add+1,c
 15489  006A' 0E87               	movlw	135
 15490  006C' 6E01'              	movwf	ATM_read@register_add,c
 15491  006E' EC00' F000'        	call	_ATM_read	;wreg free
 15492  0072' D324               	goto	L93
 15493  0074' 5012'              	movf	ATM_registers@reg,w,c
 15494                           
 15495                           ; Switch size 1, requested type "space"
 15496                           ; Number of cases is 8, Range of values is 0 to 7
 15497                           ; switch strategies available:
 15498                           ; Name         Instructions Cycles
 15499                           ; simple_byte           25    13 (average)
 15500                           ;	Chosen strategy is simple_byte
 15501  0076' 0A00               	xorlw	0	; case 0
 15502  0078' B4D8               	btfsc	status,2,c
 15503  007A' D7C4               	goto	l1082
 15504  007C' 0A01               	xorlw	1	; case 1
 15505  007E' B4D8               	btfsc	status,2,c
 15506  0080' D7C8               	goto	l1084
 15507  0082' 0A03               	xorlw	3	; case 2
 15508  0084' B4D8               	btfsc	status,2,c
 15509  0086' D7CC               	goto	l1085
 15510  0088' 0A01               	xorlw	1	; case 3
 15511  008A' B4D8               	btfsc	status,2,c
 15512  008C' D7D0               	goto	l1086
 15513  008E' 0A07               	xorlw	7	; case 4
 15514  0090' B4D8               	btfsc	status,2,c
 15515  0092' D7D4               	goto	l1087
 15516  0094' 0A01               	xorlw	1	; case 5
 15517  0096' B4D8               	btfsc	status,2,c
 15518  0098' D7D8               	goto	l1088
 15519  009A' 0A03               	xorlw	3	; case 6
 15520  009C' B4D8               	btfsc	status,2,c
 15521  009E' D7DC               	goto	l1089
 15522  00A0' 0A01               	xorlw	1	; case 7
 15523  00A2' B4D8               	btfsc	status,2,c
 15524  00A4' D7E0               	goto	l1090
 15525                           
 15526                           ;ATM90E36A.c: 757: break;
 15527  00A6' D343               	goto	l1092
 15528  00A8'                    
 15529                           ;ATM90E36A.c: 762: info = ATM_read(0x88);
 15530  00A8' 0E00               	movlw	0
 15531  00AA' 6E02'              	movwf	ATM_read@register_add+1,c
 15532  00AC' 0E88               	movlw	136
 15533  00AE' 6E01'              	movwf	ATM_read@register_add,c
 15534  00B0' EC00' F000'        	call	_ATM_read	;wreg free
 15535  00B4' D303               	goto	L93
 15536  00B6'                    
 15537                           ;ATM90E36A.c: 765: info = ATM_read(0x89);
 15538  00B6' 0E00               	movlw	0
 15539  00B8' 6E02'              	movwf	ATM_read@register_add+1,c
 15540  00BA' 0E89               	movlw	137
 15541  00BC' 6E01'              	movwf	ATM_read@register_add,c
 15542  00BE' EC00' F000'        	call	_ATM_read	;wreg free
 15543  00C2' D2FC               	goto	L93
 15544  00C4'                    
 15545                           ;ATM90E36A.c: 768: info = ATM_read(0x8A);
 15546  00C4' 0E00               	movlw	0
 15547  00C6' 6E02'              	movwf	ATM_read@register_add+1,c
 15548  00C8' 0E8A               	movlw	138
 15549  00CA' 6E01'              	movwf	ATM_read@register_add,c
 15550  00CC' EC00' F000'        	call	_ATM_read	;wreg free
 15551  00D0' D2F5               	goto	L93
 15552  00D2'                    
 15553                           ;ATM90E36A.c: 771: info = ATM_read(0x8B);
 15554  00D2' 0E00               	movlw	0
 15555  00D4' 6E02'              	movwf	ATM_read@register_add+1,c
 15556  00D6' 0E8B               	movlw	139
 15557  00D8' 6E01'              	movwf	ATM_read@register_add,c
 15558  00DA' EC00' F000'        	call	_ATM_read	;wreg free
 15559  00DE' D2EE               	goto	L93
 15560  00E0'                    
 15561                           ;ATM90E36A.c: 774: info = ATM_read(0x8C);
 15562  00E0' 0E00               	movlw	0
 15563  00E2' 6E02'              	movwf	ATM_read@register_add+1,c
 15564  00E4' 0E8C               	movlw	140
 15565  00E6' 6E01'              	movwf	ATM_read@register_add,c
 15566  00E8' EC00' F000'        	call	_ATM_read	;wreg free
 15567  00EC' D2E7               	goto	L93
 15568  00EE'                    
 15569                           ;ATM90E36A.c: 777: info = ATM_read(0x8D);
 15570  00EE' 0E00               	movlw	0
 15571  00F0' 6E02'              	movwf	ATM_read@register_add+1,c
 15572  00F2' 0E8D               	movlw	141
 15573  00F4' 6E01'              	movwf	ATM_read@register_add,c
 15574  00F6' EC00' F000'        	call	_ATM_read	;wreg free
 15575  00FA' D2E0               	goto	L93
 15576  00FC'                    
 15577                           ;ATM90E36A.c: 780: info = ATM_read(0x8E);
 15578  00FC' 0E00               	movlw	0
 15579  00FE' 6E02'              	movwf	ATM_read@register_add+1,c
 15580  0100' 0E8E               	movlw	142
 15581  0102' 6E01'              	movwf	ATM_read@register_add,c
 15582  0104' EC00' F000'        	call	_ATM_read	;wreg free
 15583  0108' D2D9               	goto	L93
 15584  010A'                    
 15585                           ;ATM90E36A.c: 783: info = ATM_read(0x8F);
 15586  010A' 0E00               	movlw	0
 15587  010C' 6E02'              	movwf	ATM_read@register_add+1,c
 15588  010E' 0E8F               	movlw	143
 15589  0110' 6E01'              	movwf	ATM_read@register_add,c
 15590  0112' EC00' F000'        	call	_ATM_read	;wreg free
 15591  0116' D2D2               	goto	L93
 15592  0118' 5012'              	movf	ATM_registers@reg,w,c
 15593                           
 15594                           ; Switch size 1, requested type "space"
 15595                           ; Number of cases is 8, Range of values is 8 to 15
 15596                           ; switch strategies available:
 15597                           ; Name         Instructions Cycles
 15598                           ; simple_byte           25    13 (average)
 15599                           ;	Chosen strategy is simple_byte
 15600  011A' 0A08               	xorlw	8	; case 8
 15601  011C' B4D8               	btfsc	status,2,c
 15602  011E' D7C4               	goto	l1095
 15603  0120' 0A01               	xorlw	1	; case 9
 15604  0122' B4D8               	btfsc	status,2,c
 15605  0124' D7C8               	goto	l1097
 15606  0126' 0A03               	xorlw	3	; case 10
 15607  0128' B4D8               	btfsc	status,2,c
 15608  012A' D7CC               	goto	l1098
 15609  012C' 0A01               	xorlw	1	; case 11
 15610  012E' B4D8               	btfsc	status,2,c
 15611  0130' D7D0               	goto	l1099
 15612  0132' 0A07               	xorlw	7	; case 12
 15613  0134' B4D8               	btfsc	status,2,c
 15614  0136' D7D4               	goto	l1100
 15615  0138' 0A01               	xorlw	1	; case 13
 15616  013A' B4D8               	btfsc	status,2,c
 15617  013C' D7D8               	goto	l1101
 15618  013E' 0A03               	xorlw	3	; case 14
 15619  0140' B4D8               	btfsc	status,2,c
 15620  0142' D7DC               	goto	l1102
 15621  0144' 0A01               	xorlw	1	; case 15
 15622  0146' B4D8               	btfsc	status,2,c
 15623  0148' D7E0               	goto	l1103
 15624                           
 15625                           ;ATM90E36A.c: 788: break;
 15626  014A' D2F1               	goto	l1092
 15627  014C'                    
 15628                           ;ATM90E36A.c: 793: info = ATM_read(0x90);
 15629  014C' 0E00               	movlw	0
 15630  014E' 6E02'              	movwf	ATM_read@register_add+1,c
 15631  0150' 0E90               	movlw	144
 15632  0152' 6E01'              	movwf	ATM_read@register_add,c
 15633  0154' EC00' F000'        	call	_ATM_read	;wreg free
 15634  0158' D2B1               	goto	L93
 15635  015A'                    
 15636                           ;ATM90E36A.c: 796: info = ATM_read(0x91);
 15637  015A' 0E00               	movlw	0
 15638  015C' 6E02'              	movwf	ATM_read@register_add+1,c
 15639  015E' 0E91               	movlw	145
 15640  0160' 6E01'              	movwf	ATM_read@register_add,c
 15641  0162' EC00' F000'        	call	_ATM_read	;wreg free
 15642  0166' D2AA               	goto	L93
 15643  0168'                    
 15644                           ;ATM90E36A.c: 799: info = ATM_read(0x92);
 15645  0168' 0E00               	movlw	0
 15646  016A' 6E02'              	movwf	ATM_read@register_add+1,c
 15647  016C' 0E92               	movlw	146
 15648  016E' 6E01'              	movwf	ATM_read@register_add,c
 15649  0170' EC00' F000'        	call	_ATM_read	;wreg free
 15650  0174' D2A3               	goto	L93
 15651  0176'                    
 15652                           ;ATM90E36A.c: 802: info = ATM_read(0x93);
 15653  0176' 0E00               	movlw	0
 15654  0178' 6E02'              	movwf	ATM_read@register_add+1,c
 15655  017A' 0E93               	movlw	147
 15656  017C' 6E01'              	movwf	ATM_read@register_add,c
 15657  017E' EC00' F000'        	call	_ATM_read	;wreg free
 15658  0182' D29C               	goto	L93
 15659  0184'                    
 15660                           ;ATM90E36A.c: 805: info = ATM_read(0x94);
 15661  0184' 0E00               	movlw	0
 15662  0186' 6E02'              	movwf	ATM_read@register_add+1,c
 15663  0188' 0E94               	movlw	148
 15664  018A' 6E01'              	movwf	ATM_read@register_add,c
 15665  018C' EC00' F000'        	call	_ATM_read	;wreg free
 15666  0190' D295               	goto	L93
 15667  0192' 5012'              	movf	ATM_registers@reg,w,c
 15668                           
 15669                           ; Switch size 1, requested type "space"
 15670                           ; Number of cases is 5, Range of values is 16 to 20
 15671                           ; switch strategies available:
 15672                           ; Name         Instructions Cycles
 15673                           ; simple_byte           16     9 (average)
 15674                           ;	Chosen strategy is simple_byte
 15675  0194' 0A10               	xorlw	16	; case 16
 15676  0196' B4D8               	btfsc	status,2,c
 15677  0198' D7D9               	goto	l1107
 15678  019A' 0A01               	xorlw	1	; case 17
 15679  019C' B4D8               	btfsc	status,2,c
 15680  019E' D7DD               	goto	l1109
 15681  01A0' 0A03               	xorlw	3	; case 18
 15682  01A2' B4D8               	btfsc	status,2,c
 15683  01A4' D7E1               	goto	l1110
 15684  01A6' 0A01               	xorlw	1	; case 19
 15685  01A8' B4D8               	btfsc	status,2,c
 15686  01AA' D7E5               	goto	l1111
 15687  01AC' 0A07               	xorlw	7	; case 20
 15688  01AE' B4D8               	btfsc	status,2,c
 15689  01B0' D7E9               	goto	l1112
 15690                           
 15691                           ;ATM90E36A.c: 810: break;
 15692  01B2' D2BD               	goto	l1092
 15693  01B4'                    
 15694                           ;ATM90E36A.c: 815: info = ATM_read(0xA0);
 15695  01B4' 0E00               	movlw	0
 15696  01B6' 6E02'              	movwf	ATM_read@register_add+1,c
 15697  01B8' 0EA0               	movlw	160
 15698  01BA' 6E01'              	movwf	ATM_read@register_add,c
 15699  01BC' EC00' F000'        	call	_ATM_read	;wreg free
 15700  01C0' D27D               	goto	L93
 15701  01C2'                    
 15702                           ;ATM90E36A.c: 818: info = ATM_read(0xA1);
 15703  01C2' 0E00               	movlw	0
 15704  01C4' 6E02'              	movwf	ATM_read@register_add+1,c
 15705  01C6' 0EA1               	movlw	161
 15706  01C8' 6E01'              	movwf	ATM_read@register_add,c
 15707  01CA' EC00' F000'        	call	_ATM_read	;wreg free
 15708  01CE' D276               	goto	L93
 15709  01D0'                    
 15710                           ;ATM90E36A.c: 821: info = ATM_read(0xA2);
 15711  01D0' 0E00               	movlw	0
 15712  01D2' 6E02'              	movwf	ATM_read@register_add+1,c
 15713  01D4' 0EA2               	movlw	162
 15714  01D6' 6E01'              	movwf	ATM_read@register_add,c
 15715  01D8' EC00' F000'        	call	_ATM_read	;wreg free
 15716  01DC' D26F               	goto	L93
 15717  01DE'                    
 15718                           ;ATM90E36A.c: 824: info = ATM_read(0xA3);
 15719  01DE' 0E00               	movlw	0
 15720  01E0' 6E02'              	movwf	ATM_read@register_add+1,c
 15721  01E2' 0EA3               	movlw	163
 15722  01E4' 6E01'              	movwf	ATM_read@register_add,c
 15723  01E6' EC00' F000'        	call	_ATM_read	;wreg free
 15724  01EA' D268               	goto	L93
 15725  01EC'                    
 15726                           ;ATM90E36A.c: 827: info = ATM_read(0xA4);
 15727  01EC' 0E00               	movlw	0
 15728  01EE' 6E02'              	movwf	ATM_read@register_add+1,c
 15729  01F0' 0EA4               	movlw	164
 15730  01F2' 6E01'              	movwf	ATM_read@register_add,c
 15731  01F4' EC00' F000'        	call	_ATM_read	;wreg free
 15732  01F8' D261               	goto	L93
 15733  01FA'                    
 15734                           ;ATM90E36A.c: 830: info = ATM_read(0xA5);
 15735  01FA' 0E00               	movlw	0
 15736  01FC' 6E02'              	movwf	ATM_read@register_add+1,c
 15737  01FE' 0EA5               	movlw	165
 15738  0200' 6E01'              	movwf	ATM_read@register_add,c
 15739  0202' EC00' F000'        	call	_ATM_read	;wreg free
 15740  0206' D25A               	goto	L93
 15741  0208'                    
 15742                           ;ATM90E36A.c: 833: info = ATM_read(0xA6);
 15743  0208' 0E00               	movlw	0
 15744  020A' 6E02'              	movwf	ATM_read@register_add+1,c
 15745  020C' 0EA6               	movlw	166
 15746  020E' 6E01'              	movwf	ATM_read@register_add,c
 15747  0210' EC00' F000'        	call	_ATM_read	;wreg free
 15748  0214' D253               	goto	L93
 15749  0216'                    
 15750                           ;ATM90E36A.c: 836: info = ATM_read(0xA7);
 15751  0216' 0E00               	movlw	0
 15752  0218' 6E02'              	movwf	ATM_read@register_add+1,c
 15753  021A' 0EA7               	movlw	167
 15754  021C' 6E01'              	movwf	ATM_read@register_add,c
 15755  021E' EC00' F000'        	call	_ATM_read	;wreg free
 15756  0222' D24C               	goto	L93
 15757  0224' 5012'              	movf	ATM_registers@reg,w,c
 15758                           
 15759                           ; Switch size 1, requested type "space"
 15760                           ; Number of cases is 8, Range of values is 21 to 28
 15761                           ; switch strategies available:
 15762                           ; Name         Instructions Cycles
 15763                           ; simple_byte           25    13 (average)
 15764                           ;	Chosen strategy is simple_byte
 15765  0226' 0A15               	xorlw	21	; case 21
 15766  0228' B4D8               	btfsc	status,2,c
 15767  022A' D7C4               	goto	l1116
 15768  022C' 0A03               	xorlw	3	; case 22
 15769  022E' B4D8               	btfsc	status,2,c
 15770  0230' D7C8               	goto	l1118
 15771  0232' 0A01               	xorlw	1	; case 23
 15772  0234' B4D8               	btfsc	status,2,c
 15773  0236' D7CC               	goto	l1119
 15774  0238' 0A0F               	xorlw	15	; case 24
 15775  023A' B4D8               	btfsc	status,2,c
 15776  023C' D7D0               	goto	l1120
 15777  023E' 0A01               	xorlw	1	; case 25
 15778  0240' B4D8               	btfsc	status,2,c
 15779  0242' D7D4               	goto	l1121
 15780  0244' 0A03               	xorlw	3	; case 26
 15781  0246' B4D8               	btfsc	status,2,c
 15782  0248' D7D8               	goto	l1122
 15783  024A' 0A01               	xorlw	1	; case 27
 15784  024C' B4D8               	btfsc	status,2,c
 15785  024E' D7DC               	goto	l1123
 15786  0250' 0A07               	xorlw	7	; case 28
 15787  0252' B4D8               	btfsc	status,2,c
 15788  0254' D7E0               	goto	l1124
 15789                           
 15790                           ;ATM90E36A.c: 841: break;
 15791  0256' D26B               	goto	l1092
 15792  0258'                    
 15793                           ;ATM90E36A.c: 846: info = ATM_read(0xA8);
 15794  0258' 0E00               	movlw	0
 15795  025A' 6E02'              	movwf	ATM_read@register_add+1,c
 15796  025C' 0EA8               	movlw	168
 15797  025E' 6E01'              	movwf	ATM_read@register_add,c
 15798  0260' EC00' F000'        	call	_ATM_read	;wreg free
 15799  0264' D22B               	goto	L93
 15800  0266'                    
 15801                           ;ATM90E36A.c: 849: info = ATM_read(0xA9);
 15802  0266' 0E00               	movlw	0
 15803  0268' 6E02'              	movwf	ATM_read@register_add+1,c
 15804  026A' 0EA9               	movlw	169
 15805  026C' 6E01'              	movwf	ATM_read@register_add,c
 15806  026E' EC00' F000'        	call	_ATM_read	;wreg free
 15807  0272' D224               	goto	L93
 15808  0274'                    
 15809                           ;ATM90E36A.c: 852: info = ATM_read(0xAA);
 15810  0274' 0E00               	movlw	0
 15811  0276' 6E02'              	movwf	ATM_read@register_add+1,c
 15812  0278' 0EAA               	movlw	170
 15813  027A' 6E01'              	movwf	ATM_read@register_add,c
 15814  027C' EC00' F000'        	call	_ATM_read	;wreg free
 15815  0280' D21D               	goto	L93
 15816  0282'                    
 15817                           ;ATM90E36A.c: 855: info = ATM_read(0xAB);
 15818  0282' 0E00               	movlw	0
 15819  0284' 6E02'              	movwf	ATM_read@register_add+1,c
 15820  0286' 0EAB               	movlw	171
 15821  0288' 6E01'              	movwf	ATM_read@register_add,c
 15822  028A' EC00' F000'        	call	_ATM_read	;wreg free
 15823  028E' D216               	goto	L93
 15824  0290'                    
 15825                           ;ATM90E36A.c: 858: info = ATM_read(0xAC);
 15826  0290' 0E00               	movlw	0
 15827  0292' 6E02'              	movwf	ATM_read@register_add+1,c
 15828  0294' 0EAC               	movlw	172
 15829  0296' 6E01'              	movwf	ATM_read@register_add,c
 15830  0298' EC00' F000'        	call	_ATM_read	;wreg free
 15831  029C' D20F               	goto	L93
 15832  029E'                    
 15833                           ;ATM90E36A.c: 861: info = ATM_read(0xAD);
 15834  029E' 0E00               	movlw	0
 15835  02A0' 6E02'              	movwf	ATM_read@register_add+1,c
 15836  02A2' 0EAD               	movlw	173
 15837  02A4' 6E01'              	movwf	ATM_read@register_add,c
 15838  02A6' EC00' F000'        	call	_ATM_read	;wreg free
 15839  02AA' D208               	goto	L93
 15840  02AC'                    
 15841                           ;ATM90E36A.c: 864: info = ATM_read(0xAE);
 15842  02AC' 0E00               	movlw	0
 15843  02AE' 6E02'              	movwf	ATM_read@register_add+1,c
 15844  02B0' 0EAE               	movlw	174
 15845  02B2' 6E01'              	movwf	ATM_read@register_add,c
 15846  02B4' EC00' F000'        	call	_ATM_read	;wreg free
 15847  02B8' D201               	goto	L93
 15848  02BA'                    
 15849                           ;ATM90E36A.c: 867: info = ATM_read(0xAF);
 15850  02BA' 0E00               	movlw	0
 15851  02BC' 6E02'              	movwf	ATM_read@register_add+1,c
 15852  02BE' 0EAF               	movlw	175
 15853  02C0' 6E01'              	movwf	ATM_read@register_add,c
 15854  02C2' EC00' F000'        	call	_ATM_read	;wreg free
 15855  02C6' D1FA               	goto	L93
 15856  02C8' 5012'              	movf	ATM_registers@reg,w,c
 15857                           
 15858                           ; Switch size 1, requested type "space"
 15859                           ; Number of cases is 8, Range of values is 29 to 36
 15860                           ; switch strategies available:
 15861                           ; Name         Instructions Cycles
 15862                           ; simple_byte           25    13 (average)
 15863                           ;	Chosen strategy is simple_byte
 15864  02CA' 0A1D               	xorlw	29	; case 29
 15865  02CC' B4D8               	btfsc	status,2,c
 15866  02CE' D7C4               	goto	l1128
 15867  02D0' 0A03               	xorlw	3	; case 30
 15868  02D2' B4D8               	btfsc	status,2,c
 15869  02D4' D7C8               	goto	l1130
 15870  02D6' 0A01               	xorlw	1	; case 31
 15871  02D8' B4D8               	btfsc	status,2,c
 15872  02DA' D7CC               	goto	l1131
 15873  02DC' 0A3F               	xorlw	63	; case 32
 15874  02DE' B4D8               	btfsc	status,2,c
 15875  02E0' D7D0               	goto	l1132
 15876  02E2' 0A01               	xorlw	1	; case 33
 15877  02E4' B4D8               	btfsc	status,2,c
 15878  02E6' D7D4               	goto	l1133
 15879  02E8' 0A03               	xorlw	3	; case 34
 15880  02EA' B4D8               	btfsc	status,2,c
 15881  02EC' D7D8               	goto	l1134
 15882  02EE' 0A01               	xorlw	1	; case 35
 15883  02F0' B4D8               	btfsc	status,2,c
 15884  02F2' D7DC               	goto	l1135
 15885  02F4' 0A07               	xorlw	7	; case 36
 15886  02F6' B4D8               	btfsc	status,2,c
 15887  02F8' D7E0               	goto	l1136
 15888                           
 15889                           ;ATM90E36A.c: 872: break;
 15890  02FA' D219               	goto	l1092
 15891  02FC'                    
 15892                           ;ATM90E36A.c: 877: info = ATM_read(0xB0);
 15893  02FC' 0E00               	movlw	0
 15894  02FE' 6E02'              	movwf	ATM_read@register_add+1,c
 15895  0300' 0EB0               	movlw	176
 15896  0302' 6E01'              	movwf	ATM_read@register_add,c
 15897  0304' EC00' F000'        	call	_ATM_read	;wreg free
 15898  0308' D1D9               	goto	L93
 15899  030A'                    
 15900                           ;ATM90E36A.c: 880: info = ATM_read(0xB1);
 15901  030A' 0E00               	movlw	0
 15902  030C' 6E02'              	movwf	ATM_read@register_add+1,c
 15903  030E' 0EB1               	movlw	177
 15904  0310' 6E01'              	movwf	ATM_read@register_add,c
 15905  0312' EC00' F000'        	call	_ATM_read	;wreg free
 15906  0316' D1D2               	goto	L93
 15907  0318'                    
 15908                           ;ATM90E36A.c: 883: info = ATM_read(0xB2);
 15909  0318' 0E00               	movlw	0
 15910  031A' 6E02'              	movwf	ATM_read@register_add+1,c
 15911  031C' 0EB2               	movlw	178
 15912  031E' 6E01'              	movwf	ATM_read@register_add,c
 15913  0320' EC00' F000'        	call	_ATM_read	;wreg free
 15914  0324' D1CB               	goto	L93
 15915  0326'                    
 15916                           ;ATM90E36A.c: 886: info = ATM_read(0xB3);
 15917  0326' 0E00               	movlw	0
 15918  0328' 6E02'              	movwf	ATM_read@register_add+1,c
 15919  032A' 0EB3               	movlw	179
 15920  032C' 6E01'              	movwf	ATM_read@register_add,c
 15921  032E' EC00' F000'        	call	_ATM_read	;wreg free
 15922  0332' D1C4               	goto	L93
 15923  0334' 5012'              	movf	ATM_registers@reg,w,c
 15924                           
 15925                           ; Switch size 1, requested type "space"
 15926                           ; Number of cases is 4, Range of values is 37 to 40
 15927                           ; switch strategies available:
 15928                           ; Name         Instructions Cycles
 15929                           ; simple_byte           13     7 (average)
 15930                           ;	Chosen strategy is simple_byte
 15931  0336' 0A25               	xorlw	37	; case 37
 15932  0338' B4D8               	btfsc	status,2,c
 15933  033A' D7E0               	goto	l1140
 15934  033C' 0A03               	xorlw	3	; case 38
 15935  033E' B4D8               	btfsc	status,2,c
 15936  0340' D7E4               	goto	l1142
 15937  0342' 0A01               	xorlw	1	; case 39
 15938  0344' B4D8               	btfsc	status,2,c
 15939  0346' D7E8               	goto	l1143
 15940  0348' 0A0F               	xorlw	15	; case 40
 15941  034A' B4D8               	btfsc	status,2,c
 15942  034C' D7EC               	goto	l1144
 15943                           
 15944                           ;ATM90E36A.c: 891: break;
 15945  034E' D1EF               	goto	l1092
 15946  0350'                    
 15947                           ;ATM90E36A.c: 896: info = ATM_read(0xB4);
 15948  0350' 0E00               	movlw	0
 15949  0352' 6E02'              	movwf	ATM_read@register_add+1,c
 15950  0354' 0EB4               	movlw	180
 15951  0356' 6E01'              	movwf	ATM_read@register_add,c
 15952  0358' EC00' F000'        	call	_ATM_read	;wreg free
 15953  035C' D1AF               	goto	L93
 15954  035E'                    
 15955                           ;ATM90E36A.c: 899: info = ATM_read(0xB5);
 15956  035E' 0E00               	movlw	0
 15957  0360' 6E02'              	movwf	ATM_read@register_add+1,c
 15958  0362' 0EB5               	movlw	181
 15959  0364' 6E01'              	movwf	ATM_read@register_add,c
 15960  0366' EC00' F000'        	call	_ATM_read	;wreg free
 15961  036A' D1A8               	goto	L93
 15962  036C'                    
 15963                           ;ATM90E36A.c: 902: info = ATM_read(0xB6);
 15964  036C' 0E00               	movlw	0
 15965  036E' 6E02'              	movwf	ATM_read@register_add+1,c
 15966  0370' 0EB6               	movlw	182
 15967  0372' 6E01'              	movwf	ATM_read@register_add,c
 15968  0374' EC00' F000'        	call	_ATM_read	;wreg free
 15969  0378' D1A1               	goto	L93
 15970  037A'                    
 15971                           ;ATM90E36A.c: 905: info = ATM_read(0xB7);
 15972  037A' 0E00               	movlw	0
 15973  037C' 6E02'              	movwf	ATM_read@register_add+1,c
 15974  037E' 0EB7               	movlw	183
 15975  0380' 6E01'              	movwf	ATM_read@register_add,c
 15976  0382' EC00' F000'        	call	_ATM_read	;wreg free
 15977  0386' D19A               	goto	L93
 15978  0388' 5012'              	movf	ATM_registers@reg,w,c
 15979                           
 15980                           ; Switch size 1, requested type "space"
 15981                           ; Number of cases is 4, Range of values is 41 to 44
 15982                           ; switch strategies available:
 15983                           ; Name         Instructions Cycles
 15984                           ; simple_byte           13     7 (average)
 15985                           ;	Chosen strategy is simple_byte
 15986  038A' 0A29               	xorlw	41	; case 41
 15987  038C' B4D8               	btfsc	status,2,c
 15988  038E' D7E0               	goto	l1148
 15989  0390' 0A03               	xorlw	3	; case 42
 15990  0392' B4D8               	btfsc	status,2,c
 15991  0394' D7E4               	goto	l1150
 15992  0396' 0A01               	xorlw	1	; case 43
 15993  0398' B4D8               	btfsc	status,2,c
 15994  039A' D7E8               	goto	l1151
 15995  039C' 0A07               	xorlw	7	; case 44
 15996  039E' B4D8               	btfsc	status,2,c
 15997  03A0' D7EC               	goto	l1152
 15998                           
 15999                           ;ATM90E36A.c: 910: break;
 16000  03A2' D1C5               	goto	l1092
 16001  03A4'                    
 16002                           ;ATM90E36A.c: 915: info = ATM_read(0xB8);
 16003  03A4' 0E00               	movlw	0
 16004  03A6' 6E02'              	movwf	ATM_read@register_add+1,c
 16005  03A8' 0EB8               	movlw	184
 16006  03AA' 6E01'              	movwf	ATM_read@register_add,c
 16007  03AC' EC00' F000'        	call	_ATM_read	;wreg free
 16008  03B0' D185               	goto	L93
 16009  03B2'                    
 16010                           ;ATM90E36A.c: 918: info = ATM_read(0xB9);
 16011  03B2' 0E00               	movlw	0
 16012  03B4' 6E02'              	movwf	ATM_read@register_add+1,c
 16013  03B6' 0EB9               	movlw	185
 16014  03B8' 6E01'              	movwf	ATM_read@register_add,c
 16015  03BA' EC00' F000'        	call	_ATM_read	;wreg free
 16016  03BE' D17E               	goto	L93
 16017  03C0'                    
 16018                           ;ATM90E36A.c: 921: info = ATM_read(0xBA);
 16019  03C0' 0E00               	movlw	0
 16020  03C2' 6E02'              	movwf	ATM_read@register_add+1,c
 16021  03C4' 0EBA               	movlw	186
 16022  03C6' 6E01'              	movwf	ATM_read@register_add,c
 16023  03C8' EC00' F000'        	call	_ATM_read	;wreg free
 16024  03CC' D177               	goto	L93
 16025  03CE'                    
 16026                           ;ATM90E36A.c: 924: info = ATM_read(0xBB);
 16027  03CE' 0E00               	movlw	0
 16028  03D0' 6E02'              	movwf	ATM_read@register_add+1,c
 16029  03D2' 0EBB               	movlw	187
 16030  03D4' 6E01'              	movwf	ATM_read@register_add,c
 16031  03D6' EC00' F000'        	call	_ATM_read	;wreg free
 16032  03DA' D170               	goto	L93
 16033  03DC' 5012'              	movf	ATM_registers@reg,w,c
 16034                           
 16035                           ; Switch size 1, requested type "space"
 16036                           ; Number of cases is 4, Range of values is 45 to 48
 16037                           ; switch strategies available:
 16038                           ; Name         Instructions Cycles
 16039                           ; simple_byte           13     7 (average)
 16040                           ;	Chosen strategy is simple_byte
 16041  03DE' 0A2D               	xorlw	45	; case 45
 16042  03E0' B4D8               	btfsc	status,2,c
 16043  03E2' D7E0               	goto	l1156
 16044  03E4' 0A03               	xorlw	3	; case 46
 16045  03E6' B4D8               	btfsc	status,2,c
 16046  03E8' D7E4               	goto	l1158
 16047  03EA' 0A01               	xorlw	1	; case 47
 16048  03EC' B4D8               	btfsc	status,2,c
 16049  03EE' D7E8               	goto	l1159
 16050  03F0' 0A1F               	xorlw	31	; case 48
 16051  03F2' B4D8               	btfsc	status,2,c
 16052  03F4' D7EC               	goto	l1160
 16053                           
 16054                           ;ATM90E36A.c: 929: break;
 16055  03F6' D19B               	goto	l1092
 16056  03F8'                    
 16057                           ;ATM90E36A.c: 934: info = ATM_read(0xBC);
 16058  03F8' 0E00               	movlw	0
 16059  03FA' 6E02'              	movwf	ATM_read@register_add+1,c
 16060  03FC' 0EBC               	movlw	188
 16061  03FE' 6E01'              	movwf	ATM_read@register_add,c
 16062  0400' EC00' F000'        	call	_ATM_read	;wreg free
 16063  0404' D15B               	goto	L93
 16064  0406'                    
 16065                           ;ATM90E36A.c: 937: info = ATM_read(0xBD);
 16066  0406' 0E00               	movlw	0
 16067  0408' 6E02'              	movwf	ATM_read@register_add+1,c
 16068  040A' 0EBD               	movlw	189
 16069  040C' 6E01'              	movwf	ATM_read@register_add,c
 16070  040E' EC00' F000'        	call	_ATM_read	;wreg free
 16071  0412' D154               	goto	L93
 16072  0414'                    
 16073                           ;ATM90E36A.c: 940: info = ATM_read(0xBE);
 16074  0414' 0E00               	movlw	0
 16075  0416' 6E02'              	movwf	ATM_read@register_add+1,c
 16076  0418' 0EBE               	movlw	190
 16077  041A' 6E01'              	movwf	ATM_read@register_add,c
 16078  041C' EC00' F000'        	call	_ATM_read	;wreg free
 16079  0420' D14D               	goto	L93
 16080  0422'                    
 16081                           ;ATM90E36A.c: 943: info = ATM_read(0xBF);
 16082  0422' 0E00               	movlw	0
 16083  0424' 6E02'              	movwf	ATM_read@register_add+1,c
 16084  0426' 0EBF               	movlw	191
 16085  0428' 6E01'              	movwf	ATM_read@register_add,c
 16086  042A' EC00' F000'        	call	_ATM_read	;wreg free
 16087  042E' D146               	goto	L93
 16088  0430' 5012'              	movf	ATM_registers@reg,w,c
 16089                           
 16090                           ; Switch size 1, requested type "space"
 16091                           ; Number of cases is 4, Range of values is 49 to 52
 16092                           ; switch strategies available:
 16093                           ; Name         Instructions Cycles
 16094                           ; simple_byte           13     7 (average)
 16095                           ;	Chosen strategy is simple_byte
 16096  0432' 0A31               	xorlw	49	; case 49
 16097  0434' B4D8               	btfsc	status,2,c
 16098  0436' D7E0               	goto	l1164
 16099  0438' 0A03               	xorlw	3	; case 50
 16100  043A' B4D8               	btfsc	status,2,c
 16101  043C' D7E4               	goto	l1166
 16102  043E' 0A01               	xorlw	1	; case 51
 16103  0440' B4D8               	btfsc	status,2,c
 16104  0442' D7E8               	goto	l1167
 16105  0444' 0A07               	xorlw	7	; case 52
 16106  0446' B4D8               	btfsc	status,2,c
 16107  0448' D7EC               	goto	l1168
 16108                           
 16109                           ;ATM90E36A.c: 948: break;
 16110  044A' D171               	goto	l1092
 16111  044C'                    
 16112                           ;ATM90E36A.c: 953: info = ATM_read(0xD0);
 16113  044C' 0E00               	movlw	0
 16114  044E' 6E02'              	movwf	ATM_read@register_add+1,c
 16115  0450' 0ED0               	movlw	208
 16116  0452' 6E01'              	movwf	ATM_read@register_add,c
 16117  0454' EC00' F000'        	call	_ATM_read	;wreg free
 16118  0458' D131               	goto	L93
 16119  045A'                    
 16120                           ;ATM90E36A.c: 956: info = ATM_read(0xD1);
 16121  045A' 0E00               	movlw	0
 16122  045C' 6E02'              	movwf	ATM_read@register_add+1,c
 16123  045E' 0ED1               	movlw	209
 16124  0460' 6E01'              	movwf	ATM_read@register_add,c
 16125  0462' EC00' F000'        	call	_ATM_read	;wreg free
 16126  0466' D12A               	goto	L93
 16127  0468'                    
 16128                           ;ATM90E36A.c: 959: info = ATM_read(0xD2);
 16129  0468' 0E00               	movlw	0
 16130  046A' 6E02'              	movwf	ATM_read@register_add+1,c
 16131  046C' 0ED2               	movlw	210
 16132  046E' 6E01'              	movwf	ATM_read@register_add,c
 16133  0470' EC00' F000'        	call	_ATM_read	;wreg free
 16134  0474' D123               	goto	L93
 16135  0476'                    
 16136                           ;ATM90E36A.c: 962: info = ATM_read(0xD3);
 16137  0476' 0E00               	movlw	0
 16138  0478' 6E02'              	movwf	ATM_read@register_add+1,c
 16139  047A' 0ED3               	movlw	211
 16140  047C' 6E01'              	movwf	ATM_read@register_add,c
 16141  047E' EC00' F000'        	call	_ATM_read	;wreg free
 16142  0482' D11C               	goto	L93
 16143  0484' 5012'              	movf	ATM_registers@reg,w,c
 16144                           
 16145                           ; Switch size 1, requested type "space"
 16146                           ; Number of cases is 4, Range of values is 53 to 56
 16147                           ; switch strategies available:
 16148                           ; Name         Instructions Cycles
 16149                           ; simple_byte           13     7 (average)
 16150                           ;	Chosen strategy is simple_byte
 16151  0486' 0A35               	xorlw	53	; case 53
 16152  0488' B4D8               	btfsc	status,2,c
 16153  048A' D7E0               	goto	l1172
 16154  048C' 0A03               	xorlw	3	; case 54
 16155  048E' B4D8               	btfsc	status,2,c
 16156  0490' D7E4               	goto	l1174
 16157  0492' 0A01               	xorlw	1	; case 55
 16158  0494' B4D8               	btfsc	status,2,c
 16159  0496' D7E8               	goto	l1175
 16160  0498' 0A0F               	xorlw	15	; case 56
 16161  049A' B4D8               	btfsc	status,2,c
 16162  049C' D7EC               	goto	l1176
 16163                           
 16164                           ;ATM90E36A.c: 967: break;
 16165  049E' D147               	goto	l1092
 16166  04A0'                    
 16167                           ;ATM90E36A.c: 972: info = ATM_read(0xD4);
 16168  04A0' 0E00               	movlw	0
 16169  04A2' 6E02'              	movwf	ATM_read@register_add+1,c
 16170  04A4' 0ED4               	movlw	212
 16171  04A6' 6E01'              	movwf	ATM_read@register_add,c
 16172  04A8' EC00' F000'        	call	_ATM_read	;wreg free
 16173  04AC' D107               	goto	L93
 16174  04AE'                    
 16175                           ;ATM90E36A.c: 975: info = ATM_read(0xD5);
 16176  04AE' 0E00               	movlw	0
 16177  04B0' 6E02'              	movwf	ATM_read@register_add+1,c
 16178  04B2' 0ED5               	movlw	213
 16179  04B4' 6E01'              	movwf	ATM_read@register_add,c
 16180  04B6' EC00' F000'        	call	_ATM_read	;wreg free
 16181  04BA' D100               	goto	L93
 16182  04BC'                    
 16183                           ;ATM90E36A.c: 978: info = ATM_read(0xD6);
 16184  04BC' 0E00               	movlw	0
 16185  04BE' 6E02'              	movwf	ATM_read@register_add+1,c
 16186  04C0' 0ED6               	movlw	214
 16187  04C2' 6E01'              	movwf	ATM_read@register_add,c
 16188  04C4' EC00' F000'        	call	_ATM_read	;wreg free
 16189  04C8' D0F9               	goto	L93
 16190  04CA'                    
 16191                           ;ATM90E36A.c: 981: info = ATM_read(0xD7);
 16192  04CA' 0E00               	movlw	0
 16193  04CC' 6E02'              	movwf	ATM_read@register_add+1,c
 16194  04CE' 0ED7               	movlw	215
 16195  04D0' 6E01'              	movwf	ATM_read@register_add,c
 16196  04D2' EC00' F000'        	call	_ATM_read	;wreg free
 16197  04D6' D0F2               	goto	L93
 16198  04D8' 5012'              	movf	ATM_registers@reg,w,c
 16199                           
 16200                           ; Switch size 1, requested type "space"
 16201                           ; Number of cases is 4, Range of values is 57 to 60
 16202                           ; switch strategies available:
 16203                           ; Name         Instructions Cycles
 16204                           ; simple_byte           13     7 (average)
 16205                           ;	Chosen strategy is simple_byte
 16206  04DA' 0A39               	xorlw	57	; case 57
 16207  04DC' B4D8               	btfsc	status,2,c
 16208  04DE' D7E0               	goto	l1180
 16209  04E0' 0A03               	xorlw	3	; case 58
 16210  04E2' B4D8               	btfsc	status,2,c
 16211  04E4' D7E4               	goto	l1182
 16212  04E6' 0A01               	xorlw	1	; case 59
 16213  04E8' B4D8               	btfsc	status,2,c
 16214  04EA' D7E8               	goto	l1183
 16215  04EC' 0A07               	xorlw	7	; case 60
 16216  04EE' B4D8               	btfsc	status,2,c
 16217  04F0' D7EC               	goto	l1184
 16218                           
 16219                           ;ATM90E36A.c: 986: break;
 16220  04F2' D11D               	goto	l1092
 16221  04F4'                    
 16222                           ;ATM90E36A.c: 991: info = ATM_read(0xD9);
 16223  04F4' 0E00               	movlw	0
 16224  04F6' 6E02'              	movwf	ATM_read@register_add+1,c
 16225  04F8' 0ED9               	movlw	217
 16226  04FA' 6E01'              	movwf	ATM_read@register_add,c
 16227  04FC' EC00' F000'        	call	_ATM_read	;wreg free
 16228  0500' D0DD               	goto	L93
 16229  0502'                    
 16230                           ;ATM90E36A.c: 994: info = ATM_read(0xDA);
 16231  0502' 0E00               	movlw	0
 16232  0504' 6E02'              	movwf	ATM_read@register_add+1,c
 16233  0506' 0EDA               	movlw	218
 16234  0508' 6E01'              	movwf	ATM_read@register_add,c
 16235  050A' EC00' F000'        	call	_ATM_read	;wreg free
 16236  050E' D0D6               	goto	L93
 16237  0510'                    
 16238                           ;ATM90E36A.c: 997: info = ATM_read(0xDB);
 16239  0510' 0E00               	movlw	0
 16240  0512' 6E02'              	movwf	ATM_read@register_add+1,c
 16241  0514' 0EDB               	movlw	219
 16242  0516' 6E01'              	movwf	ATM_read@register_add,c
 16243  0518' EC00' F000'        	call	_ATM_read	;wreg free
 16244  051C' D0CF               	goto	L93
 16245  051E' 5012'              	movf	ATM_registers@reg,w,c
 16246                           
 16247                           ; Switch size 1, requested type "space"
 16248                           ; Number of cases is 3, Range of values is 62 to 64
 16249                           ; switch strategies available:
 16250                           ; Name         Instructions Cycles
 16251                           ; simple_byte           10     6 (average)
 16252                           ;	Chosen strategy is simple_byte
 16253  0520' 0A3E               	xorlw	62	; case 62
 16254  0522' B4D8               	btfsc	status,2,c
 16255  0524' D7E7               	goto	l1188
 16256  0526' 0A01               	xorlw	1	; case 63
 16257  0528' B4D8               	btfsc	status,2,c
 16258  052A' D7EB               	goto	l1190
 16259  052C' 0A7F               	xorlw	127	; case 64
 16260  052E' B4D8               	btfsc	status,2,c
 16261  0530' D7EF               	goto	l1191
 16262                           
 16263                           ;ATM90E36A.c: 1002: break;
 16264  0532' D0FD               	goto	l1092
 16265  0534'                    
 16266                           ;ATM90E36A.c: 1007: info = ATM_read(0xD8);
 16267  0534' 0E00               	movlw	0
 16268  0536' 6E02'              	movwf	ATM_read@register_add+1,c
 16269  0538' 0ED8               	movlw	216
 16270  053A' 6E01'              	movwf	ATM_read@register_add,c
 16271  053C' EC00' F000'        	call	_ATM_read	;wreg free
 16272  0540' D0BD               	goto	L93
 16273  0542'                    
 16274                           ;ATM90E36A.c: 1010: info = ATM_read(0xDC);
 16275  0542' 0E00               	movlw	0
 16276  0544' 6E02'              	movwf	ATM_read@register_add+1,c
 16277  0546' 0EDC               	movlw	220
 16278  0548' 6E01'              	movwf	ATM_read@register_add,c
 16279  054A' EC00' F000'        	call	_ATM_read	;wreg free
 16280  054E' D0B6               	goto	L93
 16281  0550'                    
 16282                           ;ATM90E36A.c: 1013: info = ATM_read(0xDD);
 16283  0550' 0E00               	movlw	0
 16284  0552' 6E02'              	movwf	ATM_read@register_add+1,c
 16285  0554' 0EDD               	movlw	221
 16286  0556' 6E01'              	movwf	ATM_read@register_add,c
 16287  0558' EC00' F000'        	call	_ATM_read	;wreg free
 16288  055C' D0AF               	goto	L93
 16289  055E'                    
 16290                           ;ATM90E36A.c: 1016: info = ATM_read(0xDE);
 16291  055E' 0E00               	movlw	0
 16292  0560' 6E02'              	movwf	ATM_read@register_add+1,c
 16293  0562' 0EDE               	movlw	222
 16294  0564' 6E01'              	movwf	ATM_read@register_add,c
 16295  0566' EC00' F000'        	call	_ATM_read	;wreg free
 16296  056A' D0A8               	goto	L93
 16297  056C'                    
 16298                           ;ATM90E36A.c: 1019: info = ATM_read(0xDF);
 16299  056C' 0E00               	movlw	0
 16300  056E' 6E02'              	movwf	ATM_read@register_add+1,c
 16301  0570' 0EDF               	movlw	223
 16302  0572' 6E01'              	movwf	ATM_read@register_add,c
 16303  0574' EC00' F000'        	call	_ATM_read	;wreg free
 16304  0578' D0A1               	goto	L93
 16305  057A' 5012'              	movf	ATM_registers@reg,w,c
 16306                           
 16307                           ; Switch size 1, requested type "space"
 16308                           ; Number of cases is 5, Range of values is 61 to 68
 16309                           ; switch strategies available:
 16310                           ; Name         Instructions Cycles
 16311                           ; simple_byte           16     9 (average)
 16312                           ;	Chosen strategy is simple_byte
 16313  057C' 0A3D               	xorlw	61	; case 61
 16314  057E' B4D8               	btfsc	status,2,c
 16315  0580' D7D9               	goto	l1195
 16316  0582' 0A7C               	xorlw	124	; case 65
 16317  0584' B4D8               	btfsc	status,2,c
 16318  0586' D7DD               	goto	l1197
 16319  0588' 0A03               	xorlw	3	; case 66
 16320  058A' B4D8               	btfsc	status,2,c
 16321  058C' D7E1               	goto	l1198
 16322  058E' 0A01               	xorlw	1	; case 67
 16323  0590' B4D8               	btfsc	status,2,c
 16324  0592' D7E5               	goto	l1199
 16325  0594' 0A07               	xorlw	7	; case 68
 16326  0596' B4D8               	btfsc	status,2,c
 16327  0598' D7E9               	goto	l1200
 16328                           
 16329                           ;ATM90E36A.c: 1024: break;
 16330  059A' D0C9               	goto	l1092
 16331  059C'                    
 16332                           ;ATM90E36A.c: 1029: info = ATM_read(0xF1);
 16333  059C' 0E00               	movlw	0
 16334  059E' 6E02'              	movwf	ATM_read@register_add+1,c
 16335  05A0' 0EF1               	movlw	241
 16336  05A2' 6E01'              	movwf	ATM_read@register_add,c
 16337  05A4' EC00' F000'        	call	_ATM_read	;wreg free
 16338  05A8' D089               	goto	L93
 16339  05AA'                    
 16340                           ;ATM90E36A.c: 1032: info = ATM_read(0xF2);
 16341  05AA' 0E00               	movlw	0
 16342  05AC' 6E02'              	movwf	ATM_read@register_add+1,c
 16343  05AE' 0EF2               	movlw	242
 16344  05B0' 6E01'              	movwf	ATM_read@register_add,c
 16345  05B2' EC00' F000'        	call	_ATM_read	;wreg free
 16346  05B6' D082               	goto	L93
 16347  05B8'                    
 16348                           ;ATM90E36A.c: 1035: info = ATM_read(0xF3);
 16349  05B8' 0E00               	movlw	0
 16350  05BA' 6E02'              	movwf	ATM_read@register_add+1,c
 16351  05BC' 0EF3               	movlw	243
 16352  05BE' 6E01'              	movwf	ATM_read@register_add,c
 16353  05C0' EC00' F000'        	call	_ATM_read	;wreg free
 16354  05C4' D07B               	goto	L93
 16355  05C6'                    
 16356                           ;ATM90E36A.c: 1038: info = ATM_read(0xF5);
 16357  05C6' 0E00               	movlw	0
 16358  05C8' 6E02'              	movwf	ATM_read@register_add+1,c
 16359  05CA' 0EF5               	movlw	245
 16360  05CC' 6E01'              	movwf	ATM_read@register_add,c
 16361  05CE' EC00' F000'        	call	_ATM_read	;wreg free
 16362  05D2' D074               	goto	L93
 16363  05D4'                    
 16364                           ;ATM90E36A.c: 1041: info = ATM_read(0xF6);
 16365  05D4' 0E00               	movlw	0
 16366  05D6' 6E02'              	movwf	ATM_read@register_add+1,c
 16367  05D8' 0EF6               	movlw	246
 16368  05DA' 6E01'              	movwf	ATM_read@register_add,c
 16369  05DC' EC00' F000'        	call	_ATM_read	;wreg free
 16370  05E0' D06D               	goto	L93
 16371  05E2'                    
 16372                           ;ATM90E36A.c: 1044: info = ATM_read(0xF7);
 16373  05E2' 0E00               	movlw	0
 16374  05E4' 6E02'              	movwf	ATM_read@register_add+1,c
 16375  05E6' 0EF7               	movlw	247
 16376  05E8' 6E01'              	movwf	ATM_read@register_add,c
 16377  05EA' EC00' F000'        	call	_ATM_read	;wreg free
 16378  05EE' D066               	goto	L93
 16379  05F0' 5012'              	movf	ATM_registers@reg,w,c
 16380                           
 16381                           ; Switch size 1, requested type "space"
 16382                           ; Number of cases is 6, Range of values is 69 to 74
 16383                           ; switch strategies available:
 16384                           ; Name         Instructions Cycles
 16385                           ; simple_byte           19    10 (average)
 16386                           ;	Chosen strategy is simple_byte
 16387  05F2' 0A45               	xorlw	69	; case 69
 16388  05F4' B4D8               	btfsc	status,2,c
 16389  05F6' D7D2               	goto	l1204
 16390  05F8' 0A03               	xorlw	3	; case 70
 16391  05FA' B4D8               	btfsc	status,2,c
 16392  05FC' D7D6               	goto	l1206
 16393  05FE' 0A01               	xorlw	1	; case 71
 16394  0600' B4D8               	btfsc	status,2,c
 16395  0602' D7DA               	goto	l1207
 16396  0604' 0A0F               	xorlw	15	; case 72
 16397  0606' B4D8               	btfsc	status,2,c
 16398  0608' D7DE               	goto	l1208
 16399  060A' 0A01               	xorlw	1	; case 73
 16400  060C' B4D8               	btfsc	status,2,c
 16401  060E' D7E2               	goto	l1209
 16402  0610' 0A03               	xorlw	3	; case 74
 16403  0612' B4D8               	btfsc	status,2,c
 16404  0614' D7E6               	goto	l1210
 16405                           
 16406                           ;ATM90E36A.c: 1049: break;
 16407  0616' D08B               	goto	l1092
 16408  0618'                    
 16409                           ;ATM90E36A.c: 1051: if(FREQUENCY_REG == reg)
 16410  0618' 0E4B               	movlw	75
 16411  061A' 1812'              	xorwf	ATM_registers@reg,w,c
 16412  061C' A4D8               	btfss	status,2,c
 16413  061E' D087               	goto	l1092
 16414                           
 16415                           ;ATM90E36A.c: 1052: {
 16416                           ;ATM90E36A.c: 1053: info = ATM_read(0xF8);
 16417  0620' 0E00               	movlw	0
 16418  0622' 6E02'              	movwf	ATM_read@register_add+1,c
 16419  0624' 0EF8               	movlw	248
 16420  0626' 6E01'              	movwf	ATM_read@register_add,c
 16421  0628' EC00' F000'        	call	_ATM_read	;wreg free
 16422  062C' D047               	goto	L93
 16423  062E'                    
 16424                           ;ATM90E36A.c: 1060: info = ATM_read(0xF9);
 16425  062E' 0E00               	movlw	0
 16426  0630' 6E02'              	movwf	ATM_read@register_add+1,c
 16427  0632' 0EF9               	movlw	249
 16428  0634' 6E01'              	movwf	ATM_read@register_add,c
 16429  0636' EC00' F000'        	call	_ATM_read	;wreg free
 16430  063A' D040               	goto	L93
 16431  063C'                    
 16432                           ;ATM90E36A.c: 1063: info = ATM_read(0xFA);
 16433  063C' 0E00               	movlw	0
 16434  063E' 6E02'              	movwf	ATM_read@register_add+1,c
 16435  0640' 0EFA               	movlw	250
 16436  0642' 6E01'              	movwf	ATM_read@register_add,c
 16437  0644' EC00' F000'        	call	_ATM_read	;wreg free
 16438  0648' D039               	goto	L93
 16439  064A'                    
 16440                           ;ATM90E36A.c: 1066: info = ATM_read(0xFB);
 16441  064A' 0E00               	movlw	0
 16442  064C' 6E02'              	movwf	ATM_read@register_add+1,c
 16443  064E' 0EFB               	movlw	251
 16444  0650' 6E01'              	movwf	ATM_read@register_add,c
 16445  0652' EC00' F000'        	call	_ATM_read	;wreg free
 16446  0656' D032               	goto	L93
 16447  0658'                    
 16448                           ;ATM90E36A.c: 1069: info = ATM_read(0xFD);
 16449  0658' 0E00               	movlw	0
 16450  065A' 6E02'              	movwf	ATM_read@register_add+1,c
 16451  065C' 0EFD               	movlw	253
 16452  065E' 6E01'              	movwf	ATM_read@register_add,c
 16453  0660' EC00' F000'        	call	_ATM_read	;wreg free
 16454  0664' D02B               	goto	L93
 16455  0666'                    
 16456                           ;ATM90E36A.c: 1072: info = ATM_read(0xFE);
 16457  0666' 0E00               	movlw	0
 16458  0668' 6E02'              	movwf	ATM_read@register_add+1,c
 16459  066A' 0EFE               	movlw	254
 16460  066C' 6E01'              	movwf	ATM_read@register_add,c
 16461  066E' EC00' F000'        	call	_ATM_read	;wreg free
 16462  0672' D024               	goto	L93
 16463  0674'                    
 16464                           ;ATM90E36A.c: 1075: info = ATM_read(0xFF);
 16465  0674' 0E00               	movlw	0
 16466  0676' 6E02'              	movwf	ATM_read@register_add+1,c
 16467  0678' 6801'              	setf	ATM_read@register_add,c
 16468  067A' EC00' F000'        	call	_ATM_read	;wreg free
 16469  067E' D01E               	goto	L93
 16470  0680' 5012'              	movf	ATM_registers@reg,w,c
 16471                           
 16472                           ; Switch size 1, requested type "space"
 16473                           ; Number of cases is 6, Range of values is 76 to 82
 16474                           ; switch strategies available:
 16475                           ; Name         Instructions Cycles
 16476                           ; simple_byte           19    10 (average)
 16477                           ;	Chosen strategy is simple_byte
 16478  0682' 0A4C               	xorlw	76	; case 76
 16479  0684' B4D8               	btfsc	status,2,c
 16480  0686' D7D3               	goto	l1216
 16481  0688' 0A01               	xorlw	1	; case 77
 16482  068A' B4D8               	btfsc	status,2,c
 16483  068C' D7D7               	goto	l1218
 16484  068E' 0A03               	xorlw	3	; case 78
 16485  0690' B4D8               	btfsc	status,2,c
 16486  0692' D7DB               	goto	l1219
 16487  0694' 0A1E               	xorlw	30	; case 80
 16488  0696' B4D8               	btfsc	status,2,c
 16489  0698' D7DF               	goto	l1220
 16490  069A' 0A01               	xorlw	1	; case 81
 16491  069C' B4D8               	btfsc	status,2,c
 16492  069E' D7E3               	goto	l1221
 16493  06A0' 0A03               	xorlw	3	; case 82
 16494  06A2' B4D8               	btfsc	status,2,c
 16495  06A4' D7E7               	goto	l1222
 16496                           
 16497                           ;ATM90E36A.c: 1080: break;
 16498  06A6' D043               	goto	l1092
 16499  06A8'                    
 16500                           ;ATM90E36A.c: 1082: if(TEMPERATURE_REG == reg)
 16501  06A8' 0E4F               	movlw	79
 16502  06AA' 1812'              	xorwf	ATM_registers@reg,w,c
 16503  06AC' A4D8               	btfss	status,2,c
 16504  06AE' D03F               	goto	l1092
 16505                           
 16506                           ;ATM90E36A.c: 1083: {
 16507                           ;ATM90E36A.c: 1084: info = ATM_read(0xFC);
 16508  06B0' 0E00               	movlw	0
 16509  06B2' 6E02'              	movwf	ATM_read@register_add+1,c
 16510  06B4' 0EFC               	movlw	252
 16511  06B6' 6E01'              	movwf	ATM_read@register_add,c
 16512  06B8' EC00' F000'        	call	_ATM_read	;wreg free
 16513  06BC'                    L93:
 16514  06BC' C001' F015'        	movff	?_ATM_read,ATM_registers@info
 16515  06C0' C002' F016'        	movff	?_ATM_read+1,ATM_registers@info+1
 16516                           
 16517                           ;ATM90E36A.c: 1089: }
 16518                           
 16519                           ;ATM90E36A.c: 1088: break;
 16520                           
 16521                           ;ATM90E36A.c: 1087: default:
 16522                           
 16523                           ;ATM90E36A.c: 1085: }
 16524                           ;ATM90E36A.c: 1086: break;
 16525  06C4' D034               	goto	l1092
 16526  06C6'                    l1079:
 16527  06C6' 5014'              	movf	ATM_registers@type,w,c
 16528                           
 16529                           ; Switch size 1, requested type "space"
 16530                           ; Number of cases is 17, Range of values is 0 to 16
 16531                           ; switch strategies available:
 16532                           ; Name         Instructions Cycles
 16533                           ; simple_byte           52    27 (average)
 16534                           ;	Chosen strategy is simple_byte
 16535  06C8' 0A00               	xorlw	0	; case 0
 16536  06CA' B4D8               	btfsc	status,2,c
 16537  06CC' D4D3               	goto	l1081
 16538  06CE' 0A01               	xorlw	1	; case 1
 16539  06D0' B4D8               	btfsc	status,2,c
 16540  06D2' D522               	goto	l1094
 16541  06D4' 0A03               	xorlw	3	; case 2
 16542  06D6' B4D8               	btfsc	status,2,c
 16543  06D8' D55C               	goto	l1106
 16544  06DA' 0A01               	xorlw	1	; case 3
 16545  06DC' B4D8               	btfsc	status,2,c
 16546  06DE' D5A2               	goto	l1115
 16547  06E0' 0A07               	xorlw	7	; case 4
 16548  06E2' B4D8               	btfsc	status,2,c
 16549  06E4' D5F1               	goto	l1127
 16550  06E6' 0A01               	xorlw	1	; case 5
 16551  06E8' B4D8               	btfsc	status,2,c
 16552  06EA' D624               	goto	l1139
 16553  06EC' 0A03               	xorlw	3	; case 6
 16554  06EE' B4D8               	btfsc	status,2,c
 16555  06F0' D64B               	goto	l1147
 16556  06F2' 0A01               	xorlw	1	; case 7
 16557  06F4' B4D8               	btfsc	status,2,c
 16558  06F6' D672               	goto	l1155
 16559  06F8' 0A0F               	xorlw	15	; case 8
 16560  06FA' B4D8               	btfsc	status,2,c
 16561  06FC' D699               	goto	l1163
 16562  06FE' 0A01               	xorlw	1	; case 9
 16563  0700' B4D8               	btfsc	status,2,c
 16564  0702' D6C0               	goto	l1171
 16565  0704' 0A03               	xorlw	3	; case 10
 16566  0706' B4D8               	btfsc	status,2,c
 16567  0708' D6E7               	goto	l1179
 16568  070A' 0A01               	xorlw	1	; case 11
 16569  070C' B4D8               	btfsc	status,2,c
 16570  070E' D707               	goto	l1187
 16571  0710' 0A07               	xorlw	7	; case 12
 16572  0712' B4D8               	btfsc	status,2,c
 16573  0714' D732               	goto	l1194
 16574  0716' 0A01               	xorlw	1	; case 13
 16575  0718' B4D8               	btfsc	status,2,c
 16576  071A' D76A               	goto	l1203
 16577  071C' 0A03               	xorlw	3	; case 14
 16578  071E' B4D8               	btfsc	status,2,c
 16579  0720' D77B               	goto	l1212
 16580  0722' 0A01               	xorlw	1	; case 15
 16581  0724' B4D8               	btfsc	status,2,c
 16582  0726' D7AC               	goto	l1215
 16583  0728' 0A1F               	xorlw	31	; case 16
 16584  072A' B4D8               	btfsc	status,2,c
 16585  072C' D7BD               	goto	l1224
 16586  072E'                    l1092:
 16587                           
 16588                           ;ATM90E36A.c: 1090: return (info);
 16589  072E' C015' F012'        	movff	ATM_registers@info,?_ATM_registers
 16590  0732' C016' F013'        	movff	ATM_registers@info+1,?_ATM_registers+1
 16591  0736' 0012               	return		;funcret
 16592  0738'                    __end_of_ATM_registers:
 16593                           	opt stack 0
 16594                           tosu	equ	0xFFF
 16595                           tosh	equ	0xFFE
 16596                           tosl	equ	0xFFD
 16597                           pclath	equ	0xFFA
 16598                           tblptru	equ	0xFF8
 16599                           tblptrh	equ	0xFF7
 16600                           tblptrl	equ	0xFF6
 16601                           tablat	equ	0xFF5
 16602                           prodh	equ	0xFF4
 16603                           prodl	equ	0xFF3
 16604                           postinc0	equ	0xFEE
 16605                           wreg	equ	0xFE8
 16606                           indf2	equ	0xFDF
 16607                           postinc2	equ	0xFDE
 16608                           fsr2h	equ	0xFDA
 16609                           fsr2l	equ	0xFD9
 16610                           status	equ	0xFD8
 16611                           
 16612 ;; *************** function _ATM_read *****************
 16613 ;; Defined at:
 16614 ;;		line 275 in file "ATM90E36A.c"
 16615 ;; Parameters:    Size  Location     Type
 16616 ;;  register_add    2    1[COMRAM] unsigned int 
 16617 ;; Auto vars:     Size  Location     Type
 16618 ;;  register_To_    6   12[COMRAM] struct .
 16619 ;;  data_From_IC    6    6[COMRAM] struct .
 16620 ;;  data            2    4[COMRAM] unsigned int 
 16621 ;; Return value:  Size  Location     Type
 16622 ;;                  2    1[COMRAM] unsigned int 
 16623 ;; Registers used:
 16624 ;;		wreg, status,2, status,0, cstack
 16625 ;; Tracked objects:
 16626 ;;		On entry : 0/0
 16627 ;;		On exit  : 0/0
 16628 ;;		Unchanged: 0/0
 16629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 16630 ;;      Params:         2       0       0       0
 16631 ;;      Locals:        14       0       0       0
 16632 ;;      Temps:          1       0       0       0
 16633 ;;      Totals:        17       0       0       0
 16634 ;;Total ram usage:       17 bytes
 16635 ;; Hardware stack levels used:    1
 16636 ;; Hardware stack levels required when called:    1
 16637 ;; This function calls:
 16638 ;;		_SPI_read
 16639 ;;		_SPI_write
 16640 ;; This function is called by:
 16641 ;;		_ATM_registers
 16642 ;;		_ATM_calibration
 16643 ;; This function uses a non-reentrant model
 16644 ;;
 16645                           
 16646                           	psect	text62
 16647  0000'                    __ptext62:
 16648                           	opt stack 0
 16649  0000'                    _ATM_read:
 16650                           	opt stack 26
 16651                           
 16652                           ;ATM90E36A.c: 277: Data_TwoFrames register_To_IC;
 16653                           ;ATM90E36A.c: 278: Data_TwoFrames data_From_IC;
 16654                           ;ATM90E36A.c: 279: uint16_t data;
 16655                           ;ATM90E36A.c: 281: register_To_IC.dummyLow = register_add;
 16656                           
 16657                           ;incstack = 0
 16658  0000' C001' F00E'        	movff	ATM_read@register_add,ATM_read@register_To_IC+2
 16659  0004' C002' F00F'        	movff	ATM_read@register_add+1,ATM_read@register_To_IC+3
 16660                           
 16661                           ;ATM90E36A.c: 282: register_To_IC.dummyLow &= 0x0F;
 16662  0008' 0E0F               	movlw	15
 16663  000A' 160E'              	andwf	ATM_read@register_To_IC+2,f,c
 16664  000C' 0E00               	movlw	0
 16665  000E' 160F'              	andwf	ATM_read@register_To_IC+3,f,c
 16666                           
 16667                           ;ATM90E36A.c: 283: register_To_IC.dummyHigh = register_add;
 16668  0010' C001' F010'        	movff	ATM_read@register_add,ATM_read@register_To_IC+4
 16669  0014' C002' F011'        	movff	ATM_read@register_add+1,ATM_read@register_To_IC+5
 16670                           
 16671                           ;ATM90E36A.c: 284: register_To_IC.dummyHigh &= 0xF0;
 16672  0018' 0EF0               	movlw	240
 16673  001A' 1610'              	andwf	ATM_read@register_To_IC+4,f,c
 16674  001C' 0E00               	movlw	0
 16675  001E' 1611'              	andwf	ATM_read@register_To_IC+5,f,c
 16676                           
 16677                           ;ATM90E36A.c: 286: register_To_IC.lowPart = (uint8_t)register_To_IC.dummyLow;
 16678  0020' C00E' F00C'        	movff	ATM_read@register_To_IC+2,ATM_read@register_To_IC
 16679                           
 16680                           ;ATM90E36A.c: 287: register_To_IC.highPart = (uint8_t)register_To_IC.dummyHigh;
 16681  0024' C010' F00D'        	movff	ATM_read@register_To_IC+4,ATM_read@register_To_IC+1
 16682                           
 16683                           ;ATM90E36A.c: 289: PORTBbits.RB3 = 0;
 16684  0028' 9681               	bcf	3969,3,c	;volatile
 16685                           
 16686                           ;ATM90E36A.c: 290: SPI_write(register_To_IC.lowPart);
 16687  002A' 500C'              	movf	ATM_read@register_To_IC,w,c
 16688  002C' EC00' F000'        	call	_SPI_write
 16689                           
 16690                           ;ATM90E36A.c: 291: SPI_write(register_To_IC.highPart);
 16691  0030' 500D'              	movf	ATM_read@register_To_IC+1,w,c
 16692  0032' EC00' F000'        	call	_SPI_write
 16693                           
 16694                           ;ATM90E36A.c: 293: data_From_IC.dummyLow = SPI_read();
 16695  0036' EC00' F000'        	call	_SPI_read	;wreg free
 16696  003A' 6E00'              	movwf	??_ATM_read& (0+255),c
 16697  003C' 5003'              	movf	??_ATM_read,w,c
 16698  003E' 6E08'              	movwf	ATM_read@data_From_IC+2,c
 16699  0040' 6A09'              	clrf	ATM_read@data_From_IC+3,c
 16700                           
 16701                           ;ATM90E36A.c: 294: data_From_IC.dummyHigh = SPI_read();
 16702  0042' EC00' F000'        	call	_SPI_read	;wreg free
 16703  0046' 6E00'              	movwf	??_ATM_read& (0+255),c
 16704  0048' 5003'              	movf	??_ATM_read,w,c
 16705  004A' 6E0A'              	movwf	ATM_read@data_From_IC+4,c
 16706  004C' 6A0B'              	clrf	ATM_read@data_From_IC+5,c
 16707                           
 16708                           ;ATM90E36A.c: 296: data_From_IC.lowPart = data_From_IC.dummyLow;
 16709  004E' C008' F006'        	movff	ATM_read@data_From_IC+2,ATM_read@data_From_IC
 16710                           
 16711                           ;ATM90E36A.c: 297: data_From_IC.highPart = data_From_IC.dummyHigh<<8;
 16712  0052' 0E00               	movlw	0
 16713  0054' 6E07'              	movwf	ATM_read@data_From_IC+1,c
 16714                           
 16715                           ;ATM90E36A.c: 300: data = 0;
 16716  0056' 0E00               	movlw	0
 16717  0058' 6E05'              	movwf	ATM_read@data+1,c
 16718  005A' 0E00               	movlw	0
 16719  005C' 6E04'              	movwf	ATM_read@data,c
 16720                           
 16721                           ;ATM90E36A.c: 301: PORTBbits.RB3 = 1;
 16722  005E' 8681               	bsf	3969,3,c	;volatile
 16723                           
 16724                           ;ATM90E36A.c: 302: return (data);
 16725  0060' C004' F001'        	movff	ATM_read@data,?_ATM_read
 16726  0064' C005' F002'        	movff	ATM_read@data+1,?_ATM_read+1
 16727  0068' 0012               	return	
 16728  006A'                    __end_of_ATM_read:
 16729                           	opt stack 0
 16730                           tosu	equ	0xFFF
 16731                           tosh	equ	0xFFE
 16732                           tosl	equ	0xFFD
 16733                           pclath	equ	0xFFA
 16734                           tblptru	equ	0xFF8
 16735                           tblptrh	equ	0xFF7
 16736                           tblptrl	equ	0xFF6
 16737                           tablat	equ	0xFF5
 16738                           prodh	equ	0xFF4
 16739                           prodl	equ	0xFF3
 16740                           postinc0	equ	0xFEE
 16741                           wreg	equ	0xFE8
 16742                           indf2	equ	0xFDF
 16743                           postinc2	equ	0xFDE
 16744                           fsr2h	equ	0xFDA
 16745                           fsr2l	equ	0xFD9
 16746                           status	equ	0xFD8
 16747                           
 16748 ;; *************** function _SPI_write *****************
 16749 ;; Defined at:
 16750 ;;		line 86 in file "SPI.c"
 16751 ;; Parameters:    Size  Location     Type
 16752 ;;  data            1    wreg     unsigned char 
 16753 ;; Auto vars:     Size  Location     Type
 16754 ;;  data            1    0[COMRAM] unsigned char 
 16755 ;; Return value:  Size  Location     Type
 16756 ;;                  1    wreg      void 
 16757 ;; Registers used:
 16758 ;;		wreg
 16759 ;; Tracked objects:
 16760 ;;		On entry : 0/0
 16761 ;;		On exit  : 0/0
 16762 ;;		Unchanged: 0/0
 16763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 16764 ;;      Params:         0       0       0       0
 16765 ;;      Locals:         1       0       0       0
 16766 ;;      Temps:          0       0       0       0
 16767 ;;      Totals:         1       0       0       0
 16768 ;;Total ram usage:        1 bytes
 16769 ;; Hardware stack levels used:    1
 16770 ;; This function calls:
 16771 ;;		Nothing
 16772 ;; This function is called by:
 16773 ;;		_LCDNokia_writeByte
 16774 ;;		_ATM_read
 16775 ;;		_ATM_write
 16776 ;; This function uses a non-reentrant model
 16777 ;;
 16778                           
 16779                           	psect	text63
 16780  0000'                    __ptext63:
 16781                           	opt stack 0
 16782  0000'                    _SPI_write:
 16783                           	opt stack 25
 16784                           
 16785                           ;incstack = 0
 16786                           ;SPI_write@data stored from wreg
 16787  0000' 6E00'              	movwf	SPI_write@data,c
 16788                           
 16789                           ;SPI.c: 89: SSPBUF = data;
 16790  0002' C000' FFC9         	movff	SPI_write@data,4041	;volatile
 16791  0006' A69E               	btfss	3998,3,c	;volatile
 16792  0008' D7FE               	goto	l181
 16793                           
 16794                           ;SPI.c: 91: PIR1bits.SSPIF = 0;
 16795  000A' 969E               	bcf	3998,3,c	;volatile
 16796  000C' 0012               	return		;funcret
 16797  000E'                    __end_of_SPI_write:
 16798                           	opt stack 0
 16799                           tosu	equ	0xFFF
 16800                           tosh	equ	0xFFE
 16801                           tosl	equ	0xFFD
 16802                           pclath	equ	0xFFA
 16803                           tblptru	equ	0xFF8
 16804                           tblptrh	equ	0xFF7
 16805                           tblptrl	equ	0xFF6
 16806                           tablat	equ	0xFF5
 16807                           prodh	equ	0xFF4
 16808                           prodl	equ	0xFF3
 16809                           postinc0	equ	0xFEE
 16810                           wreg	equ	0xFE8
 16811                           indf2	equ	0xFDF
 16812                           postinc2	equ	0xFDE
 16813                           fsr2h	equ	0xFDA
 16814                           fsr2l	equ	0xFD9
 16815                           status	equ	0xFD8
 16816                           
 16817 ;; *************** function _SPI_read *****************
 16818 ;; Defined at:
 16819 ;;		line 96 in file "SPI.c"
 16820 ;; Parameters:    Size  Location     Type
 16821 ;;		None
 16822 ;; Auto vars:     Size  Location     Type
 16823 ;;  dummy           1    0[COMRAM] const unsigned char 
 16824 ;; Return value:  Size  Location     Type
 16825 ;;                  1    wreg      unsigned char 
 16826 ;; Registers used:
 16827 ;;		wreg, status,2
 16828 ;; Tracked objects:
 16829 ;;		On entry : 0/0
 16830 ;;		On exit  : 0/0
 16831 ;;		Unchanged: 0/0
 16832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 16833 ;;      Params:         0       0       0       0
 16834 ;;      Locals:         1       0       0       0
 16835 ;;      Temps:          0       0       0       0
 16836 ;;      Totals:         1       0       0       0
 16837 ;;Total ram usage:        1 bytes
 16838 ;; Hardware stack levels used:    1
 16839 ;; This function calls:
 16840 ;;		Nothing
 16841 ;; This function is called by:
 16842 ;;		_ATM_read
 16843 ;; This function uses a non-reentrant model
 16844 ;;
 16845                           
 16846                           	psect	text64
 16847  0000'                    __ptext64:
 16848                           	opt stack 0
 16849  0000'                    _SPI_read:
 16850                           	opt stack 26
 16851                           
 16852                           ;SPI.c: 98: const uint8_t dummy = 0;
 16853                           
 16854                           ;incstack = 0
 16855  0000' 0E00               	movlw	0
 16856  0002' 6E00'              	movwf	SPI_read@dummy,c
 16857                           
 16858                           ;SPI.c: 101: SSPBUF = dummy;
 16859  0004' C000' FFC9         	movff	SPI_read@dummy,4041	;volatile
 16860  0008' A69E               	btfss	3998,3,c	;volatile
 16861  000A' D7FE               	goto	l187
 16862                           
 16863                           ;SPI.c: 107: PIR1bits.SSPIF = 0;
 16864  000C' 969E               	bcf	3998,3,c	;volatile
 16865                           
 16866                           ;SPI.c: 108: return (SSPBUF);
 16867  000E' 50C9               	movf	4041,w,c	;volatile
 16868  0010' 0012               	return	
 16869  0012'                    __end_of_SPI_read:
 16870                           	opt stack 0
 16871                           tosu	equ	0xFFF
 16872                           tosh	equ	0xFFE
 16873                           tosl	equ	0xFFD
 16874                           pclath	equ	0xFFA
 16875                           tblptru	equ	0xFF8
 16876                           tblptrh	equ	0xFF7
 16877                           tblptrl	equ	0xFF6
 16878                           tablat	equ	0xFF5
 16879                           prodh	equ	0xFF4
 16880                           prodl	equ	0xFF3
 16881                           postinc0	equ	0xFEE
 16882                           wreg	equ	0xFE8
 16883                           indf2	equ	0xFDF
 16884                           postinc2	equ	0xFDE
 16885                           fsr2h	equ	0xFDA
 16886                           fsr2l	equ	0xFD9
 16887                           status	equ	0xFD8
 16888                           
 16889 ;; *************** function _ButtonInt_config *****************
 16890 ;; Defined at:
 16891 ;;		line 63 in file "Buttons.c"
 16892 ;; Parameters:    Size  Location     Type
 16893 ;;		None
 16894 ;; Auto vars:     Size  Location     Type
 16895 ;;		None
 16896 ;; Return value:  Size  Location     Type
 16897 ;;                  1    wreg      void 
 16898 ;; Registers used:
 16899 ;;		wreg, status,2, status,0, cstack
 16900 ;; Tracked objects:
 16901 ;;		On entry : 0/0
 16902 ;;		On exit  : 0/0
 16903 ;;		Unchanged: 0/0
 16904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 16905 ;;      Params:         0       0       0       0
 16906 ;;      Locals:         0       0       0       0
 16907 ;;      Temps:          0       0       0       0
 16908 ;;      Totals:         0       0       0       0
 16909 ;;Total ram usage:        0 bytes
 16910 ;; Hardware stack levels used:    1
 16911 ;; Hardware stack levels required when called:    1
 16912 ;; This function calls:
 16913 ;;		_GPIO_dataDirectionPIN
 16914 ;; This function is called by:
 16915 ;;		_main
 16916 ;; This function uses a non-reentrant model
 16917 ;;
 16918                           
 16919                           	psect	text65
 16920  0000'                    __ptext65:
 16921                           	opt stack 0
 16922  0000'                    _ButtonInt_config:
 16923                           	opt stack 29
 16924                           
 16925                           ;Buttons.c: 66: GPIO_dataDirectionPIN(GPIO_A, 3, GPIO_INPUT);
 16926                           
 16927                           ;incstack = 0
 16928  0000' 0E03               	movlw	3
 16929  0002' 6E00'              	movwf	GPIO_dataDirectionPIN@pin,c
 16930  0004' 0E00               	movlw	0
 16931  0006' 6E01'              	movwf	GPIO_dataDirectionPIN@state,c
 16932  0008' 0E00               	movlw	0
 16933  000A' EC00' F000'        	call	_GPIO_dataDirectionPIN
 16934                           
 16935                           ;Buttons.c: 67: ANSEL0bits.ANS3 = 0;
 16936  000E' 96B8               	bcf	4024,3,c	;volatile
 16937                           
 16938                           ;Buttons.c: 69: GPIO_dataDirectionPIN(GPIO_A, 4, GPIO_INPUT);
 16939  0010' 0E04               	movlw	4
 16940  0012' 6E00'              	movwf	GPIO_dataDirectionPIN@pin,c
 16941  0014' 0E00               	movlw	0
 16942  0016' 6E01'              	movwf	GPIO_dataDirectionPIN@state,c
 16943  0018' 0E00               	movlw	0
 16944  001A' EC00' F000'        	call	_GPIO_dataDirectionPIN
 16945                           
 16946                           ;Buttons.c: 70: ANSEL0bits.ANS4 = 0;
 16947  001E' 98B8               	bcf	4024,4,c	;volatile
 16948                           
 16949                           ;Buttons.c: 72: GPIO_dataDirectionPIN(GPIO_C, 3, GPIO_INPUT);
 16950  0020' 0E03               	movlw	3
 16951  0022' 6E00'              	movwf	GPIO_dataDirectionPIN@pin,c
 16952  0024' 0E00               	movlw	0
 16953  0026' 6E01'              	movwf	GPIO_dataDirectionPIN@state,c
 16954  0028' 0E02               	movlw	2
 16955  002A' EC00' F000'        	call	_GPIO_dataDirectionPIN
 16956  002E' 0012               	return		;funcret
 16957  0030'                    __end_of_ButtonInt_config:
 16958                           	opt stack 0
 16959                           tosu	equ	0xFFF
 16960                           tosh	equ	0xFFE
 16961                           tosl	equ	0xFFD
 16962                           pclath	equ	0xFFA
 16963                           tblptru	equ	0xFF8
 16964                           tblptrh	equ	0xFF7
 16965                           tblptrl	equ	0xFF6
 16966                           tablat	equ	0xFF5
 16967                           prodh	equ	0xFF4
 16968                           prodl	equ	0xFF3
 16969                           postinc0	equ	0xFEE
 16970                           wreg	equ	0xFE8
 16971                           indf2	equ	0xFDF
 16972                           postinc2	equ	0xFDE
 16973                           fsr2h	equ	0xFDA
 16974                           fsr2l	equ	0xFD9
 16975                           status	equ	0xFD8
 16976                           
 16977 ;; *************** function _GPIO_dataDirectionPIN *****************
 16978 ;; Defined at:
 16979 ;;		line 51 in file "GPIO.c"
 16980 ;; Parameters:    Size  Location     Type
 16981 ;;  portName        1    wreg     enum E3075
 16982 ;;  pin             1    0[COMRAM] unsigned char 
 16983 ;;  state           1    1[COMRAM] enum E3071
 16984 ;; Auto vars:     Size  Location     Type
 16985 ;;  portName        1    4[COMRAM] enum E3075
 16986 ;; Return value:  Size  Location     Type
 16987 ;;                  1    wreg      void 
 16988 ;; Registers used:
 16989 ;;		wreg, status,2, status,0
 16990 ;; Tracked objects:
 16991 ;;		On entry : 0/0
 16992 ;;		On exit  : 0/0
 16993 ;;		Unchanged: 0/0
 16994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 16995 ;;      Params:         2       0       0       0
 16996 ;;      Locals:         1       0       0       0
 16997 ;;      Temps:          2       0       0       0
 16998 ;;      Totals:         5       0       0       0
 16999 ;;Total ram usage:        5 bytes
 17000 ;; Hardware stack levels used:    1
 17001 ;; This function calls:
 17002 ;;		Nothing
 17003 ;; This function is called by:
 17004 ;;		_UART_init
 17005 ;;		_LCDNokia_init
 17006 ;;		_ATM_init
 17007 ;;		_ButtonInt_config
 17008 ;; This function uses a non-reentrant model
 17009 ;;
 17010                           
 17011                           	psect	text66
 17012  0000'                    __ptext66:
 17013                           	opt stack 0
 17014  0000'                    _GPIO_dataDirectionPIN:
 17015                           	opt stack 27
 17016                           
 17017                           ;incstack = 0
 17018                           ;GPIO_dataDirectionPIN@portName stored from wreg
 17019  0000' 6E04'              	movwf	GPIO_dataDirectionPIN@portName,c
 17020                           
 17021                           ;GPIO.c: 54: switch(state)
 17022  0002' D064               	goto	l70
 17023  0004'                    
 17024                           ;GPIO.c: 60: TRISA |= 1<<pin;
 17025  0004' C000' F002'        	movff	GPIO_dataDirectionPIN@pin,??_GPIO_dataDirectionPIN
 17026  0008' 0E01               	movlw	1
 17027  000A' 6E00'              	movwf	(??_GPIO_dataDirectionPIN+1)& (0+255),c
 17028  000C' 2A02'              	incf	??_GPIO_dataDirectionPIN,f,c
 17029  000E' D002               	goto	u2614
 17030  0010'                    u2615:
 17031  0010' 90D8               	bcf	status,0,c
 17032  0012' 3603'              	rlcf	??_GPIO_dataDirectionPIN+1,f,c
 17033  0014'                    u2614:
 17034  0014' 2E02'              	decfsz	??_GPIO_dataDirectionPIN,f,c
 17035  0016' D7FC               	goto	u2615
 17036  0018' 5003'              	movf	??_GPIO_dataDirectionPIN+1,w,c
 17037  001A' 1292               	iorwf	3986,f,c	;volatile
 17038                           
 17039                           ;GPIO.c: 61: break;
 17040  001C' 0012               	return	
 17041  001E'                    
 17042                           ;GPIO.c: 63: TRISB |= 1<<pin;
 17043  001E' C000' F002'        	movff	GPIO_dataDirectionPIN@pin,??_GPIO_dataDirectionPIN
 17044  0022' 0E01               	movlw	1
 17045  0024' 6E00'              	movwf	(??_GPIO_dataDirectionPIN+1)& (0+255),c
 17046  0026' 2A02'              	incf	??_GPIO_dataDirectionPIN,f,c
 17047  0028' D002               	goto	u2624
 17048  002A'                    u2625:
 17049  002A' 90D8               	bcf	status,0,c
 17050  002C' 3603'              	rlcf	??_GPIO_dataDirectionPIN+1,f,c
 17051  002E'                    u2624:
 17052  002E' 2E02'              	decfsz	??_GPIO_dataDirectionPIN,f,c
 17053  0030' D7FC               	goto	u2625
 17054  0032' 5003'              	movf	??_GPIO_dataDirectionPIN+1,w,c
 17055  0034' 1293               	iorwf	3987,f,c	;volatile
 17056                           
 17057                           ;GPIO.c: 64: break;
 17058  0036' 0012               	return	
 17059  0038'                    
 17060                           ;GPIO.c: 66: TRISC |= 1<<pin;
 17061  0038' C000' F002'        	movff	GPIO_dataDirectionPIN@pin,??_GPIO_dataDirectionPIN
 17062  003C' 0E01               	movlw	1
 17063  003E' 6E00'              	movwf	(??_GPIO_dataDirectionPIN+1)& (0+255),c
 17064  0040' 2A02'              	incf	??_GPIO_dataDirectionPIN,f,c
 17065  0042' D002               	goto	u2634
 17066  0044'                    u2635:
 17067  0044' 90D8               	bcf	status,0,c
 17068  0046' 3603'              	rlcf	??_GPIO_dataDirectionPIN+1,f,c
 17069  0048'                    u2634:
 17070  0048' 2E02'              	decfsz	??_GPIO_dataDirectionPIN,f,c
 17071  004A' D7FC               	goto	u2635
 17072  004C' 5003'              	movf	??_GPIO_dataDirectionPIN+1,w,c
 17073  004E' 1294               	iorwf	3988,f,c	;volatile
 17074                           
 17075                           ;GPIO.c: 70: }
 17076                           
 17077                           ;GPIO.c: 69: break;
 17078                           
 17079                           ;GPIO.c: 68: default:
 17080                           
 17081                           ;GPIO.c: 67: break;
 17082  0050' 0012               	return	
 17083  0052' 5004'              	movf	GPIO_dataDirectionPIN@portName,w,c
 17084                           
 17085                           ; Switch size 1, requested type "space"
 17086                           ; Number of cases is 3, Range of values is 0 to 2
 17087                           ; switch strategies available:
 17088                           ; Name         Instructions Cycles
 17089                           ; simple_byte           10     6 (average)
 17090                           ;	Chosen strategy is simple_byte
 17091  0054' 0A00               	xorlw	0	; case 0
 17092  0056' B4D8               	btfsc	status,2,c
 17093  0058' D7D5               	goto	l73
 17094  005A' 0A01               	xorlw	1	; case 1
 17095  005C' B4D8               	btfsc	status,2,c
 17096  005E' D7DF               	goto	l75
 17097  0060' 0A03               	xorlw	3	; case 2
 17098  0062' A4D8               	btfss	status,2,c
 17099                           
 17100                           ;GPIO.c: 71: break;
 17101  0064' 0012               	return	
 17102  0066' D7E8               	goto	l76
 17103  0068'                    
 17104                           ;GPIO.c: 76: TRISA &= (0<<pin);
 17105  0068' C000' F002'        	movff	GPIO_dataDirectionPIN@pin,??_GPIO_dataDirectionPIN
 17106  006C' 0E00               	movlw	0
 17107  006E' 6E00'              	movwf	(??_GPIO_dataDirectionPIN+1)& (0+255),c
 17108  0070' 2A02'              	incf	??_GPIO_dataDirectionPIN,f,c
 17109  0072' D002               	goto	u2644
 17110  0074'                    u2645:
 17111  0074' 90D8               	bcf	status,0,c
 17112  0076' 3603'              	rlcf	??_GPIO_dataDirectionPIN+1,f,c
 17113  0078'                    u2644:
 17114  0078' 2E02'              	decfsz	??_GPIO_dataDirectionPIN,f,c
 17115  007A' D7FC               	goto	u2645
 17116  007C' 5003'              	movf	??_GPIO_dataDirectionPIN+1,w,c
 17117  007E' 1692               	andwf	3986,f,c	;volatile
 17118                           
 17119                           ;GPIO.c: 77: break;
 17120  0080' 0012               	return	
 17121  0082'                    
 17122                           ;GPIO.c: 79: TRISB &= (0<<pin);
 17123  0082' C000' F002'        	movff	GPIO_dataDirectionPIN@pin,??_GPIO_dataDirectionPIN
 17124  0086' 0E00               	movlw	0
 17125  0088' 6E00'              	movwf	(??_GPIO_dataDirectionPIN+1)& (0+255),c
 17126  008A' 2A02'              	incf	??_GPIO_dataDirectionPIN,f,c
 17127  008C' D002               	goto	u2654
 17128  008E'                    u2655:
 17129  008E' 90D8               	bcf	status,0,c
 17130  0090' 3603'              	rlcf	??_GPIO_dataDirectionPIN+1,f,c
 17131  0092'                    u2654:
 17132  0092' 2E02'              	decfsz	??_GPIO_dataDirectionPIN,f,c
 17133  0094' D7FC               	goto	u2655
 17134  0096' 5003'              	movf	??_GPIO_dataDirectionPIN+1,w,c
 17135  0098' 1693               	andwf	3987,f,c	;volatile
 17136                           
 17137                           ;GPIO.c: 80: break;
 17138  009A' 0012               	return	
 17139  009C'                    
 17140                           ;GPIO.c: 82: TRISC &= (0<<pin);
 17141  009C' C000' F002'        	movff	GPIO_dataDirectionPIN@pin,??_GPIO_dataDirectionPIN
 17142  00A0' 0E00               	movlw	0
 17143  00A2' 6E00'              	movwf	(??_GPIO_dataDirectionPIN+1)& (0+255),c
 17144  00A4' 2A02'              	incf	??_GPIO_dataDirectionPIN,f,c
 17145  00A6' D002               	goto	u2664
 17146  00A8'                    u2665:
 17147  00A8' 90D8               	bcf	status,0,c
 17148  00AA' 3603'              	rlcf	??_GPIO_dataDirectionPIN+1,f,c
 17149  00AC'                    u2664:
 17150  00AC' 2E02'              	decfsz	??_GPIO_dataDirectionPIN,f,c
 17151  00AE' D7FC               	goto	u2665
 17152  00B0' 5003'              	movf	??_GPIO_dataDirectionPIN+1,w,c
 17153  00B2' 1694               	andwf	3988,f,c	;volatile
 17154                           
 17155                           ;GPIO.c: 86: }
 17156                           
 17157                           ;GPIO.c: 85: break;
 17158                           
 17159                           ;GPIO.c: 84: default:
 17160                           
 17161                           ;GPIO.c: 83: break;
 17162  00B4' 0012               	return	
 17163  00B6' 5004'              	movf	GPIO_dataDirectionPIN@portName,w,c
 17164                           
 17165                           ; Switch size 1, requested type "space"
 17166                           ; Number of cases is 3, Range of values is 0 to 2
 17167                           ; switch strategies available:
 17168                           ; Name         Instructions Cycles
 17169                           ; simple_byte           10     6 (average)
 17170                           ;	Chosen strategy is simple_byte
 17171  00B8' 0A00               	xorlw	0	; case 0
 17172  00BA' B4D8               	btfsc	status,2,c
 17173  00BC' D7D5               	goto	l81
 17174  00BE' 0A01               	xorlw	1	; case 1
 17175  00C0' B4D8               	btfsc	status,2,c
 17176  00C2' D7DF               	goto	l83
 17177  00C4' 0A03               	xorlw	3	; case 2
 17178  00C6' A4D8               	btfss	status,2,c
 17179                           
 17180                           ;GPIO.c: 90: }
 17181                           
 17182                           ;GPIO.c: 89: break;
 17183                           
 17184                           ;GPIO.c: 88: default:
 17185                           
 17186                           ;GPIO.c: 87: break;
 17187  00C8' 0012               	return	
 17188  00CA' D7E8               	goto	l84
 17189  00CC'                    l70:
 17190  00CC' 5001'              	movf	GPIO_dataDirectionPIN@state,w,c
 17191                           
 17192                           ; Switch size 1, requested type "space"
 17193                           ; Number of cases is 2, Range of values is 0 to 1
 17194                           ; switch strategies available:
 17195                           ; Name         Instructions Cycles
 17196                           ; simple_byte            7     4 (average)
 17197                           ;	Chosen strategy is simple_byte
 17198  00CE' 0A00               	xorlw	0	; case 0
 17199  00D0' B4D8               	btfsc	status,2,c
 17200  00D2' D7BF               	goto	l72
 17201  00D4' 0A01               	xorlw	1	; case 1
 17202  00D6' A4D8               	btfss	status,2,c
 17203  00D8' 0012               	return	
 17204  00DA' D7ED               	goto	l80
 17205  00DC'                    __end_of_GPIO_dataDirectionPIN:
 17206                           	opt stack 0
 17207                           tosu	equ	0xFFF
 17208                           tosh	equ	0xFFE
 17209                           tosl	equ	0xFFD
 17210                           pclath	equ	0xFFA
 17211                           tblptru	equ	0xFF8
 17212                           tblptrh	equ	0xFF7
 17213                           tblptrl	equ	0xFF6
 17214                           tablat	equ	0xFF5
 17215                           prodh	equ	0xFF4
 17216                           prodl	equ	0xFF3
 17217                           postinc0	equ	0xFEE
 17218                           wreg	equ	0xFE8
 17219                           indf2	equ	0xFDF
 17220                           postinc2	equ	0xFDE
 17221                           fsr2h	equ	0xFDA
 17222                           fsr2l	equ	0xFD9
 17223                           status	equ	0xFD8
 17224                           tosu	equ	0xFFF
 17225                           tosh	equ	0xFFE
 17226                           tosl	equ	0xFFD
 17227                           pclath	equ	0xFFA
 17228                           tblptru	equ	0xFF8
 17229                           tblptrh	equ	0xFF7
 17230                           tblptrl	equ	0xFF6
 17231                           tablat	equ	0xFF5
 17232                           prodh	equ	0xFF4
 17233                           prodl	equ	0xFF3
 17234                           postinc0	equ	0xFEE
 17235                           wreg	equ	0xFE8
 17236                           indf2	equ	0xFDF
 17237                           postinc2	equ	0xFDE
 17238                           fsr2h	equ	0xFDA
 17239                           fsr2l	equ	0xFD9
 17240                           status	equ	0xFD8
 17241                           
 17242                           	psect	text67
 17243  0000'                    __ptext67:
 17244                           	opt stack 0
 17245                           tosu	equ	0xFFF
 17246                           tosh	equ	0xFFE
 17247                           tosl	equ	0xFFD
 17248                           pclath	equ	0xFFA
 17249                           tblptru	equ	0xFF8
 17250                           tblptrh	equ	0xFF7
 17251                           tblptrl	equ	0xFF6
 17252                           tablat	equ	0xFF5
 17253                           prodh	equ	0xFF4
 17254                           prodl	equ	0xFF3
 17255                           postinc0	equ	0xFEE
 17256                           wreg	equ	0xFE8
 17257                           indf2	equ	0xFDF
 17258                           postinc2	equ	0xFDE
 17259                           fsr2h	equ	0xFDA
 17260                           fsr2l	equ	0xFD9
 17261                           status	equ	0xFD8
 17262                           
 17263                           	psect	rparam
 17264  0000                     tosu	equ	0xFFF
 17265                           tosh	equ	0xFFE
 17266                           tosl	equ	0xFFD
 17267                           pclath	equ	0xFFA
 17268                           tblptru	equ	0xFF8
 17269                           tblptrh	equ	0xFF7
 17270                           tblptrl	equ	0xFF6
 17271                           tablat	equ	0xFF5
 17272                           prodh	equ	0xFF4
 17273                           prodl	equ	0xFF3
 17274                           postinc0	equ	0xFEE
 17275                           wreg	equ	0xFE8
 17276                           indf2	equ	0xFDF
 17277                           postinc2	equ	0xFDE
 17278                           fsr2h	equ	0xFDA
 17279                           fsr2l	equ	0xFD9
 17280                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    1743
    Data        0
    BSS         273
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     86      95
    BANK0           160    139     159
    BANK1           256      0     244
    BANK2           256      0       0

Pointer List with Targets:

    LCDNokia_sendString@characters	PTR const unsigned char  size(2) Largest target is 19
		 -> showTemperature@temperature(COMRAM[7]), showFrequency@frequency(COMRAM[7]), THDNPhaseAngle@current3_THDN(BANK0[11]), THDNPhaseAngle@current2_THDN(BANK0[11]), 
		 -> THDNPhaseAngle@current1_THDN(BANK0[11]), THDNPhaseAngle@voltage3_THDN(BANK0[11]), THDNPhaseAngle@voltage2_THDN(BANK0[11]), THDNPhaseAngle@voltage1_THDN(BANK0[11]), 
		 -> viPhaseAngle@angle_VoltageP3(COMRAM[10]), viPhaseAngle@angle_VoltageP2(COMRAM[10]), viPhaseAngle@angle_VoltageP1(COMRAM[10]), phPhaseAngle@anglePhase3(COMRAM[9]), 
		 -> phPhaseAngle@anglePhase2(COMRAM[9]), phPhaseAngle@anglePhase1(COMRAM[9]), phPowerFactor@total_factor_power(COMRAM[11]), phPowerFactor@factor_powerP3(COMRAM[8]), 
		 -> phPowerFactor@factor_powerP2(COMRAM[8]), phPowerFactor@factor_powerP1(COMRAM[8]), neutralRmsVI@nline_sampled_RMS(COMRAM[12]), neutralRmsVI@nline_calculated_RMS(COMRAM[12]), 
		 -> phRmsVI@current3_RMS(BANK0[10]), phRmsVI@current2_RMS(BANK0[10]), phRmsVI@current1_RMS(BANK0[10]), phRmsVI@voltage3_RMS(BANK0[10]), 
		 -> phRmsVI@voltage2_RMS(BANK0[10]), phRmsVI@voltage1_RMS(BANK0[10]), phPower2@harmonic_Total_Power(COMRAM[13]), phPower2@fundamental_Total_Power(COMRAM[13]), 
		 -> fhPower2@harmonic_PowerP3(BANK0[10]), fhPower2@harmonic_PowerP2(BANK0[10]), fhPower2@harmonic_PowerP1(BANK0[10]), fhPower2@fundamental_PowerP3(BANK0[10]), 
		 -> fhPower2@fundamental_PowerP2(BANK0[10]), fhPower2@fundamental_PowerP1(BANK0[10]), phPower1@total_apparent_power(COMRAM[14]), phPower1@total_reactive_power(COMRAM[13]), 
		 -> phPower1@total_active_power(COMRAM[13]), typesPower1@apparent_powerP3(BANK0[11]), typesPower1@apparent_powerP2(BANK0[11]), typesPower1@apparent_powerP1(BANK0[11]), 
		 -> typesPower1@reactive_powerP3(BANK0[10]), typesPower1@reactive_powerP2(BANK0[10]), typesPower1@reactive_powerP1(BANK0[10]), typesPower1@active_powerP3(BANK0[10]), 
		 -> typesPower1@active_powerP2(BANK0[10]), typesPower1@active_powerP1(BANK0[10]), harmonicEnergy@harmonic_ReverseTotal(BANK0[14]), harmonicEnergy@harmonic_ForwardTotal(BANK0[15]), 
		 -> harmonicEnergy@harmonic_ReverseP3(BANK0[11]), harmonicEnergy@harmonic_ReverseP2(BANK0[11]), harmonicEnergy@harmonic_ReverseP1(BANK0[11]), harmonicEnergy@harmonic_ForwardP3(BANK0[12]), 
		 -> harmonicEnergy@harmonic_ForwardP2(BANK0[12]), harmonicEnergy@harmonic_ForwardP1(BANK0[12]), fundamentalEnergy@fund_ReverseTotal(BANK0[18]), fundamentalEnergy@fund_ForwardTotal(BANK0[19]), 
		 -> fundamentalEnergy@fund_ReverseP3(BANK0[15]), fundamentalEnergy@fund_ReverseP2(BANK0[15]), fundamentalEnergy@fund_ReverseP1(BANK0[15]), fundamentalEnergy@fund_ForwardP3(BANK0[16]), 
		 -> fundamentalEnergy@fund_ForwardP2(BANK0[16]), fundamentalEnergy@fund_ForwardP1(BANK0[16]), apparentEnergy@apparentVec_energyTotal(BANK0[18]), apparentEnergy@apparentAri_energyTotal(BANK0[18]), 
		 -> apparentEnergy@apparent_energyP3(BANK0[9]), apparentEnergy@apparent_energyP2(BANK0[9]), apparentEnergy@apparent_energyP1(BANK0[9]), reactiveEnergy@reactive_Reverse_Total(BANK0[18]), 
		 -> reactiveEnergy@reactive_Forward_Total(BANK0[19]), reactiveEnergy@reactive_Reverse3(BANK0[15]), reactiveEnergy@reactive_Reverse2(BANK0[15]), reactiveEnergy@reactive_Reverse1(BANK0[15]), 
		 -> reactiveEnergy@reactive_Forward3(BANK0[16]), reactiveEnergy@reactive_Forward2(BANK0[15]), reactiveEnergy@reactive_Forward1(BANK0[16]), activeEnergy@active_Reverse_Total(BANK0[16]), 
		 -> activeEnergy@active_Forward_Total(BANK0[17]), activeEnergy@active_Reverse3(BANK0[13]), activeEnergy@active_Reverse2(BANK0[13]), activeEnergy@active_Reverse1(BANK0[13]), 
		 -> activeEnergy@active_Forward3(BANK0[14]), activeEnergy@active_Forward2(BANK0[14]), activeEnergy@active_Forward1(BANK0[14]), viewMenu@buttonLeft(BANK0[2]), 
		 -> viewMenu@buttonCenter(BANK0[2]), viewMenu@buttonRight(BANK0[2]), viewMenu@string1_Temperature(BANK0[12]), viewMenu@string1_Frequency(BANK0[10]), 
		 -> viewMenu@string2_PhaseAngle(BANK0[6]), viewMenu@string1_PhaseAngle(BANK0[6]), viewMenu@string2_PowerFactor(BANK0[7]), viewMenu@string1_PowerFactor(BANK0[6]), 
		 -> viewMenu@string2_RMS(BANK0[4]), viewMenu@string1_RMS(BANK0[16]), viewMenu@string3_Power2(BANK0[6]), viewMenu@string2_Power2(BANK0[9]), 
		 -> viewMenu@string1_Power2(BANK0[12]), viewMenu@string2_Power1(BANK0[15]), viewMenu@string1_Power1(BANK0[16]), viewMenu@string_Energy(BANK0[7]), 
		 -> generalView@buttonLeft(COMRAM[5]), generalView@buttonRight(COMRAM[5]), generalView@msgInitial2(COMRAM[12]), generalView@msgInitial1(COMRAM[12]), 

    stateTemperature@temperatureFunctions	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitTemperature(), showTemperature(), 

    stateFrequency@frequencyFunctions	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitFrequency(), showFrequency(), 

    statePhaseAngle@phaseAngleFunctions	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitPhaseAngle(), THDNPhaseAngle(), viPhaseAngle(), phPhaseAngle(), 

    statePowerFactor@powerFactorFunctions	PTR FTN(struct .,)struct . size(2) Largest target is 2
		 -> exitPowerFactor(), phPowerFactor(), 

    stateRmsVI@rmsVIFunctions	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitRmsVI(), neutralRmsVI(), phRmsVI(), 

    statePower2@power2Functions	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitPower2(), phPower2(), fhPower2(), 

    statePower1@power1Functions	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitPower1(), phPower1(), typesPower1(), 

    stateEnergy@energyFunctions	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitEnergy(), harmonicEnergy(), fundamentalEnergy(), apparentEnergy(), 
		 -> reactiveEnergy(), activeEnergy(), 

    stateMainMenu@mainMenuFunctions	PTR FTN(struct .,)struct . size(2) Largest target is 2
		 -> sendData(), viewMenu(), generalView(), initialLoad(), 

    S947PhaseTemperature$PhaseTemperature	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitTemperature(), showTemperature(), 

    phasesTemperature.PhaseTemperature	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitTemperature(), showTemperature(), 

    S923PhaseFrequency$PhaseFrequency	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitFrequency(), showFrequency(), 

    phasesFrequency.PhaseFrequency	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitFrequency(), showFrequency(), 

    S889PhasePhaseAngle$PhasePhaseAngle	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitPhaseAngle(), THDNPhaseAngle(), viPhaseAngle(), phPhaseAngle(), 

    phasesPhaseAngle.PhasePhaseAngle	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitPhaseAngle(), THDNPhaseAngle(), viPhaseAngle(), phPhaseAngle(), 

    S863PhasePowerFactor$PhasePowerFactor	PTR FTN(struct .,)struct . size(2) Largest target is 2
		 -> exitPowerFactor(), phPowerFactor(), 

    phasesPowerFactor.PhasePowerFactor	PTR FTN(struct .,)struct . size(2) Largest target is 2
		 -> exitPowerFactor(), phPowerFactor(), 

    S835PhaseRmsVI$PhaseRmsVI	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitRmsVI(), neutralRmsVI(), phRmsVI(), 

    phasesRmsVI.PhaseRmsVI	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitRmsVI(), neutralRmsVI(), phRmsVI(), 

    S805PhasePower2$PhasePower2	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitPower2(), phPower2(), fhPower2(), 

    phasesPower2.PhasePower2	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitPower2(), phPower2(), fhPower2(), 

    S775PhasePower1$PhasePower1	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitPower1(), phPower1(), typesPower1(), 

    phasesPower1.PhasePower1	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitPower1(), phPower1(), typesPower1(), 

    S730PhaseEnergy$PhaseEnergy	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitEnergy(), harmonicEnergy(), fundamentalEnergy(), apparentEnergy(), 
		 -> reactiveEnergy(), activeEnergy(), 

    phasesEnergy.PhaseEnergy	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitEnergy(), harmonicEnergy(), fundamentalEnergy(), apparentEnergy(), 
		 -> reactiveEnergy(), activeEnergy(), 

    S692PhaseMainMenu$PhaseMainMenu	PTR FTN(struct .,)struct . size(2) Largest target is 2
		 -> sendData(), viewMenu(), generalView(), initialLoad(), 

    phasesMainMenu.PhaseMainMenu	PTR FTN(struct .,)struct . size(2) Largest target is 2
		 -> sendData(), viewMenu(), generalView(), initialLoad(), 

    SPI_init@SPI_Config	PTR const struct . size(2) Largest target is 3
		 -> SPI_Config2(CODE[3]), SPI_Config(CODE[3]), 

    main@mainFunctions	PTR FTN()enum E3357 size(2) Largest target is 1
		 -> stateTemperature(), stateFrequency(), statePhaseAngle(), statePowerFactor(), 
		 -> stateRmsVI(), statePower2(), statePower1(), stateEnergy(), 
		 -> stateMainMenu(), 

    S46State$stateFunction	PTR FTN()enum E3357 size(2) Largest target is 1
		 -> stateTemperature(), stateFrequency(), statePhaseAngle(), statePowerFactor(), 
		 -> stateRmsVI(), statePower2(), statePower1(), stateEnergy(), 
		 -> stateMainMenu(), 

    StateProgram.stateFunction	PTR FTN()enum E3357 size(2) Largest target is 1
		 -> stateTemperature(), stateFrequency(), statePhaseAngle(), statePowerFactor(), 
		 -> stateRmsVI(), statePower2(), statePower1(), stateEnergy(), 
		 -> stateMainMenu(), 


Critical Paths under _main in COMRAM

    _main->_statePower1
    _stateTemperature->_showTemperature
    _showTemperature->_LCDNokia_printValue
    _stateRmsVI->_neutralRmsVI
    _phRmsVI->_LCDNokia_printValue
    _neutralRmsVI->_LCDNokia_printValue
    _statePowerFactor->_phPowerFactor
    _phPowerFactor->_LCDNokia_printValue
    _statePower2->_phPower2
    _phPower2->_LCDNokia_printValue
    _fhPower2->_LCDNokia_printValue
    _statePower1->_phPower1
    _typesPower1->_LCDNokia_printValue
    _phPower1->_LCDNokia_printValue
    _statePhaseAngle->_viPhaseAngle
    _viPhaseAngle->_LCDNokia_printValue
    _phPhaseAngle->_LCDNokia_printValue
    _THDNPhaseAngle->_LCDNokia_printValue
    _stateMainMenu->_generalView
    _viewMenu->_LCDNokia_sendString
    _UART_init->_GPIO_dataDirectionPIN
    _SPI_init->_SPI_enableClock
    _LCDNokia_init->_LCDNokia_writeByte
    _ATM_init->_GPIO_dataDirectionPIN
    _generalView->_LCDNokia_sendString
    _stateFrequency->_showFrequency
    _showFrequency->_LCDNokia_printValue
    _stateEnergy->_activeEnergy
    _stateEnergy->_apparentEnergy
    _stateEnergy->_exitEnergy
    _stateEnergy->_fundamentalEnergy
    _stateEnergy->_harmonicEnergy
    _stateEnergy->_reactiveEnergy
    _reactiveEnergy->_LCDNokia_printValue
    _harmonicEnergy->_LCDNokia_printValue
    _fundamentalEnergy->_LCDNokia_printValue
    _apparentEnergy->_LCDNokia_printValue
    _activeEnergy->_LCDNokia_printValue
    _LCDNokia_sendString->_LCDNokia_sendChar
    _LCDNokia_printValue->_ATM_registers
    _LCDNokia_sendChar->_LCDNokia_writeByte
    _LCDNokia_clear->_LCDNokia_gotoXY
    _LCDNokia_gotoXY->_LCDNokia_writeByte
    _LCDNokia_writeByte->___wmul
    _ATM_registers->_ATM_read
    _ATM_read->_SPI_read
    _ATM_read->_SPI_write
    _ButtonInt_config->_GPIO_dataDirectionPIN

Critical Paths under _main in BANK0

    _stateRmsVI->_phRmsVI
    _statePower2->_fhPower2
    _statePower1->_typesPower1
    _statePhaseAngle->_THDNPhaseAngle
    _stateMainMenu->_viewMenu
    _stateEnergy->_fundamentalEnergy

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0 1049124
                                             83 COMRAM     3     3      0
                   _ButtonInt_config
                     _LCDNokia_clear
                      _LCDNokia_init
                           _SPI_init
                        _stateEnergy *
                     _stateFrequency *
                      _stateMainMenu *
                    _statePhaseAngle *
                        _statePower1 *
                        _statePower2 *
                   _statePowerFactor *
                         _stateRmsVI *
                   _stateTemperature *
 ---------------------------------------------------------------------------------
 (1) _stateTemperature                                     2     2      0   53509
                                             48 COMRAM     2     2      0
                    _exitTemperature *
                    _showTemperature *
 ---------------------------------------------------------------------------------
 (2) _showTemperature                                     10     7      3   43208
                                             38 COMRAM    10     7      3
                      _ATM_registers
                    _LCDNokia_gotoXY
                _LCDNokia_printValue
                _LCDNokia_sendString
                         _getButton1
                         _getButton2
 ---------------------------------------------------------------------------------
 (2) _exitTemperature                                      3     0      3   10278
                                             38 COMRAM     3     0      3
                     _LCDNokia_clear
 ---------------------------------------------------------------------------------
 (1) _stateRmsVI                                           2     2      0  107069
                                             65 COMRAM     2     2      0
                          _exitRmsVI *
                       _neutralRmsVI *
                            _phRmsVI *
 ---------------------------------------------------------------------------------
 (2) _phRmsVI                                             64    61      3   53535
                                             38 COMRAM     3     0      3
                                              0 BANK0     61    61      0
                      _ATM_registers
                     _LCDNokia_clear
                    _LCDNokia_gotoXY
                _LCDNokia_printValue
                _LCDNokia_sendString
                         _getButton1
                         _getButton2
                         _getButton3
 ---------------------------------------------------------------------------------
 (2) _neutralRmsVI                                        27    24      3   43233
                                             38 COMRAM    27    24      3
                      _ATM_registers
                    _LCDNokia_gotoXY
                _LCDNokia_printValue
                _LCDNokia_sendString
                         _getButton1
                         _getButton2
 ---------------------------------------------------------------------------------
 (2) _exitRmsVI                                            3     0      3   10278
                                             38 COMRAM     3     0      3
                     _LCDNokia_clear
 ---------------------------------------------------------------------------------
 (1) _statePowerFactor                                     2     2      0   63785
                                             76 COMRAM     2     2      0
                    _exitPowerFactor *
                      _phPowerFactor *
 ---------------------------------------------------------------------------------
 (2) _phPowerFactor                                       38    36      2   53485
                                             38 COMRAM    38    36      2
                      _ATM_registers
                     _LCDNokia_clear
                    _LCDNokia_gotoXY
                _LCDNokia_printValue
                _LCDNokia_sendString
                         _getButton1
                         _getButton2
                         _getButton3
 ---------------------------------------------------------------------------------
 (2) _exitPowerFactor                                      2     0      2   10277
                                             38 COMRAM     2     0      2
                     _LCDNokia_clear
 ---------------------------------------------------------------------------------
 (1) _statePower2                                          2     2      0  107069
                                             67 COMRAM     2     2      0
                         _exitPower2 *
                           _fhPower2 *
                           _phPower2 *
 ---------------------------------------------------------------------------------
 (2) _phPower2                                            29    26      3   43233
                                             38 COMRAM    29    26      3
                      _ATM_registers
                    _LCDNokia_gotoXY
                _LCDNokia_printValue
                _LCDNokia_sendString
                         _getButton1
                         _getButton2
 ---------------------------------------------------------------------------------
 (2) _fhPower2                                            64    61      3   53535
                                             38 COMRAM     3     0      3
                                              0 BANK0     61    61      0
                      _ATM_registers
                     _LCDNokia_clear
                    _LCDNokia_gotoXY
                _LCDNokia_printValue
                _LCDNokia_sendString
                         _getButton1
                         _getButton2
                         _getButton3
 ---------------------------------------------------------------------------------
 (2) _exitPower2                                           3     0      3   10278
                                             38 COMRAM     3     0      3
                     _LCDNokia_clear
 ---------------------------------------------------------------------------------
 (1) _statePower1                                          2     2      0  117348
                                             81 COMRAM     2     2      0
                         _exitPower1 *
                           _phPower1 *
                        _typesPower1 *
 ---------------------------------------------------------------------------------
 (2) _typesPower1                                         97    94      3   53610
                                             38 COMRAM     3     0      3
                                              0 BANK0     94    94      0
                      _ATM_registers
                     _LCDNokia_clear
                    _LCDNokia_gotoXY
                _LCDNokia_printValue
                _LCDNokia_sendString
                         _getButton1
                         _getButton2
                         _getButton3
 ---------------------------------------------------------------------------------
 (2) _phPower1                                            43    40      3   53437
                                             38 COMRAM    43    40      3
                      _ATM_registers
                     _LCDNokia_clear
                    _LCDNokia_gotoXY
                _LCDNokia_printValue
                _LCDNokia_sendString
                         _getButton1
                         _getButton2
 ---------------------------------------------------------------------------------
 (2) _exitPower1                                           3     0      3   10278
                                             38 COMRAM     3     0      3
                     _LCDNokia_clear
 ---------------------------------------------------------------------------------
 (1) _statePhaseAngle                                      2     2      0  170710
                                             71 COMRAM     2     2      0
                     _THDNPhaseAngle *
                     _exitPhaseAngle *
                       _phPhaseAngle *
                       _viPhaseAngle *
 ---------------------------------------------------------------------------------
 (2) _viPhaseAngle                                        33    30      3   53437
                                             38 COMRAM    33    30      3
                      _ATM_registers
                     _LCDNokia_clear
                    _LCDNokia_gotoXY
                _LCDNokia_printValue
                _LCDNokia_sendString
                         _getButton1
                         _getButton2
 ---------------------------------------------------------------------------------
 (2) _phPhaseAngle                                        30    27      3   53437
                                             38 COMRAM    30    27      3
                      _ATM_registers
                     _LCDNokia_clear
                    _LCDNokia_gotoXY
                _LCDNokia_printValue
                _LCDNokia_sendString
                         _getButton1
                         _getButton2
 ---------------------------------------------------------------------------------
 (2) _exitPhaseAngle                                       3     0      3   10278
                                             38 COMRAM     3     0      3
                     _LCDNokia_clear
 ---------------------------------------------------------------------------------
 (2) _THDNPhaseAngle                                      70    67      3   53535
                                             38 COMRAM     3     0      3
                                              0 BANK0     67    67      0
                      _ATM_registers
                     _LCDNokia_clear
                    _LCDNokia_gotoXY
                _LCDNokia_printValue
                _LCDNokia_sendString
                         _getButton1
                         _getButton2
                         _getButton3
 ---------------------------------------------------------------------------------
 (1) _stateMainMenu                                        2     2      0   79910
                                             51 COMRAM     2     2      0
                        _generalView *
                        _initialLoad *
                           _sendData *
                           _viewMenu *
 ---------------------------------------------------------------------------------
 (2) _viewMenu                                           141   139      2   29155
                                             15 COMRAM     2     0      2
                                              0 BANK0    139   139      0
                     _LCDNokia_clear
                    _LCDNokia_gotoXY
                _LCDNokia_sendString
                         _getButton1
                         _getButton2
                         _getButton3
 ---------------------------------------------------------------------------------
 (2) _sendData                                             2     0      2   18214
                                             15 COMRAM     2     0      2
                     _LCDNokia_clear
                      _LCDNokia_init
                           _SPI_init
                          _UART_init
 ---------------------------------------------------------------------------------
 (3) _UART_init                                            4     2      2    3032
                                              5 COMRAM     4     2      2
              _GPIO_dataDirectionPIN
 ---------------------------------------------------------------------------------
 (3) _SPI_init                                             4     2      2     360
                                              2 COMRAM     4     2      2
                    _SPI_enableClock
                     _SPI_enablePins
 ---------------------------------------------------------------------------------
 (4) _SPI_enablePins                                       1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _SPI_enableClock                                      2     1      1     120
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (3) _LCDNokia_init                                        0     0      0    4590
                      _GPIO_clearPIN
              _GPIO_dataDirectionPIN
                        _GPIO_setPIN
                 _LCDNokia_writeByte
                          _LCD_delay
 ---------------------------------------------------------------------------------
 (4) _LCD_delay                                            4     4      0      46
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (2) _initialLoad                                          2     0      2    3733
                                             15 COMRAM     2     0      2
                           _ATM_init
                              _delay
 ---------------------------------------------------------------------------------
 (3) _delay                                                8     4      4     220
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _ATM_init                                             0     0      0    3490
                      _GPIO_clearPIN
              _GPIO_dataDirectionPIN
                        _GPIO_setPIN
 ---------------------------------------------------------------------------------
 (4) _GPIO_setPIN                                          4     3      1     316
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (4) _GPIO_clearPIN                                        4     3      1     240
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _generalView                                         36    34      2   28785
                                             15 COMRAM    36    34      2
                     _LCDNokia_clear
                    _LCDNokia_gotoXY
                _LCDNokia_sendString
                         _getButton1
                         _getButton3
 ---------------------------------------------------------------------------------
 (1) _stateFrequency                                       2     2      0   53509
                                             48 COMRAM     2     2      0
                      _exitFrequency *
                      _showFrequency *
 ---------------------------------------------------------------------------------
 (2) _showFrequency                                       10     7      3   43208
                                             38 COMRAM    10     7      3
                      _ATM_registers
                    _LCDNokia_gotoXY
                _LCDNokia_printValue
                _LCDNokia_sendString
                         _getButton1
                         _getButton2
 ---------------------------------------------------------------------------------
 (2) _exitFrequency                                        3     0      3   10278
                                             38 COMRAM     3     0      3
                     _LCDNokia_clear
 ---------------------------------------------------------------------------------
 (1) _stateEnergy                                          2     2      0  278105
                                             41 COMRAM     2     2      0
                       _activeEnergy *
                     _apparentEnergy *
                         _exitEnergy *
                  _fundamentalEnergy *
                     _harmonicEnergy *
                     _reactiveEnergy *
 ---------------------------------------------------------------------------------
 (2) _reactiveEnergy                                     133   130      3   53585
                                             38 COMRAM     3     0      3
                                              0 BANK0    130   130      0
                      _ATM_registers
                     _LCDNokia_clear
                    _LCDNokia_gotoXY
                _LCDNokia_printValue
                _LCDNokia_sendString
                         _getButton1
                         _getButton2
                         _getButton3
 ---------------------------------------------------------------------------------
 (2) _harmonicEnergy                                     102    99      3   53585
                                             38 COMRAM     3     0      3
                                              0 BANK0     99    99      0
                      _ATM_registers
                     _LCDNokia_clear
                    _LCDNokia_gotoXY
                _LCDNokia_printValue
                _LCDNokia_sendString
                         _getButton1
                         _getButton2
                         _getButton3
 ---------------------------------------------------------------------------------
 (2) _fundamentalEnergy                                  134   131      3   53585
                                             38 COMRAM     3     0      3
                                              0 BANK0    131   131      0
                      _ATM_registers
                     _LCDNokia_clear
                    _LCDNokia_gotoXY
                _LCDNokia_printValue
                _LCDNokia_sendString
                         _getButton1
                         _getButton2
                         _getButton3
 ---------------------------------------------------------------------------------
 (2) _exitEnergy                                           3     0      3   10232
                                             38 COMRAM     3     0      3
                     _LCDNokia_clear
 ---------------------------------------------------------------------------------
 (2) _apparentEnergy                                      67    64      3   53510
                                             38 COMRAM     3     0      3
                                              0 BANK0     64    64      0
                      _ATM_registers
                     _LCDNokia_clear
                    _LCDNokia_gotoXY
                _LCDNokia_printValue
                _LCDNokia_sendString
                         _getButton1
                         _getButton2
                         _getButton3
 ---------------------------------------------------------------------------------
 (2) _activeEnergy                                       118   115      3   53585
                                             38 COMRAM     3     0      3
                                              0 BANK0    115   115      0
                      _ATM_registers
                     _LCDNokia_clear
                    _LCDNokia_gotoXY
                _LCDNokia_printValue
                _LCDNokia_sendString
                         _getButton1
                         _getButton2
                         _getButton3
 ---------------------------------------------------------------------------------
 (3) _getButton3                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getButton2                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getButton1                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _LCDNokia_sendString                                  2     0      2    9405
                                             13 COMRAM     2     0      2
                  _LCDNokia_sendChar
 ---------------------------------------------------------------------------------
 (3) _LCDNokia_printValue                                 15    11      4    9012
                                             23 COMRAM    15    11      4
                      _ATM_registers (ARG)
                  _LCDNokia_sendChar
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     311
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (4) _LCDNokia_sendChar                                    5     5      0    1456
                                              8 COMRAM     5     5      0
                 _LCDNokia_writeByte
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _LCDNokia_clear                                       2     2      0   10179
                                             10 COMRAM     2     2      0
                    _LCDNokia_gotoXY
                 _LCDNokia_writeByte
 ---------------------------------------------------------------------------------
 (3) _LCDNokia_gotoXY                                      2     1      1    9078
                                              8 COMRAM     2     1      1
                 _LCDNokia_writeByte
 ---------------------------------------------------------------------------------
 (5) _LCDNokia_writeByte                                   2     1      1    1054
                                              6 COMRAM     2     1      1
                          _SPI_write
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _ATM_registers                                        5     3      2   15665
                                             18 COMRAM     5     3      2
                           _ATM_read
 ---------------------------------------------------------------------------------
 (4) _ATM_read                                            17    15      2    8856
                                              1 COMRAM    17    15      2
                           _SPI_read
                          _SPI_write
 ---------------------------------------------------------------------------------
 (6) _SPI_write                                            1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _SPI_read                                             1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ButtonInt_config                                     0     0      0    2934
              _GPIO_dataDirectionPIN
 ---------------------------------------------------------------------------------
 (4) _GPIO_dataDirectionPIN                                5     3      2    2934
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ButtonInt_config
     _GPIO_dataDirectionPIN
   _LCDNokia_clear
     _LCDNokia_gotoXY
       _LCDNokia_writeByte
         _SPI_write
         ___wmul (ARG)
     _LCDNokia_writeByte
       _SPI_write
       ___wmul (ARG)
   _LCDNokia_init
     _GPIO_clearPIN
     _GPIO_dataDirectionPIN
     _GPIO_setPIN
     _LCDNokia_writeByte
       _SPI_write
       ___wmul (ARG)
     _LCD_delay
   _SPI_init
     _SPI_enableClock
     _SPI_enablePins
   _stateEnergy *
     _activeEnergy *
       _ATM_registers
         _ATM_read
           _SPI_read
           _SPI_write
       _LCDNokia_clear
         _LCDNokia_gotoXY
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
         _LCDNokia_writeByte
           _SPI_write
           ___wmul (ARG)
       _LCDNokia_gotoXY
         _LCDNokia_writeByte
           _SPI_write
           ___wmul (ARG)
       _LCDNokia_printValue
         _ATM_registers (ARG)
           _ATM_read
             _SPI_read
             _SPI_write
         _LCDNokia_sendChar (ARG)
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
           ___wmul
         ___lldiv (ARG)
         ___llmod (ARG)
       _LCDNokia_sendString
         _LCDNokia_sendChar
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
           ___wmul
       _getButton1
       _getButton2
       _getButton3
     _apparentEnergy *
       _ATM_registers
         _ATM_read
           _SPI_read
           _SPI_write
       _LCDNokia_clear
         _LCDNokia_gotoXY
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
         _LCDNokia_writeByte
           _SPI_write
           ___wmul (ARG)
       _LCDNokia_gotoXY
         _LCDNokia_writeByte
           _SPI_write
           ___wmul (ARG)
       _LCDNokia_printValue
         _ATM_registers (ARG)
           _ATM_read
             _SPI_read
             _SPI_write
         _LCDNokia_sendChar (ARG)
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
           ___wmul
         ___lldiv (ARG)
         ___llmod (ARG)
       _LCDNokia_sendString
         _LCDNokia_sendChar
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
           ___wmul
       _getButton1
       _getButton2
       _getButton3
     _exitEnergy *
       _LCDNokia_clear
         _LCDNokia_gotoXY
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
         _LCDNokia_writeByte
           _SPI_write
           ___wmul (ARG)
     _fundamentalEnergy *
       _ATM_registers
         _ATM_read
           _SPI_read
           _SPI_write
       _LCDNokia_clear
         _LCDNokia_gotoXY
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
         _LCDNokia_writeByte
           _SPI_write
           ___wmul (ARG)
       _LCDNokia_gotoXY
         _LCDNokia_writeByte
           _SPI_write
           ___wmul (ARG)
       _LCDNokia_printValue
         _ATM_registers (ARG)
           _ATM_read
             _SPI_read
             _SPI_write
         _LCDNokia_sendChar (ARG)
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
           ___wmul
         ___lldiv (ARG)
         ___llmod (ARG)
       _LCDNokia_sendString
         _LCDNokia_sendChar
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
           ___wmul
       _getButton1
       _getButton2
       _getButton3
     _harmonicEnergy *
       _ATM_registers
         _ATM_read
           _SPI_read
           _SPI_write
       _LCDNokia_clear
         _LCDNokia_gotoXY
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
         _LCDNokia_writeByte
           _SPI_write
           ___wmul (ARG)
       _LCDNokia_gotoXY
         _LCDNokia_writeByte
           _SPI_write
           ___wmul (ARG)
       _LCDNokia_printValue
         _ATM_registers (ARG)
           _ATM_read
             _SPI_read
             _SPI_write
         _LCDNokia_sendChar (ARG)
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
           ___wmul
         ___lldiv (ARG)
         ___llmod (ARG)
       _LCDNokia_sendString
         _LCDNokia_sendChar
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
           ___wmul
       _getButton1
       _getButton2
       _getButton3
     _reactiveEnergy *
       _ATM_registers
         _ATM_read
           _SPI_read
           _SPI_write
       _LCDNokia_clear
         _LCDNokia_gotoXY
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
         _LCDNokia_writeByte
           _SPI_write
           ___wmul (ARG)
       _LCDNokia_gotoXY
         _LCDNokia_writeByte
           _SPI_write
           ___wmul (ARG)
       _LCDNokia_printValue
         _ATM_registers (ARG)
           _ATM_read
             _SPI_read
             _SPI_write
         _LCDNokia_sendChar (ARG)
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
           ___wmul
         ___lldiv (ARG)
         ___llmod (ARG)
       _LCDNokia_sendString
         _LCDNokia_sendChar
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
           ___wmul
       _getButton1
       _getButton2
       _getButton3
   _stateFrequency *
     _exitFrequency *
       _LCDNokia_clear
         _LCDNokia_gotoXY
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
         _LCDNokia_writeByte
           _SPI_write
           ___wmul (ARG)
     _showFrequency *
       _ATM_registers
         _ATM_read
           _SPI_read
           _SPI_write
       _LCDNokia_gotoXY
         _LCDNokia_writeByte
           _SPI_write
           ___wmul (ARG)
       _LCDNokia_printValue
         _ATM_registers (ARG)
           _ATM_read
             _SPI_read
             _SPI_write
         _LCDNokia_sendChar (ARG)
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
           ___wmul
         ___lldiv (ARG)
         ___llmod (ARG)
       _LCDNokia_sendString
         _LCDNokia_sendChar
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
           ___wmul
       _getButton1
       _getButton2
   _stateMainMenu *
     _generalView *
       _LCDNokia_clear
         _LCDNokia_gotoXY
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
         _LCDNokia_writeByte
           _SPI_write
           ___wmul (ARG)
       _LCDNokia_gotoXY
         _LCDNokia_writeByte
           _SPI_write
           ___wmul (ARG)
       _LCDNokia_sendString
         _LCDNokia_sendChar
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
           ___wmul
       _getButton1
       _getButton3
     _initialLoad *
       _ATM_init
         _GPIO_clearPIN
         _GPIO_dataDirectionPIN
         _GPIO_setPIN
       _delay
     _sendData *
       _LCDNokia_clear
         _LCDNokia_gotoXY
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
         _LCDNokia_writeByte
           _SPI_write
           ___wmul (ARG)
       _LCDNokia_init
         _GPIO_clearPIN
         _GPIO_dataDirectionPIN
         _GPIO_setPIN
         _LCDNokia_writeByte
           _SPI_write
           ___wmul (ARG)
         _LCD_delay
       _SPI_init
         _SPI_enableClock
         _SPI_enablePins
       _UART_init
         _GPIO_dataDirectionPIN
     _viewMenu *
       _LCDNokia_clear
         _LCDNokia_gotoXY
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
         _LCDNokia_writeByte
           _SPI_write
           ___wmul (ARG)
       _LCDNokia_gotoXY
         _LCDNokia_writeByte
           _SPI_write
           ___wmul (ARG)
       _LCDNokia_sendString
         _LCDNokia_sendChar
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
           ___wmul
       _getButton1
       _getButton2
       _getButton3
   _statePhaseAngle *
     _THDNPhaseAngle *
       _ATM_registers
         _ATM_read
           _SPI_read
           _SPI_write
       _LCDNokia_clear
         _LCDNokia_gotoXY
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
         _LCDNokia_writeByte
           _SPI_write
           ___wmul (ARG)
       _LCDNokia_gotoXY
         _LCDNokia_writeByte
           _SPI_write
           ___wmul (ARG)
       _LCDNokia_printValue
         _ATM_registers (ARG)
           _ATM_read
             _SPI_read
             _SPI_write
         _LCDNokia_sendChar (ARG)
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
           ___wmul
         ___lldiv (ARG)
         ___llmod (ARG)
       _LCDNokia_sendString
         _LCDNokia_sendChar
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
           ___wmul
       _getButton1
       _getButton2
       _getButton3
     _exitPhaseAngle *
       _LCDNokia_clear
         _LCDNokia_gotoXY
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
         _LCDNokia_writeByte
           _SPI_write
           ___wmul (ARG)
     _phPhaseAngle *
       _ATM_registers
         _ATM_read
           _SPI_read
           _SPI_write
       _LCDNokia_clear
         _LCDNokia_gotoXY
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
         _LCDNokia_writeByte
           _SPI_write
           ___wmul (ARG)
       _LCDNokia_gotoXY
         _LCDNokia_writeByte
           _SPI_write
           ___wmul (ARG)
       _LCDNokia_printValue
         _ATM_registers (ARG)
           _ATM_read
             _SPI_read
             _SPI_write
         _LCDNokia_sendChar (ARG)
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
           ___wmul
         ___lldiv (ARG)
         ___llmod (ARG)
       _LCDNokia_sendString
         _LCDNokia_sendChar
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
           ___wmul
       _getButton1
       _getButton2
     _viPhaseAngle *
       _ATM_registers
         _ATM_read
           _SPI_read
           _SPI_write
       _LCDNokia_clear
         _LCDNokia_gotoXY
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
         _LCDNokia_writeByte
           _SPI_write
           ___wmul (ARG)
       _LCDNokia_gotoXY
         _LCDNokia_writeByte
           _SPI_write
           ___wmul (ARG)
       _LCDNokia_printValue
         _ATM_registers (ARG)
           _ATM_read
             _SPI_read
             _SPI_write
         _LCDNokia_sendChar (ARG)
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
           ___wmul
         ___lldiv (ARG)
         ___llmod (ARG)
       _LCDNokia_sendString
         _LCDNokia_sendChar
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
           ___wmul
       _getButton1
       _getButton2
   _statePower1 *
     _exitPower1 *
       _LCDNokia_clear
         _LCDNokia_gotoXY
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
         _LCDNokia_writeByte
           _SPI_write
           ___wmul (ARG)
     _phPower1 *
       _ATM_registers
         _ATM_read
           _SPI_read
           _SPI_write
       _LCDNokia_clear
         _LCDNokia_gotoXY
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
         _LCDNokia_writeByte
           _SPI_write
           ___wmul (ARG)
       _LCDNokia_gotoXY
         _LCDNokia_writeByte
           _SPI_write
           ___wmul (ARG)
       _LCDNokia_printValue
         _ATM_registers (ARG)
           _ATM_read
             _SPI_read
             _SPI_write
         _LCDNokia_sendChar (ARG)
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
           ___wmul
         ___lldiv (ARG)
         ___llmod (ARG)
       _LCDNokia_sendString
         _LCDNokia_sendChar
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
           ___wmul
       _getButton1
       _getButton2
     _typesPower1 *
       _ATM_registers
         _ATM_read
           _SPI_read
           _SPI_write
       _LCDNokia_clear
         _LCDNokia_gotoXY
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
         _LCDNokia_writeByte
           _SPI_write
           ___wmul (ARG)
       _LCDNokia_gotoXY
         _LCDNokia_writeByte
           _SPI_write
           ___wmul (ARG)
       _LCDNokia_printValue
         _ATM_registers (ARG)
           _ATM_read
             _SPI_read
             _SPI_write
         _LCDNokia_sendChar (ARG)
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
           ___wmul
         ___lldiv (ARG)
         ___llmod (ARG)
       _LCDNokia_sendString
         _LCDNokia_sendChar
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
           ___wmul
       _getButton1
       _getButton2
       _getButton3
   _statePower2 *
     _exitPower2 *
       _LCDNokia_clear
         _LCDNokia_gotoXY
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
         _LCDNokia_writeByte
           _SPI_write
           ___wmul (ARG)
     _fhPower2 *
       _ATM_registers
         _ATM_read
           _SPI_read
           _SPI_write
       _LCDNokia_clear
         _LCDNokia_gotoXY
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
         _LCDNokia_writeByte
           _SPI_write
           ___wmul (ARG)
       _LCDNokia_gotoXY
         _LCDNokia_writeByte
           _SPI_write
           ___wmul (ARG)
       _LCDNokia_printValue
         _ATM_registers (ARG)
           _ATM_read
             _SPI_read
             _SPI_write
         _LCDNokia_sendChar (ARG)
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
           ___wmul
         ___lldiv (ARG)
         ___llmod (ARG)
       _LCDNokia_sendString
         _LCDNokia_sendChar
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
           ___wmul
       _getButton1
       _getButton2
       _getButton3
     _phPower2 *
       _ATM_registers
         _ATM_read
           _SPI_read
           _SPI_write
       _LCDNokia_gotoXY
         _LCDNokia_writeByte
           _SPI_write
           ___wmul (ARG)
       _LCDNokia_printValue
         _ATM_registers (ARG)
           _ATM_read
             _SPI_read
             _SPI_write
         _LCDNokia_sendChar (ARG)
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
           ___wmul
         ___lldiv (ARG)
         ___llmod (ARG)
       _LCDNokia_sendString
         _LCDNokia_sendChar
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
           ___wmul
       _getButton1
       _getButton2
   _statePowerFactor *
     _exitPowerFactor *
       _LCDNokia_clear
         _LCDNokia_gotoXY
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
         _LCDNokia_writeByte
           _SPI_write
           ___wmul (ARG)
     _phPowerFactor *
       _ATM_registers
         _ATM_read
           _SPI_read
           _SPI_write
       _LCDNokia_clear
         _LCDNokia_gotoXY
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
         _LCDNokia_writeByte
           _SPI_write
           ___wmul (ARG)
       _LCDNokia_gotoXY
         _LCDNokia_writeByte
           _SPI_write
           ___wmul (ARG)
       _LCDNokia_printValue
         _ATM_registers (ARG)
           _ATM_read
             _SPI_read
             _SPI_write
         _LCDNokia_sendChar (ARG)
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
           ___wmul
         ___lldiv (ARG)
         ___llmod (ARG)
       _LCDNokia_sendString
         _LCDNokia_sendChar
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
           ___wmul
       _getButton1
       _getButton2
       _getButton3
   _stateRmsVI *
     _exitRmsVI *
       _LCDNokia_clear
         _LCDNokia_gotoXY
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
         _LCDNokia_writeByte
           _SPI_write
           ___wmul (ARG)
     _neutralRmsVI *
       _ATM_registers
         _ATM_read
           _SPI_read
           _SPI_write
       _LCDNokia_gotoXY
         _LCDNokia_writeByte
           _SPI_write
           ___wmul (ARG)
       _LCDNokia_printValue
         _ATM_registers (ARG)
           _ATM_read
             _SPI_read
             _SPI_write
         _LCDNokia_sendChar (ARG)
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
           ___wmul
         ___lldiv (ARG)
         ___llmod (ARG)
       _LCDNokia_sendString
         _LCDNokia_sendChar
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
           ___wmul
       _getButton1
       _getButton2
     _phRmsVI *
       _ATM_registers
         _ATM_read
           _SPI_read
           _SPI_write
       _LCDNokia_clear
         _LCDNokia_gotoXY
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
         _LCDNokia_writeByte
           _SPI_write
           ___wmul (ARG)
       _LCDNokia_gotoXY
         _LCDNokia_writeByte
           _SPI_write
           ___wmul (ARG)
       _LCDNokia_printValue
         _ATM_registers (ARG)
           _ATM_read
             _SPI_read
             _SPI_write
         _LCDNokia_sendChar (ARG)
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
           ___wmul
         ___lldiv (ARG)
         ___llmod (ARG)
       _LCDNokia_sendString
         _LCDNokia_sendChar
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
           ___wmul
       _getButton1
       _getButton2
       _getButton3
   _stateTemperature *
     _exitTemperature *
       _LCDNokia_clear
         _LCDNokia_gotoXY
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
         _LCDNokia_writeByte
           _SPI_write
           ___wmul (ARG)
     _showTemperature *
       _ATM_registers
         _ATM_read
           _SPI_read
           _SPI_write
       _LCDNokia_gotoXY
         _LCDNokia_writeByte
           _SPI_write
           ___wmul (ARG)
       _LCDNokia_printValue
         _ATM_registers (ARG)
           _ATM_read
             _SPI_read
             _SPI_write
         _LCDNokia_sendChar (ARG)
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
           ___wmul
         ___lldiv (ARG)
         ___llmod (ARG)
       _LCDNokia_sendString
         _LCDNokia_sendChar
           _LCDNokia_writeByte
             _SPI_write
             ___wmul (ARG)
           ___wmul
       _getButton1
       _getButton2

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      F4       7       95.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     8B      9F       5       99.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     56      5F       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1F2       3        0.0%
DATA                 0      0     1F2      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Fri Jun 29 19:24:50 2018

                       _LCDNokia_clear 000000                          _LCDNokia_init 000000  
                       phRmsVI@counter 000005            __end_ofharmonicEnergy@F3701 000301  
          __end_ofharmonicEnergy@F3703 000395            __end_ofharmonicEnergy@F3691 00044A  
          __end_ofharmonicEnergy@F3693 00043E            __end_ofharmonicEnergy@F3695 000521  
          __end_ofharmonicEnergy@F3697 000516            __end_ofharmonicEnergy@F3689 000456  
          __end_ofharmonicEnergy@F3699 00050B                          _stateMainMenu 000000  
           viewMenu@string1_PhaseAngle 000074                __size_of_SPI_enablePins 000000  
          fhPower2@fundamental_PowerP1 000000            fhPower2@fundamental_PowerP2 00000A  
          fhPower2@fundamental_PowerP3 000014                            _statePower1 000000  
                          _statePower2 000000                       GPIO_clearPIN@pin 000000  
                      _LCDNokia_gotoXY 000000               __size_of_SPI_enableClock 000000  
                      ??_showFrequency 000029                            _SSPSTATbits 000FC7  
                                   l35 00001C                                     l70 0000CC  
                                   l80 0000B6                                     l72 000052  
                                   l81 000068                                     l73 000004  
                                   l83 000082                                     l75 00001E  
                                   l84 00009C                                     l76 000038  
                  ___wmul@multiplicand 000002                 __size_of_GPIO_clearPIN 000000  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                          __CFG_OSC$HS 000000            __end_ofapparentEnergy@F3661 00023D  
          __end_ofapparentEnergy@F3655 000633            __end_ofapparentEnergy@F3663 00022B  
          __end_ofapparentEnergy@F3657 00062A            __end_ofapparentEnergy@F3659 000621  
                    phRmsVI@maxScreens 00003C                                    l121 00001E  
                                  l130 000020                                    l122 000038  
                                  l210 000018                                    l131 00003C  
                                  l118 000052                                    l206 00001E  
                                  l127 000058                                    l119 000004  
                                  l207 000010                                    l128 000004  
                                  l160 00002E                                    l208 000058  
                                  l161 000026                                    l209 000014  
                                  l170 000026                                    l163 00002A  
                                  l155 000016                                    l171 00000A  
                                  l156 00000E                                    l172 00000E  
                                  l500 0003E8                                    l181 000006  
                                  l501 0003A6                                    l158 000012  
                                  l502 00041A                                    l511 000446  
                                  l503 0003AE                                    l168 000012  
                                  l512 00043E                                    l504 0003B6  
                                  l601 000098                                    l169 000004  
                                  l505 0003BE                                    l602 0000AC  
                                  l506 0003C6                                    l434 000078  
                                  l187 000008                                    l507 0003CE  
                                  l435 0000DC                                    l508 0003D6  
                                  l436 0000F6                                    l541 0000E0  
                                  l605 0001C0                                    l509 0003DE  
                                  l437 000110                                    l542 0000F4  
                                  l606 0000CC                                    l710 0002E2  
                                  l607 0001CE                                    l711 00012C  
                                  l608 00015E                                    l640 0001A6  
                                  l712 0002F6                                    l545 00029A  
                                  l641 000238                                    l633 0000E0  
                                  l713 0001BE                                    l801 00020A  
                                  l546 000114                                    l634 0000F4  
                                  l490 000244                                    l714 000250  
                                  l706 0000F8                                    l802 0000E6  
                                  l547 0002AE                                    l491 000272  
                                  l483 0001B2                                    l707 00010C  
                                  l803 00021A                                    l580 0002AE  
                                  l548 0001A6                                    l484 000378  
                                  l492 0002A0                                    l900 000206  
                                  l804 000178                                    l581 0001A6  
                                  l549 000238                                    l637 00029A  
                                  l485 0002FE                                    l493 0002CE  
                                  l901 0000E2                                    l582 000238  
                                  l574 0000E0                                    l638 000114  
                                  l670 000296                                    l494 0002E6  
                                  l486 0001BA                                    l902 000216  
                                  l575 0000F4                                    l639 0002AE  
                                  l671 000110                                    l487 000330  
                                  l903 000174                                    l727 000062  
                                  l815 00004A                                    l672 0002AA  
                                  l496 00039A                                    l488 0001D2  
                                  l728 000076                                    l760 000178  
                                  l816 00005A                                    l673 0001A2  
                                  l497 00038E                                    l489 000200  
                                  l753 0000B0                                    l841 000174  
                                  l578 00029A                                    l674 000234  
                                  l666 0000E0                                    l498 000390  
                                  l754 0000C4                                    l842 0000B0  
                                  l579 000114                                    l667 0000F0  
                                  l499 000424                                    l771 00004A  
                                  l843 000184                                    l931 000032  
                                  l772 00005A                                    l844 000142  
                                  l932 000042                                    l917 000032  
                                  l757 00020A                                    l837 00007E  
                                  l918 000042                                    l862 000062  
                                  l758 0000E6                                    l838 00008E  
                                  l863 000076                                    l759 00021A  
                                  l875 000062                                    l876 000076  
                                  l797 0000B0                                    l798 0000C4  
                                  l967 00000C                                    l968 00000E  
                                  l896 0000B0                                    l977 000014  
                                  l993 000030                                    l897 0000C0  
                                  l978 000002                                    l996 0000C2  
                                  l997 000096                                    l998 000016  
                         __CFG_CPB$OFF 000000                         _stateFrequency 000000  
                         viewMenu@data 00000F                           __CFG_CPD$OFF 000000  
                        viewMenu@F3600 0006C8                          viewMenu@F3602 0006C6  
                        viewMenu@F3604 0006C4                          viewMenu@F3572 000679  
                        viewMenu@F3580 000633                          viewMenu@F3582 000692  
                        viewMenu@F3590 000672                          viewMenu@F3574 0002E2  
                        viewMenu@F3592 000686                          viewMenu@F3576 00036A  
                        viewMenu@F3584 0002D2                          viewMenu@F3586 0006B4  
                        viewMenu@F3594 000680                          viewMenu@F3578 000462  
                        viewMenu@F3588 00068C                          viewMenu@F3596 0005F3  
                        viewMenu@F3598 000456                                    tosl 000FFD  
                                  wreg 000FE8                           __CFG_IESO$ON 000000  
                 __end_of_activeEnergy 0002BC                        ?_harmonicEnergy 000026  
             __size_of_showTemperature 000000             viewMenu@string2_PhaseAngle 00007A  
                     phPhaseAngle@data 000026                           __CFG_LVP$OFF 000000  
            __size_of_stateTemperature 000000                 __size_of_ATM_registers 000000  
              phPower1@currentPower1_2 0000B9                                   l1100 0000E0  
                                 l1101 0000EE                                   l1110 000168  
                                 l1102 0000FC                                   l1111 000176  
                                 l1103 00010A                                   l1200 00056C  
                                 l1120 0001DE                                   l1112 000184  
                                 l1121 0001EC                                   l1210 0005E2  
                                 l1130 000266                                   l1122 0001FA  
                                 l1106 000192                                   l1203 0005F0  
                                 l1131 000274                                   l1115 000224  
                                 l1123 000208                                   l1107 00014C  
                      fhPower2@counter 000006                                   l1220 000658  
                                 l1212 000618                                   l1204 00059C  
                                 l1140 0002FC                                   l1132 000282  
                                 l1124 000216                                   l1116 0001B4  
                                 l1221 000666                                   l1133 000290  
                                 l1109 00015A                                   l1222 000674  
                                 l1206 0005AA                                   l1150 00035E  
                                 l1142 00030A                                   l1134 00029E  
                                 l1118 0001C2                                   l1215 000680  
                                 l1207 0005B8                                   l1151 00036C  
                                 l1143 000318                                   l1127 0002C8  
                                 l1135 0002AC                                   l1119 0001D0  
                                 l1224 0006A8                                   l1216 00062E  
                                 l1208 0005C6                                   l1160 0003CE  
                                 l1152 00037A                                   l1144 000326  
                                 l1136 0002BA                                   l1128 000258  
                                 l1209 0005D4                                   l1081 000074  
                                 l1218 00063C                                   l1090 000066  
                                 l1082 000004                                   l1219 00064A  
                                 l1171 000484                                   l1163 000430  
                                 l1155 0003DC                                   l1147 000388  
                                 l1139 000334                                   l1180 0004A0  
                                 l1172 00044C                                   l1164 0003F8  
                                 l1156 0003A4                                   l1148 000350  
                                 l1084 000012                                   l1092 00072E  
                                 l1244 000008                                   l1252 000008  
                                 l1260 000008                                   l1085 000020  
                                 l1190 000502                                   l1182 0004AE  
                                 l1174 00045A                                   l1166 000406  
                                 l1158 0003B2                                   l1094 000118  
                                 l1086 00002E                                   l1079 0006C6  
                                 l1191 000510                                   l1183 0004BC  
                                 l1175 000468                                   l1167 000414  
                                 l1159 0003C0                                   l1095 0000A8  
                                 l1087 00003C                                   l1184 0004CA  
                                 l1176 000476                                   l1168 000422  
                                 l1088 00004A                                   l1097 0000B6  
                                 l1089 000058                                   l1194 00057A  
                                 l1098 0000C4                                   l1195 000534  
                                 l1187 00051E                                   l1179 0004D8  
                                 l1099 0000D2                                   l1188 0004F4  
                                 l1620 000022                                   l1197 000542  
                                 l1198 000550                                   l1630 000012  
                                 l1199 00055E                                   l1623 000062  
                                 l1624 000070                                   l1633 000046  
                                 l1634 000054                                   l1619 00002E  
                                 l1629 00001E                                   l5072 0000A6  
                                 l4624 000010                                   l4636 00001C  
                                 l4646 000072                                   l4750 000010  
                                 l4736 000010                                   l7370 000050  
                                 l7366 00003C                                   l7368 000046  
                    _LCDNokia_sendChar 000000                                   _ANS0 007DC0  
                                 _ANS1 007DC1                                   _ANS2 007DC2  
                                 u3000 000056                                   u3100 00008C  
                                 u3110 0000A4                                   u3120 0000DC  
                                 u4000 000014                                   u3130 0000F4  
                                 u3050 000014                                   u4010 00002C  
                                 u3300 00008C                                   u3140 00010C  
                                 u3060 00002C                                   u4100 00000E  
                                 u4020 000044                                   u3310 0000A4  
                                 u3150 000124                                   u3070 000044  
                                 u4110 000026                                   u4030 00005C  
                                 u3400 00005C                                   u3320 0000BC  
                                 u3160 00013C                                   u3080 00005C  
                                 u4040 000074                                   u3410 000074  
                                 u3250 000014                                   u3170 000154  
                                 u3090 000074                                   u4050 00008C  
                                 u3420 00008C                                   u3260 00002C  
                                 u3500 00002C                                   u4300 000042  
                                 u4140 000014                                   u2614 000014  
                                 u3430 0000A4                                   u3270 000044  
                                 u3510 000044                                   u4310 00005A  
                                 u4150 00002C                                   u2615 000010  
                                 u2624 00002E                                   u3440 0000BC  
                                 u3280 00005C                                   u3520 00005C  
                                 u3600 000044                                   u2704 000014  
                                 u4160 000044                                   u4240 00000E  
                                 u2625 00002A                                   u2705 000010  
                                 u2634 000048                                   u2810 000022  
                                 u3370 000014                                   u3290 000074  
                                 u3530 000074                                   u3610 00005C  
                                 u2714 000030                                   u4410 00000E  
                                 u4170 00005C                                   u4250 000026  
                                 u2635 000044                                   u2715 00002C  
                                 u2644 000078                                   u3380 00002C  
                                 u3620 000074                                   u3700 000014  
                                 u2724 00004C                                   u4420 000026  
                                 u4500 000074                                   u4180 000074  
                                 u2645 000074                                   u2725 000048  
                                 u2654 000092                                   u3390 000044  
                                 u3630 00008C                                   u3710 00002C  
                                 u4430 00003E                                   u4510 00008C  
                                 u4190 00008C                                   u2655 00008E  
                                 u2664 0000AC                                   u2840 00002C  
                                 u2760 000072                                   u3640 0000A4  
                                 u3720 000044                                   u4360 00000E  
                                 u4280 000012                                   u2665 0000A8  
                                 u3490 000014                                   u3650 0000BC  
                                 u3730 00005C                                   u2674 000014  
                                 u4370 000026                                   u4290 00002A  
                                 u5058 00003C                                   u2675 000010  
                                 u5059 000050                                   u2780 000032  
                                 u3580 000014                                   u3740 000074  
                                 u2684 00002E                                   u4380 00003E  
                                 u4460 000014                                   u3900 0000D4  
                                 u3820 000014                                   u2685 00002A  
                                 u3590 00002C                                   u3750 00008C  
                                 u2694 000048                                   u4470 00002C  
                                 u3830 00002C                                   u2695 000044  
                                 u3760 0000A4                                   u4560 00000E  
                                 u4480 000044                                   u3840 000044  
                                 u3770 0000BC                                   u2970 00000E  
                                 u4490 00005C                                   u3850 00005C  
                                 u2980 000026                                   u3860 000074  
                                 u4708 000030                                   u4709 000044  
                                 u2990 00003E                                   u3870 00008C  
                                 u3950 00000E                                   u4590 00000E  
                                 u4718 000034                                   u4719 000048  
                                 u3880 0000A4                                   u3960 000026  
                                 u4728 000034                                   u4729 000048  
                                 u3890 0000BC                                   u3970 00003E  
                                 u4738 000034                                   u4658 000030  
                                 u4739 000048                                   u4659 000044  
                                 u4668 000034                                   u4669 000048  
                                 u4678 000034                                   u4679 000048  
                                 u4688 000034                                   u4689 000048  
                                 u4698 000034                                   u4699 000048  
           __size_of_fundamentalEnergy 000000                          __CFG_FCMEN$ON 000000  
             fhPower2@harmonic_PowerP1 00001E               fhPower2@harmonic_PowerP2 000028  
             fhPower2@harmonic_PowerP3 000032                           ?_GPIO_setPIN 000000  
                   ?_LCDNokia_sendChar 000000                                   _main 000000  
             exitEnergy@currentEnergy6 0000BF     exitTemperature@currentTemperature2 00008C  
                                 fsr2h 000FDA                                   indf2 000FDF  
                                 fsr2l 000FD9                      ??_exitTemperature 000029  
                        __CFG_BOREN$ON 000000                      phPhaseAngle@F3803 00060F  
                    phPhaseAngle@F3805 000606                      phPhaseAngle@F3807 0005FD  
               showFrequency@frequency 000029                                   prodh 000FF4  
                                 prodl 000FF3                          ?_phPhaseAngle 000026  
                                 start 000000*                __end_of_LCDNokia_clear 000038  
                   __size_of_LCD_delay 000000                        _statePhaseAngle 000000  
            __size_of_statePowerFactor 000000                         ?_LCDNokia_init 000000  
                       ?_stateMainMenu 000000                    ??_LCDNokia_sendChar 000008  
                         ___param_bank 000000           __end_ofshowTemperature@F3843 00066B  
     activeEnergy@active_Forward_Total 000000               apparentEnergy@maxScreens 00003F  
               LCDNokia_sendChar@index 00000B         stateMainMenu@mainMenuFunctions 000033  
           statePower1@power1Functions 000051                 fundamentalEnergy@F3671 000282  
               fundamentalEnergy@F3673 000272                 fundamentalEnergy@F3681 0001E1  
               fundamentalEnergy@F3675 00031F                 fundamentalEnergy@F3683 000207  
               fundamentalEnergy@F3677 000310                 fundamentalEnergy@F3669 000292  
               fundamentalEnergy@F3679 000301                     phRmsVI@currentRms1 0000AA  
                    ??_exitPowerFactor 000028                       viPhaseAngle@data 000026  
               __end_of_stateFrequency 00005E                       _ButtonInt_config 000000  
                     __end_of_ATM_init 0000C0                       __end_of_ATM_read 00006A  
                                ?_main 000000                                  _ASCII 000001  
                      __end_of___lldiv 000082                        __end_of___llmod 000066  
                                _SPBRG 000FAF                                  _PORTA 000F80  
                                _PORTB 000F81                                  _PORTC 000F82  
               __size_of_phPowerFactor 000000                    viewMenu@counterMenu 000008  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TXREG 000FAD  
                         ?_initialLoad 00000F                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                        generalView@data 00000F  
                       __CFG_EBTR0$OFF 000000                         __CFG_EBTR1$OFF 000000  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                       GPIO_setPIN@pin 000000                          __CFG_WRTD$OFF 000000  
                     ??_apparentEnergy 000029              __end_of_LCDNokia_sendChar 00007E  
                       __CFG_EBTRB$OFF 000000                                  _delay 000000  
                      __end_of_phRmsVI 000228                     __size_of_UART_init 000000  
             viewMenu@currentMainMenu3 000000                                  pclath 000FFA  
                          _typesPower1 000000                                  tablat 000FF5  
          viPhaseAngle@angle_VoltageP1 000029            viPhaseAngle@angle_VoltageP2 000033  
          viPhaseAngle@angle_VoltageP3 00003D                       __end_of_SPI_init 000048  
                     __end_of_SPI_read 000012              __end_ofphPhaseAngle@F3803 000618  
            __end_ofphPhaseAngle@F3805 00060F              __end_ofphPhaseAngle@F3807 000606  
                        _GPIO_clearPIN 000000     fundamentalEnergy@fund_ForwardTotal 000000  
                                status 000FD8                  __end_ofphPower1@F3731 0003F3  
                __end_ofphPower1@F3733 0003E6                  __end_ofphPower1@F3735 000387  
          viewMenu@string1_Temperature 00003B                  __end_ofphPower2@F3757 0003D9  
                __end_ofphPower2@F3759 0003CC                         ??_phPhaseAngle 000029  
              phPower2@currentPower2_2 0000B0                            phRmsVI@data 000026  
              __end_of_LCDNokia_gotoXY 00001C                        ?_LCDNokia_clear 000000  
                  showTemperature@data 000026                    viewMenu@buttonRight 000084  
                   __size_of_SPI_write 000000                         __CFG_MCLRE$OFF 000000  
  harmonicEnergy@harmonic_ForwardTotal 000000                        __initialization 000000  
                       __CFG_HPOL$HIGH 000000                            _FlagButton1 000002  
                          _FlagButton2 000001                            _FlagButton3 000000  
                        _ATM_registers 000000                           __end_of_main 000054  
                    viPhaseAngle@F3811 000535                      viPhaseAngle@F3813 00052B  
                    viPhaseAngle@F3815 000521                     _LCDNokia_writeByte 000000  
          viewMenu@string1_PowerFactor 00006E                         _THDNPhaseAngle 000000  
                  phRmsVI@current1_RMS 00001E                    phRmsVI@current2_RMS 000028  
                  phRmsVI@current3_RMS 000032                        ?_stateFrequency 000000  
                       __CFG_LPOL$HIGH 000000                                 ??_main 000053  
apparentEnergy@apparentAri_energyTotal 000000                          __activetblptr 000002  
                  ?_LCDNokia_writeByte 000006            phPowerFactor@factor_powerP1 000033  
          phPowerFactor@factor_powerP2 00003B            phPowerFactor@factor_powerP3 000043  
       phPhaseAngle@currentPhaseAngle1 0000A1                      ??_SPI_enableClock 000001  
                    __end_of_LCD_delay 000032                     showFrequency@F3837 00066B  
           statePower2@power2Functions 000043                                 ?_delay 000000  
         phPower2@harmonic_Total_Power 000036                       ___llmod@dividend 000000  
                  reactiveEnergy@F3641 00034C                    reactiveEnergy@F3643 00033D  
                  reactiveEnergy@F3635 0002B2                    reactiveEnergy@F3637 00035B  
                  reactiveEnergy@F3645 00032E                    reactiveEnergy@F3639 0002A2  
                  reactiveEnergy@F3647 0001F4                    reactiveEnergy@F3649 00023D  
                               _ANSEL0 000FB8                       generalView@F3561 00046E  
                     generalView@F3563 0006AF                       generalView@F3565 0006AA  
                     generalView@F3559 00047A         exitFrequency@currentFrequency2 000092  
                       ?_GPIO_clearPIN 000000                __end_of_statePhaseAngle 00005E  
                       __CFG_WDTEN$OFF 000000                                 _OSCCON 000FD3  
                       __CFG_WINEN$OFF 000000                                 _SSPCON 000FC6  
                               _SSPBUF 000FC9                       __end_of_fhPower2 000228  
                    ??_showTemperature 000029                   ??_LCDNokia_writeByte 000007  
                  _LCDNokia_sendString 000000                 __size_of_exitFrequency 000000  
                      ??_LCDNokia_init 000008                          _phPowerFactor 000000  
                 generalView@lockClear 00000A                        ??_stateMainMenu 000033  
 reactiveEnergy@reactive_Forward_Total 000000                   __size_of_generalView 000000  
                     LCDNokia_gotoXY@x 000009                       LCDNokia_gotoXY@y 000008  
                 generalView@lockWrite 000009              __end_ofviPhaseAngle@F3811 00053F  
            __end_ofviPhaseAngle@F3813 000535              __end_ofviPhaseAngle@F3815 00052B  
                       ?_ATM_registers 000012   stateTemperature@temperatureFunctions 000030  
          initialLoad@currentMainMenu1 0000EE          LCDNokia_printValue@real_Value 00001E  
                       _SPI_enablePins 000000                 __end_of_THDNPhaseAngle 000224  
                               ___wmul 000000                      __end_of_UART_init 000066  
       __size_of_GPIO_dataDirectionPIN 000000                         __CFG_STVREN$ON 000000  
                            ??___lldiv 000008          __end_of_GPIO_dataDirectionPIN 0000DC  
                            ??___llmod 000008                       __end_of_phPower1 000114  
                     __end_of_phPower2 0000C8            viewMenu@string2_PowerFactor 000061  
                     stateEnergy@phase 000012                                 clear_0 000006  
                               clear_1 000012                                 clear_2 00001E  
                __size_of_activeEnergy 000000                       __end_of_sendData 000034  
                     ??_reactiveEnergy 000029                   ?_LCDNokia_sendString 00000D  
                            ??_phRmsVI 000029                    _LCDNokia_printValue 000000  
                  SPI_enableClock@cpol 000000                           phRmsVI@F3771 00055D  
                         phRmsVI@F3773 000553                           phRmsVI@F3767 000571  
                         phRmsVI@F3775 000549                           phRmsVI@F3769 000567  
                         phRmsVI@F3777 00053F                           __mediumconst 000000* 
                     __end_of_viewMenu 000450                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                    __end_of_SPI_write 00000E             __size_of_LCDNokia_sendChar 000000  
                        fhPower2@F3743 0005AD                          fhPower2@F3751 000585  
                        fhPower2@F3745 0005A3                          fhPower2@F3753 00057B  
                        fhPower2@F3747 000599                          fhPower2@F3749 00058F  
                     _stateTemperature 000000                   showTemperature@F3843 000664  
                         ATM_read@data 000004                             __accesstop 000000* 
              __end_of__initialization 000024                   viewMenu@buttonCenter 000086  
                       ?_phPowerFactor 000026          LCDNokia_printValue@temp_digit 00001C  
                            ?_ATM_init 000000                              ?_ATM_read 000001  
                        __end_of_ASCII 0001E1                          ___rparam_used 000001  
                 ?_LCDNokia_printValue 000017                   __size_of_GPIO_setPIN 000000  
                     ?_LCDNokia_gotoXY 000008                 __end_of_SPI_enablePins 00002C  
                     _statePowerFactor 000000                        __CFG_T1OSCMX$ON 000000  
                         ?_stateEnergy 000000                        stateRmsVI@phase 00000F  
                  GPIO_setPIN@portName 000003                neutralRmsVI@currentRms2 0000A7  
                         _activeEnergy 000000                         __pcstackCOMRAM 000000  
                      ?_THDNPhaseAngle 000026                           ?_statePower1 000000  
                         ?_statePower2 000000                          __end_of_delay 000028  
                        ?_viPhaseAngle 000026                  ??_LCDNokia_sendString 00000F  
                    _phasesTemperature 0006B8                              ?_SPI_init 000002  
                            ?_SPI_read 000000                          _exitFrequency 000000  
                GPIO_clearPIN@portName 000003                       ??_harmonicEnergy 000029  
                 __end_of_phPhaseAngle 000114                        _exitTemperature 000000  
                   THDNPhaseAngle@data 000026                                ??_delay 000004  
                 __size_of_initialLoad 000000                        ??_GPIO_clearPIN 000001  
                         phPower1@data 000026                           phPower2@data 000026  
             reactiveEnergy@maxScreens 000081       THDNPhaseAngle@currentPhaseAngle3 00009B  
     exitPhaseAngle@currentPhaseAngle3 000098                      _phasesPowerFactor 0006C0  
                           __pbssBANK0 000000                             __pbssBANK1 000000  
                     ?_statePhaseAngle 000000               __end_of_ButtonInt_config 000030  
           activeEnergy@currentEnergy1 0000CE                             ??_ATM_init 000005  
                           ??_ATM_read 000003                  ??_LCDNokia_printValue 00001B  
                      _exitPowerFactor 000000                     __size_of_exitRmsVI 000000  
   statePhaseAngle@phaseAngleFunctions 000047                        ??_ATM_registers 000014  
                        ?_neutralRmsVI 000026                        ?_SPI_enablePins 000000  
                   fhPower2@maxScreens 00003C                                ?___wmul 000000  
                    neutralRmsVI@F3781 000426                      neutralRmsVI@F3783 00041A  
         harmonicEnergy@currentEnergy5 0000C2                         ??_viPhaseAngle 000029  
                      __CFG_WDPS$32768 000000                  typesPower1@maxScreens 00005D  
                           _getButton1 000000                             _getButton2 000000  
                           _getButton3 000000              __end_of_phasesTemperature 0006BC  
           LCDNokia_sendChar@character 00000A     fundamentalEnergy@fund_ReverseTotal 000013  
                __end_of_showFrequency 000080                         ?_exitFrequency 000026  
                           ??_SPI_init 000004                             ??_SPI_read 000000  
                  viewMenu@string1_RMS 000010                    viewMenu@string2_RMS 000080  
                            ?_fhPower2 000026                       ATM_registers@reg 000012  
  harmonicEnergy@harmonic_ReverseTotal 00000F              __end_of_phasesPowerFactor 0006C4  
          LCDNokia_writeByte@DataOrCmd 000007                                _SSPSTAT 000FC7  
                stateTemperature@phase 00000B                           ?_typesPower1 000026  
                     ??_LCDNokia_clear 00000A                        ??_phPowerFactor 000028  
       viPhaseAngle@currentPhaseAngle2 00009E                        __CFG_PWMPIN$OFF 000000  
                            ?_phPower1 000026                              ?_phPower2 000026  
                generalView@buttonLeft 00002E                         ??_neutralRmsVI 000029  
                            ?_sendData 00000F         __end_offundamentalEnergy@F3671 000292  
       __end_offundamentalEnergy@F3673 000282         __end_offundamentalEnergy@F3681 0001F4  
       __end_offundamentalEnergy@F3675 00032E         __end_offundamentalEnergy@F3683 000219  
       __end_offundamentalEnergy@F3677 00031F         __end_offundamentalEnergy@F3669 0002A2  
       __end_offundamentalEnergy@F3679 000310                       typesPower1@F3711 0005E9  
                     typesPower1@F3713 0005DF                       typesPower1@F3721 0005B7  
                     typesPower1@F3715 0005D5                       typesPower1@F3723 0004F5  
                     typesPower1@F3717 0005CB                       typesPower1@F3725 0004EA  
                     typesPower1@F3719 0005C1                       typesPower1@F3727 0004DF  
                      __CFG_PWRTEN$OFF 000000                                __Hparam 000000  
              __size_of_exitPhaseAngle 000000                                __Lparam 000000  
            __end_ofneutralRmsVI@F3781 000432              __end_ofneutralRmsVI@F3783 000426  
                     ??_stateFrequency 000030               fundamentalEnergy@counter 000004  
                      _SPI_enableClock 000000                     SPI_init@SPI_Config 000002  
                            ?_viewMenu 00000F                   ATM_read@data_From_IC 000006  
                              ___lldiv 000000                        __size_of___wmul 000000  
                              ___llmod 000000                 statePower1@phasePower1 0000E0  
                           _exitEnergy 000000               __end_ofgeneralView@F3561 00047A  
             __end_ofgeneralView@F3563 0006B4               __end_ofgeneralView@F3565 0006AF  
             __end_ofgeneralView@F3559 000486                    LCDNokia_clear@index 00000A  
          typesPower1@reactive_powerP1 00003F            typesPower1@reactive_powerP2 000049  
          typesPower1@reactive_powerP3 000053          GPIO_dataDirectionPIN@portName 000004  
             THDNPhaseAngle@maxScreens 000042                                __pcinit 000000  
              fhPower2@currentPower2_1 0000B3                             _exitPower1 000000  
                           _exitPower2 000000                                __ramtop 000000* 
              __end_of_exitTemperature 00001A                                __ptext0 000000  
                              __ptext1 000000                                __ptext2 000000  
                              __ptext3 000000                                __ptext4 000000  
                              __ptext5 000000                                __ptext6 000000  
                              __ptext7 000000                                __ptext8 000000  
                              __ptext9 000000           phPower1@total_apparent_power 000029  
           typesPower1@currentPower1_1 0000BC                                _phRmsVI 000000  
                           delay@delay 000000                  THDNPhaseAngle@counter 000003  
                    __end_of_exitRmsVI 00001A                             ??_fhPower2 000029  
           stateEnergy@energyFunctions 000029                        _showTemperature 000000  
                   __end_of_SPI_Config 0006D0                __end_of_exitPowerFactor 000016  
                            _LCD_delay 000000                   end_of_initialization 000024  
       showFrequency@currentFrequency1 000095                      phPowerFactor@data 000026  
                harmonicEnergy@counter 000003                             ??_phPower1 000029  
                           ??_phPower2 000029                          __Lmediumconst 000000* 
                 SPI_enableClock@phase 000001                 stateMainMenu@phaseMain 0000F2  
                           ??_sendData 000011       stateFrequency@frequencyFunctions 000030  
                      ___lldiv@divisor 000004                        ___lldiv@counter 00000C  
                    activeEnergy@F3621 00040D                      activeEnergy@F3623 000400  
                    activeEnergy@F3615 0003B1                      activeEnergy@F3625 0003F3  
                    activeEnergy@F3617 0003A3                      activeEnergy@F3619 000395  
                    activeEnergy@F3627 000261                      activeEnergy@F3629 0002C2  
      fundamentalEnergy@fund_ForwardP1 000025        fundamentalEnergy@fund_ForwardP2 000035  
      fundamentalEnergy@fund_ForwardP3 000045                              _RCSTAbits 000FAB  
                           ??_viewMenu 000011               __end_of_stateTemperature 00005E  
                              postinc0 000FEE                                postinc2 000FDE  
                 __size_of_stateEnergy 000000                 statePower2@phasePower2 0000DD  
                          ?_getButton1 000000                            ?_getButton2 000000  
                          ?_getButton3 000000                        ??_exitFrequency 000029  
                __size_of_phPhaseAngle 000000                   __size_of_statePower1 000000  
                 __size_of_statePower2 000000                   ATM_calibration@F3301 000082  
                 ATM_calibration@F3303 00007C                   ATM_calibration@F3311 000058  
                 ATM_calibration@F3305 000076                   ATM_calibration@F3307 00006C  
                 ATM_calibration@F3309 000062                   ATM_calibration@F3293 000042  
                 ATM_calibration@F3295 00002C                   ATM_calibration@F3297 000016  
                 ATM_calibration@F3299 000000                              _PORTAbits 000F80  
                            _PORTBbits 000F81                              _UART_init 000000  
                 __end_of_phasesEnergy 000492                              _PORTCbits 000F82  
                viewMenu@string_Energy 00005A                   __end_of_phasesPower1 0006AA  
                 __end_of_phasesPower2 0006A4                   exitRmsVI@currentRms3 0000A4  
             __end_of_statePowerFactor 000056        fundamentalEnergy@fund_ReverseP1 000055  
      fundamentalEnergy@fund_ReverseP2 000064        fundamentalEnergy@fund_ReverseP3 000073  
       statePhaseAngle@phasePhaseAngle 0000D7                              _TRISCbits 000F94  
                           _stateRmsVI 000000                  apparentEnergy@counter 000005  
                           ?_LCD_delay 000000                   __end_of_viPhaseAngle 000114  
                            _SPI_write 000000       harmonicEnergy@harmonic_ForwardP1 00001D  
     harmonicEnergy@harmonic_ForwardP2 000029       harmonicEnergy@harmonic_ForwardP3 000035  
                        ??_generalView 000011                       main@currentState 000055  
              __end_of_SPI_enableClock 00003E                              _TXSTAbits 000FAC  
                     ??_THDNPhaseAngle 000029            __size_of_LCDNokia_writeByte 000000  
            __end_ofactiveEnergy@F3621 00041A              __end_ofactiveEnergy@F3623 00040D  
            __end_ofactiveEnergy@F3615 0003BF              __end_ofactiveEnergy@F3625 000400  
            __end_ofactiveEnergy@F3617 0003B1              __end_ofactiveEnergy@F3619 0003A3  
            __end_ofactiveEnergy@F3627 000272              __end_ofactiveEnergy@F3629 0002D2  
              __size_of_apparentEnergy 000000                           _phPhaseAngle 000000  
                        SPI_read@dummy 000000                      exitFrequency@data 000026  
                __end_of_LCDNokia_init 000080                      __size_of_ATM_init 000000  
                    __size_of_ATM_read 000000                  __end_of_stateMainMenu 000056  
     activeEnergy@active_Reverse_Total 000011           phPower1@total_reactive_power 000044  
                          ?_exitEnergy 000026        phPower2@fundamental_Total_Power 000029  
     harmonicEnergy@harmonic_ReverseP1 000041       harmonicEnergy@harmonic_ReverseP2 00004C  
     harmonicEnergy@harmonic_ReverseP3 000057                     viewMenu@maxScreens 00008A  
     stateTemperature@phaseTemperature 0000D1                         __end_of___wmul 000026  
                          ?_exitPower1 000026                            ?_exitPower2 000026  
                fundamentalEnergy@data 000026                            _BAUDCTLbits 000FAA  
              __end_of_showTemperature 000080                  _GPIO_dataDirectionPIN 000000  
         stateFrequency@phaseFrequency 0000D4                       ?_exitTemperature 000026  
                           ?_UART_init 000005                  __end_ofviewMenu@F3600 0006CA  
                __end_ofviewMenu@F3602 0006C8                  __end_ofviewMenu@F3604 0006C6  
                __end_ofviewMenu@F3572 000680                  __end_ofviewMenu@F3580 00063C  
                __end_ofviewMenu@F3582 000698                  __end_ofviewMenu@F3590 000679  
                __end_ofviewMenu@F3574 0002F2                  __end_ofviewMenu@F3592 00068C  
                __end_ofviewMenu@F3576 000379                  __end_ofviewMenu@F3584 0002E2  
                __end_ofviewMenu@F3586 0006B8                  __end_ofviewMenu@F3594 000686  
                __end_ofviewMenu@F3578 00046E                  __end_ofviewMenu@F3588 000692  
                __end_ofviewMenu@F3596 0005FD                  __end_ofviewMenu@F3598 000462  
           phPower1@total_active_power 000037                   __end_of_neutralRmsVI 0000C8  
                  start_initialization 000000                      __size_of_SPI_init 000000  
                    __size_of_SPI_read 000000                     viewMenu@buttonLeft 000088  
                 stateRmsVI@phaseRmsVI 0000DA           apparentEnergy@currentEnergy3 0000C8  
                     ?_exitPowerFactor 000026                             ?_SPI_write 000000  
             stateRmsVI@rmsVIFunctions 000041             __end_ofphPowerFactor@F3791 000654  
           __end_ofphPowerFactor@F3793 00064C             __end_ofphPowerFactor@F3795 000644  
           __end_ofphPowerFactor@F3797 0004DF                    __size_of_getButton1 000000  
                  __size_of_getButton2 000000                    __size_of_getButton3 000000  
                     ??_SPI_enablePins 000000                          ??_GPIO_setPIN 000001  
                 phPowerFactor@counter 000004                    THDNPhaseAngle@F3821 0004C9  
                  THDNPhaseAngle@F3823 0004BE                    THDNPhaseAngle@F3831 000492  
                  THDNPhaseAngle@F3825 0004B3                    THDNPhaseAngle@F3827 0004A8  
                  THDNPhaseAngle@F3829 00049D               harmonicEnergy@maxScreens 000062  
                    ?_ButtonInt_config 000000                       _phasesPhaseAngle 000654  
                      ___llmod@divisor 000004            __end_ofreactiveEnergy@F3641 00035B  
          __end_ofreactiveEnergy@F3643 00034C            __end_ofreactiveEnergy@F3635 0002C2  
          __end_ofreactiveEnergy@F3637 00036A            __end_ofreactiveEnergy@F3645 00033D  
          __end_ofreactiveEnergy@F3639 0002B2            __end_ofreactiveEnergy@F3647 000207  
          __end_ofreactiveEnergy@F3649 00024F                   __size_of_typesPower1 000000  
                  harmonicEnergy@F3701 0002F2                    harmonicEnergy@F3703 000387  
                  harmonicEnergy@F3691 00043E                    harmonicEnergy@F3693 000432  
                  harmonicEnergy@F3695 000516                    harmonicEnergy@F3697 00050B  
                  harmonicEnergy@F3689 00044A                    harmonicEnergy@F3699 000500  
                      ___llmod@counter 000008                          phPower1@F3731 0003E6  
                        phPower1@F3733 0003D9                          phPower1@F3735 000379  
                        phPower2@F3757 0003CC                          phPower2@F3759 0003BF  
                   ??_ButtonInt_config 000005                         _exitPhaseAngle 000000  
                    showFrequency@data 000026                     reactiveEnergy@data 000026  
                 statePhaseAngle@phase 00000D                    __end_of_generalView 00011E  
          __end_of_LCDNokia_sendString 000024                    apparentEnergy@F3661 00022B  
                  apparentEnergy@F3655 00062A                    apparentEnergy@F3663 000219  
                  apparentEnergy@F3657 000621                    apparentEnergy@F3659 000618  
                             ??___wmul 000004                        initialLoad@data 00000F  
      phPowerFactor@total_factor_power 000028               LCDNokia_printValue@value 000017  
             __size_of_LCDNokia_gotoXY 000000        fundamentalEnergy@currentEnergy4 0000C5  
          generalView@currentMainMenu2 0000EC            activeEnergy@active_Forward1 000021  
          activeEnergy@active_Forward2 00002F            activeEnergy@active_Forward3 00003D  
                     LCD_delay@counter 000000                    phRmsVI@voltage1_RMS 000000  
                  phRmsVI@voltage2_RMS 00000A                    phRmsVI@voltage3_RMS 000014  
           LCDNokia_printValue@counter 00001D                           sendData@data 00000F  
                       exitEnergy@data 000026                          ??_initialLoad 000011  
             __end_oftypesPower1@F3711 0005F3               __end_oftypesPower1@F3713 0005E9  
             __end_oftypesPower1@F3721 0005C1               __end_oftypesPower1@F3715 0005DF  
             __end_oftypesPower1@F3723 000500               __end_oftypesPower1@F3717 0005D5  
             __end_oftypesPower1@F3725 0004F5               __end_oftypesPower1@F3719 0005CB  
             __end_oftypesPower1@F3727 0004EA                            __pbssCOMRAM 000000  
                         fhPower2@data 000026            activeEnergy@active_Reverse1 00004B  
          activeEnergy@active_Reverse2 000058            activeEnergy@active_Reverse3 000065  
                        __pcstackBANK0 000000                            ?_stateRmsVI 000000  
                    __size_of_fhPower2 000000                 activeEnergy@maxScreens 000072  
               stateEnergy@phaseEnergy 0000E3            __end_of_LCDNokia_printValue 0000CA  
                   exitPhaseAngle@data 000026                            ??_LCD_delay 000000  
                __end_of_GPIO_clearPIN 00006E                __size_of_reactiveEnergy 000000  
                  __size_of_exitEnergy 000000                       statePower1@phase 000011  
                     statePower2@phase 000010                 __end_of_exitPhaseAngle 00001A  
                  __size_of_exitPower1 000000                    __size_of_exitPower2 000000  
                  exitPowerFactor@data 000026                       ?_SPI_enableClock 000000  
                    __size_of_phPower1 000000                      __size_of_phPower2 000000  
 reactiveEnergy@reactive_Reverse_Total 000013                   SPI_enablePins@serial 000000  
              phPowerFactor@maxScreens 00004B                  __end_of_ATM_registers 000738  
                  __end_of_GPIO_setPIN 000068                          SPI_write@data 000000  
                   typesPower1@counter 000002               __size_of_statePhaseAngle 000000  
                    __size_of_sendData 000000                          __pmediumconst 000000  
apparentEnergy@apparentVec_energyTotal 000012                               ?___lldiv 000000  
                             ?___llmod 000000                 ?_GPIO_dataDirectionPIN 000000  
                     neutralRmsVI@data 000026                      __size_of_viewMenu 000000  
                     ?_showTemperature 000026                            ??_UART_init 000007  
                             ?_phRmsVI 000026   statePowerFactor@powerFactorFunctions 00004C  
            viewMenu@string1_Frequency 000047                   __end_of_StateProgram 000261  
                __size_of_viPhaseAngle 000000                         __size_of_delay 000000  
                            _exitRmsVI 000000                        typesPower1@data 000026  
                         delay@counter 000004                    __end_of_initialLoad 00002C  
                          ??_SPI_write 000000                __size_of_harmonicEnergy 000000  
                          _generalView 000000                         ___wmul@product 000004  
                      ?_exitPhaseAngle 000026                    stateFrequency@phase 00000C  
                __end_of_phPowerFactor 00018E                           _phasesEnergy 000486  
                             _ATM_init 000000                               _ATM_read 000000  
               __size_of_showFrequency 000000                         _apparentEnergy 000000  
                    ATM_registers@info 000015          LCDNokia_sendString@characters 00000D  
                    ATM_registers@type 000014                           _phasesPower1 0006A4  
                         _phasesPower2 00069E               sendData@currentMainMenu4 0000EA  
                             _PIR1bits 000F9E                      main@mainFunctions 000053  
                  __size_of_stateRmsVI 000000             showTemperature@temperature 000029  
                    ?_stateTemperature 000000                           ??_getButton1 000000  
                         ??_getButton2 000000                           ??_getButton3 000000  
                     activeEnergy@data 000026                    __end_of_phasesRmsVI 00069E  
                         _viPhaseAngle 000000                  __size_of_neutralRmsVI 000000  
                   ??_stateTemperature 000030       statePowerFactor@phasePowerFactor 0000F0  
                    ___wmul@multiplier 000000                               _SPI_init 000000  
                             _SPI_read 000000       neutralRmsVI@nline_calculated_RMS 000029  
          THDNPhaseAngle@voltage1_THDN 000000            THDNPhaseAngle@voltage2_THDN 00000B  
   showTemperature@currentTemperature1 00008F            THDNPhaseAngle@voltage3_THDN 000016  
                       expBASE10@value 000088                      ??_LCDNokia_gotoXY 000009  
                    ?_statePowerFactor 000000                  __end_offhPower2@F3743 0005B7  
                __end_offhPower2@F3751 00058F                  __end_offhPower2@F3745 0005AD  
                __end_offhPower2@F3753 000585                  __end_offhPower2@F3747 0005A3  
                __end_offhPower2@F3749 000599                             ?_exitRmsVI 000026  
                   ??_statePowerFactor 00004C            fundamentalEnergy@maxScreens 000082  
                    viewMenu@lockClear 000008                 __end_of_apparentEnergy 0001DC  
                      _phasesFrequency 0006BC                     __end_of_getButton1 000012  
                   __end_of_getButton2 000012                     __end_of_getButton3 000012  
               generalView@buttonRight 000029                            _GPIO_setPIN 000000  
                    viewMenu@lockWrite 000007                 LCDNokia_writeByte@data 000006  
                reactiveEnergy@counter 000006        apparentEnergy@apparent_energyP1 000024  
      apparentEnergy@apparent_energyP2 00002D        apparentEnergy@apparent_energyP3 000036  
                             __Hrparam 000000*                          _neutralRmsVI 000000  
                        ??_stateEnergy 000029                          ?_activeEnergy 000026  
                             __Lrparam 000000*               __size_of_LCDNokia_clear 000000  
                   harmonicEnergy@data 000026                          ??_statePower1 000051  
                        ??_statePower2 000043          neutralRmsVI@nline_sampled_RMS 000035  
          THDNPhaseAngle@current1_THDN 000021            THDNPhaseAngle@current2_THDN 00002C  
              LCDNokia_printValue@zero 00001B                           ??_exitEnergy 000029  
          THDNPhaseAngle@current3_THDN 000037                 generalView@msgInitial1 000011  
                   apparentEnergy@data 000026                 generalView@msgInitial2 00001D  
                     __size_of___lldiv 000000                       __size_of___llmod 000000  
                         ??_exitPower1 000029                           ??_exitPower2 000029  
                           _ANSEL0bits 000FB8                  __end_of_exitFrequency 00001A  
                    ??_statePhaseAngle 000047               __end_of_phasesPhaseAngle 00065C  
                        _showFrequency 000000                __size_of_stateFrequency 000000  
               ATM_read@register_To_IC 00000C                               _fhPower2 000000  
                     __size_of_phRmsVI 000000                            _initialLoad 000000  
                             __ptext10 000000                               __ptext11 000000  
                             __ptext20 000000                               __ptext12 000000  
                             __ptext21 000000                               __ptext13 000000  
                             __ptext30 000000                               __ptext22 000000  
                             __ptext14 000000                               __ptext31 000000  
                             __ptext23 000000                               __ptext15 000000  
                             __ptext40 000000                               __ptext32 000000  
                             __ptext24 000000                               __ptext16 000000  
                             __ptext41 000000                               __ptext33 000000  
                             __ptext25 000000                               __ptext17 000000  
                             __ptext50 000000                               __ptext42 000000  
                             __ptext34 000000                               __ptext26 000000  
                             __ptext18 000000                               __ptext51 000000  
                             __ptext43 000000                               __ptext35 000000  
                             __ptext27 000000                               __ptext19 000000  
                             __ptext60 000000                               __ptext52 000000  
                             __ptext44 000000                               __ptext36 000000  
                             __ptext28 000000                               __ptext61 000000  
                             __ptext53 000000                               __ptext45 000000  
                             __ptext37 000000                               __ptext29 000000  
                             __ptext62 000000                               __ptext54 000000  
                             __ptext46 000000                               __ptext38 000000  
                             __ptext63 000000                               __ptext55 000000  
                             __ptext47 000000                               __ptext39 000000  
                             __ptext64 000000                               __ptext56 000000  
                             __ptext48 000000                               __ptext65 000000  
                             __ptext57 000000                               __ptext49 000000  
                             __ptext66 000000                               __ptext58 000000  
                             __ptext67 000000                               __ptext59 000000  
                       _reactiveEnergy 000000                         exitPower1@data 000026  
                       exitPower2@data 000026       phPowerFactor@currentPowerFactor1 0000E8  
   exitPowerFactor@currentPowerFactor2 0000E6             __end_of_LCDNokia_writeByte 00001A  
                             _phPower1 000000                               _phPower2 000000  
                      ?_apparentEnergy 000026                     __end_of_exitEnergy 00001C  
                        __size_of_main 000000                      _fundamentalEnergy 000000  
                   __end_of_exitPower1 00001A                     __end_of_exitPower2 00001A  
                             _sendData 000000                         ??_activeEnergy 000029  
                          _phasesRmsVI 000698                     ?_fundamentalEnergy 000026  
                             _viewMenu 000000                     phPowerFactor@F3791 00064C  
                   phPowerFactor@F3793 000644                     phPowerFactor@F3795 00063C  
                   phPowerFactor@F3797 0004D4             __end_ofshowFrequency@F3837 000672  
                  __end_of_SPI_Config2 0006CD                    exitTemperature@data 000026  
                  ??_fundamentalEnergy 000029              __size_of_ButtonInt_config 000000  
                  __end_of_stateEnergy 00005E                         ?_showFrequency 000026  
                       _phasesMainMenu 00065C                    __end_of_statePower1 00005E  
                  __end_of_statePower2 00005E                          exitRmsVI@data 000026  
               viewMenu@string1_Power1 000000                 viewMenu@string1_Power2 00002F  
               viewMenu@string2_Power1 000020                 viewMenu@string2_Power2 000051  
               viewMenu@string3_Power2 000068           reactiveEnergy@currentEnergy2 0000CB  
               __end_of_reactiveEnergy 0002BC                __end_of_phasesFrequency 0006C0  
                         ??_stateRmsVI 000041                 __size_of_LCDNokia_init 000000  
                   stateMainMenu@phase 000013              exitPower1@currentPower1_4 0000B6  
           GPIO_dataDirectionPIN@state 000001               __size_of_exitTemperature 000000  
               __size_of_stateMainMenu 000000                            ??_exitRmsVI 000029  
                    UART_init@baudRate 000005                          ??_typesPower1 000029  
                       _harmonicEnergy 000000              __end_of_fundamentalEnergy 0002BC  
                     ___lldiv@dividend 000000               __size_of_exitPowerFactor 000000  
                statePowerFactor@phase 00000E               GPIO_dataDirectionPIN@pin 000000  
                         _StateProgram 00024F                ??_GPIO_dataDirectionPIN 000002  
            typesPower1@active_powerP1 000021              typesPower1@active_powerP2 00002B  
            typesPower1@active_powerP3 000035            typesPower1@apparent_powerP1 000000  
          typesPower1@apparent_powerP2 00000B            typesPower1@apparent_powerP3 000016  
               __end_of_phasesMainMenu 000664                     __end_of_stateRmsVI 00005E  
      reactiveEnergy@reactive_Forward1 000025        reactiveEnergy@reactive_Forward2 000045  
      reactiveEnergy@reactive_Forward3 000035                __size_of_THDNPhaseAngle 000000  
                  activeEnergy@counter 000007           __size_of_LCDNokia_sendString 000000  
                 ATM_read@register_add 000001                       ___lldiv@quotient 000008  
      reactiveEnergy@reactive_Reverse1 000054        reactiveEnergy@reactive_Reverse2 000063  
      reactiveEnergy@reactive_Reverse3 000072                        ?_reactiveEnergy 000026  
               __end_of_harmonicEnergy 0002B8                       ??_exitPhaseAngle 000029  
              phPhaseAngle@anglePhase1 000029                phPhaseAngle@anglePhase2 000032  
              phPhaseAngle@anglePhase3 00003B                           ?_generalView 00000F  
            exitPower2@currentPower2_3 0000AD                             _SSPCONbits 000FC6  
                 __end_ofphRmsVI@F3771 000567                   __end_ofphRmsVI@F3773 00055D  
                 __end_ofphRmsVI@F3767 00057B                   __end_ofphRmsVI@F3775 000553  
                 __end_ofphRmsVI@F3769 000571                   __end_ofphRmsVI@F3777 000549  
         __size_of_LCDNokia_printValue 000000                            _SPI_Config2 0006CA  
                  __end_of_typesPower1 000304                             _SPI_Config 0006CD  
          __end_ofTHDNPhaseAngle@F3821 0004D4            __end_ofTHDNPhaseAngle@F3823 0004C9  
          __end_ofTHDNPhaseAngle@F3831 00049D            __end_ofTHDNPhaseAngle@F3825 0004BE  
          __end_ofTHDNPhaseAngle@F3827 0004B3            __end_ofTHDNPhaseAngle@F3829 0004A8  
                          _stateEnergy 000000  
