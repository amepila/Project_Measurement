

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Thu May 31 14:45:59 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F2331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	text43,global,reloc=2,class=CODE,delta=1
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1
    56                           	psect	text45,global,reloc=2,class=CODE,delta=1
    57                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    58                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    59                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    60                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    61  0000                     
    62                           ; Version 1.44
    63                           ; Generated 14/09/2017 GMT
    64                           ; 
    65                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    66                           ; All rights reserved.
    67                           ; 
    68                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    69                           ; 
    70                           ; Redistribution and use in source and binary forms, with or without modification, are
    71                           ; permitted provided that the following conditions are met:
    72                           ; 
    73                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    74                           ;        conditions and the following disclaimer.
    75                           ; 
    76                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    77                           ;        of conditions and the following disclaimer in the documentation and/or other
    78                           ;        materials provided with the distribution.
    79                           ; 
    80                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    81                           ;        software without specific prior written permission.
    82                           ; 
    83                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    84                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    85                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    86                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    87                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    88                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    89                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    90                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    91                           ; 
    92                           ; 
    93                           ; Code-generator required, PIC18F2331 Definitions
    94                           ; 
    95                           ; SFR Addresses
    96  0000                     
    97                           	psect	mediumconst
    98  001DDE                     __pmediumconst:
    99                           	opt stack 0
   100  001DDE  00                 	db	0
   101  001DDF                     _ASCII:
   102                           	opt stack 0
   103  001DDF  00                 	db	0
   104  001DE0  00                 	db	0
   105  001DE1  00                 	db	0
   106  001DE2  00                 	db	0
   107  001DE3  00                 	db	0
   108  001DE4  00                 	db	0
   109  001DE5  00                 	db	0
   110  001DE6  5F                 	db	95
   111  001DE7  00                 	db	0
   112  001DE8  00                 	db	0
   113  001DE9  00                 	db	0
   114  001DEA  07                 	db	7
   115  001DEB  00                 	db	0
   116  001DEC  07                 	db	7
   117  001DED  00                 	db	0
   118  001DEE  14                 	db	20
   119  001DEF  7F                 	db	127
   120  001DF0  14                 	db	20
   121  001DF1  7F                 	db	127
   122  001DF2  14                 	db	20
   123  001DF3  24                 	db	36
   124  001DF4  2A                 	db	42
   125  001DF5  7F                 	db	127
   126  001DF6  2A                 	db	42
   127  001DF7  12                 	db	18
   128  001DF8  23                 	db	35
   129  001DF9  13                 	db	19
   130  001DFA  08                 	db	8
   131  001DFB  64                 	db	100
   132  001DFC  62                 	db	98
   133  001DFD  36                 	db	54
   134  001DFE  49                 	db	73
   135  001DFF  55                 	db	85
   136  001E00  22                 	db	34
   137  001E01  50                 	db	80
   138  001E02  00                 	db	0
   139  001E03  05                 	db	5
   140  001E04  03                 	db	3
   141  001E05  00                 	db	0
   142  001E06  00                 	db	0
   143  001E07  00                 	db	0
   144  001E08  1C                 	db	28
   145  001E09  22                 	db	34
   146  001E0A  41                 	db	65
   147  001E0B  00                 	db	0
   148  001E0C  00                 	db	0
   149  001E0D  41                 	db	65
   150  001E0E  22                 	db	34
   151  001E0F  1C                 	db	28
   152  001E10  00                 	db	0
   153  001E11  14                 	db	20
   154  001E12  08                 	db	8
   155  001E13  3E                 	db	62
   156  001E14  08                 	db	8
   157  001E15  14                 	db	20
   158  001E16  08                 	db	8
   159  001E17  08                 	db	8
   160  001E18  3E                 	db	62
   161  001E19  08                 	db	8
   162  001E1A  08                 	db	8
   163  001E1B  00                 	db	0
   164  001E1C  50                 	db	80
   165  001E1D  30                 	db	48
   166  001E1E  00                 	db	0
   167  001E1F  00                 	db	0
   168  001E20  08                 	db	8
   169  001E21  08                 	db	8
   170  001E22  08                 	db	8
   171  001E23  08                 	db	8
   172  001E24  08                 	db	8
   173  001E25  00                 	db	0
   174  001E26  60                 	db	96
   175  001E27  60                 	db	96
   176  001E28  00                 	db	0
   177  001E29  00                 	db	0
   178  001E2A  20                 	db	32
   179  001E2B  10                 	db	16
   180  001E2C  08                 	db	8
   181  001E2D  04                 	db	4
   182  001E2E  02                 	db	2
   183  001E2F  3E                 	db	62
   184  001E30  51                 	db	81
   185  001E31  49                 	db	73
   186  001E32  45                 	db	69
   187  001E33  3E                 	db	62
   188  001E34  00                 	db	0
   189  001E35  42                 	db	66
   190  001E36  7F                 	db	127
   191  001E37  40                 	db	64
   192  001E38  00                 	db	0
   193  001E39  42                 	db	66
   194  001E3A  61                 	db	97
   195  001E3B  51                 	db	81
   196  001E3C  49                 	db	73
   197  001E3D  46                 	db	70
   198  001E3E  21                 	db	33
   199  001E3F  41                 	db	65
   200  001E40  45                 	db	69
   201  001E41  4B                 	db	75
   202  001E42  31                 	db	49
   203  001E43  18                 	db	24
   204  001E44  14                 	db	20
   205  001E45  12                 	db	18
   206  001E46  7F                 	db	127
   207  001E47  10                 	db	16
   208  001E48  27                 	db	39
   209  001E49  45                 	db	69
   210  001E4A  45                 	db	69
   211  001E4B  45                 	db	69
   212  001E4C  39                 	db	57
   213  001E4D  3C                 	db	60
   214  001E4E  4A                 	db	74
   215  001E4F  49                 	db	73
   216  001E50  49                 	db	73
   217  001E51  30                 	db	48
   218  001E52  01                 	db	1
   219  001E53  71                 	db	113
   220  001E54  09                 	db	9
   221  001E55  05                 	db	5
   222  001E56  03                 	db	3
   223  001E57  36                 	db	54
   224  001E58  49                 	db	73
   225  001E59  49                 	db	73
   226  001E5A  49                 	db	73
   227  001E5B  36                 	db	54
   228  001E5C  06                 	db	6
   229  001E5D  49                 	db	73
   230  001E5E  49                 	db	73
   231  001E5F  29                 	db	41
   232  001E60  1E                 	db	30
   233  001E61  00                 	db	0
   234  001E62  36                 	db	54
   235  001E63  36                 	db	54
   236  001E64  00                 	db	0
   237  001E65  00                 	db	0
   238  001E66  00                 	db	0
   239  001E67  56                 	db	86
   240  001E68  36                 	db	54
   241  001E69  00                 	db	0
   242  001E6A  00                 	db	0
   243  001E6B  08                 	db	8
   244  001E6C  14                 	db	20
   245  001E6D  22                 	db	34
   246  001E6E  41                 	db	65
   247  001E6F  00                 	db	0
   248  001E70  14                 	db	20
   249  001E71  14                 	db	20
   250  001E72  14                 	db	20
   251  001E73  14                 	db	20
   252  001E74  14                 	db	20
   253  001E75  00                 	db	0
   254  001E76  41                 	db	65
   255  001E77  22                 	db	34
   256  001E78  14                 	db	20
   257  001E79  08                 	db	8
   258  001E7A  02                 	db	2
   259  001E7B  01                 	db	1
   260  001E7C  51                 	db	81
   261  001E7D  09                 	db	9
   262  001E7E  06                 	db	6
   263  001E7F  32                 	db	50
   264  001E80  49                 	db	73
   265  001E81  79                 	db	121
   266  001E82  41                 	db	65
   267  001E83  3E                 	db	62
   268  001E84  7E                 	db	126
   269  001E85  11                 	db	17
   270  001E86  11                 	db	17
   271  001E87  11                 	db	17
   272  001E88  7E                 	db	126
   273  001E89  7F                 	db	127
   274  001E8A  49                 	db	73
   275  001E8B  49                 	db	73
   276  001E8C  49                 	db	73
   277  001E8D  36                 	db	54
   278  001E8E  3E                 	db	62
   279  001E8F  41                 	db	65
   280  001E90  41                 	db	65
   281  001E91  41                 	db	65
   282  001E92  22                 	db	34
   283  001E93  7F                 	db	127
   284  001E94  41                 	db	65
   285  001E95  41                 	db	65
   286  001E96  22                 	db	34
   287  001E97  1C                 	db	28
   288  001E98  7F                 	db	127
   289  001E99  49                 	db	73
   290  001E9A  49                 	db	73
   291  001E9B  49                 	db	73
   292  001E9C  41                 	db	65
   293  001E9D  7F                 	db	127
   294  001E9E  09                 	db	9
   295  001E9F  09                 	db	9
   296  001EA0  09                 	db	9
   297  001EA1  01                 	db	1
   298  001EA2  3E                 	db	62
   299  001EA3  41                 	db	65
   300  001EA4  49                 	db	73
   301  001EA5  49                 	db	73
   302  001EA6  7A                 	db	122
   303  001EA7  7F                 	db	127
   304  001EA8  08                 	db	8
   305  001EA9  08                 	db	8
   306  001EAA  08                 	db	8
   307  001EAB  7F                 	db	127
   308  001EAC  00                 	db	0
   309  001EAD  41                 	db	65
   310  001EAE  7F                 	db	127
   311  001EAF  41                 	db	65
   312  001EB0  00                 	db	0
   313  001EB1  20                 	db	32
   314  001EB2  40                 	db	64
   315  001EB3  41                 	db	65
   316  001EB4  3F                 	db	63
   317  001EB5  01                 	db	1
   318  001EB6  7F                 	db	127
   319  001EB7  08                 	db	8
   320  001EB8  14                 	db	20
   321  001EB9  22                 	db	34
   322  001EBA  41                 	db	65
   323  001EBB  7F                 	db	127
   324  001EBC  40                 	db	64
   325  001EBD  40                 	db	64
   326  001EBE  40                 	db	64
   327  001EBF  40                 	db	64
   328  001EC0  7F                 	db	127
   329  001EC1  02                 	db	2
   330  001EC2  0C                 	db	12
   331  001EC3  02                 	db	2
   332  001EC4  7F                 	db	127
   333  001EC5  7F                 	db	127
   334  001EC6  04                 	db	4
   335  001EC7  08                 	db	8
   336  001EC8  10                 	db	16
   337  001EC9  7F                 	db	127
   338  001ECA  3E                 	db	62
   339  001ECB  41                 	db	65
   340  001ECC  41                 	db	65
   341  001ECD  41                 	db	65
   342  001ECE  3E                 	db	62
   343  001ECF  7F                 	db	127
   344  001ED0  09                 	db	9
   345  001ED1  09                 	db	9
   346  001ED2  09                 	db	9
   347  001ED3  06                 	db	6
   348  001ED4  3E                 	db	62
   349  001ED5  41                 	db	65
   350  001ED6  51                 	db	81
   351  001ED7  21                 	db	33
   352  001ED8  5E                 	db	94
   353  001ED9  7F                 	db	127
   354  001EDA  09                 	db	9
   355  001EDB  19                 	db	25
   356  001EDC  29                 	db	41
   357  001EDD  46                 	db	70
   358  001EDE  46                 	db	70
   359  001EDF  49                 	db	73
   360  001EE0  49                 	db	73
   361  001EE1  49                 	db	73
   362  001EE2  31                 	db	49
   363  001EE3  01                 	db	1
   364  001EE4  01                 	db	1
   365  001EE5  7F                 	db	127
   366  001EE6  01                 	db	1
   367  001EE7  01                 	db	1
   368  001EE8  3F                 	db	63
   369  001EE9  40                 	db	64
   370  001EEA  40                 	db	64
   371  001EEB  40                 	db	64
   372  001EEC  3F                 	db	63
   373  001EED  1F                 	db	31
   374  001EEE  20                 	db	32
   375  001EEF  40                 	db	64
   376  001EF0  20                 	db	32
   377  001EF1  1F                 	db	31
   378  001EF2  3F                 	db	63
   379  001EF3  40                 	db	64
   380  001EF4  38                 	db	56
   381  001EF5  40                 	db	64
   382  001EF6  3F                 	db	63
   383  001EF7  63                 	db	99
   384  001EF8  14                 	db	20
   385  001EF9  08                 	db	8
   386  001EFA  14                 	db	20
   387  001EFB  63                 	db	99
   388  001EFC  07                 	db	7
   389  001EFD  08                 	db	8
   390  001EFE  70                 	db	112
   391  001EFF  08                 	db	8
   392  001F00  07                 	db	7
   393  001F01  61                 	db	97
   394  001F02  51                 	db	81
   395  001F03  49                 	db	73
   396  001F04  45                 	db	69
   397  001F05  43                 	db	67
   398  001F06  00                 	db	0
   399  001F07  7F                 	db	127
   400  001F08  41                 	db	65
   401  001F09  41                 	db	65
   402  001F0A  00                 	db	0
   403  001F0B  02                 	db	2
   404  001F0C  04                 	db	4
   405  001F0D  08                 	db	8
   406  001F0E  10                 	db	16
   407  001F0F  20                 	db	32
   408  001F10  00                 	db	0
   409  001F11  41                 	db	65
   410  001F12  41                 	db	65
   411  001F13  7F                 	db	127
   412  001F14  00                 	db	0
   413  001F15  04                 	db	4
   414  001F16  02                 	db	2
   415  001F17  01                 	db	1
   416  001F18  02                 	db	2
   417  001F19  04                 	db	4
   418  001F1A  40                 	db	64
   419  001F1B  40                 	db	64
   420  001F1C  40                 	db	64
   421  001F1D  40                 	db	64
   422  001F1E  40                 	db	64
   423  001F1F  00                 	db	0
   424  001F20  01                 	db	1
   425  001F21  02                 	db	2
   426  001F22  04                 	db	4
   427  001F23  00                 	db	0
   428  001F24  20                 	db	32
   429  001F25  54                 	db	84
   430  001F26  54                 	db	84
   431  001F27  54                 	db	84
   432  001F28  78                 	db	120
   433  001F29  7F                 	db	127
   434  001F2A  48                 	db	72
   435  001F2B  44                 	db	68
   436  001F2C  44                 	db	68
   437  001F2D  38                 	db	56
   438  001F2E  38                 	db	56
   439  001F2F  44                 	db	68
   440  001F30  44                 	db	68
   441  001F31  44                 	db	68
   442  001F32  20                 	db	32
   443  001F33  38                 	db	56
   444  001F34  44                 	db	68
   445  001F35  44                 	db	68
   446  001F36  48                 	db	72
   447  001F37  7F                 	db	127
   448  001F38  38                 	db	56
   449  001F39  54                 	db	84
   450  001F3A  54                 	db	84
   451  001F3B  54                 	db	84
   452  001F3C  18                 	db	24
   453  001F3D  08                 	db	8
   454  001F3E  7E                 	db	126
   455  001F3F  09                 	db	9
   456  001F40  01                 	db	1
   457  001F41  02                 	db	2
   458  001F42  0C                 	db	12
   459  001F43  52                 	db	82
   460  001F44  52                 	db	82
   461  001F45  52                 	db	82
   462  001F46  3E                 	db	62
   463  001F47  7F                 	db	127
   464  001F48  08                 	db	8
   465  001F49  04                 	db	4
   466  001F4A  04                 	db	4
   467  001F4B  78                 	db	120
   468  001F4C  00                 	db	0
   469  001F4D  44                 	db	68
   470  001F4E  7D                 	db	125
   471  001F4F  40                 	db	64
   472  001F50  00                 	db	0
   473  001F51  20                 	db	32
   474  001F52  40                 	db	64
   475  001F53  44                 	db	68
   476  001F54  3D                 	db	61
   477  001F55  00                 	db	0
   478  001F56  7F                 	db	127
   479  001F57  10                 	db	16
   480  001F58  28                 	db	40
   481  001F59  44                 	db	68
   482  001F5A  00                 	db	0
   483  001F5B  00                 	db	0
   484  001F5C  41                 	db	65
   485  001F5D  7F                 	db	127
   486  001F5E  40                 	db	64
   487  001F5F  00                 	db	0
   488  001F60  7C                 	db	124
   489  001F61  04                 	db	4
   490  001F62  18                 	db	24
   491  001F63  04                 	db	4
   492  001F64  78                 	db	120
   493  001F65  7C                 	db	124
   494  001F66  08                 	db	8
   495  001F67  04                 	db	4
   496  001F68  04                 	db	4
   497  001F69  78                 	db	120
   498  001F6A  38                 	db	56
   499  001F6B  44                 	db	68
   500  001F6C  44                 	db	68
   501  001F6D  44                 	db	68
   502  001F6E  38                 	db	56
   503  001F6F  7C                 	db	124
   504  001F70  14                 	db	20
   505  001F71  14                 	db	20
   506  001F72  14                 	db	20
   507  001F73  08                 	db	8
   508  001F74  08                 	db	8
   509  001F75  14                 	db	20
   510  001F76  14                 	db	20
   511  001F77  18                 	db	24
   512  001F78  7C                 	db	124
   513  001F79  7C                 	db	124
   514  001F7A  08                 	db	8
   515  001F7B  04                 	db	4
   516  001F7C  04                 	db	4
   517  001F7D  08                 	db	8
   518  001F7E  48                 	db	72
   519  001F7F  54                 	db	84
   520  001F80  54                 	db	84
   521  001F81  54                 	db	84
   522  001F82  20                 	db	32
   523  001F83  04                 	db	4
   524  001F84  3F                 	db	63
   525  001F85  44                 	db	68
   526  001F86  40                 	db	64
   527  001F87  20                 	db	32
   528  001F88  3C                 	db	60
   529  001F89  40                 	db	64
   530  001F8A  40                 	db	64
   531  001F8B  20                 	db	32
   532  001F8C  7C                 	db	124
   533  001F8D  1C                 	db	28
   534  001F8E  20                 	db	32
   535  001F8F  40                 	db	64
   536  001F90  20                 	db	32
   537  001F91  1C                 	db	28
   538  001F92  3C                 	db	60
   539  001F93  40                 	db	64
   540  001F94  30                 	db	48
   541  001F95  40                 	db	64
   542  001F96  3C                 	db	60
   543  001F97  44                 	db	68
   544  001F98  28                 	db	40
   545  001F99  10                 	db	16
   546  001F9A  28                 	db	40
   547  001F9B  44                 	db	68
   548  001F9C  0C                 	db	12
   549  001F9D  50                 	db	80
   550  001F9E  50                 	db	80
   551  001F9F  50                 	db	80
   552  001FA0  3C                 	db	60
   553  001FA1  44                 	db	68
   554  001FA2  64                 	db	100
   555  001FA3  54                 	db	84
   556  001FA4  4C                 	db	76
   557  001FA5  44                 	db	68
   558  001FA6  00                 	db	0
   559  001FA7  08                 	db	8
   560  001FA8  36                 	db	54
   561  001FA9  41                 	db	65
   562  001FAA  00                 	db	0
   563  001FAB  00                 	db	0
   564  001FAC  00                 	db	0
   565  001FAD  7F                 	db	127
   566  001FAE  00                 	db	0
   567  001FAF  00                 	db	0
   568  001FB0  00                 	db	0
   569  001FB1  41                 	db	65
   570  001FB2  36                 	db	54
   571  001FB3  08                 	db	8
   572  001FB4  00                 	db	0
   573  001FB5  10                 	db	16
   574  001FB6  08                 	db	8
   575  001FB7  08                 	db	8
   576  001FB8  10                 	db	16
   577  001FB9  08                 	db	8
   578  001FBA  78                 	db	120
   579  001FBB  46                 	db	70
   580  001FBC  41                 	db	65
   581  001FBD  46                 	db	70
   582  001FBE  78                 	db	120
   583  001FBF                     __end_of_ASCII:
   584                           	opt stack 0
   585  001FBF                     _StateProgram:
   586                           	opt stack 0
   587  001FBF  CE                 	db	low _stateMainMenu
   588  001FC0  06                 	db	high _stateMainMenu
   589  001FC1  C8                 	db	low _statePower1
   590  001FC2  05                 	db	high _statePower1
   591  001FC3  6E                 	db	low _statePower2
   592  001FC4  05                 	db	high _statePower2
   593  001FC5  14                 	db	low _stateRmsVI
   594  001FC6  05                 	db	high _stateRmsVI
   595  001FC7  7C                 	db	low _statePowerFactor
   596  001FC8  06                 	db	high _statePowerFactor
   597  001FC9  BA                 	db	low _statePhaseAngle
   598  001FCA  04                 	db	high _statePhaseAngle
   599  001FCB  60                 	db	low _stateFrequency
   600  001FCC  04                 	db	high _stateFrequency
   601  001FCD  22                 	db	low _stateTemperature
   602  001FCE  06                 	db	high _stateTemperature
   603  001FCF                     __end_of_StateProgram:
   604                           	opt stack 0
   605  001FCF                     _phasesPower1:
   606                           	opt stack 0
   607  001FCF  2A                 	db	low _typesPower1
   608  001FD0  0A                 	db	high _typesPower1
   609  001FD1  14                 	db	low _phPower1
   610  001FD2  0A                 	db	high _phPower1
   611  001FD3  40                 	db	low _vectorPower1
   612  001FD4  0A                 	db	high _vectorPower1
   613  001FD5  FE                 	db	low _exitPower1
   614  001FD6  09                 	db	high _exitPower1
   615  001FD7                     __end_of_phasesPower1:
   616                           	opt stack 0
   617  001FD7                     _phasesPhaseAngle:
   618                           	opt stack 0
   619  001FD7  46                 	db	low _phPhaseAngle
   620  001FD8  09                 	db	high _phPhaseAngle
   621  001FD9  5E                 	db	low _viPhaseAngle
   622  001FDA  09                 	db	high _viPhaseAngle
   623  001FDB  56                 	db	low _exitPhaseAngle
   624  001FDC  0A                 	db	high _exitPhaseAngle
   625  001FDD                     __end_of_phasesPhaseAngle:
   626                           	opt stack 0
   627  001FDD                     _phasesRmsVI:
   628                           	opt stack 0
   629  001FDD  16                 	db	low _phRmsVI
   630  001FDE  09                 	db	high _phRmsVI
   631  001FDF  FE                 	db	low _neutralRmsVI
   632  001FE0  08                 	db	high _neutralRmsVI
   633  001FE1  BC                 	db	low _exitRmsVI
   634  001FE2  09                 	db	high _exitRmsVI
   635  001FE3                     __end_of_phasesRmsVI:
   636                           	opt stack 0
   637  001FE3                     _phasesPower2:
   638                           	opt stack 0
   639  001FE3  E8                 	db	low _fhPower2
   640  001FE4  09                 	db	high _fhPower2
   641  001FE5  2E                 	db	low _phPower2
   642  001FE6  09                 	db	high _phPower2
   643  001FE7  D2                 	db	low _exitPower2
   644  001FE8  09                 	db	high _exitPower2
   645  001FE9                     __end_of_phasesPower2:
   646                           	opt stack 0
   647  001FE9                     _phasesMainMenu:
   648                           	opt stack 0
   649  001FE9  6C                 	db	low _initialLoad
   650  001FEA  0A                 	db	high _initialLoad
   651  001FEB  BC                 	db	low _generalView
   652  001FEC  0A                 	db	high _generalView
   653  001FED  CE                 	db	low _viewMenu
   654  001FEE  0A                 	db	high _viewMenu
   655  001FEF                     __end_of_phasesMainMenu:
   656                           	opt stack 0
   657  001FEF                     _phasesTemperature:
   658                           	opt stack 0
   659  001FEF  E6                 	db	low _showTemperature
   660  001FF0  08                 	db	high _showTemperature
   661  001FF1  A6                 	db	low _exitTemperature
   662  001FF2  09                 	db	high _exitTemperature
   663  001FF3                     __end_of_phasesTemperature:
   664                           	opt stack 0
   665  001FF3                     _phasesFrequency:
   666                           	opt stack 0
   667  001FF3  76                 	db	low _showFrequency
   668  001FF4  09                 	db	high _showFrequency
   669  001FF5  82                 	db	low _exitFrequency
   670  001FF6  0A                 	db	high _exitFrequency
   671  001FF7                     __end_of_phasesFrequency:
   672                           	opt stack 0
   673  001FF7                     _phasesPowerFactor:
   674                           	opt stack 0
   675  001FF7  AA                 	db	low _phPowerFactor
   676  001FF8  0A                 	db	high _phPowerFactor
   677  001FF9  98                 	db	low _exitPowerFactor
   678  001FFA  0A                 	db	high _exitPowerFactor
   679  001FFB                     __end_of_phasesPowerFactor:
   680                           	opt stack 0
   681  001FFB                     _SPI_Config:
   682                           	opt stack 0
   683  001FFB  00                 	db	0
   684  001FFC  00                 	db	0
   685  001FFD  00                 	db	0
   686  001FFE                     __end_of_SPI_Config:
   687                           	opt stack 0
   688  0000                     _TXREG	set	4013
   689  0000                     _SPBRG	set	4015
   690  0000                     _BAUDCTLbits	set	4010
   691  0000                     _RCSTAbits	set	4011
   692  0000                     _TXSTAbits	set	4012
   693  0000                     _SSPBUF	set	4041
   694  0000                     _TRISCbits	set	3988
   695  0000                     _SSPSTATbits	set	4039
   696  0000                     _SSPCONbits	set	4038
   697  0000                     _SSPCON	set	4038
   698  0000                     _SSPSTAT	set	4039
   699  0000                     _PORTC	set	3970
   700  0000                     _PORTB	set	3969
   701  0000                     _PORTA	set	3968
   702  0000                     _ANSEL0	set	4024
   703  0000                     _TRISC	set	3988
   704  0000                     _TRISB	set	3987
   705  0000                     _TRISA	set	3986
   706  0000                     _OSCCON	set	4051
   707  0000                     _GIE	set	32663
   708  0000                     _INT0IE	set	32660
   709  0000                     _INT0IF	set	32657
   710  001FFE  00                 	db	0	; dummy byte at the end
   711  0000                     
   712                           ; #config settings
   713                           
   714                           	psect	cinit
   715  000880                     __pcinit:
   716                           	opt stack 0
   717  000880                     start_initialization:
   718                           	opt stack 0
   719  000880                     __initialization:
   720                           	opt stack 0
   721                           
   722                           ; Clear objects allocated to BANK0 (36 bytes)
   723  000880  EE00  F060         	lfsr	0,__pbssBANK0
   724  000884  0E24               	movlw	36
   725  000886                     clear_0:
   726  000886  6AEE               	clrf	postinc0,c
   727  000888  06E8               	decf	wreg,f,c
   728  00088A  E1FD               	bnz	clear_0
   729                           
   730                           ; Clear objects allocated to COMRAM (59 bytes)
   731  00088C  EE00  F001         	lfsr	0,__pbssCOMRAM
   732  000890  0E3B               	movlw	59
   733  000892                     clear_1:
   734  000892  6AEE               	clrf	postinc0,c
   735  000894  06E8               	decf	wreg,f,c
   736  000896  E1FD               	bnz	clear_1
   737  000898                     end_of_initialization:
   738                           	opt stack 0
   739  000898                     __end_of__initialization:
   740                           	opt stack 0
   741  000898  904E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   742  00089A  924E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   743  00089C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   744  00089E  6EF8               	movwf	tblptru,c
   745  0008A0  0100               	movlb	0
   746  0008A2  EFC6  F001         	goto	_main	;jump to C main() function
   747                           tblptru	equ	0xFF8
   748                           postinc0	equ	0xFEE
   749                           wreg	equ	0xFE8
   750                           
   751                           	psect	bssCOMRAM
   752  000001                     __pbssCOMRAM:
   753                           	opt stack 0
   754  000001                     expBASE10@value:
   755                           	opt stack 0
   756  000001                     	ds	4
   757  000005                     fhPower2@currentPower2_1:
   758                           	opt stack 0
   759  000005                     	ds	3
   760  000008                     exitPower1@currentPower1_4:
   761                           	opt stack 0
   762  000008                     	ds	3
   763  00000B                     vectorPower1@currentPower1_3:
   764                           	opt stack 0
   765  00000B                     	ds	3
   766  00000E                     phPower1@currentPower1_2:
   767                           	opt stack 0
   768  00000E                     	ds	3
   769  000011                     typesPower1@currentPower1_1:
   770                           	opt stack 0
   771  000011                     	ds	3
   772  000014                     stateTemperature@phaseTemperature:
   773                           	opt stack 0
   774  000014                     	ds	3
   775  000017                     stateFrequency@phaseFrequency:
   776                           	opt stack 0
   777  000017                     	ds	3
   778  00001A                     statePhaseAngle@phasePhaseAngle:
   779                           	opt stack 0
   780  00001A                     	ds	3
   781  00001D                     stateRmsVI@phaseRmsVI:
   782                           	opt stack 0
   783  00001D                     	ds	3
   784  000020                     statePower2@phasePower2:
   785                           	opt stack 0
   786  000020                     	ds	3
   787  000023                     statePower1@phasePower1:
   788                           	opt stack 0
   789  000023                     	ds	3
   790  000026                     exitPowerFactor@currentPowerFactor2:
   791                           	opt stack 0
   792  000026                     	ds	2
   793  000028                     phPowerFactor@currentPowerFactor1:
   794                           	opt stack 0
   795  000028                     	ds	2
   796  00002A                     viewMenu@currentMainMenu3:
   797                           	opt stack 0
   798  00002A                     	ds	2
   799  00002C                     generalView@currentMainMenu2:
   800                           	opt stack 0
   801  00002C                     	ds	2
   802  00002E                     initialLoad@currentMainMenu1:
   803                           	opt stack 0
   804  00002E                     	ds	2
   805  000030                     statePowerFactor@phasePowerFactor:
   806                           	opt stack 0
   807  000030                     	ds	2
   808  000032                     stateMainMenu@phaseMain:
   809                           	opt stack 0
   810  000032                     	ds	2
   811  000034                     stateTemperature@phase:
   812                           	opt stack 0
   813  000034                     	ds	1
   814  000035                     stateFrequency@phase:
   815                           	opt stack 0
   816  000035                     	ds	1
   817  000036                     statePhaseAngle@phase:
   818                           	opt stack 0
   819  000036                     	ds	1
   820  000037                     statePowerFactor@phase:
   821                           	opt stack 0
   822  000037                     	ds	1
   823  000038                     stateRmsVI@phase:
   824                           	opt stack 0
   825  000038                     	ds	1
   826  000039                     statePower2@phase:
   827                           	opt stack 0
   828  000039                     	ds	1
   829  00003A                     statePower1@phase:
   830                           	opt stack 0
   831  00003A                     	ds	1
   832  00003B                     stateMainMenu@phase:
   833                           	opt stack 0
   834  00003B                     	ds	1
   835                           tblptru	equ	0xFF8
   836                           postinc0	equ	0xFEE
   837                           wreg	equ	0xFE8
   838                           
   839                           	psect	bssBANK0
   840  000060                     __pbssBANK0:
   841                           	opt stack 0
   842  000060                     exitTemperature@currentTemperature2:
   843                           	opt stack 0
   844  000060                     	ds	3
   845  000063                     showTemperature@currentTemperature1:
   846                           	opt stack 0
   847  000063                     	ds	3
   848  000066                     exitFrequency@currentFrequency2:
   849                           	opt stack 0
   850  000066                     	ds	3
   851  000069                     showFrequency@currentFrequency1:
   852                           	opt stack 0
   853  000069                     	ds	3
   854  00006C                     exitPhaseAngle@currentPhaseAngle3:
   855                           	opt stack 0
   856  00006C                     	ds	3
   857  00006F                     viPhaseAngle@currentPhaseAngle2:
   858                           	opt stack 0
   859  00006F                     	ds	3
   860  000072                     phPhaseAngle@currentPhaseAngle1:
   861                           	opt stack 0
   862  000072                     	ds	3
   863  000075                     exitRmsVI@currentRms3:
   864                           	opt stack 0
   865  000075                     	ds	3
   866  000078                     neutralRmsVI@currentRms2:
   867                           	opt stack 0
   868  000078                     	ds	3
   869  00007B                     phRmsVI@currentRms1:
   870                           	opt stack 0
   871  00007B                     	ds	3
   872  00007E                     exitPower2@currentPower2_3:
   873                           	opt stack 0
   874  00007E                     	ds	3
   875  000081                     phPower2@currentPower2_2:
   876                           	opt stack 0
   877  000081                     	ds	3
   878                           tblptru	equ	0xFF8
   879                           postinc0	equ	0xFEE
   880                           wreg	equ	0xFE8
   881                           
   882                           	psect	cstackBANK0
   883  000084                     __pcstackBANK0:
   884                           	opt stack 0
   885  000084                     ?_phPowerFactor:
   886                           	opt stack 0
   887  000084                     ?_exitPowerFactor:
   888                           	opt stack 0
   889  000084                     ?_typesPower1:
   890                           	opt stack 0
   891  000084                     ?_phPower1:
   892                           	opt stack 0
   893  000084                     ?_vectorPower1:
   894                           	opt stack 0
   895  000084                     ?_exitPower1:
   896                           	opt stack 0
   897  000084                     ?_fhPower2:
   898                           	opt stack 0
   899  000084                     ?_phPower2:
   900                           	opt stack 0
   901  000084                     ?_exitPower2:
   902                           	opt stack 0
   903  000084                     ?_phRmsVI:
   904                           	opt stack 0
   905  000084                     ?_neutralRmsVI:
   906                           	opt stack 0
   907  000084                     ?_exitRmsVI:
   908                           	opt stack 0
   909  000084                     ?_phPhaseAngle:
   910                           	opt stack 0
   911  000084                     ?_viPhaseAngle:
   912                           	opt stack 0
   913  000084                     ?_exitPhaseAngle:
   914                           	opt stack 0
   915  000084                     ?_showFrequency:
   916                           	opt stack 0
   917  000084                     ?_exitFrequency:
   918                           	opt stack 0
   919  000084                     ?_showTemperature:
   920                           	opt stack 0
   921  000084                     ?_exitTemperature:
   922                           	opt stack 0
   923  000084                     GPIO_sourceClock@clk:
   924                           	opt stack 0
   925  000084                     GPIO_dataDirectionPIN@pin:
   926                           	opt stack 0
   927  000084                     GPIO_setPIN@pin:
   928                           	opt stack 0
   929  000084                     GPIO_clearPIN@pin:
   930                           	opt stack 0
   931  000084                     SPI_enableClock@cpol:
   932                           	opt stack 0
   933  000084                     SPI_enablePins@serial:
   934                           	opt stack 0
   935  000084                     SPI_write@success:
   936                           	opt stack 0
   937  000084                     phPowerFactor@data:
   938                           	opt stack 0
   939  000084                     exitPowerFactor@data:
   940                           	opt stack 0
   941  000084                     typesPower1@data:
   942                           	opt stack 0
   943  000084                     phPower1@data:
   944                           	opt stack 0
   945  000084                     vectorPower1@data:
   946                           	opt stack 0
   947  000084                     exitPower1@data:
   948                           	opt stack 0
   949  000084                     fhPower2@data:
   950                           	opt stack 0
   951  000084                     phPower2@data:
   952                           	opt stack 0
   953  000084                     exitPower2@data:
   954                           	opt stack 0
   955  000084                     phRmsVI@data:
   956                           	opt stack 0
   957  000084                     neutralRmsVI@data:
   958                           	opt stack 0
   959  000084                     exitRmsVI@data:
   960                           	opt stack 0
   961  000084                     phPhaseAngle@data:
   962                           	opt stack 0
   963  000084                     viPhaseAngle@data:
   964                           	opt stack 0
   965  000084                     exitPhaseAngle@data:
   966                           	opt stack 0
   967  000084                     showFrequency@data:
   968                           	opt stack 0
   969  000084                     exitFrequency@data:
   970                           	opt stack 0
   971  000084                     showTemperature@data:
   972                           	opt stack 0
   973  000084                     exitTemperature@data:
   974                           	opt stack 0
   975  000084                     LCD_delay@counter:
   976                           	opt stack 0
   977                           
   978                           ; 4 bytes @ 0x0
   979  000084                     	ds	1
   980  000085                     ??_GPIO_setPIN:
   981  000085                     ??_GPIO_clearPIN:
   982  000085                     GPIO_dataDirectionPIN@state:
   983                           	opt stack 0
   984  000085                     SPI_enableClock@phase:
   985                           	opt stack 0
   986  000085                     SPI_write@data:
   987                           	opt stack 0
   988                           
   989                           ; 1 bytes @ 0x1
   990  000085                     	ds	1
   991  000086                     ??_GPIO_dataDirectionPIN:
   992  000086                     SPI_init@SPI_Config:
   993                           	opt stack 0
   994  000086                     statePowerFactor@powerFactorFunctions:
   995                           	opt stack 0
   996                           
   997                           ; 2 bytes @ 0x2
   998  000086                     	ds	1
   999  000087                     GPIO_setPIN@portName:
  1000                           	opt stack 0
  1001  000087                     GPIO_clearPIN@portName:
  1002                           	opt stack 0
  1003  000087                     statePower1@power1Functions:
  1004                           	opt stack 0
  1005  000087                     statePower2@power2Functions:
  1006                           	opt stack 0
  1007  000087                     stateRmsVI@rmsVIFunctions:
  1008                           	opt stack 0
  1009  000087                     statePhaseAngle@phaseAngleFunctions:
  1010                           	opt stack 0
  1011  000087                     stateFrequency@frequencyFunctions:
  1012                           	opt stack 0
  1013  000087                     stateTemperature@temperatureFunctions:
  1014                           	opt stack 0
  1015                           
  1016                           ; 2 bytes @ 0x3
  1017  000087                     	ds	1
  1018  000088                     ??_SPI_init:
  1019  000088                     GPIO_dataDirectionPIN@portName:
  1020                           	opt stack 0
  1021  000088                     LCDNokia_writeByte@data:
  1022                           	opt stack 0
  1023                           
  1024                           ; 1 bytes @ 0x4
  1025  000088                     	ds	1
  1026  000089                     LCDNokia_writeByte@DataOrCmd:
  1027                           	opt stack 0
  1028  000089                     UART_init@baudRate:
  1029                           	opt stack 0
  1030                           
  1031                           ; 2 bytes @ 0x5
  1032  000089                     	ds	1
  1033  00008A                     LCDNokia_gotoXY@y:
  1034                           	opt stack 0
  1035                           
  1036                           ; 1 bytes @ 0x6
  1037  00008A                     	ds	1
  1038  00008B                     ??_UART_init:
  1039  00008B                     LCDNokia_gotoXY@x:
  1040                           	opt stack 0
  1041                           
  1042                           ; 1 bytes @ 0x7
  1043  00008B                     	ds	1
  1044  00008C                     LCDNokia_clear@index:
  1045                           	opt stack 0
  1046                           
  1047                           ; 2 bytes @ 0x8
  1048  00008C                     	ds	2
  1049  00008E                     ?_initialLoad:
  1050                           	opt stack 0
  1051  00008E                     ?_generalView:
  1052                           	opt stack 0
  1053  00008E                     ?_viewMenu:
  1054                           	opt stack 0
  1055  00008E                     initialLoad@data:
  1056                           	opt stack 0
  1057  00008E                     generalView@data:
  1058                           	opt stack 0
  1059  00008E                     viewMenu@data:
  1060                           	opt stack 0
  1061                           
  1062                           ; 2 bytes @ 0xA
  1063  00008E                     	ds	2
  1064  000090                     stateMainMenu@mainMenuFunctions:
  1065                           	opt stack 0
  1066                           
  1067                           ; 2 bytes @ 0xC
  1068  000090                     	ds	2
  1069  000092                     main@mainFunctions:
  1070                           	opt stack 0
  1071                           
  1072                           ; 2 bytes @ 0xE
  1073  000092                     	ds	2
  1074  000094                     main@currentState:
  1075                           	opt stack 0
  1076                           
  1077                           ; 1 bytes @ 0x10
  1078  000094                     	ds	1
  1079                           tblptru	equ	0xFF8
  1080                           postinc0	equ	0xFEE
  1081                           wreg	equ	0xFE8
  1082                           
  1083                           	psect	cstackCOMRAM
  1084  00003C                     __pcstackCOMRAM:
  1085                           	opt stack 0
  1086  00003C                     ??_Button1:
  1087                           
  1088                           ; 1 bytes @ 0x0
  1089  00003C                     	ds	18
  1090                           tblptru	equ	0xFF8
  1091                           postinc0	equ	0xFEE
  1092                           wreg	equ	0xFE8
  1093                           
  1094 ;;
  1095 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1096 ;;
  1097 ;; *************** function _main *****************
  1098 ;; Defined at:
  1099 ;;		line 26 in file "main.c"
  1100 ;; Parameters:    Size  Location     Type
  1101 ;;		None
  1102 ;; Auto vars:     Size  Location     Type
  1103 ;;  mainFunction    2   14[BANK0 ] PTR FTN()enum E3172
  1104 ;;		 -> stateTemperature(1), stateFrequency(1), statePhaseAngle(1), statePowerFactor(1), 
  1105 ;;		 -> stateRmsVI(1), statePower2(1), statePower1(1), stateMainMenu(1), 
  1106 ;;  currentState    1   16[BANK0 ] enum E3172
  1107 ;; Return value:  Size  Location     Type
  1108 ;;                  1    wreg      void 
  1109 ;; Registers used:
  1110 ;;		wreg, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1111 ;; Tracked objects:
  1112 ;;		On entry : 0/0
  1113 ;;		On exit  : 0/0
  1114 ;;		Unchanged: 0/0
  1115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1116 ;;      Params:         0       0       0       0
  1117 ;;      Locals:         0       3       0       0
  1118 ;;      Temps:          0       0       0       0
  1119 ;;      Totals:         0       3       0       0
  1120 ;;Total ram usage:        3 bytes
  1121 ;; Hardware stack levels required when called:    7
  1122 ;; This function calls:
  1123 ;;		_ButtonInt_config
  1124 ;;		_GPIO_sourceClock
  1125 ;;		_LCDNokia_clear
  1126 ;;		_LCDNokia_init
  1127 ;;		_SPI_init
  1128 ;;		_UART_init
  1129 ;;		_stateFrequency
  1130 ;;		_stateMainMenu
  1131 ;;		_statePhaseAngle
  1132 ;;		_statePower1
  1133 ;;		_statePower2
  1134 ;;		_statePowerFactor
  1135 ;;		_stateRmsVI
  1136 ;;		_stateTemperature
  1137 ;; This function is called by:
  1138 ;;		Startup code after reset
  1139 ;; This function uses a non-reentrant model
  1140 ;;
  1141                           
  1142                           	psect	text0
  1143  00038C                     __ptext0:
  1144                           	opt stack 0
  1145  00038C                     _main:
  1146                           	opt stack 24
  1147                           
  1148                           ;main.c: 29: States_MenuType currentState = MAIN_MENU;
  1149                           
  1150                           ;incstack = 0
  1151  00038C  0E00               	movlw	0
  1152  00038E  0100               	movlb	0	; () banked
  1153  000390  6F94               	movwf	main@currentState& (0+255),b
  1154                           
  1155                           ; BSR set to: 0
  1156                           ;main.c: 30: States_MenuType(*mainFunctions)(void);
  1157                           ;main.c: 33: GPIO_sourceClock(CLK_8MHZ);
  1158  000392  0E00               	movlw	0
  1159  000394  ECFE  F001         	call	_GPIO_sourceClock
  1160                           
  1161                           ;main.c: 36: SPI_init(&SPI_Config);
  1162  000398  0EFB               	movlw	low _SPI_Config
  1163  00039A  0100               	movlb	0	; () banked
  1164  00039C  6F86               	movwf	SPI_init@SPI_Config& (0+255),b
  1165  00039E  0E1F               	movlw	high _SPI_Config
  1166  0003A0  6F87               	movwf	(SPI_init@SPI_Config+1)& (0+255),b
  1167  0003A2  EC90  F003         	call	_SPI_init	;wreg free
  1168                           
  1169                           ;main.c: 37: LCDNokia_init();
  1170  0003A6  ECCB  F000         	call	_LCDNokia_init	;wreg free
  1171                           
  1172                           ;main.c: 38: LCDNokia_clear();
  1173  0003AA  ECD7  F003         	call	_LCDNokia_clear	;wreg free
  1174                           
  1175                           ;main.c: 39: UART_init(BD_9600);
  1176  0003AE  0E25               	movlw	37
  1177  0003B0  0100               	movlb	0	; () banked
  1178  0003B2  6F8A               	movwf	(UART_init@baudRate+1)& (0+255),b
  1179  0003B4  0E80               	movlw	128
  1180  0003B6  6F89               	movwf	UART_init@baudRate& (0+255),b
  1181  0003B8  EC0E  F001         	call	_UART_init	;wreg free
  1182                           
  1183                           ;main.c: 40: ButtonInt_config();
  1184  0003BC  ECC7  F004         	call	_ButtonInt_config	;wreg free
  1185  0003C0                     
  1186                           ;main.c: 43: {
  1187                           ;main.c: 45: mainFunctions = StateProgram[currentState].stateFunction;
  1188  0003C0  0100               	movlb	0	; () banked
  1189  0003C2  5194               	movf	main@currentState& (0+255),w,b
  1190  0003C4  0D02               	mullw	2
  1191  0003C6  0EBF               	movlw	low _StateProgram
  1192  0003C8  24F3               	addwf	prodl,w,c
  1193  0003CA  6EF6               	movwf	tblptrl,c
  1194  0003CC  0E1F               	movlw	high _StateProgram
  1195  0003CE  20F4               	addwfc	prodh,w,c
  1196  0003D0  6EF7               	movwf	tblptrh,c
  1197  0003D2                     	if	0	;There are less than 3 active tblptr bytes
  1198  0003D2                     	endif
  1199  0003D2  0009               	tblrd		*+
  1200  0003D4  CFF5 F092          	movff	tablat,main@mainFunctions
  1201  0003D8  000A               	tblrd		*-
  1202  0003DA  CFF5 F093          	movff	tablat,main@mainFunctions+1
  1203                           
  1204                           ; BSR set to: 0
  1205                           ;main.c: 46: currentState = mainFunctions();
  1206  0003DE  D801               	call	u1278
  1207  0003E0  D00A               	goto	u1279
  1208  0003E2                     u1278:
  1209  0003E2  0005               	push	
  1210  0003E4  6EFA               	movwf	pclath,c
  1211  0003E6  5192               	movf	main@mainFunctions& (0+255),w,b
  1212  0003E8  6EFD               	movwf	tosl,c
  1213  0003EA  5193               	movf	(main@mainFunctions+1)& (0+255),w,b
  1214  0003EC  6EFE               	movwf	tosh,c
  1215  0003EE  50F8               	movf	tblptru,w,c
  1216  0003F0  6EFF               	movwf	tosu,c
  1217  0003F2  50FA               	movf	pclath,w,c
  1218  0003F4  0012               	return		;indir
  1219  0003F6                     u1279:
  1220  0003F6  0100               	movlb	0	; () banked
  1221  0003F8  6F94               	movwf	main@currentState& (0+255),b
  1222                           
  1223                           ;main.c: 47: }
  1224  0003FA  D7E2               	goto	l37
  1225  0003FC                     __end_of_main:
  1226                           	opt stack 0
  1227                           tosu	equ	0xFFF
  1228                           tosh	equ	0xFFE
  1229                           tosl	equ	0xFFD
  1230                           pclath	equ	0xFFA
  1231                           tblptru	equ	0xFF8
  1232                           tblptrh	equ	0xFF7
  1233                           tblptrl	equ	0xFF6
  1234                           tablat	equ	0xFF5
  1235                           prodh	equ	0xFF4
  1236                           prodl	equ	0xFF3
  1237                           postinc0	equ	0xFEE
  1238                           wreg	equ	0xFE8
  1239                           
  1240 ;; *************** function _stateFrequency *****************
  1241 ;; Defined at:
  1242 ;;		line 169 in file "States.c"
  1243 ;; Parameters:    Size  Location     Type
  1244 ;;		None
  1245 ;; Auto vars:     Size  Location     Type
  1246 ;;  frequencyFun    2    3[BANK0 ] PTR FTN(struct .,)struct
  1247 ;;		 -> exitFrequency(3), showFrequency(3), 
  1248 ;; Return value:  Size  Location     Type
  1249 ;;                  1    wreg      enum E3172
  1250 ;; Registers used:
  1251 ;;		wreg, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1252 ;; Tracked objects:
  1253 ;;		On entry : 0/0
  1254 ;;		On exit  : 0/0
  1255 ;;		Unchanged: 0/0
  1256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1257 ;;      Params:         0       0       0       0
  1258 ;;      Locals:         0       2       0       0
  1259 ;;      Temps:          0       0       0       0
  1260 ;;      Totals:         0       2       0       0
  1261 ;;Total ram usage:        2 bytes
  1262 ;; Hardware stack levels used:    1
  1263 ;; Hardware stack levels required when called:    2
  1264 ;; This function calls:
  1265 ;;		_exitFrequency
  1266 ;;		_showFrequency
  1267 ;; This function is called by:
  1268 ;;		_main
  1269 ;; This function uses a non-reentrant model
  1270 ;;
  1271                           
  1272                           	psect	text1
  1273  000460                     __ptext1:
  1274                           	opt stack 0
  1275  000460                     _stateFrequency:
  1276                           	opt stack 28
  1277                           
  1278                           ;States.c: 172: static PhaseStateFrequency_Type phase = SHOW_FREQUENCY;
  1279                           ;States.c: 173: static PhaseFrequency_Type phaseFrequency;
  1280                           ;States.c: 174: PhaseFrequency_Type(*frequencyFunctions)(PhaseFrequency_Type);
  1281                           ;States.c: 175: phaseFrequency.stateMain = FREQUENCY;
  1282                           
  1283                           ; BSR set to: 0
  1284                           ;incstack = 0
  1285  000460  0E06               	movlw	6
  1286  000462  6E19               	movwf	stateFrequency@phaseFrequency+2,c
  1287                           
  1288                           ;States.c: 178: frequencyFunctions = phasesFrequency[phase].PhaseFrequency;
  1289  000464  5035               	movf	stateFrequency@phase,w,c
  1290  000466  0D02               	mullw	2
  1291  000468  0EF3               	movlw	low _phasesFrequency
  1292  00046A  24F3               	addwf	prodl,w,c
  1293  00046C  6EF6               	movwf	tblptrl,c
  1294  00046E  0E1F               	movlw	high _phasesFrequency
  1295  000470  20F4               	addwfc	prodh,w,c
  1296  000472  6EF7               	movwf	tblptrh,c
  1297  000474                     	if	0	;There are less than 3 active tblptr bytes
  1298  000474                     	endif
  1299  000474  0009               	tblrd		*+
  1300  000476  CFF5 F087          	movff	tablat,stateFrequency@frequencyFunctions
  1301  00047A  000A               	tblrd		*-
  1302  00047C  CFF5 F088          	movff	tablat,stateFrequency@frequencyFunctions+1
  1303                           
  1304                           ;States.c: 179: phaseFrequency = frequencyFunctions(phaseFrequency);
  1305  000480  C017  F084         	movff	stateFrequency@phaseFrequency,exitFrequency@data
  1306  000484  C018  F085         	movff	stateFrequency@phaseFrequency+1,exitFrequency@data+1
  1307  000488  C019  F086         	movff	stateFrequency@phaseFrequency+2,exitFrequency@data+2
  1308  00048C  D801               	call	u1218
  1309  00048E  D00B               	goto	u1219
  1310  000490                     u1218:
  1311  000490  0005               	push	
  1312  000492  0100               	movlb	0	; () banked
  1313  000494  6EFA               	movwf	pclath,c
  1314  000496  5187               	movf	stateFrequency@frequencyFunctions& (0+255),w,b
  1315  000498  6EFD               	movwf	tosl,c
  1316  00049A  5188               	movf	(stateFrequency@frequencyFunctions+1)& (0+255),w,b
  1317  00049C  6EFE               	movwf	tosh,c
  1318  00049E  50F8               	movf	tblptru,w,c
  1319  0004A0  6EFF               	movwf	tosu,c
  1320  0004A2  50FA               	movf	pclath,w,c
  1321  0004A4  0012               	return		;indir
  1322  0004A6                     u1219:
  1323  0004A6  C084  F017         	movff	?_exitFrequency,stateFrequency@phaseFrequency
  1324  0004AA  C085  F018         	movff	?_exitFrequency+1,stateFrequency@phaseFrequency+1
  1325  0004AE  C086  F019         	movff	?_exitFrequency+2,stateFrequency@phaseFrequency+2
  1326                           
  1327                           ;States.c: 182: phase = phaseFrequency.phaseState;
  1328  0004B2  C018  F035         	movff	stateFrequency@phaseFrequency+1,stateFrequency@phase
  1329                           
  1330                           ;States.c: 183: return (phaseFrequency.stateMain);
  1331  0004B6  5019               	movf	stateFrequency@phaseFrequency+2,w,c
  1332  0004B8  0012               	return	
  1333  0004BA                     __end_of_stateFrequency:
  1334                           	opt stack 0
  1335                           tosu	equ	0xFFF
  1336                           tosh	equ	0xFFE
  1337                           tosl	equ	0xFFD
  1338                           pclath	equ	0xFFA
  1339                           tblptru	equ	0xFF8
  1340                           tblptrh	equ	0xFF7
  1341                           tblptrl	equ	0xFF6
  1342                           tablat	equ	0xFF5
  1343                           prodh	equ	0xFF4
  1344                           prodl	equ	0xFF3
  1345                           postinc0	equ	0xFEE
  1346                           wreg	equ	0xFE8
  1347                           
  1348 ;; *************** function _statePhaseAngle *****************
  1349 ;; Defined at:
  1350 ;;		line 152 in file "States.c"
  1351 ;; Parameters:    Size  Location     Type
  1352 ;;		None
  1353 ;; Auto vars:     Size  Location     Type
  1354 ;;  phaseAngleFu    2    3[BANK0 ] PTR FTN(struct .,)struct
  1355 ;;		 -> exitPhaseAngle(3), viPhaseAngle(3), phPhaseAngle(3), 
  1356 ;; Return value:  Size  Location     Type
  1357 ;;                  1    wreg      enum E3172
  1358 ;; Registers used:
  1359 ;;		wreg, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1360 ;; Tracked objects:
  1361 ;;		On entry : 0/0
  1362 ;;		On exit  : 0/0
  1363 ;;		Unchanged: 0/0
  1364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1365 ;;      Params:         0       0       0       0
  1366 ;;      Locals:         0       2       0       0
  1367 ;;      Temps:          0       0       0       0
  1368 ;;      Totals:         0       2       0       0
  1369 ;;Total ram usage:        2 bytes
  1370 ;; Hardware stack levels used:    1
  1371 ;; Hardware stack levels required when called:    2
  1372 ;; This function calls:
  1373 ;;		_exitPhaseAngle
  1374 ;;		_phPhaseAngle
  1375 ;;		_viPhaseAngle
  1376 ;; This function is called by:
  1377 ;;		_main
  1378 ;; This function uses a non-reentrant model
  1379 ;;
  1380                           
  1381                           	psect	text2
  1382  0004BA                     __ptext2:
  1383                           	opt stack 0
  1384  0004BA                     _statePhaseAngle:
  1385                           	opt stack 28
  1386                           
  1387                           ;States.c: 155: static PhaseStatePhaseAngle_Type phase = PHASES_PA;
  1388                           ;States.c: 156: static PhasePhaseAngle_Type phasePhaseAngle;
  1389                           ;States.c: 157: PhasePhaseAngle_Type(*phaseAngleFunctions)(PhasePhaseAngle_Type);
  1390                           ;States.c: 158: phasePhaseAngle.stateMain = PHASE_ANGLE;
  1391                           
  1392                           ;incstack = 0
  1393  0004BA  0E05               	movlw	5
  1394  0004BC  6E1C               	movwf	statePhaseAngle@phasePhaseAngle+2,c
  1395                           
  1396                           ;States.c: 161: phaseAngleFunctions = phasesPhaseAngle[phase].PhasePhaseAngle;
  1397  0004BE  5036               	movf	statePhaseAngle@phase,w,c
  1398  0004C0  0D02               	mullw	2
  1399  0004C2  0ED7               	movlw	low _phasesPhaseAngle
  1400  0004C4  24F3               	addwf	prodl,w,c
  1401  0004C6  6EF6               	movwf	tblptrl,c
  1402  0004C8  0E1F               	movlw	high _phasesPhaseAngle
  1403  0004CA  20F4               	addwfc	prodh,w,c
  1404  0004CC  6EF7               	movwf	tblptrh,c
  1405  0004CE                     	if	0	;There are less than 3 active tblptr bytes
  1406  0004CE                     	endif
  1407  0004CE  0009               	tblrd		*+
  1408  0004D0  CFF5 F087          	movff	tablat,statePhaseAngle@phaseAngleFunctions
  1409  0004D4  000A               	tblrd		*-
  1410  0004D6  CFF5 F088          	movff	tablat,statePhaseAngle@phaseAngleFunctions+1
  1411                           
  1412                           ;States.c: 162: phasePhaseAngle = phaseAngleFunctions(phasePhaseAngle);
  1413  0004DA  C01A  F084         	movff	statePhaseAngle@phasePhaseAngle,exitPhaseAngle@data
  1414  0004DE  C01B  F085         	movff	statePhaseAngle@phasePhaseAngle+1,exitPhaseAngle@data+1
  1415  0004E2  C01C  F086         	movff	statePhaseAngle@phasePhaseAngle+2,exitPhaseAngle@data+2
  1416  0004E6  D801               	call	u1208
  1417  0004E8  D00B               	goto	u1209
  1418  0004EA                     u1208:
  1419  0004EA  0005               	push	
  1420  0004EC  0100               	movlb	0	; () banked
  1421  0004EE  6EFA               	movwf	pclath,c
  1422  0004F0  5187               	movf	statePhaseAngle@phaseAngleFunctions& (0+255),w,b
  1423  0004F2  6EFD               	movwf	tosl,c
  1424  0004F4  5188               	movf	(statePhaseAngle@phaseAngleFunctions+1)& (0+255),w,b
  1425  0004F6  6EFE               	movwf	tosh,c
  1426  0004F8  50F8               	movf	tblptru,w,c
  1427  0004FA  6EFF               	movwf	tosu,c
  1428  0004FC  50FA               	movf	pclath,w,c
  1429  0004FE  0012               	return		;indir
  1430  000500                     u1209:
  1431  000500  C084  F01A         	movff	?_exitPhaseAngle,statePhaseAngle@phasePhaseAngle
  1432  000504  C085  F01B         	movff	?_exitPhaseAngle+1,statePhaseAngle@phasePhaseAngle+1
  1433  000508  C086  F01C         	movff	?_exitPhaseAngle+2,statePhaseAngle@phasePhaseAngle+2
  1434                           
  1435                           ;States.c: 165: phase = phasePhaseAngle.phaseState;
  1436  00050C  C01B  F036         	movff	statePhaseAngle@phasePhaseAngle+1,statePhaseAngle@phase
  1437                           
  1438                           ;States.c: 166: return (phasePhaseAngle.stateMain);
  1439  000510  501C               	movf	statePhaseAngle@phasePhaseAngle+2,w,c
  1440  000512  0012               	return	
  1441  000514                     __end_of_statePhaseAngle:
  1442                           	opt stack 0
  1443                           tosu	equ	0xFFF
  1444                           tosh	equ	0xFFE
  1445                           tosl	equ	0xFFD
  1446                           pclath	equ	0xFFA
  1447                           tblptru	equ	0xFF8
  1448                           tblptrh	equ	0xFF7
  1449                           tblptrl	equ	0xFF6
  1450                           tablat	equ	0xFF5
  1451                           prodh	equ	0xFF4
  1452                           prodl	equ	0xFF3
  1453                           postinc0	equ	0xFEE
  1454                           wreg	equ	0xFE8
  1455                           
  1456 ;; *************** function _statePowerFactor *****************
  1457 ;; Defined at:
  1458 ;;		line 135 in file "States.c"
  1459 ;; Parameters:    Size  Location     Type
  1460 ;;		None
  1461 ;; Auto vars:     Size  Location     Type
  1462 ;;  powerFactorF    2    2[BANK0 ] PTR FTN(struct .,)struct
  1463 ;;		 -> exitPowerFactor(2), phPowerFactor(2), 
  1464 ;; Return value:  Size  Location     Type
  1465 ;;                  1    wreg      enum E3172
  1466 ;; Registers used:
  1467 ;;		wreg, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1468 ;; Tracked objects:
  1469 ;;		On entry : 0/0
  1470 ;;		On exit  : 0/0
  1471 ;;		Unchanged: 0/0
  1472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1473 ;;      Params:         0       0       0       0
  1474 ;;      Locals:         0       2       0       0
  1475 ;;      Temps:          0       0       0       0
  1476 ;;      Totals:         0       2       0       0
  1477 ;;Total ram usage:        2 bytes
  1478 ;; Hardware stack levels used:    1
  1479 ;; Hardware stack levels required when called:    2
  1480 ;; This function calls:
  1481 ;;		_exitPowerFactor
  1482 ;;		_phPowerFactor
  1483 ;; This function is called by:
  1484 ;;		_main
  1485 ;; This function uses a non-reentrant model
  1486 ;;
  1487                           
  1488                           	psect	text3
  1489  00067C                     __ptext3:
  1490                           	opt stack 0
  1491  00067C                     _statePowerFactor:
  1492                           	opt stack 28
  1493                           
  1494                           ;States.c: 138: static PhaseStatePowerFactor_Type phase = PHASES_PF;
  1495                           ;States.c: 139: static PhasePowerFactor_Type phasePowerFactor;
  1496                           ;States.c: 140: PhasePowerFactor_Type(*powerFactorFunctions)(PhasePowerFactor_Type);
  1497                           ;States.c: 141: phasePowerFactor.stateMain = POWER_FACTOR;
  1498                           
  1499                           ;incstack = 0
  1500  00067C  0E04               	movlw	4
  1501  00067E  6E31               	movwf	statePowerFactor@phasePowerFactor+1,c
  1502                           
  1503                           ;States.c: 144: powerFactorFunctions = phasesPowerFactor[phase].PhasePowerFactor;
  1504  000680  5037               	movf	statePowerFactor@phase,w,c
  1505  000682  0D02               	mullw	2
  1506  000684  0EF7               	movlw	low _phasesPowerFactor
  1507  000686  24F3               	addwf	prodl,w,c
  1508  000688  6EF6               	movwf	tblptrl,c
  1509  00068A  0E1F               	movlw	high _phasesPowerFactor
  1510  00068C  20F4               	addwfc	prodh,w,c
  1511  00068E  6EF7               	movwf	tblptrh,c
  1512  000690                     	if	0	;There are less than 3 active tblptr bytes
  1513  000690                     	endif
  1514  000690  0009               	tblrd		*+
  1515  000692  CFF5 F086          	movff	tablat,statePowerFactor@powerFactorFunctions
  1516  000696  000A               	tblrd		*-
  1517  000698  CFF5 F087          	movff	tablat,statePowerFactor@powerFactorFunctions+1
  1518                           
  1519                           ;States.c: 145: phasePowerFactor = powerFactorFunctions(phasePowerFactor);
  1520  00069C  C030  F084         	movff	statePowerFactor@phasePowerFactor,exitPowerFactor@data
  1521  0006A0  C031  F085         	movff	statePowerFactor@phasePowerFactor+1,exitPowerFactor@data+1
  1522  0006A4  D801               	call	u1198
  1523  0006A6  D00B               	goto	u1199
  1524  0006A8                     u1198:
  1525  0006A8  0005               	push	
  1526  0006AA  0100               	movlb	0	; () banked
  1527  0006AC  6EFA               	movwf	pclath,c
  1528  0006AE  5186               	movf	statePowerFactor@powerFactorFunctions& (0+255),w,b
  1529  0006B0  6EFD               	movwf	tosl,c
  1530  0006B2  5187               	movf	(statePowerFactor@powerFactorFunctions+1)& (0+255),w,b
  1531  0006B4  6EFE               	movwf	tosh,c
  1532  0006B6  50F8               	movf	tblptru,w,c
  1533  0006B8  6EFF               	movwf	tosu,c
  1534  0006BA  50FA               	movf	pclath,w,c
  1535  0006BC  0012               	return		;indir
  1536  0006BE                     u1199:
  1537  0006BE  C084  F030         	movff	?_exitPowerFactor,statePowerFactor@phasePowerFactor
  1538  0006C2  C085  F031         	movff	?_exitPowerFactor+1,statePowerFactor@phasePowerFactor+1
  1539                           
  1540                           ;States.c: 148: phase = phasePowerFactor.phaseState;
  1541  0006C6  C030  F037         	movff	statePowerFactor@phasePowerFactor,statePowerFactor@phase
  1542                           
  1543                           ;States.c: 149: return (phasePowerFactor.stateMain);
  1544  0006CA  5031               	movf	statePowerFactor@phasePowerFactor+1,w,c
  1545  0006CC  0012               	return	
  1546  0006CE                     __end_of_statePowerFactor:
  1547                           	opt stack 0
  1548                           tosu	equ	0xFFF
  1549                           tosh	equ	0xFFE
  1550                           tosl	equ	0xFFD
  1551                           pclath	equ	0xFFA
  1552                           tblptru	equ	0xFF8
  1553                           tblptrh	equ	0xFF7
  1554                           tblptrl	equ	0xFF6
  1555                           tablat	equ	0xFF5
  1556                           prodh	equ	0xFF4
  1557                           prodl	equ	0xFF3
  1558                           postinc0	equ	0xFEE
  1559                           wreg	equ	0xFE8
  1560                           
  1561 ;; *************** function _stateRmsVI *****************
  1562 ;; Defined at:
  1563 ;;		line 118 in file "States.c"
  1564 ;; Parameters:    Size  Location     Type
  1565 ;;		None
  1566 ;; Auto vars:     Size  Location     Type
  1567 ;;  rmsVIFunctio    2    3[BANK0 ] PTR FTN(struct .,)struct
  1568 ;;		 -> exitRmsVI(3), neutralRmsVI(3), phRmsVI(3), 
  1569 ;; Return value:  Size  Location     Type
  1570 ;;                  1    wreg      enum E3172
  1571 ;; Registers used:
  1572 ;;		wreg, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1573 ;; Tracked objects:
  1574 ;;		On entry : 0/0
  1575 ;;		On exit  : 0/0
  1576 ;;		Unchanged: 0/0
  1577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1578 ;;      Params:         0       0       0       0
  1579 ;;      Locals:         0       2       0       0
  1580 ;;      Temps:          0       0       0       0
  1581 ;;      Totals:         0       2       0       0
  1582 ;;Total ram usage:        2 bytes
  1583 ;; Hardware stack levels used:    1
  1584 ;; Hardware stack levels required when called:    2
  1585 ;; This function calls:
  1586 ;;		_exitRmsVI
  1587 ;;		_neutralRmsVI
  1588 ;;		_phRmsVI
  1589 ;; This function is called by:
  1590 ;;		_main
  1591 ;; This function uses a non-reentrant model
  1592 ;;
  1593                           
  1594                           	psect	text4
  1595  000514                     __ptext4:
  1596                           	opt stack 0
  1597  000514                     _stateRmsVI:
  1598                           	opt stack 28
  1599                           
  1600                           ;States.c: 121: static PhaseStateRmsVI_Type phase = PHASES_RMSVI;
  1601                           ;States.c: 122: static PhaseRmsVI_Type phaseRmsVI;
  1602                           ;States.c: 123: PhaseRmsVI_Type(*rmsVIFunctions)(PhaseRmsVI_Type);
  1603                           ;States.c: 124: phaseRmsVI.stateMain = RMS_VI;
  1604                           
  1605                           ;incstack = 0
  1606  000514  0E03               	movlw	3
  1607  000516  6E1F               	movwf	stateRmsVI@phaseRmsVI+2,c
  1608                           
  1609                           ;States.c: 127: rmsVIFunctions = phasesRmsVI[phase].PhaseRmsVI;
  1610  000518  5038               	movf	stateRmsVI@phase,w,c
  1611  00051A  0D02               	mullw	2
  1612  00051C  0EDD               	movlw	low _phasesRmsVI
  1613  00051E  24F3               	addwf	prodl,w,c
  1614  000520  6EF6               	movwf	tblptrl,c
  1615  000522  0E1F               	movlw	high _phasesRmsVI
  1616  000524  20F4               	addwfc	prodh,w,c
  1617  000526  6EF7               	movwf	tblptrh,c
  1618  000528                     	if	0	;There are less than 3 active tblptr bytes
  1619  000528                     	endif
  1620  000528  0009               	tblrd		*+
  1621  00052A  CFF5 F087          	movff	tablat,stateRmsVI@rmsVIFunctions
  1622  00052E  000A               	tblrd		*-
  1623  000530  CFF5 F088          	movff	tablat,stateRmsVI@rmsVIFunctions+1
  1624                           
  1625                           ;States.c: 128: phaseRmsVI = rmsVIFunctions(phaseRmsVI);
  1626  000534  C01D  F084         	movff	stateRmsVI@phaseRmsVI,exitRmsVI@data
  1627  000538  C01E  F085         	movff	stateRmsVI@phaseRmsVI+1,exitRmsVI@data+1
  1628  00053C  C01F  F086         	movff	stateRmsVI@phaseRmsVI+2,exitRmsVI@data+2
  1629  000540  D801               	call	u1188
  1630  000542  D00B               	goto	u1189
  1631  000544                     u1188:
  1632  000544  0005               	push	
  1633  000546  0100               	movlb	0	; () banked
  1634  000548  6EFA               	movwf	pclath,c
  1635  00054A  5187               	movf	stateRmsVI@rmsVIFunctions& (0+255),w,b
  1636  00054C  6EFD               	movwf	tosl,c
  1637  00054E  5188               	movf	(stateRmsVI@rmsVIFunctions+1)& (0+255),w,b
  1638  000550  6EFE               	movwf	tosh,c
  1639  000552  50F8               	movf	tblptru,w,c
  1640  000554  6EFF               	movwf	tosu,c
  1641  000556  50FA               	movf	pclath,w,c
  1642  000558  0012               	return		;indir
  1643  00055A                     u1189:
  1644  00055A  C084  F01D         	movff	?_exitRmsVI,stateRmsVI@phaseRmsVI
  1645  00055E  C085  F01E         	movff	?_exitRmsVI+1,stateRmsVI@phaseRmsVI+1
  1646  000562  C086  F01F         	movff	?_exitRmsVI+2,stateRmsVI@phaseRmsVI+2
  1647                           
  1648                           ;States.c: 131: phase = phaseRmsVI.phaseState;
  1649  000566  C01E  F038         	movff	stateRmsVI@phaseRmsVI+1,stateRmsVI@phase
  1650                           
  1651                           ;States.c: 132: return (phaseRmsVI.stateMain);
  1652  00056A  501F               	movf	stateRmsVI@phaseRmsVI+2,w,c
  1653  00056C  0012               	return	
  1654  00056E                     __end_of_stateRmsVI:
  1655                           	opt stack 0
  1656                           tosu	equ	0xFFF
  1657                           tosh	equ	0xFFE
  1658                           tosl	equ	0xFFD
  1659                           pclath	equ	0xFFA
  1660                           tblptru	equ	0xFF8
  1661                           tblptrh	equ	0xFF7
  1662                           tblptrl	equ	0xFF6
  1663                           tablat	equ	0xFF5
  1664                           prodh	equ	0xFF4
  1665                           prodl	equ	0xFF3
  1666                           postinc0	equ	0xFEE
  1667                           wreg	equ	0xFE8
  1668                           
  1669 ;; *************** function _statePower2 *****************
  1670 ;; Defined at:
  1671 ;;		line 101 in file "States.c"
  1672 ;; Parameters:    Size  Location     Type
  1673 ;;		None
  1674 ;; Auto vars:     Size  Location     Type
  1675 ;;  power2Functi    2    3[BANK0 ] PTR FTN(struct .,)struct
  1676 ;;		 -> exitPower2(3), phPower2(3), fhPower2(3), 
  1677 ;; Return value:  Size  Location     Type
  1678 ;;                  1    wreg      enum E3172
  1679 ;; Registers used:
  1680 ;;		wreg, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1681 ;; Tracked objects:
  1682 ;;		On entry : 0/0
  1683 ;;		On exit  : 0/0
  1684 ;;		Unchanged: 0/0
  1685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1686 ;;      Params:         0       0       0       0
  1687 ;;      Locals:         0       2       0       0
  1688 ;;      Temps:          0       0       0       0
  1689 ;;      Totals:         0       2       0       0
  1690 ;;Total ram usage:        2 bytes
  1691 ;; Hardware stack levels used:    1
  1692 ;; Hardware stack levels required when called:    2
  1693 ;; This function calls:
  1694 ;;		_exitPower2
  1695 ;;		_fhPower2
  1696 ;;		_phPower2
  1697 ;; This function is called by:
  1698 ;;		_main
  1699 ;; This function uses a non-reentrant model
  1700 ;;
  1701                           
  1702                           	psect	text5
  1703  00056E                     __ptext5:
  1704                           	opt stack 0
  1705  00056E                     _statePower2:
  1706                           	opt stack 28
  1707                           
  1708                           ;States.c: 104: static PhaseStatePower2_Type phase = FH_POWER2;
  1709                           ;States.c: 105: static PhasePower2_Type phasePower2;
  1710                           ;States.c: 106: PhasePower2_Type(*power2Functions)(PhasePower2_Type);
  1711                           ;States.c: 107: phasePower2.stateMain = POWER_2;
  1712                           
  1713                           ;incstack = 0
  1714  00056E  0E02               	movlw	2
  1715  000570  6E22               	movwf	statePower2@phasePower2+2,c
  1716                           
  1717                           ;States.c: 110: power2Functions = phasesPower2[phase].PhasePower2;
  1718  000572  5039               	movf	statePower2@phase,w,c
  1719  000574  0D02               	mullw	2
  1720  000576  0EE3               	movlw	low _phasesPower2
  1721  000578  24F3               	addwf	prodl,w,c
  1722  00057A  6EF6               	movwf	tblptrl,c
  1723  00057C  0E1F               	movlw	high _phasesPower2
  1724  00057E  20F4               	addwfc	prodh,w,c
  1725  000580  6EF7               	movwf	tblptrh,c
  1726  000582                     	if	0	;There are less than 3 active tblptr bytes
  1727  000582                     	endif
  1728  000582  0009               	tblrd		*+
  1729  000584  CFF5 F087          	movff	tablat,statePower2@power2Functions
  1730  000588  000A               	tblrd		*-
  1731  00058A  CFF5 F088          	movff	tablat,statePower2@power2Functions+1
  1732                           
  1733                           ;States.c: 111: phasePower2 = power2Functions(phasePower2);
  1734  00058E  C020  F084         	movff	statePower2@phasePower2,exitPower2@data
  1735  000592  C021  F085         	movff	statePower2@phasePower2+1,exitPower2@data+1
  1736  000596  C022  F086         	movff	statePower2@phasePower2+2,exitPower2@data+2
  1737  00059A  D801               	call	u1178
  1738  00059C  D00B               	goto	u1179
  1739  00059E                     u1178:
  1740  00059E  0005               	push	
  1741  0005A0  0100               	movlb	0	; () banked
  1742  0005A2  6EFA               	movwf	pclath,c
  1743  0005A4  5187               	movf	statePower2@power2Functions& (0+255),w,b
  1744  0005A6  6EFD               	movwf	tosl,c
  1745  0005A8  5188               	movf	(statePower2@power2Functions+1)& (0+255),w,b
  1746  0005AA  6EFE               	movwf	tosh,c
  1747  0005AC  50F8               	movf	tblptru,w,c
  1748  0005AE  6EFF               	movwf	tosu,c
  1749  0005B0  50FA               	movf	pclath,w,c
  1750  0005B2  0012               	return		;indir
  1751  0005B4                     u1179:
  1752  0005B4  C084  F020         	movff	?_exitPower2,statePower2@phasePower2
  1753  0005B8  C085  F021         	movff	?_exitPower2+1,statePower2@phasePower2+1
  1754  0005BC  C086  F022         	movff	?_exitPower2+2,statePower2@phasePower2+2
  1755                           
  1756                           ;States.c: 114: phase = phasePower2.phaseState;
  1757  0005C0  C021  F039         	movff	statePower2@phasePower2+1,statePower2@phase
  1758                           
  1759                           ;States.c: 115: return (phasePower2.stateMain);
  1760  0005C4  5022               	movf	statePower2@phasePower2+2,w,c
  1761  0005C6  0012               	return	
  1762  0005C8                     __end_of_statePower2:
  1763                           	opt stack 0
  1764                           tosu	equ	0xFFF
  1765                           tosh	equ	0xFFE
  1766                           tosl	equ	0xFFD
  1767                           pclath	equ	0xFFA
  1768                           tblptru	equ	0xFF8
  1769                           tblptrh	equ	0xFF7
  1770                           tblptrl	equ	0xFF6
  1771                           tablat	equ	0xFF5
  1772                           prodh	equ	0xFF4
  1773                           prodl	equ	0xFF3
  1774                           postinc0	equ	0xFEE
  1775                           wreg	equ	0xFE8
  1776                           
  1777 ;; *************** function _statePower1 *****************
  1778 ;; Defined at:
  1779 ;;		line 84 in file "States.c"
  1780 ;; Parameters:    Size  Location     Type
  1781 ;;		None
  1782 ;; Auto vars:     Size  Location     Type
  1783 ;;  power1Functi    2    3[BANK0 ] PTR FTN(struct .,)struct
  1784 ;;		 -> exitPower1(3), vectorPower1(3), phPower1(3), typesPower1(3), 
  1785 ;; Return value:  Size  Location     Type
  1786 ;;                  1    wreg      enum E3172
  1787 ;; Registers used:
  1788 ;;		wreg, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1789 ;; Tracked objects:
  1790 ;;		On entry : 0/0
  1791 ;;		On exit  : 0/0
  1792 ;;		Unchanged: 0/0
  1793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1794 ;;      Params:         0       0       0       0
  1795 ;;      Locals:         0       2       0       0
  1796 ;;      Temps:          0       0       0       0
  1797 ;;      Totals:         0       2       0       0
  1798 ;;Total ram usage:        2 bytes
  1799 ;; Hardware stack levels used:    1
  1800 ;; Hardware stack levels required when called:    2
  1801 ;; This function calls:
  1802 ;;		_exitPower1
  1803 ;;		_phPower1
  1804 ;;		_typesPower1
  1805 ;;		_vectorPower1
  1806 ;; This function is called by:
  1807 ;;		_main
  1808 ;; This function uses a non-reentrant model
  1809 ;;
  1810                           
  1811                           	psect	text6
  1812  0005C8                     __ptext6:
  1813                           	opt stack 0
  1814  0005C8                     _statePower1:
  1815                           	opt stack 28
  1816                           
  1817                           ;States.c: 87: static PhaseStatePower1_Type phase = TYPES_POWER1;
  1818                           ;States.c: 88: static PhasePower1_Type phasePower1;
  1819                           ;States.c: 89: PhasePower1_Type(*power1Functions)(PhasePower1_Type);
  1820                           ;States.c: 90: phasePower1.stateMain = POWER_1;
  1821                           
  1822                           ;incstack = 0
  1823  0005C8  0E01               	movlw	1
  1824  0005CA  6E25               	movwf	statePower1@phasePower1+2,c
  1825                           
  1826                           ;States.c: 93: power1Functions = phasesPower1[phase].PhasePower1;
  1827  0005CC  503A               	movf	statePower1@phase,w,c
  1828  0005CE  0D02               	mullw	2
  1829  0005D0  0ECF               	movlw	low _phasesPower1
  1830  0005D2  24F3               	addwf	prodl,w,c
  1831  0005D4  6EF6               	movwf	tblptrl,c
  1832  0005D6  0E1F               	movlw	high _phasesPower1
  1833  0005D8  20F4               	addwfc	prodh,w,c
  1834  0005DA  6EF7               	movwf	tblptrh,c
  1835  0005DC                     	if	0	;There are less than 3 active tblptr bytes
  1836  0005DC                     	endif
  1837  0005DC  0009               	tblrd		*+
  1838  0005DE  CFF5 F087          	movff	tablat,statePower1@power1Functions
  1839  0005E2  000A               	tblrd		*-
  1840  0005E4  CFF5 F088          	movff	tablat,statePower1@power1Functions+1
  1841                           
  1842                           ;States.c: 94: phasePower1 = power1Functions(phasePower1);
  1843  0005E8  C023  F084         	movff	statePower1@phasePower1,exitPower1@data
  1844  0005EC  C024  F085         	movff	statePower1@phasePower1+1,exitPower1@data+1
  1845  0005F0  C025  F086         	movff	statePower1@phasePower1+2,exitPower1@data+2
  1846  0005F4  D801               	call	u1168
  1847  0005F6  D00B               	goto	u1169
  1848  0005F8                     u1168:
  1849  0005F8  0005               	push	
  1850  0005FA  0100               	movlb	0	; () banked
  1851  0005FC  6EFA               	movwf	pclath,c
  1852  0005FE  5187               	movf	statePower1@power1Functions& (0+255),w,b
  1853  000600  6EFD               	movwf	tosl,c
  1854  000602  5188               	movf	(statePower1@power1Functions+1)& (0+255),w,b
  1855  000604  6EFE               	movwf	tosh,c
  1856  000606  50F8               	movf	tblptru,w,c
  1857  000608  6EFF               	movwf	tosu,c
  1858  00060A  50FA               	movf	pclath,w,c
  1859  00060C  0012               	return		;indir
  1860  00060E                     u1169:
  1861  00060E  C084  F023         	movff	?_exitPower1,statePower1@phasePower1
  1862  000612  C085  F024         	movff	?_exitPower1+1,statePower1@phasePower1+1
  1863  000616  C086  F025         	movff	?_exitPower1+2,statePower1@phasePower1+2
  1864                           
  1865                           ;States.c: 97: phase = phasePower1.phaseState;
  1866  00061A  C024  F03A         	movff	statePower1@phasePower1+1,statePower1@phase
  1867                           
  1868                           ;States.c: 98: return (phasePower1.stateMain);
  1869  00061E  5025               	movf	statePower1@phasePower1+2,w,c
  1870  000620  0012               	return	
  1871  000622                     __end_of_statePower1:
  1872                           	opt stack 0
  1873                           tosu	equ	0xFFF
  1874                           tosh	equ	0xFFE
  1875                           tosl	equ	0xFFD
  1876                           pclath	equ	0xFFA
  1877                           tblptru	equ	0xFF8
  1878                           tblptrh	equ	0xFF7
  1879                           tblptrl	equ	0xFF6
  1880                           tablat	equ	0xFF5
  1881                           prodh	equ	0xFF4
  1882                           prodl	equ	0xFF3
  1883                           postinc0	equ	0xFEE
  1884                           wreg	equ	0xFE8
  1885                           
  1886 ;; *************** function _stateMainMenu *****************
  1887 ;; Defined at:
  1888 ;;		line 67 in file "States.c"
  1889 ;; Parameters:    Size  Location     Type
  1890 ;;		None
  1891 ;; Auto vars:     Size  Location     Type
  1892 ;;  mainMenuFunc    2   12[BANK0 ] PTR FTN(struct .,)struct
  1893 ;;		 -> viewMenu(2), generalView(2), initialLoad(2), 
  1894 ;; Return value:  Size  Location     Type
  1895 ;;                  1    wreg      enum E3172
  1896 ;; Registers used:
  1897 ;;		wreg, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1898 ;; Tracked objects:
  1899 ;;		On entry : 0/0
  1900 ;;		On exit  : 0/0
  1901 ;;		Unchanged: 0/0
  1902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1903 ;;      Params:         0       0       0       0
  1904 ;;      Locals:         0       2       0       0
  1905 ;;      Temps:          0       0       0       0
  1906 ;;      Totals:         0       2       0       0
  1907 ;;Total ram usage:        2 bytes
  1908 ;; Hardware stack levels used:    1
  1909 ;; Hardware stack levels required when called:    6
  1910 ;; This function calls:
  1911 ;;		_generalView
  1912 ;;		_initialLoad
  1913 ;;		_viewMenu
  1914 ;; This function is called by:
  1915 ;;		_main
  1916 ;; This function uses a non-reentrant model
  1917 ;;
  1918                           
  1919                           	psect	text7
  1920  0006CE                     __ptext7:
  1921                           	opt stack 0
  1922  0006CE                     _stateMainMenu:
  1923                           	opt stack 24
  1924                           
  1925                           ;States.c: 70: static PhaseStateMenu_Type phase = INITIAL_LOAD;
  1926                           ;States.c: 71: static PhaseMainMenu_Type phaseMain;
  1927                           ;States.c: 72: PhaseMainMenu_Type(*mainMenuFunctions)(PhaseMainMenu_Type);
  1928                           ;States.c: 73: phaseMain.stateMain = MAIN_MENU;
  1929                           
  1930                           ;incstack = 0
  1931  0006CE  0E00               	movlw	0
  1932  0006D0  6E33               	movwf	stateMainMenu@phaseMain+1,c
  1933                           
  1934                           ;States.c: 76: mainMenuFunctions = phasesMainMenu[phase].PhaseMainMenu;
  1935  0006D2  503B               	movf	stateMainMenu@phase,w,c
  1936  0006D4  0D02               	mullw	2
  1937  0006D6  0EE9               	movlw	low _phasesMainMenu
  1938  0006D8  24F3               	addwf	prodl,w,c
  1939  0006DA  6EF6               	movwf	tblptrl,c
  1940  0006DC  0E1F               	movlw	high _phasesMainMenu
  1941  0006DE  20F4               	addwfc	prodh,w,c
  1942  0006E0  6EF7               	movwf	tblptrh,c
  1943  0006E2                     	if	0	;There are less than 3 active tblptr bytes
  1944  0006E2                     	endif
  1945  0006E2  0009               	tblrd		*+
  1946  0006E4  CFF5 F090          	movff	tablat,stateMainMenu@mainMenuFunctions
  1947  0006E8  000A               	tblrd		*-
  1948  0006EA  CFF5 F091          	movff	tablat,stateMainMenu@mainMenuFunctions+1
  1949                           
  1950                           ;States.c: 77: phaseMain = mainMenuFunctions(phaseMain);
  1951  0006EE  C032  F08E         	movff	stateMainMenu@phaseMain,viewMenu@data
  1952  0006F2  C033  F08F         	movff	stateMainMenu@phaseMain+1,viewMenu@data+1
  1953  0006F6  D801               	call	u1158
  1954  0006F8  D00B               	goto	u1159
  1955  0006FA                     u1158:
  1956  0006FA  0005               	push	
  1957  0006FC  0100               	movlb	0	; () banked
  1958  0006FE  6EFA               	movwf	pclath,c
  1959  000700  5190               	movf	stateMainMenu@mainMenuFunctions& (0+255),w,b
  1960  000702  6EFD               	movwf	tosl,c
  1961  000704  5191               	movf	(stateMainMenu@mainMenuFunctions+1)& (0+255),w,b
  1962  000706  6EFE               	movwf	tosh,c
  1963  000708  50F8               	movf	tblptru,w,c
  1964  00070A  6EFF               	movwf	tosu,c
  1965  00070C  50FA               	movf	pclath,w,c
  1966  00070E  0012               	return		;indir
  1967  000710                     u1159:
  1968  000710  C08E  F032         	movff	?_viewMenu,stateMainMenu@phaseMain
  1969  000714  C08F  F033         	movff	?_viewMenu+1,stateMainMenu@phaseMain+1
  1970                           
  1971                           ;States.c: 80: phase = phaseMain.phaseState;
  1972  000718  C032  F03B         	movff	stateMainMenu@phaseMain,stateMainMenu@phase
  1973                           
  1974                           ;States.c: 81: return (phaseMain.stateMain);
  1975  00071C  5033               	movf	stateMainMenu@phaseMain+1,w,c
  1976  00071E  0012               	return	
  1977  000720                     __end_of_stateMainMenu:
  1978                           	opt stack 0
  1979                           tosu	equ	0xFFF
  1980                           tosh	equ	0xFFE
  1981                           tosl	equ	0xFFD
  1982                           pclath	equ	0xFFA
  1983                           tblptru	equ	0xFF8
  1984                           tblptrh	equ	0xFF7
  1985                           tblptrl	equ	0xFF6
  1986                           tablat	equ	0xFF5
  1987                           prodh	equ	0xFF4
  1988                           prodl	equ	0xFF3
  1989                           postinc0	equ	0xFEE
  1990                           wreg	equ	0xFE8
  1991                           
  1992 ;; *************** function _stateTemperature *****************
  1993 ;; Defined at:
  1994 ;;		line 186 in file "States.c"
  1995 ;; Parameters:    Size  Location     Type
  1996 ;;		None
  1997 ;; Auto vars:     Size  Location     Type
  1998 ;;  temperatureF    2    3[BANK0 ] PTR FTN(struct .,)struct
  1999 ;;		 -> exitTemperature(3), showTemperature(3), 
  2000 ;; Return value:  Size  Location     Type
  2001 ;;                  1    wreg      enum E3172
  2002 ;; Registers used:
  2003 ;;		wreg, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2004 ;; Tracked objects:
  2005 ;;		On entry : 0/0
  2006 ;;		On exit  : 0/0
  2007 ;;		Unchanged: 0/0
  2008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2009 ;;      Params:         0       0       0       0
  2010 ;;      Locals:         0       2       0       0
  2011 ;;      Temps:          0       0       0       0
  2012 ;;      Totals:         0       2       0       0
  2013 ;;Total ram usage:        2 bytes
  2014 ;; Hardware stack levels used:    1
  2015 ;; Hardware stack levels required when called:    2
  2016 ;; This function calls:
  2017 ;;		_exitTemperature
  2018 ;;		_showTemperature
  2019 ;; This function is called by:
  2020 ;;		_main
  2021 ;; This function uses a non-reentrant model
  2022 ;;
  2023                           
  2024                           	psect	text8
  2025  000622                     __ptext8:
  2026                           	opt stack 0
  2027  000622                     _stateTemperature:
  2028                           	opt stack 28
  2029                           
  2030                           ;States.c: 189: static PhaseStateTemperature_Type phase = SHOW_TEMPERATURE;
  2031                           ;States.c: 190: static PhaseTemperature_Type phaseTemperature;
  2032                           ;States.c: 191: PhaseTemperature_Type(*temperatureFunctions)(PhaseTemperature_Type);
  2033                           ;States.c: 192: phaseTemperature.stateMain = TEMPERATURE;
  2034                           
  2035                           ;incstack = 0
  2036  000622  0E07               	movlw	7
  2037  000624  6E16               	movwf	stateTemperature@phaseTemperature+2,c
  2038                           
  2039                           ;States.c: 195: temperatureFunctions = phasesTemperature[phase].PhaseTemperature;
  2040  000626  5034               	movf	stateTemperature@phase,w,c
  2041  000628  0D02               	mullw	2
  2042  00062A  0EEF               	movlw	low _phasesTemperature
  2043  00062C  24F3               	addwf	prodl,w,c
  2044  00062E  6EF6               	movwf	tblptrl,c
  2045  000630  0E1F               	movlw	high _phasesTemperature
  2046  000632  20F4               	addwfc	prodh,w,c
  2047  000634  6EF7               	movwf	tblptrh,c
  2048  000636                     	if	0	;There are less than 3 active tblptr bytes
  2049  000636                     	endif
  2050  000636  0009               	tblrd		*+
  2051  000638  CFF5 F087          	movff	tablat,stateTemperature@temperatureFunctions
  2052  00063C  000A               	tblrd		*-
  2053  00063E  CFF5 F088          	movff	tablat,stateTemperature@temperatureFunctions+1
  2054                           
  2055                           ;States.c: 196: phaseTemperature = temperatureFunctions(phaseTemperature);
  2056  000642  C014  F084         	movff	stateTemperature@phaseTemperature,exitTemperature@data
  2057  000646  C015  F085         	movff	stateTemperature@phaseTemperature+1,exitTemperature@data+1
  2058  00064A  C016  F086         	movff	stateTemperature@phaseTemperature+2,exitTemperature@data+2
  2059  00064E  D801               	call	u1228
  2060  000650  D00B               	goto	u1229
  2061  000652                     u1228:
  2062  000652  0005               	push	
  2063  000654  0100               	movlb	0	; () banked
  2064  000656  6EFA               	movwf	pclath,c
  2065  000658  5187               	movf	stateTemperature@temperatureFunctions& (0+255),w,b
  2066  00065A  6EFD               	movwf	tosl,c
  2067  00065C  5188               	movf	(stateTemperature@temperatureFunctions+1)& (0+255),w,b
  2068  00065E  6EFE               	movwf	tosh,c
  2069  000660  50F8               	movf	tblptru,w,c
  2070  000662  6EFF               	movwf	tosu,c
  2071  000664  50FA               	movf	pclath,w,c
  2072  000666  0012               	return		;indir
  2073  000668                     u1229:
  2074  000668  C084  F014         	movff	?_exitTemperature,stateTemperature@phaseTemperature
  2075  00066C  C085  F015         	movff	?_exitTemperature+1,stateTemperature@phaseTemperature+1
  2076  000670  C086  F016         	movff	?_exitTemperature+2,stateTemperature@phaseTemperature+2
  2077                           
  2078                           ;States.c: 199: phase = phaseTemperature.phaseState;
  2079  000674  C015  F034         	movff	stateTemperature@phaseTemperature+1,stateTemperature@phase
  2080                           
  2081                           ;States.c: 200: return (phaseTemperature.stateMain);
  2082  000678  5016               	movf	stateTemperature@phaseTemperature+2,w,c
  2083  00067A  0012               	return	
  2084  00067C                     __end_of_stateTemperature:
  2085                           	opt stack 0
  2086                           tosu	equ	0xFFF
  2087                           tosh	equ	0xFFE
  2088                           tosl	equ	0xFFD
  2089                           pclath	equ	0xFFA
  2090                           tblptru	equ	0xFF8
  2091                           tblptrh	equ	0xFF7
  2092                           tblptrl	equ	0xFF6
  2093                           tablat	equ	0xFF5
  2094                           prodh	equ	0xFF4
  2095                           prodl	equ	0xFF3
  2096                           postinc0	equ	0xFEE
  2097                           wreg	equ	0xFE8
  2098                           
  2099 ;; *************** function _exitTemperature *****************
  2100 ;; Defined at:
  2101 ;;		line 259 in file "Phases.c"
  2102 ;; Parameters:    Size  Location     Type
  2103 ;;  data            3    0[BANK0 ] struct .
  2104 ;; Auto vars:     Size  Location     Type
  2105 ;;		None
  2106 ;; Return value:  Size  Location     Type
  2107 ;;                  3    0[BANK0 ] struct .
  2108 ;; Registers used:
  2109 ;;		None
  2110 ;; Tracked objects:
  2111 ;;		On entry : 0/0
  2112 ;;		On exit  : 0/0
  2113 ;;		Unchanged: 0/0
  2114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2115 ;;      Params:         0       3       0       0
  2116 ;;      Locals:         0       0       0       0
  2117 ;;      Temps:          0       0       0       0
  2118 ;;      Totals:         0       3       0       0
  2119 ;;Total ram usage:        3 bytes
  2120 ;; Hardware stack levels used:    1
  2121 ;; Hardware stack levels required when called:    1
  2122 ;; This function calls:
  2123 ;;		Nothing
  2124 ;; This function is called by:
  2125 ;;		_stateTemperature
  2126 ;; This function uses a non-reentrant model
  2127 ;;
  2128                           
  2129                           	psect	text9
  2130  0009A6                     __ptext9:
  2131                           	opt stack 0
  2132  0009A6                     _exitTemperature:
  2133                           	opt stack 28
  2134                           
  2135                           ;Phases.c: 262: static PhaseTemperature_Type currentTemperature2;
  2136                           ;Phases.c: 265: currentTemperature2.phaseState = data.phaseState;
  2137                           
  2138                           ;incstack = 0
  2139  0009A6  C085  F061         	movff	exitTemperature@data+1,exitTemperature@currentTemperature2+1
  2140                           
  2141                           ;Phases.c: 266: currentTemperature2.stateMain = data.stateMain;
  2142  0009AA  C086  F062         	movff	exitTemperature@data+2,exitTemperature@currentTemperature2+2
  2143                           
  2144                           ;Phases.c: 268: return (currentTemperature2);
  2145  0009AE  C060  F084         	movff	exitTemperature@currentTemperature2,?_exitTemperature
  2146  0009B2  C061  F085         	movff	exitTemperature@currentTemperature2+1,?_exitTemperature+1
  2147  0009B6  C062  F086         	movff	exitTemperature@currentTemperature2+2,?_exitTemperature+2
  2148  0009BA  0012               	return		;funcret
  2149  0009BC                     __end_of_exitTemperature:
  2150                           	opt stack 0
  2151                           tosu	equ	0xFFF
  2152                           tosh	equ	0xFFE
  2153                           tosl	equ	0xFFD
  2154                           pclath	equ	0xFFA
  2155                           tblptru	equ	0xFF8
  2156                           tblptrh	equ	0xFF7
  2157                           tblptrl	equ	0xFF6
  2158                           tablat	equ	0xFF5
  2159                           prodh	equ	0xFF4
  2160                           prodl	equ	0xFF3
  2161                           postinc0	equ	0xFEE
  2162                           wreg	equ	0xFE8
  2163                           
  2164 ;; *************** function _showTemperature *****************
  2165 ;; Defined at:
  2166 ;;		line 247 in file "Phases.c"
  2167 ;; Parameters:    Size  Location     Type
  2168 ;;  data            3    0[BANK0 ] struct .
  2169 ;; Auto vars:     Size  Location     Type
  2170 ;;		None
  2171 ;; Return value:  Size  Location     Type
  2172 ;;                  3    0[BANK0 ] struct .
  2173 ;; Registers used:
  2174 ;;		wreg, status,2
  2175 ;; Tracked objects:
  2176 ;;		On entry : 0/0
  2177 ;;		On exit  : 0/0
  2178 ;;		Unchanged: 0/0
  2179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2180 ;;      Params:         0       3       0       0
  2181 ;;      Locals:         0       0       0       0
  2182 ;;      Temps:          0       0       0       0
  2183 ;;      Totals:         0       3       0       0
  2184 ;;Total ram usage:        3 bytes
  2185 ;; Hardware stack levels used:    1
  2186 ;; Hardware stack levels required when called:    1
  2187 ;; This function calls:
  2188 ;;		Nothing
  2189 ;; This function is called by:
  2190 ;;		_stateTemperature
  2191 ;; This function uses a non-reentrant model
  2192 ;;
  2193                           
  2194                           	psect	text10
  2195  0008E6                     __ptext10:
  2196                           	opt stack 0
  2197  0008E6                     _showTemperature:
  2198                           	opt stack 28
  2199                           
  2200                           ;Phases.c: 250: static PhaseTemperature_Type currentTemperature1;
  2201                           ;Phases.c: 253: currentTemperature1.phaseState = EXIT_TEMPERATURE;
  2202                           
  2203                           ;incstack = 0
  2204  0008E6  0E01               	movlw	1
  2205  0008E8  0100               	movlb	0	; () banked
  2206  0008EA  6F64               	movwf	(showTemperature@currentTemperature1+1)& (0+255),b
  2207                           
  2208                           ; BSR set to: 0
  2209                           ;Phases.c: 254: currentTemperature1.stateMain = data.stateMain;
  2210  0008EC  C086  F065         	movff	showTemperature@data+2,showTemperature@currentTemperature1+2
  2211                           
  2212                           ; BSR set to: 0
  2213                           ;Phases.c: 256: return (currentTemperature1);
  2214  0008F0  C063  F084         	movff	showTemperature@currentTemperature1,?_showTemperature
  2215  0008F4  C064  F085         	movff	showTemperature@currentTemperature1+1,?_showTemperature+1
  2216  0008F8  C065  F086         	movff	showTemperature@currentTemperature1+2,?_showTemperature+2
  2217  0008FC  0012               	return	
  2218  0008FE                     __end_of_showTemperature:
  2219                           	opt stack 0
  2220                           tosu	equ	0xFFF
  2221                           tosh	equ	0xFFE
  2222                           tosl	equ	0xFFD
  2223                           pclath	equ	0xFFA
  2224                           tblptru	equ	0xFF8
  2225                           tblptrh	equ	0xFF7
  2226                           tblptrl	equ	0xFF6
  2227                           tablat	equ	0xFF5
  2228                           prodh	equ	0xFF4
  2229                           prodl	equ	0xFF3
  2230                           postinc0	equ	0xFEE
  2231                           wreg	equ	0xFE8
  2232                           
  2233 ;; *************** function _exitRmsVI *****************
  2234 ;; Defined at:
  2235 ;;		line 151 in file "Phases.c"
  2236 ;; Parameters:    Size  Location     Type
  2237 ;;  data            3    0[BANK0 ] struct .
  2238 ;; Auto vars:     Size  Location     Type
  2239 ;;		None
  2240 ;; Return value:  Size  Location     Type
  2241 ;;                  3    0[BANK0 ] struct .
  2242 ;; Registers used:
  2243 ;;		None
  2244 ;; Tracked objects:
  2245 ;;		On entry : 0/0
  2246 ;;		On exit  : 0/0
  2247 ;;		Unchanged: 0/0
  2248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2249 ;;      Params:         0       3       0       0
  2250 ;;      Locals:         0       0       0       0
  2251 ;;      Temps:          0       0       0       0
  2252 ;;      Totals:         0       3       0       0
  2253 ;;Total ram usage:        3 bytes
  2254 ;; Hardware stack levels used:    1
  2255 ;; Hardware stack levels required when called:    1
  2256 ;; This function calls:
  2257 ;;		Nothing
  2258 ;; This function is called by:
  2259 ;;		_stateRmsVI
  2260 ;; This function uses a non-reentrant model
  2261 ;;
  2262                           
  2263                           	psect	text11
  2264  0009BC                     __ptext11:
  2265                           	opt stack 0
  2266  0009BC                     _exitRmsVI:
  2267                           	opt stack 28
  2268                           
  2269                           ;Phases.c: 154: static PhaseRmsVI_Type currentRms3;
  2270                           ;Phases.c: 157: currentRms3.phaseState = data.phaseState;
  2271                           
  2272                           ; BSR set to: 0
  2273                           ;incstack = 0
  2274  0009BC  C085  F076         	movff	exitRmsVI@data+1,exitRmsVI@currentRms3+1
  2275                           
  2276                           ;Phases.c: 158: currentRms3.stateMain = data.stateMain;
  2277  0009C0  C086  F077         	movff	exitRmsVI@data+2,exitRmsVI@currentRms3+2
  2278                           
  2279                           ;Phases.c: 160: return (currentRms3);
  2280  0009C4  C075  F084         	movff	exitRmsVI@currentRms3,?_exitRmsVI
  2281  0009C8  C076  F085         	movff	exitRmsVI@currentRms3+1,?_exitRmsVI+1
  2282  0009CC  C077  F086         	movff	exitRmsVI@currentRms3+2,?_exitRmsVI+2
  2283  0009D0  0012               	return		;funcret
  2284  0009D2                     __end_of_exitRmsVI:
  2285                           	opt stack 0
  2286                           tosu	equ	0xFFF
  2287                           tosh	equ	0xFFE
  2288                           tosl	equ	0xFFD
  2289                           pclath	equ	0xFFA
  2290                           tblptru	equ	0xFF8
  2291                           tblptrh	equ	0xFF7
  2292                           tblptrl	equ	0xFF6
  2293                           tablat	equ	0xFF5
  2294                           prodh	equ	0xFF4
  2295                           prodl	equ	0xFF3
  2296                           postinc0	equ	0xFEE
  2297                           wreg	equ	0xFE8
  2298                           
  2299 ;; *************** function _neutralRmsVI *****************
  2300 ;; Defined at:
  2301 ;;		line 139 in file "Phases.c"
  2302 ;; Parameters:    Size  Location     Type
  2303 ;;  data            3    0[BANK0 ] struct .
  2304 ;; Auto vars:     Size  Location     Type
  2305 ;;		None
  2306 ;; Return value:  Size  Location     Type
  2307 ;;                  3    0[BANK0 ] struct .
  2308 ;; Registers used:
  2309 ;;		wreg, status,2
  2310 ;; Tracked objects:
  2311 ;;		On entry : 0/0
  2312 ;;		On exit  : 0/0
  2313 ;;		Unchanged: 0/0
  2314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2315 ;;      Params:         0       3       0       0
  2316 ;;      Locals:         0       0       0       0
  2317 ;;      Temps:          0       0       0       0
  2318 ;;      Totals:         0       3       0       0
  2319 ;;Total ram usage:        3 bytes
  2320 ;; Hardware stack levels used:    1
  2321 ;; Hardware stack levels required when called:    1
  2322 ;; This function calls:
  2323 ;;		Nothing
  2324 ;; This function is called by:
  2325 ;;		_stateRmsVI
  2326 ;; This function uses a non-reentrant model
  2327 ;;
  2328                           
  2329                           	psect	text12
  2330  0008FE                     __ptext12:
  2331                           	opt stack 0
  2332  0008FE                     _neutralRmsVI:
  2333                           	opt stack 28
  2334                           
  2335                           ;Phases.c: 142: static PhaseRmsVI_Type currentRms2;
  2336                           ;Phases.c: 145: currentRms2.phaseState = EXIT_RMSVI;
  2337                           
  2338                           ;incstack = 0
  2339  0008FE  0E02               	movlw	2
  2340  000900  0100               	movlb	0	; () banked
  2341  000902  6F79               	movwf	(neutralRmsVI@currentRms2+1)& (0+255),b
  2342                           
  2343                           ; BSR set to: 0
  2344                           ;Phases.c: 146: currentRms2.stateMain = data.stateMain;
  2345  000904  C086  F07A         	movff	neutralRmsVI@data+2,neutralRmsVI@currentRms2+2
  2346                           
  2347                           ; BSR set to: 0
  2348                           ;Phases.c: 148: return (currentRms2);
  2349  000908  C078  F084         	movff	neutralRmsVI@currentRms2,?_neutralRmsVI
  2350  00090C  C079  F085         	movff	neutralRmsVI@currentRms2+1,?_neutralRmsVI+1
  2351  000910  C07A  F086         	movff	neutralRmsVI@currentRms2+2,?_neutralRmsVI+2
  2352  000914  0012               	return	
  2353  000916                     __end_of_neutralRmsVI:
  2354                           	opt stack 0
  2355                           tosu	equ	0xFFF
  2356                           tosh	equ	0xFFE
  2357                           tosl	equ	0xFFD
  2358                           pclath	equ	0xFFA
  2359                           tblptru	equ	0xFF8
  2360                           tblptrh	equ	0xFF7
  2361                           tblptrl	equ	0xFF6
  2362                           tablat	equ	0xFF5
  2363                           prodh	equ	0xFF4
  2364                           prodl	equ	0xFF3
  2365                           postinc0	equ	0xFEE
  2366                           wreg	equ	0xFE8
  2367                           
  2368 ;; *************** function _phRmsVI *****************
  2369 ;; Defined at:
  2370 ;;		line 127 in file "Phases.c"
  2371 ;; Parameters:    Size  Location     Type
  2372 ;;  data            3    0[BANK0 ] struct .
  2373 ;; Auto vars:     Size  Location     Type
  2374 ;;		None
  2375 ;; Return value:  Size  Location     Type
  2376 ;;                  3    0[BANK0 ] struct .
  2377 ;; Registers used:
  2378 ;;		wreg, status,2
  2379 ;; Tracked objects:
  2380 ;;		On entry : 0/0
  2381 ;;		On exit  : 0/0
  2382 ;;		Unchanged: 0/0
  2383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2384 ;;      Params:         0       3       0       0
  2385 ;;      Locals:         0       0       0       0
  2386 ;;      Temps:          0       0       0       0
  2387 ;;      Totals:         0       3       0       0
  2388 ;;Total ram usage:        3 bytes
  2389 ;; Hardware stack levels used:    1
  2390 ;; Hardware stack levels required when called:    1
  2391 ;; This function calls:
  2392 ;;		Nothing
  2393 ;; This function is called by:
  2394 ;;		_stateRmsVI
  2395 ;; This function uses a non-reentrant model
  2396 ;;
  2397                           
  2398                           	psect	text13
  2399  000916                     __ptext13:
  2400                           	opt stack 0
  2401  000916                     _phRmsVI:
  2402                           	opt stack 28
  2403                           
  2404                           ;Phases.c: 130: static PhaseRmsVI_Type currentRms1;
  2405                           ;Phases.c: 133: currentRms1.phaseState = NEUTRAL_RMSVI;
  2406                           
  2407                           ; BSR set to: 0
  2408                           ;incstack = 0
  2409  000916  0E01               	movlw	1
  2410  000918  0100               	movlb	0	; () banked
  2411  00091A  6F7C               	movwf	(phRmsVI@currentRms1+1)& (0+255),b
  2412                           
  2413                           ; BSR set to: 0
  2414                           ;Phases.c: 134: currentRms1.stateMain = data.stateMain;
  2415  00091C  C086  F07D         	movff	phRmsVI@data+2,phRmsVI@currentRms1+2
  2416                           
  2417                           ; BSR set to: 0
  2418                           ;Phases.c: 136: return (currentRms1);
  2419  000920  C07B  F084         	movff	phRmsVI@currentRms1,?_phRmsVI
  2420  000924  C07C  F085         	movff	phRmsVI@currentRms1+1,?_phRmsVI+1
  2421  000928  C07D  F086         	movff	phRmsVI@currentRms1+2,?_phRmsVI+2
  2422  00092C  0012               	return	
  2423  00092E                     __end_of_phRmsVI:
  2424                           	opt stack 0
  2425                           tosu	equ	0xFFF
  2426                           tosh	equ	0xFFE
  2427                           tosl	equ	0xFFD
  2428                           pclath	equ	0xFFA
  2429                           tblptru	equ	0xFF8
  2430                           tblptrh	equ	0xFF7
  2431                           tblptrl	equ	0xFF6
  2432                           tablat	equ	0xFF5
  2433                           prodh	equ	0xFF4
  2434                           prodl	equ	0xFF3
  2435                           postinc0	equ	0xFEE
  2436                           wreg	equ	0xFE8
  2437                           
  2438 ;; *************** function _exitPowerFactor *****************
  2439 ;; Defined at:
  2440 ;;		line 175 in file "Phases.c"
  2441 ;; Parameters:    Size  Location     Type
  2442 ;;  data            2    0[BANK0 ] struct .
  2443 ;; Auto vars:     Size  Location     Type
  2444 ;;		None
  2445 ;; Return value:  Size  Location     Type
  2446 ;;                  2    0[BANK0 ] struct .
  2447 ;; Registers used:
  2448 ;;		None
  2449 ;; Tracked objects:
  2450 ;;		On entry : 0/0
  2451 ;;		On exit  : 0/0
  2452 ;;		Unchanged: 0/0
  2453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2454 ;;      Params:         0       2       0       0
  2455 ;;      Locals:         0       0       0       0
  2456 ;;      Temps:          0       0       0       0
  2457 ;;      Totals:         0       2       0       0
  2458 ;;Total ram usage:        2 bytes
  2459 ;; Hardware stack levels used:    1
  2460 ;; Hardware stack levels required when called:    1
  2461 ;; This function calls:
  2462 ;;		Nothing
  2463 ;; This function is called by:
  2464 ;;		_statePowerFactor
  2465 ;; This function uses a non-reentrant model
  2466 ;;
  2467                           
  2468                           	psect	text14
  2469  000A98                     __ptext14:
  2470                           	opt stack 0
  2471  000A98                     _exitPowerFactor:
  2472                           	opt stack 28
  2473                           
  2474                           ;Phases.c: 178: static PhasePowerFactor_Type currentPowerFactor2;
  2475                           ;Phases.c: 181: currentPowerFactor2.phaseState = data.phaseState;
  2476                           
  2477                           ; BSR set to: 0
  2478                           ;incstack = 0
  2479  000A98  C084  F026         	movff	exitPowerFactor@data,exitPowerFactor@currentPowerFactor2
  2480                           
  2481                           ;Phases.c: 182: currentPowerFactor2.stateMain = data.stateMain;
  2482  000A9C  C085  F027         	movff	exitPowerFactor@data+1,exitPowerFactor@currentPowerFactor2+1
  2483                           
  2484                           ;Phases.c: 184: return (currentPowerFactor2);
  2485  000AA0  C026  F084         	movff	exitPowerFactor@currentPowerFactor2,?_exitPowerFactor
  2486  000AA4  C027  F085         	movff	exitPowerFactor@currentPowerFactor2+1,?_exitPowerFactor+1
  2487  000AA8  0012               	return		;funcret
  2488  000AAA                     __end_of_exitPowerFactor:
  2489                           	opt stack 0
  2490                           tosu	equ	0xFFF
  2491                           tosh	equ	0xFFE
  2492                           tosl	equ	0xFFD
  2493                           pclath	equ	0xFFA
  2494                           tblptru	equ	0xFF8
  2495                           tblptrh	equ	0xFF7
  2496                           tblptrl	equ	0xFF6
  2497                           tablat	equ	0xFF5
  2498                           prodh	equ	0xFF4
  2499                           prodl	equ	0xFF3
  2500                           postinc0	equ	0xFEE
  2501                           wreg	equ	0xFE8
  2502                           
  2503 ;; *************** function _phPowerFactor *****************
  2504 ;; Defined at:
  2505 ;;		line 163 in file "Phases.c"
  2506 ;; Parameters:    Size  Location     Type
  2507 ;;  data            2    0[BANK0 ] struct .
  2508 ;; Auto vars:     Size  Location     Type
  2509 ;;		None
  2510 ;; Return value:  Size  Location     Type
  2511 ;;                  2    0[BANK0 ] struct .
  2512 ;; Registers used:
  2513 ;;		wreg, status,2
  2514 ;; Tracked objects:
  2515 ;;		On entry : 0/0
  2516 ;;		On exit  : 0/0
  2517 ;;		Unchanged: 0/0
  2518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2519 ;;      Params:         0       2       0       0
  2520 ;;      Locals:         0       0       0       0
  2521 ;;      Temps:          0       0       0       0
  2522 ;;      Totals:         0       2       0       0
  2523 ;;Total ram usage:        2 bytes
  2524 ;; Hardware stack levels used:    1
  2525 ;; Hardware stack levels required when called:    1
  2526 ;; This function calls:
  2527 ;;		Nothing
  2528 ;; This function is called by:
  2529 ;;		_statePowerFactor
  2530 ;; This function uses a non-reentrant model
  2531 ;;
  2532                           
  2533                           	psect	text15
  2534  000AAA                     __ptext15:
  2535                           	opt stack 0
  2536  000AAA                     _phPowerFactor:
  2537                           	opt stack 28
  2538                           
  2539                           ;Phases.c: 166: static PhasePowerFactor_Type currentPowerFactor1;
  2540                           ;Phases.c: 169: currentPowerFactor1.phaseState = EXIT_PF;
  2541                           
  2542                           ;incstack = 0
  2543  000AAA  0E01               	movlw	1
  2544  000AAC  6E28               	movwf	phPowerFactor@currentPowerFactor1,c
  2545                           
  2546                           ;Phases.c: 170: currentPowerFactor1.stateMain = data.stateMain;
  2547  000AAE  C085  F029         	movff	phPowerFactor@data+1,phPowerFactor@currentPowerFactor1+1
  2548                           
  2549                           ;Phases.c: 172: return (currentPowerFactor1);
  2550  000AB2  C028  F084         	movff	phPowerFactor@currentPowerFactor1,?_phPowerFactor
  2551  000AB6  C029  F085         	movff	phPowerFactor@currentPowerFactor1+1,?_phPowerFactor+1
  2552  000ABA  0012               	return	
  2553  000ABC                     __end_of_phPowerFactor:
  2554                           	opt stack 0
  2555                           tosu	equ	0xFFF
  2556                           tosh	equ	0xFFE
  2557                           tosl	equ	0xFFD
  2558                           pclath	equ	0xFFA
  2559                           tblptru	equ	0xFF8
  2560                           tblptrh	equ	0xFF7
  2561                           tblptrl	equ	0xFF6
  2562                           tablat	equ	0xFF5
  2563                           prodh	equ	0xFF4
  2564                           prodl	equ	0xFF3
  2565                           postinc0	equ	0xFEE
  2566                           wreg	equ	0xFE8
  2567                           
  2568 ;; *************** function _exitPower2 *****************
  2569 ;; Defined at:
  2570 ;;		line 115 in file "Phases.c"
  2571 ;; Parameters:    Size  Location     Type
  2572 ;;  data            3    0[BANK0 ] struct .
  2573 ;; Auto vars:     Size  Location     Type
  2574 ;;		None
  2575 ;; Return value:  Size  Location     Type
  2576 ;;                  3    0[BANK0 ] struct .
  2577 ;; Registers used:
  2578 ;;		None
  2579 ;; Tracked objects:
  2580 ;;		On entry : 0/0
  2581 ;;		On exit  : 0/0
  2582 ;;		Unchanged: 0/0
  2583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2584 ;;      Params:         0       3       0       0
  2585 ;;      Locals:         0       0       0       0
  2586 ;;      Temps:          0       0       0       0
  2587 ;;      Totals:         0       3       0       0
  2588 ;;Total ram usage:        3 bytes
  2589 ;; Hardware stack levels used:    1
  2590 ;; Hardware stack levels required when called:    1
  2591 ;; This function calls:
  2592 ;;		Nothing
  2593 ;; This function is called by:
  2594 ;;		_statePower2
  2595 ;; This function uses a non-reentrant model
  2596 ;;
  2597                           
  2598                           	psect	text16
  2599  0009D2                     __ptext16:
  2600                           	opt stack 0
  2601  0009D2                     _exitPower2:
  2602                           	opt stack 28
  2603                           
  2604                           ;Phases.c: 118: static PhasePower2_Type currentPower2_3;
  2605                           ;Phases.c: 121: currentPower2_3.phaseState = data.phaseState;
  2606                           
  2607                           ;incstack = 0
  2608  0009D2  C085  F07F         	movff	exitPower2@data+1,exitPower2@currentPower2_3+1
  2609                           
  2610                           ;Phases.c: 122: currentPower2_3.stateMain = data.stateMain;
  2611  0009D6  C086  F080         	movff	exitPower2@data+2,exitPower2@currentPower2_3+2
  2612                           
  2613                           ;Phases.c: 124: return (currentPower2_3);
  2614  0009DA  C07E  F084         	movff	exitPower2@currentPower2_3,?_exitPower2
  2615  0009DE  C07F  F085         	movff	exitPower2@currentPower2_3+1,?_exitPower2+1
  2616  0009E2  C080  F086         	movff	exitPower2@currentPower2_3+2,?_exitPower2+2
  2617  0009E6  0012               	return		;funcret
  2618  0009E8                     __end_of_exitPower2:
  2619                           	opt stack 0
  2620                           tosu	equ	0xFFF
  2621                           tosh	equ	0xFFE
  2622                           tosl	equ	0xFFD
  2623                           pclath	equ	0xFFA
  2624                           tblptru	equ	0xFF8
  2625                           tblptrh	equ	0xFF7
  2626                           tblptrl	equ	0xFF6
  2627                           tablat	equ	0xFF5
  2628                           prodh	equ	0xFF4
  2629                           prodl	equ	0xFF3
  2630                           postinc0	equ	0xFEE
  2631                           wreg	equ	0xFE8
  2632                           
  2633 ;; *************** function _fhPower2 *****************
  2634 ;; Defined at:
  2635 ;;		line 91 in file "Phases.c"
  2636 ;; Parameters:    Size  Location     Type
  2637 ;;  data            3    0[BANK0 ] struct .
  2638 ;; Auto vars:     Size  Location     Type
  2639 ;;		None
  2640 ;; Return value:  Size  Location     Type
  2641 ;;                  3    0[BANK0 ] struct .
  2642 ;; Registers used:
  2643 ;;		wreg, status,2
  2644 ;; Tracked objects:
  2645 ;;		On entry : 0/0
  2646 ;;		On exit  : 0/0
  2647 ;;		Unchanged: 0/0
  2648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2649 ;;      Params:         0       3       0       0
  2650 ;;      Locals:         0       0       0       0
  2651 ;;      Temps:          0       0       0       0
  2652 ;;      Totals:         0       3       0       0
  2653 ;;Total ram usage:        3 bytes
  2654 ;; Hardware stack levels used:    1
  2655 ;; Hardware stack levels required when called:    1
  2656 ;; This function calls:
  2657 ;;		Nothing
  2658 ;; This function is called by:
  2659 ;;		_statePower2
  2660 ;; This function uses a non-reentrant model
  2661 ;;
  2662                           
  2663                           	psect	text17
  2664  0009E8                     __ptext17:
  2665                           	opt stack 0
  2666  0009E8                     _fhPower2:
  2667                           	opt stack 28
  2668                           
  2669                           ;Phases.c: 94: static PhasePower2_Type currentPower2_1;
  2670                           ;Phases.c: 97: currentPower2_1.phaseState = PHASES_POWER2;
  2671                           
  2672                           ;incstack = 0
  2673  0009E8  0E01               	movlw	1
  2674  0009EA  6E06               	movwf	fhPower2@currentPower2_1+1,c
  2675                           
  2676                           ;Phases.c: 98: currentPower2_1.stateMain = data.stateMain;
  2677  0009EC  C086  F007         	movff	fhPower2@data+2,fhPower2@currentPower2_1+2
  2678                           
  2679                           ;Phases.c: 100: return (currentPower2_1);
  2680  0009F0  C005  F084         	movff	fhPower2@currentPower2_1,?_fhPower2
  2681  0009F4  C006  F085         	movff	fhPower2@currentPower2_1+1,?_fhPower2+1
  2682  0009F8  C007  F086         	movff	fhPower2@currentPower2_1+2,?_fhPower2+2
  2683  0009FC  0012               	return	
  2684  0009FE                     __end_of_fhPower2:
  2685                           	opt stack 0
  2686                           tosu	equ	0xFFF
  2687                           tosh	equ	0xFFE
  2688                           tosl	equ	0xFFD
  2689                           pclath	equ	0xFFA
  2690                           tblptru	equ	0xFF8
  2691                           tblptrh	equ	0xFF7
  2692                           tblptrl	equ	0xFF6
  2693                           tablat	equ	0xFF5
  2694                           prodh	equ	0xFF4
  2695                           prodl	equ	0xFF3
  2696                           postinc0	equ	0xFEE
  2697                           wreg	equ	0xFE8
  2698                           
  2699 ;; *************** function _phPower2 *****************
  2700 ;; Defined at:
  2701 ;;		line 103 in file "Phases.c"
  2702 ;; Parameters:    Size  Location     Type
  2703 ;;  data            3    0[BANK0 ] struct .
  2704 ;; Auto vars:     Size  Location     Type
  2705 ;;		None
  2706 ;; Return value:  Size  Location     Type
  2707 ;;                  3    0[BANK0 ] struct .
  2708 ;; Registers used:
  2709 ;;		wreg, status,2
  2710 ;; Tracked objects:
  2711 ;;		On entry : 0/0
  2712 ;;		On exit  : 0/0
  2713 ;;		Unchanged: 0/0
  2714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2715 ;;      Params:         0       3       0       0
  2716 ;;      Locals:         0       0       0       0
  2717 ;;      Temps:          0       0       0       0
  2718 ;;      Totals:         0       3       0       0
  2719 ;;Total ram usage:        3 bytes
  2720 ;; Hardware stack levels used:    1
  2721 ;; Hardware stack levels required when called:    1
  2722 ;; This function calls:
  2723 ;;		Nothing
  2724 ;; This function is called by:
  2725 ;;		_statePower2
  2726 ;; This function uses a non-reentrant model
  2727 ;;
  2728                           
  2729                           	psect	text18
  2730  00092E                     __ptext18:
  2731                           	opt stack 0
  2732  00092E                     _phPower2:
  2733                           	opt stack 28
  2734                           
  2735                           ;Phases.c: 106: static PhasePower2_Type currentPower2_2;
  2736                           ;Phases.c: 109: currentPower2_2.phaseState = EXIT_POWER2;
  2737                           
  2738                           ;incstack = 0
  2739  00092E  0E02               	movlw	2
  2740  000930  0100               	movlb	0	; () banked
  2741  000932  6F82               	movwf	(phPower2@currentPower2_2+1)& (0+255),b
  2742                           
  2743                           ; BSR set to: 0
  2744                           ;Phases.c: 110: currentPower2_2.stateMain = data.stateMain;
  2745  000934  C086  F083         	movff	phPower2@data+2,phPower2@currentPower2_2+2
  2746                           
  2747                           ; BSR set to: 0
  2748                           ;Phases.c: 112: return (currentPower2_2);
  2749  000938  C081  F084         	movff	phPower2@currentPower2_2,?_phPower2
  2750  00093C  C082  F085         	movff	phPower2@currentPower2_2+1,?_phPower2+1
  2751  000940  C083  F086         	movff	phPower2@currentPower2_2+2,?_phPower2+2
  2752  000944  0012               	return	
  2753  000946                     __end_of_phPower2:
  2754                           	opt stack 0
  2755                           tosu	equ	0xFFF
  2756                           tosh	equ	0xFFE
  2757                           tosl	equ	0xFFD
  2758                           pclath	equ	0xFFA
  2759                           tblptru	equ	0xFF8
  2760                           tblptrh	equ	0xFF7
  2761                           tblptrl	equ	0xFF6
  2762                           tablat	equ	0xFF5
  2763                           prodh	equ	0xFF4
  2764                           prodl	equ	0xFF3
  2765                           postinc0	equ	0xFEE
  2766                           wreg	equ	0xFE8
  2767                           
  2768 ;; *************** function _exitPower1 *****************
  2769 ;; Defined at:
  2770 ;;		line 79 in file "Phases.c"
  2771 ;; Parameters:    Size  Location     Type
  2772 ;;  data            3    0[BANK0 ] struct .
  2773 ;; Auto vars:     Size  Location     Type
  2774 ;;		None
  2775 ;; Return value:  Size  Location     Type
  2776 ;;                  3    0[BANK0 ] struct .
  2777 ;; Registers used:
  2778 ;;		None
  2779 ;; Tracked objects:
  2780 ;;		On entry : 0/0
  2781 ;;		On exit  : 0/0
  2782 ;;		Unchanged: 0/0
  2783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2784 ;;      Params:         0       3       0       0
  2785 ;;      Locals:         0       0       0       0
  2786 ;;      Temps:          0       0       0       0
  2787 ;;      Totals:         0       3       0       0
  2788 ;;Total ram usage:        3 bytes
  2789 ;; Hardware stack levels used:    1
  2790 ;; Hardware stack levels required when called:    1
  2791 ;; This function calls:
  2792 ;;		Nothing
  2793 ;; This function is called by:
  2794 ;;		_statePower1
  2795 ;; This function uses a non-reentrant model
  2796 ;;
  2797                           
  2798                           	psect	text19
  2799  0009FE                     __ptext19:
  2800                           	opt stack 0
  2801  0009FE                     _exitPower1:
  2802                           	opt stack 28
  2803                           
  2804                           ;Phases.c: 82: static PhasePower1_Type currentPower1_4;
  2805                           ;Phases.c: 85: currentPower1_4.phaseState = data.phaseState;
  2806                           
  2807                           ; BSR set to: 0
  2808                           ;incstack = 0
  2809  0009FE  C085  F009         	movff	exitPower1@data+1,exitPower1@currentPower1_4+1
  2810                           
  2811                           ;Phases.c: 86: currentPower1_4.stateMain = data.stateMain;
  2812  000A02  C086  F00A         	movff	exitPower1@data+2,exitPower1@currentPower1_4+2
  2813                           
  2814                           ;Phases.c: 88: return (currentPower1_4);
  2815  000A06  C008  F084         	movff	exitPower1@currentPower1_4,?_exitPower1
  2816  000A0A  C009  F085         	movff	exitPower1@currentPower1_4+1,?_exitPower1+1
  2817  000A0E  C00A  F086         	movff	exitPower1@currentPower1_4+2,?_exitPower1+2
  2818  000A12  0012               	return		;funcret
  2819  000A14                     __end_of_exitPower1:
  2820                           	opt stack 0
  2821                           tosu	equ	0xFFF
  2822                           tosh	equ	0xFFE
  2823                           tosl	equ	0xFFD
  2824                           pclath	equ	0xFFA
  2825                           tblptru	equ	0xFF8
  2826                           tblptrh	equ	0xFF7
  2827                           tblptrl	equ	0xFF6
  2828                           tablat	equ	0xFF5
  2829                           prodh	equ	0xFF4
  2830                           prodl	equ	0xFF3
  2831                           postinc0	equ	0xFEE
  2832                           wreg	equ	0xFE8
  2833                           
  2834 ;; *************** function _phPower1 *****************
  2835 ;; Defined at:
  2836 ;;		line 55 in file "Phases.c"
  2837 ;; Parameters:    Size  Location     Type
  2838 ;;  data            3    0[BANK0 ] struct .
  2839 ;; Auto vars:     Size  Location     Type
  2840 ;;		None
  2841 ;; Return value:  Size  Location     Type
  2842 ;;                  3    0[BANK0 ] struct .
  2843 ;; Registers used:
  2844 ;;		wreg, status,2
  2845 ;; Tracked objects:
  2846 ;;		On entry : 0/0
  2847 ;;		On exit  : 0/0
  2848 ;;		Unchanged: 0/0
  2849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2850 ;;      Params:         0       3       0       0
  2851 ;;      Locals:         0       0       0       0
  2852 ;;      Temps:          0       0       0       0
  2853 ;;      Totals:         0       3       0       0
  2854 ;;Total ram usage:        3 bytes
  2855 ;; Hardware stack levels used:    1
  2856 ;; Hardware stack levels required when called:    1
  2857 ;; This function calls:
  2858 ;;		Nothing
  2859 ;; This function is called by:
  2860 ;;		_statePower1
  2861 ;; This function uses a non-reentrant model
  2862 ;;
  2863                           
  2864                           	psect	text20
  2865  000A14                     __ptext20:
  2866                           	opt stack 0
  2867  000A14                     _phPower1:
  2868                           	opt stack 28
  2869                           
  2870                           ;Phases.c: 58: static PhasePower1_Type currentPower1_2;
  2871                           ;Phases.c: 61: currentPower1_2.phaseState = VECTOR_POWER1;
  2872                           
  2873                           ;incstack = 0
  2874  000A14  0E02               	movlw	2
  2875  000A16  6E0F               	movwf	phPower1@currentPower1_2+1,c
  2876                           
  2877                           ;Phases.c: 62: currentPower1_2.stateMain = data.stateMain;
  2878  000A18  C086  F010         	movff	phPower1@data+2,phPower1@currentPower1_2+2
  2879                           
  2880                           ;Phases.c: 64: return (currentPower1_2);
  2881  000A1C  C00E  F084         	movff	phPower1@currentPower1_2,?_phPower1
  2882  000A20  C00F  F085         	movff	phPower1@currentPower1_2+1,?_phPower1+1
  2883  000A24  C010  F086         	movff	phPower1@currentPower1_2+2,?_phPower1+2
  2884  000A28  0012               	return	
  2885  000A2A                     __end_of_phPower1:
  2886                           	opt stack 0
  2887                           tosu	equ	0xFFF
  2888                           tosh	equ	0xFFE
  2889                           tosl	equ	0xFFD
  2890                           pclath	equ	0xFFA
  2891                           tblptru	equ	0xFF8
  2892                           tblptrh	equ	0xFF7
  2893                           tblptrl	equ	0xFF6
  2894                           tablat	equ	0xFF5
  2895                           prodh	equ	0xFF4
  2896                           prodl	equ	0xFF3
  2897                           postinc0	equ	0xFEE
  2898                           wreg	equ	0xFE8
  2899                           
  2900 ;; *************** function _typesPower1 *****************
  2901 ;; Defined at:
  2902 ;;		line 43 in file "Phases.c"
  2903 ;; Parameters:    Size  Location     Type
  2904 ;;  data            3    0[BANK0 ] struct .
  2905 ;; Auto vars:     Size  Location     Type
  2906 ;;		None
  2907 ;; Return value:  Size  Location     Type
  2908 ;;                  3    0[BANK0 ] struct .
  2909 ;; Registers used:
  2910 ;;		wreg, status,2
  2911 ;; Tracked objects:
  2912 ;;		On entry : 0/0
  2913 ;;		On exit  : 0/0
  2914 ;;		Unchanged: 0/0
  2915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2916 ;;      Params:         0       3       0       0
  2917 ;;      Locals:         0       0       0       0
  2918 ;;      Temps:          0       0       0       0
  2919 ;;      Totals:         0       3       0       0
  2920 ;;Total ram usage:        3 bytes
  2921 ;; Hardware stack levels used:    1
  2922 ;; Hardware stack levels required when called:    1
  2923 ;; This function calls:
  2924 ;;		Nothing
  2925 ;; This function is called by:
  2926 ;;		_statePower1
  2927 ;; This function uses a non-reentrant model
  2928 ;;
  2929                           
  2930                           	psect	text21
  2931  000A2A                     __ptext21:
  2932                           	opt stack 0
  2933  000A2A                     _typesPower1:
  2934                           	opt stack 28
  2935                           
  2936                           ;Phases.c: 46: static PhasePower1_Type currentPower1_1;
  2937                           ;Phases.c: 49: currentPower1_1.phaseState = PHASES_POWER1;
  2938                           
  2939                           ;incstack = 0
  2940  000A2A  0E01               	movlw	1
  2941  000A2C  6E12               	movwf	typesPower1@currentPower1_1+1,c
  2942                           
  2943                           ;Phases.c: 50: currentPower1_1.stateMain = data.stateMain;
  2944  000A2E  C086  F013         	movff	typesPower1@data+2,typesPower1@currentPower1_1+2
  2945                           
  2946                           ;Phases.c: 52: return (currentPower1_1);
  2947  000A32  C011  F084         	movff	typesPower1@currentPower1_1,?_typesPower1
  2948  000A36  C012  F085         	movff	typesPower1@currentPower1_1+1,?_typesPower1+1
  2949  000A3A  C013  F086         	movff	typesPower1@currentPower1_1+2,?_typesPower1+2
  2950  000A3E  0012               	return	
  2951  000A40                     __end_of_typesPower1:
  2952                           	opt stack 0
  2953                           tosu	equ	0xFFF
  2954                           tosh	equ	0xFFE
  2955                           tosl	equ	0xFFD
  2956                           pclath	equ	0xFFA
  2957                           tblptru	equ	0xFF8
  2958                           tblptrh	equ	0xFF7
  2959                           tblptrl	equ	0xFF6
  2960                           tablat	equ	0xFF5
  2961                           prodh	equ	0xFF4
  2962                           prodl	equ	0xFF3
  2963                           postinc0	equ	0xFEE
  2964                           wreg	equ	0xFE8
  2965                           
  2966 ;; *************** function _vectorPower1 *****************
  2967 ;; Defined at:
  2968 ;;		line 67 in file "Phases.c"
  2969 ;; Parameters:    Size  Location     Type
  2970 ;;  data            3    0[BANK0 ] struct .
  2971 ;; Auto vars:     Size  Location     Type
  2972 ;;		None
  2973 ;; Return value:  Size  Location     Type
  2974 ;;                  3    0[BANK0 ] struct .
  2975 ;; Registers used:
  2976 ;;		wreg, status,2
  2977 ;; Tracked objects:
  2978 ;;		On entry : 0/0
  2979 ;;		On exit  : 0/0
  2980 ;;		Unchanged: 0/0
  2981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2982 ;;      Params:         0       3       0       0
  2983 ;;      Locals:         0       0       0       0
  2984 ;;      Temps:          0       0       0       0
  2985 ;;      Totals:         0       3       0       0
  2986 ;;Total ram usage:        3 bytes
  2987 ;; Hardware stack levels used:    1
  2988 ;; Hardware stack levels required when called:    1
  2989 ;; This function calls:
  2990 ;;		Nothing
  2991 ;; This function is called by:
  2992 ;;		_statePower1
  2993 ;; This function uses a non-reentrant model
  2994 ;;
  2995                           
  2996                           	psect	text22
  2997  000A40                     __ptext22:
  2998                           	opt stack 0
  2999  000A40                     _vectorPower1:
  3000                           	opt stack 28
  3001                           
  3002                           ;Phases.c: 70: static PhasePower1_Type currentPower1_3;
  3003                           ;Phases.c: 73: currentPower1_3.phaseState = EXIT_POWER1;
  3004                           
  3005                           ;incstack = 0
  3006  000A40  0E03               	movlw	3
  3007  000A42  6E0C               	movwf	vectorPower1@currentPower1_3+1,c
  3008                           
  3009                           ;Phases.c: 74: currentPower1_3.stateMain = data.stateMain;
  3010  000A44  C086  F00D         	movff	vectorPower1@data+2,vectorPower1@currentPower1_3+2
  3011                           
  3012                           ;Phases.c: 76: return (currentPower1_3);
  3013  000A48  C00B  F084         	movff	vectorPower1@currentPower1_3,?_vectorPower1
  3014  000A4C  C00C  F085         	movff	vectorPower1@currentPower1_3+1,?_vectorPower1+1
  3015  000A50  C00D  F086         	movff	vectorPower1@currentPower1_3+2,?_vectorPower1+2
  3016  000A54  0012               	return	
  3017  000A56                     __end_of_vectorPower1:
  3018                           	opt stack 0
  3019                           tosu	equ	0xFFF
  3020                           tosh	equ	0xFFE
  3021                           tosl	equ	0xFFD
  3022                           pclath	equ	0xFFA
  3023                           tblptru	equ	0xFF8
  3024                           tblptrh	equ	0xFF7
  3025                           tblptrl	equ	0xFF6
  3026                           tablat	equ	0xFF5
  3027                           prodh	equ	0xFF4
  3028                           prodl	equ	0xFF3
  3029                           postinc0	equ	0xFEE
  3030                           wreg	equ	0xFE8
  3031                           
  3032 ;; *************** function _exitPhaseAngle *****************
  3033 ;; Defined at:
  3034 ;;		line 211 in file "Phases.c"
  3035 ;; Parameters:    Size  Location     Type
  3036 ;;  data            3    0[BANK0 ] struct .
  3037 ;; Auto vars:     Size  Location     Type
  3038 ;;		None
  3039 ;; Return value:  Size  Location     Type
  3040 ;;                  3    0[BANK0 ] struct .
  3041 ;; Registers used:
  3042 ;;		None
  3043 ;; Tracked objects:
  3044 ;;		On entry : 0/0
  3045 ;;		On exit  : 0/0
  3046 ;;		Unchanged: 0/0
  3047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3048 ;;      Params:         0       3       0       0
  3049 ;;      Locals:         0       0       0       0
  3050 ;;      Temps:          0       0       0       0
  3051 ;;      Totals:         0       3       0       0
  3052 ;;Total ram usage:        3 bytes
  3053 ;; Hardware stack levels used:    1
  3054 ;; Hardware stack levels required when called:    1
  3055 ;; This function calls:
  3056 ;;		Nothing
  3057 ;; This function is called by:
  3058 ;;		_statePhaseAngle
  3059 ;; This function uses a non-reentrant model
  3060 ;;
  3061                           
  3062                           	psect	text23
  3063  000A56                     __ptext23:
  3064                           	opt stack 0
  3065  000A56                     _exitPhaseAngle:
  3066                           	opt stack 28
  3067                           
  3068                           ;Phases.c: 214: static PhasePhaseAngle_Type currentPhaseAngle3;
  3069                           ;Phases.c: 217: currentPhaseAngle3.phaseState = data.phaseState;
  3070                           
  3071                           ;incstack = 0
  3072  000A56  C085  F06D         	movff	exitPhaseAngle@data+1,exitPhaseAngle@currentPhaseAngle3+1
  3073                           
  3074                           ;Phases.c: 218: currentPhaseAngle3.stateMain = data.stateMain;
  3075  000A5A  C086  F06E         	movff	exitPhaseAngle@data+2,exitPhaseAngle@currentPhaseAngle3+2
  3076                           
  3077                           ;Phases.c: 220: return (currentPhaseAngle3);
  3078  000A5E  C06C  F084         	movff	exitPhaseAngle@currentPhaseAngle3,?_exitPhaseAngle
  3079  000A62  C06D  F085         	movff	exitPhaseAngle@currentPhaseAngle3+1,?_exitPhaseAngle+1
  3080  000A66  C06E  F086         	movff	exitPhaseAngle@currentPhaseAngle3+2,?_exitPhaseAngle+2
  3081  000A6A  0012               	return		;funcret
  3082  000A6C                     __end_of_exitPhaseAngle:
  3083                           	opt stack 0
  3084                           tosu	equ	0xFFF
  3085                           tosh	equ	0xFFE
  3086                           tosl	equ	0xFFD
  3087                           pclath	equ	0xFFA
  3088                           tblptru	equ	0xFF8
  3089                           tblptrh	equ	0xFF7
  3090                           tblptrl	equ	0xFF6
  3091                           tablat	equ	0xFF5
  3092                           prodh	equ	0xFF4
  3093                           prodl	equ	0xFF3
  3094                           postinc0	equ	0xFEE
  3095                           wreg	equ	0xFE8
  3096                           
  3097 ;; *************** function _phPhaseAngle *****************
  3098 ;; Defined at:
  3099 ;;		line 187 in file "Phases.c"
  3100 ;; Parameters:    Size  Location     Type
  3101 ;;  data            3    0[BANK0 ] struct .
  3102 ;; Auto vars:     Size  Location     Type
  3103 ;;		None
  3104 ;; Return value:  Size  Location     Type
  3105 ;;                  3    0[BANK0 ] struct .
  3106 ;; Registers used:
  3107 ;;		wreg, status,2
  3108 ;; Tracked objects:
  3109 ;;		On entry : 0/0
  3110 ;;		On exit  : 0/0
  3111 ;;		Unchanged: 0/0
  3112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3113 ;;      Params:         0       3       0       0
  3114 ;;      Locals:         0       0       0       0
  3115 ;;      Temps:          0       0       0       0
  3116 ;;      Totals:         0       3       0       0
  3117 ;;Total ram usage:        3 bytes
  3118 ;; Hardware stack levels used:    1
  3119 ;; Hardware stack levels required when called:    1
  3120 ;; This function calls:
  3121 ;;		Nothing
  3122 ;; This function is called by:
  3123 ;;		_statePhaseAngle
  3124 ;; This function uses a non-reentrant model
  3125 ;;
  3126                           
  3127                           	psect	text24
  3128  000946                     __ptext24:
  3129                           	opt stack 0
  3130  000946                     _phPhaseAngle:
  3131                           	opt stack 28
  3132                           
  3133                           ;Phases.c: 190: static PhasePhaseAngle_Type currentPhaseAngle1;
  3134                           ;Phases.c: 193: currentPhaseAngle1.phaseState = VI_PA;
  3135                           
  3136                           ;incstack = 0
  3137  000946  0E01               	movlw	1
  3138  000948  0100               	movlb	0	; () banked
  3139  00094A  6F73               	movwf	(phPhaseAngle@currentPhaseAngle1+1)& (0+255),b
  3140                           
  3141                           ; BSR set to: 0
  3142                           ;Phases.c: 194: currentPhaseAngle1.stateMain = data.stateMain;
  3143  00094C  C086  F074         	movff	phPhaseAngle@data+2,phPhaseAngle@currentPhaseAngle1+2
  3144                           
  3145                           ; BSR set to: 0
  3146                           ;Phases.c: 196: return (currentPhaseAngle1);
  3147  000950  C072  F084         	movff	phPhaseAngle@currentPhaseAngle1,?_phPhaseAngle
  3148  000954  C073  F085         	movff	phPhaseAngle@currentPhaseAngle1+1,?_phPhaseAngle+1
  3149  000958  C074  F086         	movff	phPhaseAngle@currentPhaseAngle1+2,?_phPhaseAngle+2
  3150  00095C  0012               	return	
  3151  00095E                     __end_of_phPhaseAngle:
  3152                           	opt stack 0
  3153                           tosu	equ	0xFFF
  3154                           tosh	equ	0xFFE
  3155                           tosl	equ	0xFFD
  3156                           pclath	equ	0xFFA
  3157                           tblptru	equ	0xFF8
  3158                           tblptrh	equ	0xFF7
  3159                           tblptrl	equ	0xFF6
  3160                           tablat	equ	0xFF5
  3161                           prodh	equ	0xFF4
  3162                           prodl	equ	0xFF3
  3163                           postinc0	equ	0xFEE
  3164                           wreg	equ	0xFE8
  3165                           
  3166 ;; *************** function _viPhaseAngle *****************
  3167 ;; Defined at:
  3168 ;;		line 199 in file "Phases.c"
  3169 ;; Parameters:    Size  Location     Type
  3170 ;;  data            3    0[BANK0 ] struct .
  3171 ;; Auto vars:     Size  Location     Type
  3172 ;;		None
  3173 ;; Return value:  Size  Location     Type
  3174 ;;                  3    0[BANK0 ] struct .
  3175 ;; Registers used:
  3176 ;;		wreg, status,2
  3177 ;; Tracked objects:
  3178 ;;		On entry : 0/0
  3179 ;;		On exit  : 0/0
  3180 ;;		Unchanged: 0/0
  3181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3182 ;;      Params:         0       3       0       0
  3183 ;;      Locals:         0       0       0       0
  3184 ;;      Temps:          0       0       0       0
  3185 ;;      Totals:         0       3       0       0
  3186 ;;Total ram usage:        3 bytes
  3187 ;; Hardware stack levels used:    1
  3188 ;; Hardware stack levels required when called:    1
  3189 ;; This function calls:
  3190 ;;		Nothing
  3191 ;; This function is called by:
  3192 ;;		_statePhaseAngle
  3193 ;; This function uses a non-reentrant model
  3194 ;;
  3195                           
  3196                           	psect	text25
  3197  00095E                     __ptext25:
  3198                           	opt stack 0
  3199  00095E                     _viPhaseAngle:
  3200                           	opt stack 28
  3201                           
  3202                           ;Phases.c: 202: static PhasePhaseAngle_Type currentPhaseAngle2;
  3203                           ;Phases.c: 205: currentPhaseAngle2.phaseState = EXIT_PA;
  3204                           
  3205                           ; BSR set to: 0
  3206                           ;incstack = 0
  3207  00095E  0E02               	movlw	2
  3208  000960  0100               	movlb	0	; () banked
  3209  000962  6F70               	movwf	(viPhaseAngle@currentPhaseAngle2+1)& (0+255),b
  3210                           
  3211                           ; BSR set to: 0
  3212                           ;Phases.c: 206: currentPhaseAngle2.stateMain = data.stateMain;
  3213  000964  C086  F071         	movff	viPhaseAngle@data+2,viPhaseAngle@currentPhaseAngle2+2
  3214                           
  3215                           ; BSR set to: 0
  3216                           ;Phases.c: 208: return (currentPhaseAngle2);
  3217  000968  C06F  F084         	movff	viPhaseAngle@currentPhaseAngle2,?_viPhaseAngle
  3218  00096C  C070  F085         	movff	viPhaseAngle@currentPhaseAngle2+1,?_viPhaseAngle+1
  3219  000970  C071  F086         	movff	viPhaseAngle@currentPhaseAngle2+2,?_viPhaseAngle+2
  3220  000974  0012               	return	
  3221  000976                     __end_of_viPhaseAngle:
  3222                           	opt stack 0
  3223                           tosu	equ	0xFFF
  3224                           tosh	equ	0xFFE
  3225                           tosl	equ	0xFFD
  3226                           pclath	equ	0xFFA
  3227                           tblptru	equ	0xFF8
  3228                           tblptrh	equ	0xFF7
  3229                           tblptrl	equ	0xFF6
  3230                           tablat	equ	0xFF5
  3231                           prodh	equ	0xFF4
  3232                           prodl	equ	0xFF3
  3233                           postinc0	equ	0xFEE
  3234                           wreg	equ	0xFE8
  3235                           
  3236 ;; *************** function _generalView *****************
  3237 ;; Defined at:
  3238 ;;		line 19 in file "Phases.c"
  3239 ;; Parameters:    Size  Location     Type
  3240 ;;  data            2   10[BANK0 ] struct .
  3241 ;; Auto vars:     Size  Location     Type
  3242 ;;		None
  3243 ;; Return value:  Size  Location     Type
  3244 ;;                  2   10[BANK0 ] struct .
  3245 ;; Registers used:
  3246 ;;		wreg, status,2
  3247 ;; Tracked objects:
  3248 ;;		On entry : 0/0
  3249 ;;		On exit  : 0/0
  3250 ;;		Unchanged: 0/0
  3251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3252 ;;      Params:         0       2       0       0
  3253 ;;      Locals:         0       0       0       0
  3254 ;;      Temps:          0       0       0       0
  3255 ;;      Totals:         0       2       0       0
  3256 ;;Total ram usage:        2 bytes
  3257 ;; Hardware stack levels used:    1
  3258 ;; Hardware stack levels required when called:    1
  3259 ;; This function calls:
  3260 ;;		Nothing
  3261 ;; This function is called by:
  3262 ;;		_stateMainMenu
  3263 ;; This function uses a non-reentrant model
  3264 ;;
  3265                           
  3266                           	psect	text26
  3267  000ABC                     __ptext26:
  3268                           	opt stack 0
  3269  000ABC                     _generalView:
  3270                           	opt stack 28
  3271                           
  3272                           ;Phases.c: 22: static PhaseMainMenu_Type currentMainMenu2;
  3273                           ;Phases.c: 25: currentMainMenu2.phaseState = VIEW_MENU;
  3274                           
  3275                           ; BSR set to: 0
  3276                           ;incstack = 0
  3277  000ABC  0E02               	movlw	2
  3278  000ABE  6E2C               	movwf	generalView@currentMainMenu2,c
  3279                           
  3280                           ;Phases.c: 26: currentMainMenu2.stateMain = data.stateMain;
  3281  000AC0  C08F  F02D         	movff	generalView@data+1,generalView@currentMainMenu2+1
  3282                           
  3283                           ;Phases.c: 28: return (currentMainMenu2);
  3284  000AC4  C02C  F08E         	movff	generalView@currentMainMenu2,?_generalView
  3285  000AC8  C02D  F08F         	movff	generalView@currentMainMenu2+1,?_generalView+1
  3286  000ACC  0012               	return	
  3287  000ACE                     __end_of_generalView:
  3288                           	opt stack 0
  3289                           tosu	equ	0xFFF
  3290                           tosh	equ	0xFFE
  3291                           tosl	equ	0xFFD
  3292                           pclath	equ	0xFFA
  3293                           tblptru	equ	0xFF8
  3294                           tblptrh	equ	0xFF7
  3295                           tblptrl	equ	0xFF6
  3296                           tablat	equ	0xFF5
  3297                           prodh	equ	0xFF4
  3298                           prodl	equ	0xFF3
  3299                           postinc0	equ	0xFEE
  3300                           wreg	equ	0xFE8
  3301                           
  3302 ;; *************** function _initialLoad *****************
  3303 ;; Defined at:
  3304 ;;		line 4 in file "Phases.c"
  3305 ;; Parameters:    Size  Location     Type
  3306 ;;  data            2   10[BANK0 ] struct .
  3307 ;; Auto vars:     Size  Location     Type
  3308 ;;		None
  3309 ;; Return value:  Size  Location     Type
  3310 ;;                  2   10[BANK0 ] struct .
  3311 ;; Registers used:
  3312 ;;		wreg, status,2, status,0, cstack
  3313 ;; Tracked objects:
  3314 ;;		On entry : 0/0
  3315 ;;		On exit  : 0/0
  3316 ;;		Unchanged: 0/0
  3317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3318 ;;      Params:         0       2       0       0
  3319 ;;      Locals:         0       0       0       0
  3320 ;;      Temps:          0       0       0       0
  3321 ;;      Totals:         0       2       0       0
  3322 ;;Total ram usage:        2 bytes
  3323 ;; Hardware stack levels used:    1
  3324 ;; Hardware stack levels required when called:    5
  3325 ;; This function calls:
  3326 ;;		_LCDNokia_clear
  3327 ;; This function is called by:
  3328 ;;		_stateMainMenu
  3329 ;; This function uses a non-reentrant model
  3330 ;;
  3331                           
  3332                           	psect	text27
  3333  000A6C                     __ptext27:
  3334                           	opt stack 0
  3335  000A6C                     _initialLoad:
  3336                           	opt stack 24
  3337                           
  3338                           ;Phases.c: 7: static PhaseMainMenu_Type currentMainMenu1;
  3339                           ;Phases.c: 10: LCDNokia_clear();
  3340                           
  3341                           ;incstack = 0
  3342  000A6C  ECD7  F003         	call	_LCDNokia_clear	;wreg free
  3343                           
  3344                           ;Phases.c: 13: currentMainMenu1.phaseState = GENERAL_VIEW;
  3345  000A70  0E01               	movlw	1
  3346  000A72  6E2E               	movwf	initialLoad@currentMainMenu1,c
  3347                           
  3348                           ;Phases.c: 14: currentMainMenu1.stateMain = data.stateMain;
  3349  000A74  C08F  F02F         	movff	initialLoad@data+1,initialLoad@currentMainMenu1+1
  3350                           
  3351                           ;Phases.c: 16: return (currentMainMenu1);
  3352  000A78  C02E  F08E         	movff	initialLoad@currentMainMenu1,?_initialLoad
  3353  000A7C  C02F  F08F         	movff	initialLoad@currentMainMenu1+1,?_initialLoad+1
  3354  000A80  0012               	return	
  3355  000A82                     __end_of_initialLoad:
  3356                           	opt stack 0
  3357                           tosu	equ	0xFFF
  3358                           tosh	equ	0xFFE
  3359                           tosl	equ	0xFFD
  3360                           pclath	equ	0xFFA
  3361                           tblptru	equ	0xFF8
  3362                           tblptrh	equ	0xFF7
  3363                           tblptrl	equ	0xFF6
  3364                           tablat	equ	0xFF5
  3365                           prodh	equ	0xFF4
  3366                           prodl	equ	0xFF3
  3367                           postinc0	equ	0xFEE
  3368                           wreg	equ	0xFE8
  3369                           
  3370 ;; *************** function _viewMenu *****************
  3371 ;; Defined at:
  3372 ;;		line 31 in file "Phases.c"
  3373 ;; Parameters:    Size  Location     Type
  3374 ;;  data            2   10[BANK0 ] struct .
  3375 ;; Auto vars:     Size  Location     Type
  3376 ;;		None
  3377 ;; Return value:  Size  Location     Type
  3378 ;;                  2   10[BANK0 ] struct .
  3379 ;; Registers used:
  3380 ;;		None
  3381 ;; Tracked objects:
  3382 ;;		On entry : 0/0
  3383 ;;		On exit  : 0/0
  3384 ;;		Unchanged: 0/0
  3385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3386 ;;      Params:         0       2       0       0
  3387 ;;      Locals:         0       0       0       0
  3388 ;;      Temps:          0       0       0       0
  3389 ;;      Totals:         0       2       0       0
  3390 ;;Total ram usage:        2 bytes
  3391 ;; Hardware stack levels used:    1
  3392 ;; Hardware stack levels required when called:    1
  3393 ;; This function calls:
  3394 ;;		Nothing
  3395 ;; This function is called by:
  3396 ;;		_stateMainMenu
  3397 ;; This function uses a non-reentrant model
  3398 ;;
  3399                           
  3400                           	psect	text28
  3401  000ACE                     __ptext28:
  3402                           	opt stack 0
  3403  000ACE                     _viewMenu:
  3404                           	opt stack 28
  3405                           
  3406                           ;Phases.c: 34: static PhaseMainMenu_Type currentMainMenu3;
  3407                           ;Phases.c: 37: currentMainMenu3.phaseState = data.phaseState;
  3408                           
  3409                           ;incstack = 0
  3410  000ACE  C08E  F02A         	movff	viewMenu@data,viewMenu@currentMainMenu3
  3411                           
  3412                           ;Phases.c: 38: currentMainMenu3.stateMain = data.stateMain;
  3413  000AD2  C08F  F02B         	movff	viewMenu@data+1,viewMenu@currentMainMenu3+1
  3414                           
  3415                           ;Phases.c: 40: return (currentMainMenu3);
  3416  000AD6  C02A  F08E         	movff	viewMenu@currentMainMenu3,?_viewMenu
  3417  000ADA  C02B  F08F         	movff	viewMenu@currentMainMenu3+1,?_viewMenu+1
  3418  000ADE  0012               	return		;funcret
  3419  000AE0                     __end_of_viewMenu:
  3420                           	opt stack 0
  3421                           tosu	equ	0xFFF
  3422                           tosh	equ	0xFFE
  3423                           tosl	equ	0xFFD
  3424                           pclath	equ	0xFFA
  3425                           tblptru	equ	0xFF8
  3426                           tblptrh	equ	0xFF7
  3427                           tblptrl	equ	0xFF6
  3428                           tablat	equ	0xFF5
  3429                           prodh	equ	0xFF4
  3430                           prodl	equ	0xFF3
  3431                           postinc0	equ	0xFEE
  3432                           wreg	equ	0xFE8
  3433                           
  3434 ;; *************** function _LCDNokia_clear *****************
  3435 ;; Defined at:
  3436 ;;		line 174 in file "LCDNokia5110.c"
  3437 ;; Parameters:    Size  Location     Type
  3438 ;;		None
  3439 ;; Auto vars:     Size  Location     Type
  3440 ;;  index           2    8[BANK0 ] unsigned int 
  3441 ;; Return value:  Size  Location     Type
  3442 ;;                  1    wreg      void 
  3443 ;; Registers used:
  3444 ;;		wreg, status,2, status,0, cstack
  3445 ;; Tracked objects:
  3446 ;;		On entry : 0/0
  3447 ;;		On exit  : 0/0
  3448 ;;		Unchanged: 0/0
  3449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3450 ;;      Params:         0       0       0       0
  3451 ;;      Locals:         0       2       0       0
  3452 ;;      Temps:          0       0       0       0
  3453 ;;      Totals:         0       2       0       0
  3454 ;;Total ram usage:        2 bytes
  3455 ;; Hardware stack levels used:    1
  3456 ;; Hardware stack levels required when called:    4
  3457 ;; This function calls:
  3458 ;;		_LCDNokia_gotoXY
  3459 ;;		_LCDNokia_writeByte
  3460 ;; This function is called by:
  3461 ;;		_main
  3462 ;;		_initialLoad
  3463 ;; This function uses a non-reentrant model
  3464 ;;
  3465                           
  3466                           	psect	text29
  3467  0007AE                     __ptext29:
  3468                           	opt stack 0
  3469  0007AE                     _LCDNokia_clear:
  3470                           	opt stack 24
  3471                           
  3472                           ;LCDNokia5110.c: 176: uint16_t index = 0;
  3473                           
  3474                           ;incstack = 0
  3475  0007AE  0E00               	movlw	0
  3476  0007B0  0100               	movlb	0	; () banked
  3477  0007B2  6F8D               	movwf	(LCDNokia_clear@index+1)& (0+255),b
  3478  0007B4  0E00               	movlw	0
  3479  0007B6  6F8C               	movwf	LCDNokia_clear@index& (0+255),b
  3480                           
  3481                           ;LCDNokia5110.c: 178: for (index = 0; index < (84 * 48 / 8); index++)
  3482  0007B8  0E00               	movlw	0
  3483  0007BA  6F8D               	movwf	(LCDNokia_clear@index+1)& (0+255),b
  3484  0007BC  0E00               	movlw	0
  3485  0007BE  6F8C               	movwf	LCDNokia_clear@index& (0+255),b
  3486  0007C0                     l2371:
  3487                           
  3488                           ; BSR set to: 0
  3489  0007C0  0EF8               	movlw	248
  3490  0007C2  5D8C               	subwf	LCDNokia_clear@index& (0+255),w,b
  3491  0007C4  0E01               	movlw	1
  3492  0007C6  598D               	subwfb	(LCDNokia_clear@index+1)& (0+255),w,b
  3493  0007C8  B0D8               	btfsc	status,0,c
  3494  0007CA  D009               	goto	u1040
  3495                           
  3496                           ; BSR set to: 0
  3497                           ;LCDNokia5110.c: 179: {
  3498                           ;LCDNokia5110.c: 180: LCDNokia_writeByte(1, 0x00);
  3499                           
  3500                           ; BSR set to: 0
  3501                           
  3502                           ; BSR set to: 0
  3503  0007CC  0E00               	movlw	0
  3504  0007CE  6F88               	movwf	LCDNokia_writeByte@data& (0+255),b
  3505  0007D0  0E01               	movlw	1
  3506  0007D2  EC29  F004         	call	_LCDNokia_writeByte
  3507  0007D6  0100               	movlb	0	; () banked
  3508  0007D8  4B8C               	infsnz	LCDNokia_clear@index& (0+255),f,b
  3509  0007DA  2B8D               	incf	(LCDNokia_clear@index+1)& (0+255),f,b
  3510  0007DC  D7F1               	goto	l2371
  3511  0007DE                     u1040:
  3512                           
  3513                           ; BSR set to: 0
  3514                           ;LCDNokia5110.c: 181: }
  3515                           ;LCDNokia5110.c: 183: LCDNokia_gotoXY(0, 0);
  3516                           
  3517                           ; BSR set to: 0
  3518  0007DE  0E00               	movlw	0
  3519  0007E0  6F8A               	movwf	LCDNokia_gotoXY@y& (0+255),b
  3520  0007E2  0E00               	movlw	0
  3521  0007E4  EC53  F004         	call	_LCDNokia_gotoXY
  3522  0007E8  0012               	return		;funcret
  3523  0007EA                     __end_of_LCDNokia_clear:
  3524                           	opt stack 0
  3525                           tosu	equ	0xFFF
  3526                           tosh	equ	0xFFE
  3527                           tosl	equ	0xFFD
  3528                           pclath	equ	0xFFA
  3529                           tblptru	equ	0xFF8
  3530                           tblptrh	equ	0xFF7
  3531                           tblptrl	equ	0xFF6
  3532                           tablat	equ	0xFF5
  3533                           prodh	equ	0xFF4
  3534                           prodl	equ	0xFF3
  3535                           postinc0	equ	0xFEE
  3536                           wreg	equ	0xFE8
  3537                           status	equ	0xFD8
  3538                           
  3539 ;; *************** function _LCDNokia_gotoXY *****************
  3540 ;; Defined at:
  3541 ;;		line 186 in file "LCDNokia5110.c"
  3542 ;; Parameters:    Size  Location     Type
  3543 ;;  x               1    wreg     unsigned char 
  3544 ;;  y               1    6[BANK0 ] unsigned char 
  3545 ;; Auto vars:     Size  Location     Type
  3546 ;;  x               1    7[BANK0 ] unsigned char 
  3547 ;; Return value:  Size  Location     Type
  3548 ;;                  1    wreg      void 
  3549 ;; Registers used:
  3550 ;;		wreg, status,2, status,0, cstack
  3551 ;; Tracked objects:
  3552 ;;		On entry : 0/0
  3553 ;;		On exit  : 0/0
  3554 ;;		Unchanged: 0/0
  3555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3556 ;;      Params:         0       1       0       0
  3557 ;;      Locals:         0       1       0       0
  3558 ;;      Temps:          0       0       0       0
  3559 ;;      Totals:         0       2       0       0
  3560 ;;Total ram usage:        2 bytes
  3561 ;; Hardware stack levels used:    1
  3562 ;; Hardware stack levels required when called:    3
  3563 ;; This function calls:
  3564 ;;		_LCDNokia_writeByte
  3565 ;; This function is called by:
  3566 ;;		_LCDNokia_clear
  3567 ;; This function uses a non-reentrant model
  3568 ;;
  3569                           
  3570                           	psect	text30
  3571  0008A6                     __ptext30:
  3572                           	opt stack 0
  3573  0008A6                     _LCDNokia_gotoXY:
  3574                           	opt stack 24
  3575                           
  3576                           ;incstack = 0
  3577                           ;LCDNokia_gotoXY@x stored from wreg
  3578  0008A6  0100               	movlb	0	; () banked
  3579  0008A8  6F8B               	movwf	LCDNokia_gotoXY@x& (0+255),b
  3580                           
  3581                           ;LCDNokia5110.c: 188: LCDNokia_writeByte(0, 0x80 | x);
  3582  0008AA  0100               	movlb	0	; () banked
  3583  0008AC  518B               	movf	LCDNokia_gotoXY@x& (0+255),w,b
  3584  0008AE  0980               	iorlw	128
  3585  0008B0  6F88               	movwf	LCDNokia_writeByte@data& (0+255),b
  3586  0008B2  0E00               	movlw	0
  3587  0008B4  EC29  F004         	call	_LCDNokia_writeByte
  3588                           
  3589                           ;LCDNokia5110.c: 189: LCDNokia_writeByte(0, 0x40 | y);
  3590  0008B8  0100               	movlb	0	; () banked
  3591  0008BA  518A               	movf	LCDNokia_gotoXY@y& (0+255),w,b
  3592  0008BC  0940               	iorlw	64
  3593  0008BE  6F88               	movwf	LCDNokia_writeByte@data& (0+255),b
  3594  0008C0  0E00               	movlw	0
  3595  0008C2  EC29  F004         	call	_LCDNokia_writeByte
  3596  0008C6  0012               	return		;funcret
  3597  0008C8                     __end_of_LCDNokia_gotoXY:
  3598                           	opt stack 0
  3599                           tosu	equ	0xFFF
  3600                           tosh	equ	0xFFE
  3601                           tosl	equ	0xFFD
  3602                           pclath	equ	0xFFA
  3603                           tblptru	equ	0xFF8
  3604                           tblptrh	equ	0xFF7
  3605                           tblptrl	equ	0xFF6
  3606                           tablat	equ	0xFF5
  3607                           prodh	equ	0xFF4
  3608                           prodl	equ	0xFF3
  3609                           postinc0	equ	0xFEE
  3610                           wreg	equ	0xFE8
  3611                           status	equ	0xFD8
  3612                           
  3613 ;; *************** function _exitFrequency *****************
  3614 ;; Defined at:
  3615 ;;		line 235 in file "Phases.c"
  3616 ;; Parameters:    Size  Location     Type
  3617 ;;  data            3    0[BANK0 ] struct .
  3618 ;; Auto vars:     Size  Location     Type
  3619 ;;		None
  3620 ;; Return value:  Size  Location     Type
  3621 ;;                  3    0[BANK0 ] struct .
  3622 ;; Registers used:
  3623 ;;		None
  3624 ;; Tracked objects:
  3625 ;;		On entry : 0/0
  3626 ;;		On exit  : 0/0
  3627 ;;		Unchanged: 0/0
  3628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3629 ;;      Params:         0       3       0       0
  3630 ;;      Locals:         0       0       0       0
  3631 ;;      Temps:          0       0       0       0
  3632 ;;      Totals:         0       3       0       0
  3633 ;;Total ram usage:        3 bytes
  3634 ;; Hardware stack levels used:    1
  3635 ;; Hardware stack levels required when called:    1
  3636 ;; This function calls:
  3637 ;;		Nothing
  3638 ;; This function is called by:
  3639 ;;		_stateFrequency
  3640 ;; This function uses a non-reentrant model
  3641 ;;
  3642                           
  3643                           	psect	text31
  3644  000A82                     __ptext31:
  3645                           	opt stack 0
  3646  000A82                     _exitFrequency:
  3647                           	opt stack 28
  3648                           
  3649                           ;Phases.c: 238: static PhaseFrequency_Type currentFrequency2;
  3650                           ;Phases.c: 241: currentFrequency2.phaseState = data.phaseState;
  3651                           
  3652                           ;incstack = 0
  3653  000A82  C085  F067         	movff	exitFrequency@data+1,exitFrequency@currentFrequency2+1
  3654                           
  3655                           ;Phases.c: 242: currentFrequency2.stateMain = data.stateMain;
  3656  000A86  C086  F068         	movff	exitFrequency@data+2,exitFrequency@currentFrequency2+2
  3657                           
  3658                           ;Phases.c: 244: return (currentFrequency2);
  3659  000A8A  C066  F084         	movff	exitFrequency@currentFrequency2,?_exitFrequency
  3660  000A8E  C067  F085         	movff	exitFrequency@currentFrequency2+1,?_exitFrequency+1
  3661  000A92  C068  F086         	movff	exitFrequency@currentFrequency2+2,?_exitFrequency+2
  3662  000A96  0012               	return		;funcret
  3663  000A98                     __end_of_exitFrequency:
  3664                           	opt stack 0
  3665                           tosu	equ	0xFFF
  3666                           tosh	equ	0xFFE
  3667                           tosl	equ	0xFFD
  3668                           pclath	equ	0xFFA
  3669                           tblptru	equ	0xFF8
  3670                           tblptrh	equ	0xFF7
  3671                           tblptrl	equ	0xFF6
  3672                           tablat	equ	0xFF5
  3673                           prodh	equ	0xFF4
  3674                           prodl	equ	0xFF3
  3675                           postinc0	equ	0xFEE
  3676                           wreg	equ	0xFE8
  3677                           status	equ	0xFD8
  3678                           
  3679 ;; *************** function _showFrequency *****************
  3680 ;; Defined at:
  3681 ;;		line 223 in file "Phases.c"
  3682 ;; Parameters:    Size  Location     Type
  3683 ;;  data            3    0[BANK0 ] struct .
  3684 ;; Auto vars:     Size  Location     Type
  3685 ;;		None
  3686 ;; Return value:  Size  Location     Type
  3687 ;;                  3    0[BANK0 ] struct .
  3688 ;; Registers used:
  3689 ;;		wreg, status,2
  3690 ;; Tracked objects:
  3691 ;;		On entry : 0/0
  3692 ;;		On exit  : 0/0
  3693 ;;		Unchanged: 0/0
  3694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3695 ;;      Params:         0       3       0       0
  3696 ;;      Locals:         0       0       0       0
  3697 ;;      Temps:          0       0       0       0
  3698 ;;      Totals:         0       3       0       0
  3699 ;;Total ram usage:        3 bytes
  3700 ;; Hardware stack levels used:    1
  3701 ;; Hardware stack levels required when called:    1
  3702 ;; This function calls:
  3703 ;;		Nothing
  3704 ;; This function is called by:
  3705 ;;		_stateFrequency
  3706 ;; This function uses a non-reentrant model
  3707 ;;
  3708                           
  3709                           	psect	text32
  3710  000976                     __ptext32:
  3711                           	opt stack 0
  3712  000976                     _showFrequency:
  3713                           	opt stack 28
  3714                           
  3715                           ;Phases.c: 226: static PhaseFrequency_Type currentFrequency1;
  3716                           ;Phases.c: 229: currentFrequency1.phaseState = EXIT_FREQUENCY;
  3717                           
  3718                           ;incstack = 0
  3719  000976  0E01               	movlw	1
  3720  000978  0100               	movlb	0	; () banked
  3721  00097A  6F6A               	movwf	(showFrequency@currentFrequency1+1)& (0+255),b
  3722                           
  3723                           ; BSR set to: 0
  3724                           ;Phases.c: 230: currentFrequency1.stateMain = data.stateMain;
  3725  00097C  C086  F06B         	movff	showFrequency@data+2,showFrequency@currentFrequency1+2
  3726                           
  3727                           ; BSR set to: 0
  3728                           ;Phases.c: 232: return (currentFrequency1);
  3729  000980  C069  F084         	movff	showFrequency@currentFrequency1,?_showFrequency
  3730  000984  C06A  F085         	movff	showFrequency@currentFrequency1+1,?_showFrequency+1
  3731  000988  C06B  F086         	movff	showFrequency@currentFrequency1+2,?_showFrequency+2
  3732  00098C  0012               	return	
  3733  00098E                     __end_of_showFrequency:
  3734                           	opt stack 0
  3735                           tosu	equ	0xFFF
  3736                           tosh	equ	0xFFE
  3737                           tosl	equ	0xFFD
  3738                           pclath	equ	0xFFA
  3739                           tblptru	equ	0xFF8
  3740                           tblptrh	equ	0xFF7
  3741                           tblptrl	equ	0xFF6
  3742                           tablat	equ	0xFF5
  3743                           prodh	equ	0xFF4
  3744                           prodl	equ	0xFF3
  3745                           postinc0	equ	0xFEE
  3746                           wreg	equ	0xFE8
  3747                           status	equ	0xFD8
  3748                           
  3749 ;; *************** function _UART_init *****************
  3750 ;; Defined at:
  3751 ;;		line 11 in file "UART.c"
  3752 ;; Parameters:    Size  Location     Type
  3753 ;;  baudRate        2    5[BANK0 ] enum E3061
  3754 ;; Auto vars:     Size  Location     Type
  3755 ;;		None
  3756 ;; Return value:  Size  Location     Type
  3757 ;;                  1    wreg      void 
  3758 ;; Registers used:
  3759 ;;		wreg, status,2, status,0, cstack
  3760 ;; Tracked objects:
  3761 ;;		On entry : 0/0
  3762 ;;		On exit  : 0/0
  3763 ;;		Unchanged: 0/0
  3764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3765 ;;      Params:         0       2       0       0
  3766 ;;      Locals:         0       0       0       0
  3767 ;;      Temps:          0       2       0       0
  3768 ;;      Totals:         0       4       0       0
  3769 ;;Total ram usage:        4 bytes
  3770 ;; Hardware stack levels used:    1
  3771 ;; Hardware stack levels required when called:    2
  3772 ;; This function calls:
  3773 ;;		_GPIO_dataDirectionPIN
  3774 ;; This function is called by:
  3775 ;;		_main
  3776 ;; This function uses a non-reentrant model
  3777 ;;
  3778                           
  3779                           	psect	text33
  3780  00021C                     __ptext33:
  3781                           	opt stack 0
  3782  00021C                     _UART_init:
  3783                           	opt stack 28
  3784                           
  3785                           ;UART.c: 13: GPIO_dataDirectionPIN(GPIO_C, 6, GPIO_OUTPUT);
  3786                           
  3787                           ; BSR set to: 0
  3788                           ;incstack = 0
  3789  00021C  0E06               	movlw	6
  3790  00021E  0100               	movlb	0	; () banked
  3791  000220  6F84               	movwf	GPIO_dataDirectionPIN@pin& (0+255),b
  3792  000222  0E01               	movlw	1
  3793  000224  6F85               	movwf	GPIO_dataDirectionPIN@state& (0+255),b
  3794  000226  0E02               	movlw	2
  3795  000228  EC53  F000         	call	_GPIO_dataDirectionPIN
  3796                           
  3797                           ;UART.c: 14: GPIO_dataDirectionPIN(GPIO_C, 7, GPIO_INPUT);
  3798  00022C  0E07               	movlw	7
  3799  00022E  0100               	movlb	0	; () banked
  3800  000230  6F84               	movwf	GPIO_dataDirectionPIN@pin& (0+255),b
  3801  000232  0E00               	movlw	0
  3802  000234  6F85               	movwf	GPIO_dataDirectionPIN@state& (0+255),b
  3803  000236  0E02               	movlw	2
  3804  000238  EC53  F000         	call	_GPIO_dataDirectionPIN
  3805                           
  3806                           ;UART.c: 17: TXSTAbits.SYNC = 0;
  3807  00023C  98AC               	bcf	4012,4,c	;volatile
  3808                           
  3809                           ;UART.c: 19: TXSTAbits.TX9 = 0;
  3810  00023E  9CAC               	bcf	4012,6,c	;volatile
  3811                           
  3812                           ;UART.c: 21: TXSTAbits.TXEN = 1;
  3813  000240  8AAC               	bsf	4012,5,c	;volatile
  3814                           
  3815                           ;UART.c: 24: RCSTAbits.RX9 = 0;
  3816  000242  9CAB               	bcf	4011,6,c	;volatile
  3817                           
  3818                           ;UART.c: 26: RCSTAbits.CREN = 1;
  3819  000244  88AB               	bsf	4011,4,c	;volatile
  3820                           
  3821                           ;UART.c: 28: RCSTAbits.SPEN = 1;
  3822  000246  8EAB               	bsf	4011,7,c	;volatile
  3823                           
  3824                           ;UART.c: 31: BAUDCTLbits.BRG16 = 0;
  3825  000248  96AA               	bcf	4010,3,c	;volatile
  3826                           
  3827                           ;UART.c: 33: TXSTAbits.BRGH = 0;
  3828  00024A  94AC               	bcf	4012,2,c	;volatile
  3829                           
  3830                           ;UART.c: 35: switch(baudRate)
  3831  00024C  D009               	goto	l206
  3832  00024E                     
  3833                           ;UART.c: 38: SPBRG = (103);
  3834  00024E  0E67               	movlw	103
  3835  000250  6EAF               	movwf	4015,c	;volatile
  3836                           
  3837                           ;UART.c: 39: break;
  3838  000252  0012               	return	
  3839  000254                     
  3840                           ;UART.c: 41: SPBRG = (51);
  3841  000254  0E33               	movlw	51
  3842  000256  6EAF               	movwf	4015,c	;volatile
  3843                           
  3844                           ;UART.c: 42: break;
  3845  000258  0012               	return	
  3846  00025A                     
  3847                           ;UART.c: 44: SPBRG = (12);
  3848  00025A  0E0C               	movlw	12
  3849  00025C  6EAF               	movwf	4015,c	;volatile
  3850                           
  3851                           ;UART.c: 48: }
  3852                           
  3853                           ;UART.c: 47: break;
  3854                           
  3855                           ;UART.c: 46: default:
  3856                           
  3857                           ;UART.c: 45: break;
  3858  00025E  0012               	return	
  3859  000260                     l206:
  3860  000260  C089  F08B         	movff	UART_init@baudRate,??_UART_init
  3861  000264  C08A  F08C         	movff	UART_init@baudRate+1,??_UART_init+1
  3862                           
  3863                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
  3864                           ; Switch size 1, requested type "space"
  3865                           ; Number of cases is 3, Range of values is 4 to 37
  3866                           ; switch strategies available:
  3867                           ; Name         Instructions Cycles
  3868                           ; simple_byte           10     6 (average)
  3869                           ;	Chosen strategy is simple_byte
  3870  000268  0100               	movlb	0	; () banked
  3871  00026A  518C               	movf	(??_UART_init+1)& (0+255),w,b
  3872  00026C  0A04               	xorlw	4	; case 4
  3873  00026E  B4D8               	btfsc	status,2,c
  3874  000270  D007               	goto	l2907
  3875  000272  0A0D               	xorlw	13	; case 9
  3876  000274  B4D8               	btfsc	status,2,c
  3877  000276  D009               	goto	l2909
  3878  000278  0A2C               	xorlw	44	; case 37
  3879  00027A  A4D8               	btfss	status,2,c
  3880  00027C  0012               	return	
  3881  00027E  D00A               	goto	l2911
  3882  000280                     l2907:
  3883                           
  3884                           ; BSR set to: 0
  3885                           ; Switch size 1, requested type "space"
  3886                           ; Number of cases is 1, Range of values is 176 to 176
  3887                           ; switch strategies available:
  3888                           ; Name         Instructions Cycles
  3889                           ; simple_byte            4     3 (average)
  3890                           ;	Chosen strategy is simple_byte
  3891  000280  518B               	movf	??_UART_init& (0+255),w,b
  3892  000282  0AB0               	xorlw	176	; case 176
  3893  000284  A4D8               	btfss	status,2,c
  3894  000286  0012               	return	
  3895  000288  D7E2               	goto	l207
  3896  00028A                     l2909:
  3897                           
  3898                           ; BSR set to: 0
  3899                           ; Switch size 1, requested type "space"
  3900                           ; Number of cases is 1, Range of values is 96 to 96
  3901                           ; switch strategies available:
  3902                           ; Name         Instructions Cycles
  3903                           ; simple_byte            4     3 (average)
  3904                           ;	Chosen strategy is simple_byte
  3905  00028A  518B               	movf	??_UART_init& (0+255),w,b
  3906  00028C  0A60               	xorlw	96	; case 96
  3907  00028E  A4D8               	btfss	status,2,c
  3908  000290  0012               	return	
  3909  000292  D7E0               	goto	l209
  3910  000294                     l2911:
  3911                           
  3912                           ; BSR set to: 0
  3913                           ; Switch size 1, requested type "space"
  3914                           ; Number of cases is 1, Range of values is 128 to 128
  3915                           ; switch strategies available:
  3916                           ; Name         Instructions Cycles
  3917                           ; simple_byte            4     3 (average)
  3918                           ;	Chosen strategy is simple_byte
  3919  000294  518B               	movf	??_UART_init& (0+255),w,b
  3920  000296  0A80               	xorlw	128	; case 128
  3921  000298  A4D8               	btfss	status,2,c
  3922  00029A  0012               	return	
  3923  00029C  D7DE               	goto	l210
  3924  00029E                     __end_of_UART_init:
  3925                           	opt stack 0
  3926                           tosu	equ	0xFFF
  3927                           tosh	equ	0xFFE
  3928                           tosl	equ	0xFFD
  3929                           pclath	equ	0xFFA
  3930                           tblptru	equ	0xFF8
  3931                           tblptrh	equ	0xFF7
  3932                           tblptrl	equ	0xFF6
  3933                           tablat	equ	0xFF5
  3934                           prodh	equ	0xFF4
  3935                           prodl	equ	0xFF3
  3936                           postinc0	equ	0xFEE
  3937                           wreg	equ	0xFE8
  3938                           status	equ	0xFD8
  3939                           
  3940 ;; *************** function _SPI_init *****************
  3941 ;; Defined at:
  3942 ;;		line 76 in file "SPI.c"
  3943 ;; Parameters:    Size  Location     Type
  3944 ;;  SPI_Config      2    2[BANK0 ] PTR const struct .
  3945 ;;		 -> SPI_Config(3), 
  3946 ;; Auto vars:     Size  Location     Type
  3947 ;;		None
  3948 ;; Return value:  Size  Location     Type
  3949 ;;                  1    wreg      void 
  3950 ;; Registers used:
  3951 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3952 ;; Tracked objects:
  3953 ;;		On entry : 0/0
  3954 ;;		On exit  : 0/0
  3955 ;;		Unchanged: 0/0
  3956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3957 ;;      Params:         0       2       0       0
  3958 ;;      Locals:         0       0       0       0
  3959 ;;      Temps:          0       2       0       0
  3960 ;;      Totals:         0       4       0       0
  3961 ;;Total ram usage:        4 bytes
  3962 ;; Hardware stack levels used:    1
  3963 ;; Hardware stack levels required when called:    2
  3964 ;; This function calls:
  3965 ;;		_SPI_enableClock
  3966 ;;		_SPI_enablePins
  3967 ;; This function is called by:
  3968 ;;		_main
  3969 ;; This function uses a non-reentrant model
  3970 ;;
  3971                           
  3972                           	psect	text34
  3973  000720                     __ptext34:
  3974                           	opt stack 0
  3975  000720                     _SPI_init:
  3976                           	opt stack 28
  3977                           
  3978                           ;SPI.c: 78: SPI_enableClock(SPI_Config->SPI_Polarity, SPI_Config->SPI_Phase);
  3979                           
  3980                           ;incstack = 0
  3981  000720  0E01               	movlw	1
  3982  000722  0100               	movlb	0	; () banked
  3983  000724  2586               	addwf	SPI_init@SPI_Config& (0+255),w,b
  3984  000726  6F88               	movwf	??_SPI_init& (0+255),b
  3985  000728  0E00               	movlw	0
  3986  00072A  2187               	addwfc	(SPI_init@SPI_Config+1)& (0+255),w,b
  3987  00072C  6F89               	movwf	(??_SPI_init+1)& (0+255),b
  3988  00072E  C088  FFF6         	movff	??_SPI_init,tblptrl
  3989  000732  C089  FFF7         	movff	??_SPI_init+1,tblptrh
  3990  000736                     	if	0	;tblptru may be non-zero
  3991  000736                     	endif
  3992  000736                     	if	0	;tblptru may be non-zero
  3993  000736                     	endif
  3994  000736  0008               	tblrd		*
  3995  000738  CFF5 F084          	movff	tablat,SPI_enableClock@cpol
  3996  00073C  C086  FFF6         	movff	SPI_init@SPI_Config,tblptrl
  3997  000740  C087  FFF7         	movff	SPI_init@SPI_Config+1,tblptrh
  3998  000744                     	if	0	;tblptru may be non-zero
  3999  000744                     	endif
  4000  000744                     	if	0	;tblptru may be non-zero
  4001  000744                     	endif
  4002  000744  0008               	tblrd		*
  4003  000746  50F5               	movf	tablat,w,c
  4004  000748  ECB6  F003         	call	_SPI_enableClock
  4005                           
  4006                           ;SPI.c: 79: SPI_enablePins(SPI_Config->SPI_Clk);
  4007  00074C  0E02               	movlw	2
  4008  00074E  0100               	movlb	0	; () banked
  4009  000750  2586               	addwf	SPI_init@SPI_Config& (0+255),w,b
  4010  000752  6F88               	movwf	??_SPI_init& (0+255),b
  4011  000754  0E00               	movlw	0
  4012  000756  2187               	addwfc	(SPI_init@SPI_Config+1)& (0+255),w,b
  4013  000758  6F89               	movwf	(??_SPI_init+1)& (0+255),b
  4014  00075A  C088  FFF6         	movff	??_SPI_init,tblptrl
  4015  00075E  C089  FFF7         	movff	??_SPI_init+1,tblptrh
  4016  000762                     	if	0	;tblptru may be non-zero
  4017  000762                     	endif
  4018  000762                     	if	0	;tblptru may be non-zero
  4019  000762                     	endif
  4020  000762  0008               	tblrd		*
  4021  000764  50F5               	movf	tablat,w,c
  4022  000766  ECF5  F003         	call	_SPI_enablePins
  4023  00076A  0012               	return		;funcret
  4024  00076C                     __end_of_SPI_init:
  4025                           	opt stack 0
  4026                           tosu	equ	0xFFF
  4027                           tosh	equ	0xFFE
  4028                           tosl	equ	0xFFD
  4029                           pclath	equ	0xFFA
  4030                           tblptru	equ	0xFF8
  4031                           tblptrh	equ	0xFF7
  4032                           tblptrl	equ	0xFF6
  4033                           tablat	equ	0xFF5
  4034                           prodh	equ	0xFF4
  4035                           prodl	equ	0xFF3
  4036                           postinc0	equ	0xFEE
  4037                           wreg	equ	0xFE8
  4038                           status	equ	0xFD8
  4039                           
  4040 ;; *************** function _SPI_enablePins *****************
  4041 ;; Defined at:
  4042 ;;		line 48 in file "SPI.c"
  4043 ;; Parameters:    Size  Location     Type
  4044 ;;  serial          1    wreg     enum E3069
  4045 ;; Auto vars:     Size  Location     Type
  4046 ;;  serial          1    0[BANK0 ] enum E3069
  4047 ;; Return value:  Size  Location     Type
  4048 ;;                  1    wreg      void 
  4049 ;; Registers used:
  4050 ;;		wreg, status,2, status,0
  4051 ;; Tracked objects:
  4052 ;;		On entry : 0/0
  4053 ;;		On exit  : 0/0
  4054 ;;		Unchanged: 0/0
  4055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4056 ;;      Params:         0       0       0       0
  4057 ;;      Locals:         0       1       0       0
  4058 ;;      Temps:          0       0       0       0
  4059 ;;      Totals:         0       1       0       0
  4060 ;;Total ram usage:        1 bytes
  4061 ;; Hardware stack levels used:    1
  4062 ;; Hardware stack levels required when called:    1
  4063 ;; This function calls:
  4064 ;;		Nothing
  4065 ;; This function is called by:
  4066 ;;		_SPI_init
  4067 ;; This function uses a non-reentrant model
  4068 ;;
  4069                           
  4070                           	psect	text35
  4071  0007EA                     __ptext35:
  4072                           	opt stack 0
  4073  0007EA                     _SPI_enablePins:
  4074                           	opt stack 28
  4075                           
  4076                           ;incstack = 0
  4077                           ;SPI_enablePins@serial stored from wreg
  4078  0007EA  0100               	movlb	0	; () banked
  4079  0007EC  6F84               	movwf	SPI_enablePins@serial& (0+255),b
  4080                           
  4081                           ;SPI.c: 50: switch(serial)
  4082  0007EE  D007               	goto	l168
  4083  0007F0                     
  4084                           ;SPI.c: 53: SSPCON &= (0x00);
  4085  0007F0  0E00               	movlw	0
  4086  0007F2  6EC6               	movwf	4038,c	;volatile
  4087                           
  4088                           ;SPI.c: 54: break;
  4089  0007F4  D00F               	goto	l170
  4090  0007F6                     
  4091                           ;SPI.c: 56: SSPCON |= (0x01);
  4092  0007F6  80C6               	bsf	4038,0,c	;volatile
  4093                           
  4094                           ;SPI.c: 57: break;
  4095  0007F8  D00D               	goto	l170
  4096  0007FA                     
  4097                           ;SPI.c: 59: SSPCON |= (0x02);
  4098  0007FA  82C6               	bsf	4038,1,c	;volatile
  4099                           
  4100                           ;SPI.c: 63: }
  4101                           
  4102                           ;SPI.c: 62: break;
  4103                           
  4104                           ;SPI.c: 61: default:
  4105                           
  4106                           ;SPI.c: 60: break;
  4107  0007FC  D00B               	goto	l170
  4108  0007FE                     l168:
  4109  0007FE  0100               	movlb	0	; () banked
  4110  000800  5184               	movf	SPI_enablePins@serial& (0+255),w,b
  4111                           
  4112                           ; Switch size 1, requested type "space"
  4113                           ; Number of cases is 3, Range of values is 0 to 2
  4114                           ; switch strategies available:
  4115                           ; Name         Instructions Cycles
  4116                           ; simple_byte           10     6 (average)
  4117                           ;	Chosen strategy is simple_byte
  4118  000802  0A00               	xorlw	0	; case 0
  4119  000804  B4D8               	btfsc	status,2,c
  4120  000806  D7F4               	goto	l169
  4121  000808  0A01               	xorlw	1	; case 1
  4122  00080A  B4D8               	btfsc	status,2,c
  4123  00080C  D7F4               	goto	l171
  4124  00080E  0A03               	xorlw	3	; case 2
  4125  000810  B4D8               	btfsc	status,2,c
  4126  000812  D7F3               	goto	l172
  4127  000814                     l170:
  4128                           
  4129                           ;SPI.c: 66: TRISCbits.TRISC5 = 0;
  4130  000814  9A94               	bcf	3988,5,c	;volatile
  4131                           
  4132                           ;SPI.c: 68: TRISCbits.TRISC4 = 1;
  4133  000816  8894               	bsf	3988,4,c	;volatile
  4134                           
  4135                           ;SPI.c: 70: TRISCbits.TRISC7 = 0;
  4136  000818  9E94               	bcf	3988,7,c	;volatile
  4137                           
  4138                           ;SPI.c: 73: SSPCON |= (0x20);
  4139  00081A  8AC6               	bsf	4038,5,c	;volatile
  4140  00081C  0012               	return		;funcret
  4141  00081E                     __end_of_SPI_enablePins:
  4142                           	opt stack 0
  4143                           tosu	equ	0xFFF
  4144                           tosh	equ	0xFFE
  4145                           tosl	equ	0xFFD
  4146                           pclath	equ	0xFFA
  4147                           tblptru	equ	0xFF8
  4148                           tblptrh	equ	0xFF7
  4149                           tblptrl	equ	0xFF6
  4150                           tablat	equ	0xFF5
  4151                           prodh	equ	0xFF4
  4152                           prodl	equ	0xFF3
  4153                           postinc0	equ	0xFEE
  4154                           wreg	equ	0xFE8
  4155                           status	equ	0xFD8
  4156                           
  4157 ;; *************** function _SPI_enableClock *****************
  4158 ;; Defined at:
  4159 ;;		line 14 in file "SPI.c"
  4160 ;; Parameters:    Size  Location     Type
  4161 ;;  phase           1    wreg     enum E3065
  4162 ;;  cpol            1    0[BANK0 ] enum E3061
  4163 ;; Auto vars:     Size  Location     Type
  4164 ;;  phase           1    1[BANK0 ] enum E3065
  4165 ;; Return value:  Size  Location     Type
  4166 ;;                  1    wreg      void 
  4167 ;; Registers used:
  4168 ;;		wreg, status,2, status,0
  4169 ;; Tracked objects:
  4170 ;;		On entry : 0/0
  4171 ;;		On exit  : 0/0
  4172 ;;		Unchanged: 0/0
  4173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4174 ;;      Params:         0       1       0       0
  4175 ;;      Locals:         0       1       0       0
  4176 ;;      Temps:          0       0       0       0
  4177 ;;      Totals:         0       2       0       0
  4178 ;;Total ram usage:        2 bytes
  4179 ;; Hardware stack levels used:    1
  4180 ;; Hardware stack levels required when called:    1
  4181 ;; This function calls:
  4182 ;;		Nothing
  4183 ;; This function is called by:
  4184 ;;		_SPI_init
  4185 ;; This function uses a non-reentrant model
  4186 ;;
  4187                           
  4188                           	psect	text36
  4189  00076C                     __ptext36:
  4190                           	opt stack 0
  4191  00076C                     _SPI_enableClock:
  4192                           	opt stack 28
  4193                           
  4194                           ;incstack = 0
  4195                           ;SPI_enableClock@phase stored from wreg
  4196  00076C  0100               	movlb	0	; () banked
  4197  00076E  6F85               	movwf	SPI_enableClock@phase& (0+255),b
  4198                           
  4199                           ;SPI.c: 17: SSPSTAT &= (0x3F);
  4200  000770  0E3F               	movlw	63
  4201  000772  16C7               	andwf	4039,f,c	;volatile
  4202                           
  4203                           ;SPI.c: 18: SSPCON &= (0xC0);
  4204  000774  0EC0               	movlw	192
  4205  000776  16C6               	andwf	4038,f,c	;volatile
  4206                           
  4207                           ;SPI.c: 21: SSPSTAT |= (0x40);
  4208  000778  8CC7               	bsf	4039,6,c	;volatile
  4209                           
  4210                           ;SPI.c: 23: switch(phase)
  4211  00077A  D004               	goto	l155
  4212  00077C                     l156:
  4213                           
  4214                           ; BSR set to: 0
  4215                           ;SPI.c: 26: SSPCONbits.CKP = 0;
  4216  00077C  98C6               	bcf	4038,4,c	;volatile
  4217                           
  4218                           ;SPI.c: 27: break;
  4219  00077E  D00F               	goto	l160
  4220  000780                     l158:
  4221                           
  4222                           ; BSR set to: 0
  4223                           ;SPI.c: 29: SSPCONbits.CKP = 1;
  4224  000780  88C6               	bsf	4038,4,c	;volatile
  4225                           
  4226                           ; BSR set to: 0
  4227                           ;SPI.c: 33: }
  4228                           
  4229                           ; BSR set to: 0
  4230                           ;SPI.c: 32: break;
  4231                           
  4232                           ;SPI.c: 31: default:
  4233                           
  4234                           ;SPI.c: 30: break;
  4235  000782  D00D               	goto	l160
  4236  000784                     l155:
  4237                           
  4238                           ; BSR set to: 0
  4239  000784  0100               	movlb	0	; () banked
  4240  000786  5185               	movf	SPI_enableClock@phase& (0+255),w,b
  4241                           
  4242                           ; Switch size 1, requested type "space"
  4243                           ; Number of cases is 2, Range of values is 0 to 1
  4244                           ; switch strategies available:
  4245                           ; Name         Instructions Cycles
  4246                           ; simple_byte            7     4 (average)
  4247                           ;	Chosen strategy is simple_byte
  4248  000788  0A00               	xorlw	0	; case 0
  4249  00078A  B4D8               	btfsc	status,2,c
  4250  00078C  D7F7               	goto	l156
  4251  00078E  0A01               	xorlw	1	; case 1
  4252  000790  B4D8               	btfsc	status,2,c
  4253  000792  D7F6               	goto	l158
  4254                           
  4255                           ; BSR set to: 0
  4256                           ;SPI.c: 35: switch(cpol)
  4257  000794  D004               	goto	l160
  4258  000796                     l161:
  4259                           
  4260                           ; BSR set to: 0
  4261                           ;SPI.c: 38: SSPSTATbits.CKE = 0;
  4262  000796  9CC7               	bcf	4039,6,c	;volatile
  4263                           
  4264                           ;SPI.c: 39: break;
  4265  000798  0012               	return	
  4266  00079A                     l163:
  4267                           
  4268                           ; BSR set to: 0
  4269                           ;SPI.c: 41: SSPSTATbits.CKE = 1;
  4270  00079A  8CC7               	bsf	4039,6,c	;volatile
  4271                           
  4272                           ; BSR set to: 0
  4273                           ;SPI.c: 45: }
  4274                           
  4275                           ; BSR set to: 0
  4276                           ;SPI.c: 44: break;
  4277                           
  4278                           ;SPI.c: 43: default:
  4279                           
  4280                           ;SPI.c: 42: break;
  4281  00079C  0012               	return	
  4282  00079E                     l160:
  4283                           
  4284                           ; BSR set to: 0
  4285                           
  4286                           ; BSR set to: 0
  4287  00079E  5184               	movf	SPI_enableClock@cpol& (0+255),w,b
  4288                           
  4289                           ; Switch size 1, requested type "space"
  4290                           ; Number of cases is 2, Range of values is 0 to 1
  4291                           ; switch strategies available:
  4292                           ; Name         Instructions Cycles
  4293                           ; simple_byte            7     4 (average)
  4294                           ;	Chosen strategy is simple_byte
  4295  0007A0  0A00               	xorlw	0	; case 0
  4296  0007A2  B4D8               	btfsc	status,2,c
  4297  0007A4  D7F8               	goto	l161
  4298  0007A6  0A01               	xorlw	1	; case 1
  4299  0007A8  A4D8               	btfss	status,2,c
  4300  0007AA  0012               	return	
  4301  0007AC  D7F6               	goto	l163
  4302  0007AE                     __end_of_SPI_enableClock:
  4303                           	opt stack 0
  4304                           tosu	equ	0xFFF
  4305                           tosh	equ	0xFFE
  4306                           tosl	equ	0xFFD
  4307                           pclath	equ	0xFFA
  4308                           tblptru	equ	0xFF8
  4309                           tblptrh	equ	0xFF7
  4310                           tblptrl	equ	0xFF6
  4311                           tablat	equ	0xFF5
  4312                           prodh	equ	0xFF4
  4313                           prodl	equ	0xFF3
  4314                           postinc0	equ	0xFEE
  4315                           wreg	equ	0xFE8
  4316                           status	equ	0xFD8
  4317                           
  4318 ;; *************** function _LCDNokia_init *****************
  4319 ;; Defined at:
  4320 ;;		line 106 in file "LCDNokia5110.c"
  4321 ;; Parameters:    Size  Location     Type
  4322 ;;		None
  4323 ;; Auto vars:     Size  Location     Type
  4324 ;;		None
  4325 ;; Return value:  Size  Location     Type
  4326 ;;                  1    wreg      void 
  4327 ;; Registers used:
  4328 ;;		wreg, status,2, status,0, cstack
  4329 ;; Tracked objects:
  4330 ;;		On entry : 0/0
  4331 ;;		On exit  : 0/0
  4332 ;;		Unchanged: 0/0
  4333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4334 ;;      Params:         0       0       0       0
  4335 ;;      Locals:         0       0       0       0
  4336 ;;      Temps:          0       0       0       0
  4337 ;;      Totals:         0       0       0       0
  4338 ;;Total ram usage:        0 bytes
  4339 ;; Hardware stack levels used:    1
  4340 ;; Hardware stack levels required when called:    3
  4341 ;; This function calls:
  4342 ;;		_GPIO_clearPIN
  4343 ;;		_GPIO_dataDirectionPIN
  4344 ;;		_GPIO_setPIN
  4345 ;;		_LCDNokia_writeByte
  4346 ;;		_LCD_delay
  4347 ;; This function is called by:
  4348 ;;		_main
  4349 ;; This function uses a non-reentrant model
  4350 ;;
  4351                           
  4352                           	psect	text37
  4353  000196                     __ptext37:
  4354                           	opt stack 0
  4355  000196                     _LCDNokia_init:
  4356                           	opt stack 27
  4357                           
  4358                           ;LCDNokia5110.c: 109: GPIO_dataDirectionPIN(GPIO_B, 2, GPIO_OUTPUT);
  4359                           
  4360                           ; BSR set to: 0
  4361                           ;incstack = 0
  4362  000196  0E02               	movlw	2
  4363  000198  0100               	movlb	0	; () banked
  4364  00019A  6F84               	movwf	GPIO_dataDirectionPIN@pin& (0+255),b
  4365  00019C  0E01               	movlw	1
  4366  00019E  6F85               	movwf	GPIO_dataDirectionPIN@state& (0+255),b
  4367  0001A0  0E01               	movlw	1
  4368  0001A2  EC53  F000         	call	_GPIO_dataDirectionPIN
  4369                           
  4370                           ;LCDNokia5110.c: 110: GPIO_dataDirectionPIN(GPIO_B, 1, GPIO_OUTPUT);
  4371  0001A6  0E01               	movlw	1
  4372  0001A8  0100               	movlb	0	; () banked
  4373  0001AA  6F84               	movwf	GPIO_dataDirectionPIN@pin& (0+255),b
  4374  0001AC  0E01               	movlw	1
  4375  0001AE  6F85               	movwf	GPIO_dataDirectionPIN@state& (0+255),b
  4376  0001B0  0E01               	movlw	1
  4377  0001B2  EC53  F000         	call	_GPIO_dataDirectionPIN
  4378                           
  4379                           ;LCDNokia5110.c: 112: GPIO_clearPIN(GPIO_B, 1);
  4380  0001B6  0E01               	movlw	1
  4381  0001B8  0100               	movlb	0	; () banked
  4382  0001BA  6F84               	movwf	GPIO_clearPIN@pin& (0+255),b
  4383  0001BC  0E01               	movlw	1
  4384  0001BE  EC4F  F001         	call	_GPIO_clearPIN
  4385                           
  4386                           ;LCDNokia5110.c: 113: LCD_delay();
  4387  0001C2  EC0F  F004         	call	_LCD_delay	;wreg free
  4388                           
  4389                           ;LCDNokia5110.c: 114: GPIO_setPIN(GPIO_B, 1);
  4390  0001C6  0E01               	movlw	1
  4391  0001C8  0100               	movlb	0	; () banked
  4392  0001CA  6F84               	movwf	GPIO_setPIN@pin& (0+255),b
  4393  0001CC  0E01               	movlw	1
  4394  0001CE  EC8C  F001         	call	_GPIO_setPIN
  4395                           
  4396                           ;LCDNokia5110.c: 116: LCDNokia_writeByte(0, 0x21);
  4397  0001D2  0E21               	movlw	33
  4398  0001D4  0100               	movlb	0	; () banked
  4399  0001D6  6F88               	movwf	LCDNokia_writeByte@data& (0+255),b
  4400  0001D8  0E00               	movlw	0
  4401  0001DA  EC29  F004         	call	_LCDNokia_writeByte
  4402                           
  4403                           ;LCDNokia5110.c: 117: LCDNokia_writeByte(0, 0xB8);
  4404  0001DE  0EB8               	movlw	184
  4405  0001E0  0100               	movlb	0	; () banked
  4406  0001E2  6F88               	movwf	LCDNokia_writeByte@data& (0+255),b
  4407  0001E4  0E00               	movlw	0
  4408  0001E6  EC29  F004         	call	_LCDNokia_writeByte
  4409                           
  4410                           ;LCDNokia5110.c: 118: LCDNokia_writeByte(0, 0x04);
  4411  0001EA  0E04               	movlw	4
  4412  0001EC  0100               	movlb	0	; () banked
  4413  0001EE  6F88               	movwf	LCDNokia_writeByte@data& (0+255),b
  4414  0001F0  0E00               	movlw	0
  4415  0001F2  EC29  F004         	call	_LCDNokia_writeByte
  4416                           
  4417                           ;LCDNokia5110.c: 119: LCDNokia_writeByte(0, 0x14);
  4418  0001F6  0E14               	movlw	20
  4419  0001F8  0100               	movlb	0	; () banked
  4420  0001FA  6F88               	movwf	LCDNokia_writeByte@data& (0+255),b
  4421  0001FC  0E00               	movlw	0
  4422  0001FE  EC29  F004         	call	_LCDNokia_writeByte
  4423                           
  4424                           ;LCDNokia5110.c: 121: LCDNokia_writeByte(0, 0x20);
  4425  000202  0E20               	movlw	32
  4426  000204  0100               	movlb	0	; () banked
  4427  000206  6F88               	movwf	LCDNokia_writeByte@data& (0+255),b
  4428  000208  0E00               	movlw	0
  4429  00020A  EC29  F004         	call	_LCDNokia_writeByte
  4430                           
  4431                           ;LCDNokia5110.c: 122: LCDNokia_writeByte(0, 0x0C);
  4432  00020E  0E0C               	movlw	12
  4433  000210  0100               	movlb	0	; () banked
  4434  000212  6F88               	movwf	LCDNokia_writeByte@data& (0+255),b
  4435  000214  0E00               	movlw	0
  4436  000216  EC29  F004         	call	_LCDNokia_writeByte
  4437  00021A  0012               	return		;funcret
  4438  00021C                     __end_of_LCDNokia_init:
  4439                           	opt stack 0
  4440                           tosu	equ	0xFFF
  4441                           tosh	equ	0xFFE
  4442                           tosl	equ	0xFFD
  4443                           pclath	equ	0xFFA
  4444                           tblptru	equ	0xFF8
  4445                           tblptrh	equ	0xFF7
  4446                           tblptrl	equ	0xFF6
  4447                           tablat	equ	0xFF5
  4448                           prodh	equ	0xFF4
  4449                           prodl	equ	0xFF3
  4450                           postinc0	equ	0xFEE
  4451                           wreg	equ	0xFE8
  4452                           status	equ	0xFD8
  4453                           
  4454 ;; *************** function _LCD_delay *****************
  4455 ;; Defined at:
  4456 ;;		line 192 in file "LCDNokia5110.c"
  4457 ;; Parameters:    Size  Location     Type
  4458 ;;		None
  4459 ;; Auto vars:     Size  Location     Type
  4460 ;;  counter         4    0[BANK0 ] unsigned long 
  4461 ;; Return value:  Size  Location     Type
  4462 ;;                  1    wreg      void 
  4463 ;; Registers used:
  4464 ;;		wreg, status,2, status,0
  4465 ;; Tracked objects:
  4466 ;;		On entry : 0/0
  4467 ;;		On exit  : 0/0
  4468 ;;		Unchanged: 0/0
  4469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4470 ;;      Params:         0       0       0       0
  4471 ;;      Locals:         0       4       0       0
  4472 ;;      Temps:          0       0       0       0
  4473 ;;      Totals:         0       4       0       0
  4474 ;;Total ram usage:        4 bytes
  4475 ;; Hardware stack levels used:    1
  4476 ;; Hardware stack levels required when called:    1
  4477 ;; This function calls:
  4478 ;;		Nothing
  4479 ;; This function is called by:
  4480 ;;		_LCDNokia_init
  4481 ;; This function uses a non-reentrant model
  4482 ;;
  4483                           
  4484                           	psect	text38
  4485  00081E                     __ptext38:
  4486                           	opt stack 0
  4487  00081E                     _LCD_delay:
  4488                           	opt stack 28
  4489                           
  4490                           ;LCDNokia5110.c: 194: uint32_t counter;
  4491                           ;LCDNokia5110.c: 196: for(counter = 0; counter < 1500; counter++)
  4492                           
  4493                           ;incstack = 0
  4494  00081E  0E00               	movlw	0
  4495  000820  0100               	movlb	0	; () banked
  4496  000822  6F84               	movwf	LCD_delay@counter& (0+255),b
  4497  000824  0E00               	movlw	0
  4498  000826  6F85               	movwf	(LCD_delay@counter+1)& (0+255),b
  4499  000828  0E00               	movlw	0
  4500  00082A  6F86               	movwf	(LCD_delay@counter+2)& (0+255),b
  4501  00082C  0E00               	movlw	0
  4502  00082E  6F87               	movwf	(LCD_delay@counter+3)& (0+255),b
  4503  000830                     l2567:
  4504                           
  4505                           ; BSR set to: 0
  4506  000830  5187               	movf	(LCD_delay@counter+3)& (0+255),w,b
  4507  000832  1186               	iorwf	(LCD_delay@counter+2)& (0+255),w,b
  4508  000834  E10D               	bnz	l529
  4509  000836  0EDC               	movlw	220
  4510  000838  5D84               	subwf	LCD_delay@counter& (0+255),w,b
  4511  00083A  0E05               	movlw	5
  4512  00083C  5985               	subwfb	(LCD_delay@counter+1)& (0+255),w,b
  4513  00083E  B0D8               	btfsc	status,0,c
  4514  000840  0012               	return	
  4515                           
  4516                           ; BSR set to: 0
  4517                           ;LCDNokia5110.c: 197: {
  4518                           
  4519                           ; BSR set to: 0
  4520                           
  4521                           ; BSR set to: 0
  4522  000842  0E01               	movlw	1
  4523  000844  2784               	addwf	LCD_delay@counter& (0+255),f,b
  4524  000846  0E00               	movlw	0
  4525  000848  2385               	addwfc	(LCD_delay@counter+1)& (0+255),f,b
  4526  00084A  2386               	addwfc	(LCD_delay@counter+2)& (0+255),f,b
  4527  00084C  2387               	addwfc	(LCD_delay@counter+3)& (0+255),f,b
  4528  00084E  D7F0               	goto	l2567
  4529  000850                     l529:
  4530                           
  4531                           ; BSR set to: 0
  4532  000850  0012               	return		;funcret
  4533  000852                     __end_of_LCD_delay:
  4534                           	opt stack 0
  4535                           tosu	equ	0xFFF
  4536                           tosh	equ	0xFFE
  4537                           tosl	equ	0xFFD
  4538                           pclath	equ	0xFFA
  4539                           tblptru	equ	0xFF8
  4540                           tblptrh	equ	0xFF7
  4541                           tblptrl	equ	0xFF6
  4542                           tablat	equ	0xFF5
  4543                           prodh	equ	0xFF4
  4544                           prodl	equ	0xFF3
  4545                           postinc0	equ	0xFEE
  4546                           wreg	equ	0xFE8
  4547                           status	equ	0xFD8
  4548                           
  4549 ;; *************** function _LCDNokia_writeByte *****************
  4550 ;; Defined at:
  4551 ;;		line 135 in file "LCDNokia5110.c"
  4552 ;; Parameters:    Size  Location     Type
  4553 ;;  DataOrCmd       1    wreg     unsigned char 
  4554 ;;  data            1    4[BANK0 ] unsigned char 
  4555 ;; Auto vars:     Size  Location     Type
  4556 ;;  DataOrCmd       1    5[BANK0 ] unsigned char 
  4557 ;; Return value:  Size  Location     Type
  4558 ;;                  1    wreg      void 
  4559 ;; Registers used:
  4560 ;;		wreg, status,2, status,0, cstack
  4561 ;; Tracked objects:
  4562 ;;		On entry : 0/0
  4563 ;;		On exit  : 0/0
  4564 ;;		Unchanged: 0/0
  4565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4566 ;;      Params:         0       1       0       0
  4567 ;;      Locals:         0       1       0       0
  4568 ;;      Temps:          0       0       0       0
  4569 ;;      Totals:         0       2       0       0
  4570 ;;Total ram usage:        2 bytes
  4571 ;; Hardware stack levels used:    1
  4572 ;; Hardware stack levels required when called:    2
  4573 ;; This function calls:
  4574 ;;		_GPIO_clearPIN
  4575 ;;		_GPIO_setPIN
  4576 ;;		_SPI_write
  4577 ;; This function is called by:
  4578 ;;		_LCDNokia_init
  4579 ;;		_LCDNokia_clear
  4580 ;;		_LCDNokia_gotoXY
  4581 ;;		_LCDNokia_bitmap
  4582 ;;		_LCDNokia_sendChar
  4583 ;; This function uses a non-reentrant model
  4584 ;;
  4585                           
  4586                           	psect	text39
  4587  000852                     __ptext39:
  4588                           	opt stack 0
  4589  000852                     _LCDNokia_writeByte:
  4590                           	opt stack 25
  4591                           
  4592                           ; BSR set to: 0
  4593                           ;incstack = 0
  4594                           ;LCDNokia_writeByte@DataOrCmd stored from wreg
  4595  000852  0100               	movlb	0	; () banked
  4596  000854  6F89               	movwf	LCDNokia_writeByte@DataOrCmd& (0+255),b
  4597                           
  4598                           ;LCDNokia5110.c: 137: if(DataOrCmd)
  4599  000856  0100               	movlb	0	; () banked
  4600  000858  5189               	movf	LCDNokia_writeByte@DataOrCmd& (0+255),w,b
  4601  00085A  B4D8               	btfsc	status,2,c
  4602  00085C  D006               	goto	l503
  4603                           
  4604                           ; BSR set to: 0
  4605                           ;LCDNokia5110.c: 138: {
  4606                           ;LCDNokia5110.c: 139: GPIO_setPIN(GPIO_B, 2);
  4607  00085E  0E02               	movlw	2
  4608  000860  6F84               	movwf	GPIO_setPIN@pin& (0+255),b
  4609  000862  0E01               	movlw	1
  4610  000864  EC8C  F001         	call	_GPIO_setPIN
  4611                           
  4612                           ;LCDNokia5110.c: 140: }
  4613  000868  D006               	goto	l504
  4614  00086A                     l503:
  4615                           
  4616                           ;LCDNokia5110.c: 141: else
  4617                           ;LCDNokia5110.c: 142: {
  4618                           ;LCDNokia5110.c: 143: GPIO_clearPIN(GPIO_B, 2);
  4619  00086A  0E02               	movlw	2
  4620  00086C  0100               	movlb	0	; () banked
  4621  00086E  6F84               	movwf	GPIO_clearPIN@pin& (0+255),b
  4622  000870  0E01               	movlw	1
  4623  000872  EC4F  F001         	call	_GPIO_clearPIN
  4624  000876                     l504:
  4625                           
  4626                           ;LCDNokia5110.c: 144: }
  4627                           ;LCDNokia5110.c: 146: SPI_write(data);
  4628  000876  0100               	movlb	0	; () banked
  4629  000878  5188               	movf	LCDNokia_writeByte@data& (0+255),w,b
  4630  00087A  EC64  F004         	call	_SPI_write
  4631  00087E  0012               	return		;funcret
  4632  000880                     __end_of_LCDNokia_writeByte:
  4633                           	opt stack 0
  4634                           tosu	equ	0xFFF
  4635                           tosh	equ	0xFFE
  4636                           tosl	equ	0xFFD
  4637                           pclath	equ	0xFFA
  4638                           tblptru	equ	0xFF8
  4639                           tblptrh	equ	0xFF7
  4640                           tblptrl	equ	0xFF6
  4641                           tablat	equ	0xFF5
  4642                           prodh	equ	0xFF4
  4643                           prodl	equ	0xFF3
  4644                           postinc0	equ	0xFEE
  4645                           wreg	equ	0xFE8
  4646                           status	equ	0xFD8
  4647                           
  4648 ;; *************** function _SPI_write *****************
  4649 ;; Defined at:
  4650 ;;		line 82 in file "SPI.c"
  4651 ;; Parameters:    Size  Location     Type
  4652 ;;  data            1    wreg     unsigned char 
  4653 ;; Auto vars:     Size  Location     Type
  4654 ;;  data            1    1[BANK0 ] unsigned char 
  4655 ;;  success         1    0[BANK0 ] char 
  4656 ;; Return value:  Size  Location     Type
  4657 ;;                  1    wreg      char 
  4658 ;; Registers used:
  4659 ;;		wreg, status,2
  4660 ;; Tracked objects:
  4661 ;;		On entry : 0/0
  4662 ;;		On exit  : 0/0
  4663 ;;		Unchanged: 0/0
  4664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4665 ;;      Params:         0       0       0       0
  4666 ;;      Locals:         0       2       0       0
  4667 ;;      Temps:          0       0       0       0
  4668 ;;      Totals:         0       2       0       0
  4669 ;;Total ram usage:        2 bytes
  4670 ;; Hardware stack levels used:    1
  4671 ;; Hardware stack levels required when called:    1
  4672 ;; This function calls:
  4673 ;;		Nothing
  4674 ;; This function is called by:
  4675 ;;		_LCDNokia_writeByte
  4676 ;; This function uses a non-reentrant model
  4677 ;;
  4678                           
  4679                           	psect	text40
  4680  0008C8                     __ptext40:
  4681                           	opt stack 0
  4682  0008C8                     _SPI_write:
  4683                           	opt stack 25
  4684                           
  4685                           ;incstack = 0
  4686                           ;SPI_write@data stored from wreg
  4687  0008C8  0100               	movlb	0	; () banked
  4688  0008CA  6F85               	movwf	SPI_write@data& (0+255),b
  4689                           
  4690                           ;SPI.c: 84: int8_t success;
  4691                           ;SPI.c: 86: SSPCONbits.WCOL = 0;
  4692  0008CC  9EC6               	bcf	4038,7,c	;volatile
  4693                           
  4694                           ;SPI.c: 87: SSPBUF = data;
  4695  0008CE  C085  FFC9         	movff	SPI_write@data,4041	;volatile
  4696  0008D2  A0C7               	btfss	4039,0,c	;volatile
  4697  0008D4  D7FE               	goto	l181
  4698                           
  4699                           ;SPI.c: 90: success = (SSPCONbits.WCOL == 1) ? 0: 1;
  4700  0008D6  BEC6               	btfsc	4038,7,c	;volatile
  4701  0008D8  D002               	goto	u1000
  4702  0008DA  0E01               	movlw	1
  4703  0008DC  D001               	goto	u1010
  4704  0008DE                     u1000:
  4705  0008DE  0E00               	movlw	0
  4706  0008E0                     u1010:
  4707  0008E0  0100               	movlb	0	; () banked
  4708  0008E2  6F84               	movwf	SPI_write@success& (0+255),b
  4709                           
  4710                           ; BSR set to: 0
  4711                           
  4712                           ;SPI.c: 92: return success;
  4713                           ;	Return value of _SPI_write is never used
  4714  0008E4  0012               	return		;funcret
  4715  0008E6                     __end_of_SPI_write:
  4716                           	opt stack 0
  4717                           tosu	equ	0xFFF
  4718                           tosh	equ	0xFFE
  4719                           tosl	equ	0xFFD
  4720                           pclath	equ	0xFFA
  4721                           tblptru	equ	0xFF8
  4722                           tblptrh	equ	0xFF7
  4723                           tblptrl	equ	0xFF6
  4724                           tablat	equ	0xFF5
  4725                           prodh	equ	0xFF4
  4726                           prodl	equ	0xFF3
  4727                           postinc0	equ	0xFEE
  4728                           wreg	equ	0xFE8
  4729                           status	equ	0xFD8
  4730                           
  4731 ;; *************** function _GPIO_setPIN *****************
  4732 ;; Defined at:
  4733 ;;		line 151 in file "GPIO.c"
  4734 ;; Parameters:    Size  Location     Type
  4735 ;;  portName        1    wreg     enum E3075
  4736 ;;  pin             1    0[BANK0 ] unsigned char 
  4737 ;; Auto vars:     Size  Location     Type
  4738 ;;  portName        1    3[BANK0 ] enum E3075
  4739 ;; Return value:  Size  Location     Type
  4740 ;;                  1    wreg      void 
  4741 ;; Registers used:
  4742 ;;		wreg, status,2, status,0
  4743 ;; Tracked objects:
  4744 ;;		On entry : 0/0
  4745 ;;		On exit  : 0/0
  4746 ;;		Unchanged: 0/0
  4747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4748 ;;      Params:         0       1       0       0
  4749 ;;      Locals:         0       1       0       0
  4750 ;;      Temps:          0       2       0       0
  4751 ;;      Totals:         0       4       0       0
  4752 ;;Total ram usage:        4 bytes
  4753 ;; Hardware stack levels used:    1
  4754 ;; Hardware stack levels required when called:    1
  4755 ;; This function calls:
  4756 ;;		Nothing
  4757 ;; This function is called by:
  4758 ;;		_LCDNokia_init
  4759 ;;		_LCDNokia_writeByte
  4760 ;; This function uses a non-reentrant model
  4761 ;;
  4762                           
  4763                           	psect	text41
  4764  000318                     __ptext41:
  4765                           	opt stack 0
  4766  000318                     _GPIO_setPIN:
  4767                           	opt stack 25
  4768                           
  4769                           ; BSR set to: 0
  4770                           ;incstack = 0
  4771                           ;GPIO_setPIN@portName stored from wreg
  4772  000318  0100               	movlb	0	; () banked
  4773  00031A  6F87               	movwf	GPIO_setPIN@portName& (0+255),b
  4774                           
  4775                           ;GPIO.c: 154: switch(portName)
  4776  00031C  D02B               	goto	l120
  4777  00031E                     
  4778                           ;GPIO.c: 157: PORTA |= (1<<pin);
  4779  00031E  C084  F085         	movff	GPIO_setPIN@pin,??_GPIO_setPIN
  4780  000322  0E01               	movlw	1
  4781  000324  0100               	movlb	0	; () banked
  4782  000326  6F86               	movwf	(??_GPIO_setPIN+1)& (0+255),b
  4783  000328  2B85               	incf	??_GPIO_setPIN& (0+255),f,b
  4784  00032A  D002               	goto	u934
  4785  00032C                     u935:
  4786  00032C  90D8               	bcf	status,0,c
  4787  00032E  3786               	rlcf	(??_GPIO_setPIN+1)& (0+255),f,b
  4788  000330                     u934:
  4789  000330  2F85               	decfsz	??_GPIO_setPIN& (0+255),f,b
  4790  000332  D7FC               	goto	u935
  4791  000334  0100               	movlb	0	; () banked
  4792  000336  5186               	movf	(??_GPIO_setPIN+1)& (0+255),w,b
  4793  000338  1280               	iorwf	3968,f,c	;volatile
  4794                           
  4795                           ;GPIO.c: 158: break;
  4796  00033A  0012               	return	
  4797  00033C                     
  4798                           ; BSR set to: 0
  4799                           ;GPIO.c: 160: PORTB |= (1<<pin);
  4800                           
  4801                           ; BSR set to: 0
  4802  00033C  C084  F085         	movff	GPIO_setPIN@pin,??_GPIO_setPIN
  4803  000340  0E01               	movlw	1
  4804  000342  6F86               	movwf	(??_GPIO_setPIN+1)& (0+255),b
  4805  000344  2B85               	incf	??_GPIO_setPIN& (0+255),f,b
  4806  000346  D002               	goto	u944
  4807  000348                     u945:
  4808  000348  90D8               	bcf	status,0,c
  4809  00034A  3786               	rlcf	(??_GPIO_setPIN+1)& (0+255),f,b
  4810  00034C                     u944:
  4811  00034C  2F85               	decfsz	??_GPIO_setPIN& (0+255),f,b
  4812  00034E  D7FC               	goto	u945
  4813  000350  0100               	movlb	0	; () banked
  4814  000352  5186               	movf	(??_GPIO_setPIN+1)& (0+255),w,b
  4815  000354  1281               	iorwf	3969,f,c	;volatile
  4816                           
  4817                           ;GPIO.c: 161: break;
  4818  000356  0012               	return	
  4819  000358                     
  4820                           ; BSR set to: 0
  4821                           ;GPIO.c: 163: PORTC |= (1<<pin);
  4822                           
  4823                           ; BSR set to: 0
  4824  000358  C084  F085         	movff	GPIO_setPIN@pin,??_GPIO_setPIN
  4825  00035C  0E01               	movlw	1
  4826  00035E  6F86               	movwf	(??_GPIO_setPIN+1)& (0+255),b
  4827  000360  2B85               	incf	??_GPIO_setPIN& (0+255),f,b
  4828  000362  D002               	goto	u954
  4829  000364                     u955:
  4830  000364  90D8               	bcf	status,0,c
  4831  000366  3786               	rlcf	(??_GPIO_setPIN+1)& (0+255),f,b
  4832  000368                     u954:
  4833  000368  2F85               	decfsz	??_GPIO_setPIN& (0+255),f,b
  4834  00036A  D7FC               	goto	u955
  4835  00036C  0100               	movlb	0	; () banked
  4836  00036E  5186               	movf	(??_GPIO_setPIN+1)& (0+255),w,b
  4837  000370  1282               	iorwf	3970,f,c	;volatile
  4838                           
  4839                           ; BSR set to: 0
  4840                           ;GPIO.c: 167: }
  4841                           
  4842                           ; BSR set to: 0
  4843                           ;GPIO.c: 166: break;
  4844                           
  4845                           ;GPIO.c: 165: default:
  4846                           
  4847                           ;GPIO.c: 164: break;
  4848  000372  0012               	return	
  4849  000374                     l120:
  4850                           
  4851                           ; BSR set to: 0
  4852  000374  0100               	movlb	0	; () banked
  4853  000376  5187               	movf	GPIO_setPIN@portName& (0+255),w,b
  4854                           
  4855                           ; Switch size 1, requested type "space"
  4856                           ; Number of cases is 3, Range of values is 0 to 2
  4857                           ; switch strategies available:
  4858                           ; Name         Instructions Cycles
  4859                           ; simple_byte           10     6 (average)
  4860                           ;	Chosen strategy is simple_byte
  4861  000378  0A00               	xorlw	0	; case 0
  4862  00037A  B4D8               	btfsc	status,2,c
  4863  00037C  D7D0               	goto	l121
  4864  00037E  0A01               	xorlw	1	; case 1
  4865  000380  B4D8               	btfsc	status,2,c
  4866  000382  D7DC               	goto	l123
  4867  000384  0A03               	xorlw	3	; case 2
  4868  000386  A4D8               	btfss	status,2,c
  4869  000388  0012               	return	
  4870  00038A  D7E6               	goto	l124
  4871  00038C                     __end_of_GPIO_setPIN:
  4872                           	opt stack 0
  4873                           tosu	equ	0xFFF
  4874                           tosh	equ	0xFFE
  4875                           tosl	equ	0xFFD
  4876                           pclath	equ	0xFFA
  4877                           tblptru	equ	0xFF8
  4878                           tblptrh	equ	0xFF7
  4879                           tblptrl	equ	0xFF6
  4880                           tablat	equ	0xFF5
  4881                           prodh	equ	0xFF4
  4882                           prodl	equ	0xFF3
  4883                           postinc0	equ	0xFEE
  4884                           wreg	equ	0xFE8
  4885                           status	equ	0xFD8
  4886                           
  4887 ;; *************** function _GPIO_clearPIN *****************
  4888 ;; Defined at:
  4889 ;;		line 170 in file "GPIO.c"
  4890 ;; Parameters:    Size  Location     Type
  4891 ;;  portName        1    wreg     enum E3075
  4892 ;;  pin             1    0[BANK0 ] unsigned char 
  4893 ;; Auto vars:     Size  Location     Type
  4894 ;;  portName        1    3[BANK0 ] enum E3075
  4895 ;; Return value:  Size  Location     Type
  4896 ;;                  1    wreg      void 
  4897 ;; Registers used:
  4898 ;;		wreg, status,2, status,0
  4899 ;; Tracked objects:
  4900 ;;		On entry : 0/0
  4901 ;;		On exit  : 0/0
  4902 ;;		Unchanged: 0/0
  4903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4904 ;;      Params:         0       1       0       0
  4905 ;;      Locals:         0       1       0       0
  4906 ;;      Temps:          0       2       0       0
  4907 ;;      Totals:         0       4       0       0
  4908 ;;Total ram usage:        4 bytes
  4909 ;; Hardware stack levels used:    1
  4910 ;; Hardware stack levels required when called:    1
  4911 ;; This function calls:
  4912 ;;		Nothing
  4913 ;; This function is called by:
  4914 ;;		_LCDNokia_init
  4915 ;;		_LCDNokia_writeByte
  4916 ;; This function uses a non-reentrant model
  4917 ;;
  4918                           
  4919                           	psect	text42
  4920  00029E                     __ptext42:
  4921                           	opt stack 0
  4922  00029E                     _GPIO_clearPIN:
  4923                           	opt stack 25
  4924                           
  4925                           ; BSR set to: 0
  4926                           ;incstack = 0
  4927                           ;GPIO_clearPIN@portName stored from wreg
  4928  00029E  0100               	movlb	0	; () banked
  4929  0002A0  6F87               	movwf	GPIO_clearPIN@portName& (0+255),b
  4930                           
  4931                           ;GPIO.c: 173: switch(portName)
  4932  0002A2  D02E               	goto	l129
  4933  0002A4                     
  4934                           ;GPIO.c: 176: PORTA &= ~(1<<pin);
  4935  0002A4  C084  F085         	movff	GPIO_clearPIN@pin,??_GPIO_clearPIN
  4936  0002A8  0E01               	movlw	1
  4937  0002AA  0100               	movlb	0	; () banked
  4938  0002AC  6F86               	movwf	(??_GPIO_clearPIN+1)& (0+255),b
  4939  0002AE  2B85               	incf	??_GPIO_clearPIN& (0+255),f,b
  4940  0002B0  D002               	goto	u964
  4941  0002B2                     u965:
  4942  0002B2  90D8               	bcf	status,0,c
  4943  0002B4  3786               	rlcf	(??_GPIO_clearPIN+1)& (0+255),f,b
  4944  0002B6                     u964:
  4945  0002B6  2F85               	decfsz	??_GPIO_clearPIN& (0+255),f,b
  4946  0002B8  D7FC               	goto	u965
  4947  0002BA  0100               	movlb	0	; () banked
  4948  0002BC  5186               	movf	(??_GPIO_clearPIN+1)& (0+255),w,b
  4949  0002BE  0AFF               	xorlw	255
  4950  0002C0  1680               	andwf	3968,f,c	;volatile
  4951                           
  4952                           ;GPIO.c: 177: break;
  4953  0002C2  0012               	return	
  4954  0002C4                     
  4955                           ; BSR set to: 0
  4956                           ;GPIO.c: 179: PORTB &= ~(1<<pin);
  4957                           
  4958                           ; BSR set to: 0
  4959  0002C4  C084  F085         	movff	GPIO_clearPIN@pin,??_GPIO_clearPIN
  4960  0002C8  0E01               	movlw	1
  4961  0002CA  6F86               	movwf	(??_GPIO_clearPIN+1)& (0+255),b
  4962  0002CC  2B85               	incf	??_GPIO_clearPIN& (0+255),f,b
  4963  0002CE  D002               	goto	u974
  4964  0002D0                     u975:
  4965  0002D0  90D8               	bcf	status,0,c
  4966  0002D2  3786               	rlcf	(??_GPIO_clearPIN+1)& (0+255),f,b
  4967  0002D4                     u974:
  4968  0002D4  2F85               	decfsz	??_GPIO_clearPIN& (0+255),f,b
  4969  0002D6  D7FC               	goto	u975
  4970  0002D8  0100               	movlb	0	; () banked
  4971  0002DA  5186               	movf	(??_GPIO_clearPIN+1)& (0+255),w,b
  4972  0002DC  0AFF               	xorlw	255
  4973  0002DE  1681               	andwf	3969,f,c	;volatile
  4974                           
  4975                           ;GPIO.c: 180: break;
  4976  0002E0  0012               	return	
  4977  0002E2                     
  4978                           ; BSR set to: 0
  4979                           ;GPIO.c: 182: PORTC &= ~(1<<pin);
  4980                           
  4981                           ; BSR set to: 0
  4982  0002E2  C084  F085         	movff	GPIO_clearPIN@pin,??_GPIO_clearPIN
  4983  0002E6  0E01               	movlw	1
  4984  0002E8  6F86               	movwf	(??_GPIO_clearPIN+1)& (0+255),b
  4985  0002EA  2B85               	incf	??_GPIO_clearPIN& (0+255),f,b
  4986  0002EC  D002               	goto	u984
  4987  0002EE                     u985:
  4988  0002EE  90D8               	bcf	status,0,c
  4989  0002F0  3786               	rlcf	(??_GPIO_clearPIN+1)& (0+255),f,b
  4990  0002F2                     u984:
  4991  0002F2  2F85               	decfsz	??_GPIO_clearPIN& (0+255),f,b
  4992  0002F4  D7FC               	goto	u985
  4993  0002F6  0100               	movlb	0	; () banked
  4994  0002F8  5186               	movf	(??_GPIO_clearPIN+1)& (0+255),w,b
  4995  0002FA  0AFF               	xorlw	255
  4996  0002FC  1682               	andwf	3970,f,c	;volatile
  4997                           
  4998                           ; BSR set to: 0
  4999                           ;GPIO.c: 186: }
  5000                           
  5001                           ; BSR set to: 0
  5002                           ;GPIO.c: 185: break;
  5003                           
  5004                           ;GPIO.c: 184: default:
  5005                           
  5006                           ;GPIO.c: 183: break;
  5007  0002FE  0012               	return	
  5008  000300                     l129:
  5009                           
  5010                           ; BSR set to: 0
  5011  000300  0100               	movlb	0	; () banked
  5012  000302  5187               	movf	GPIO_clearPIN@portName& (0+255),w,b
  5013                           
  5014                           ; Switch size 1, requested type "space"
  5015                           ; Number of cases is 3, Range of values is 0 to 2
  5016                           ; switch strategies available:
  5017                           ; Name         Instructions Cycles
  5018                           ; simple_byte           10     6 (average)
  5019                           ;	Chosen strategy is simple_byte
  5020  000304  0A00               	xorlw	0	; case 0
  5021  000306  B4D8               	btfsc	status,2,c
  5022  000308  D7CD               	goto	l130
  5023  00030A  0A01               	xorlw	1	; case 1
  5024  00030C  B4D8               	btfsc	status,2,c
  5025  00030E  D7DA               	goto	l132
  5026  000310  0A03               	xorlw	3	; case 2
  5027  000312  A4D8               	btfss	status,2,c
  5028  000314  0012               	return	
  5029  000316  D7E5               	goto	l133
  5030  000318                     __end_of_GPIO_clearPIN:
  5031                           	opt stack 0
  5032                           tosu	equ	0xFFF
  5033                           tosh	equ	0xFFE
  5034                           tosl	equ	0xFFD
  5035                           pclath	equ	0xFFA
  5036                           tblptru	equ	0xFF8
  5037                           tblptrh	equ	0xFF7
  5038                           tblptrl	equ	0xFF6
  5039                           tablat	equ	0xFF5
  5040                           prodh	equ	0xFF4
  5041                           prodl	equ	0xFF3
  5042                           postinc0	equ	0xFEE
  5043                           wreg	equ	0xFE8
  5044                           status	equ	0xFD8
  5045                           
  5046 ;; *************** function _GPIO_sourceClock *****************
  5047 ;; Defined at:
  5048 ;;		line 18 in file "GPIO.c"
  5049 ;; Parameters:    Size  Location     Type
  5050 ;;  clk             1    wreg     enum E3061
  5051 ;; Auto vars:     Size  Location     Type
  5052 ;;  clk             1    0[BANK0 ] enum E3061
  5053 ;; Return value:  Size  Location     Type
  5054 ;;                  1    wreg      void 
  5055 ;; Registers used:
  5056 ;;		wreg, status,2, status,0
  5057 ;; Tracked objects:
  5058 ;;		On entry : 0/0
  5059 ;;		On exit  : 0/0
  5060 ;;		Unchanged: 0/0
  5061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5062 ;;      Params:         0       0       0       0
  5063 ;;      Locals:         0       1       0       0
  5064 ;;      Temps:          0       0       0       0
  5065 ;;      Totals:         0       1       0       0
  5066 ;;Total ram usage:        1 bytes
  5067 ;; Hardware stack levels used:    1
  5068 ;; Hardware stack levels required when called:    1
  5069 ;; This function calls:
  5070 ;;		Nothing
  5071 ;; This function is called by:
  5072 ;;		_main
  5073 ;; This function uses a non-reentrant model
  5074 ;;
  5075                           
  5076                           	psect	text43
  5077  0003FC                     __ptext43:
  5078                           	opt stack 0
  5079  0003FC                     _GPIO_sourceClock:
  5080                           	opt stack 29
  5081                           
  5082                           ; BSR set to: 0
  5083                           ;incstack = 0
  5084                           ;GPIO_sourceClock@clk stored from wreg
  5085  0003FC  0100               	movlb	0	; () banked
  5086  0003FE  6F84               	movwf	GPIO_sourceClock@clk& (0+255),b
  5087                           
  5088                           ;GPIO.c: 20: switch(clk)
  5089  000400  D014               	goto	l58
  5090  000402                     
  5091                           ;GPIO.c: 23: OSCCON |= (0x70);
  5092  000402  0E70               	movlw	112
  5093  000404  12D3               	iorwf	4051,f,c	;volatile
  5094                           
  5095                           ;GPIO.c: 24: break;
  5096  000406  0012               	return	
  5097  000408                     
  5098                           ;GPIO.c: 26: OSCCON |= (0x60);
  5099  000408  0E60               	movlw	96
  5100  00040A  12D3               	iorwf	4051,f,c	;volatile
  5101                           
  5102                           ;GPIO.c: 27: break;
  5103  00040C  0012               	return	
  5104  00040E                     
  5105                           ;GPIO.c: 29: OSCCON |= (0x50);
  5106  00040E  0E50               	movlw	80
  5107  000410  12D3               	iorwf	4051,f,c	;volatile
  5108                           
  5109                           ;GPIO.c: 30: break;
  5110  000412  0012               	return	
  5111  000414                     
  5112                           ;GPIO.c: 32: OSCCON |= (0x40);
  5113  000414  8CD3               	bsf	4051,6,c	;volatile
  5114                           
  5115                           ;GPIO.c: 33: break;
  5116  000416  0012               	return	
  5117  000418                     
  5118                           ;GPIO.c: 35: OSCCON |= (0x30);
  5119  000418  0E30               	movlw	48
  5120  00041A  12D3               	iorwf	4051,f,c	;volatile
  5121                           
  5122                           ;GPIO.c: 36: break;
  5123  00041C  0012               	return	
  5124  00041E                     
  5125                           ;GPIO.c: 38: OSCCON |= (0x20);
  5126  00041E  8AD3               	bsf	4051,5,c	;volatile
  5127                           
  5128                           ;GPIO.c: 39: break;
  5129  000420  0012               	return	
  5130  000422                     
  5131                           ;GPIO.c: 41: OSCCON |= (0x10);
  5132  000422  88D3               	bsf	4051,4,c	;volatile
  5133                           
  5134                           ;GPIO.c: 42: break;
  5135  000424  0012               	return	
  5136  000426                     
  5137                           ;GPIO.c: 44: OSCCON |= (0x00);
  5138  000426  50D3               	movf	4051,w,c	;volatile
  5139                           
  5140                           ;GPIO.c: 48: }
  5141                           
  5142                           ;GPIO.c: 47: break;
  5143                           
  5144                           ;GPIO.c: 46: default:
  5145                           
  5146                           ;GPIO.c: 45: break;
  5147  000428  0012               	return	
  5148  00042A                     l58:
  5149  00042A  0100               	movlb	0	; () banked
  5150  00042C  5184               	movf	GPIO_sourceClock@clk& (0+255),w,b
  5151                           
  5152                           ; Switch size 1, requested type "space"
  5153                           ; Number of cases is 8, Range of values is 0 to 7
  5154                           ; switch strategies available:
  5155                           ; Name         Instructions Cycles
  5156                           ; simple_byte           25    13 (average)
  5157                           ;	Chosen strategy is simple_byte
  5158  00042E  0A00               	xorlw	0	; case 0
  5159  000430  B4D8               	btfsc	status,2,c
  5160  000432  D7E7               	goto	l59
  5161  000434  0A01               	xorlw	1	; case 1
  5162  000436  B4D8               	btfsc	status,2,c
  5163  000438  D7E7               	goto	l61
  5164  00043A  0A03               	xorlw	3	; case 2
  5165  00043C  B4D8               	btfsc	status,2,c
  5166  00043E  D7E7               	goto	l62
  5167  000440  0A01               	xorlw	1	; case 3
  5168  000442  B4D8               	btfsc	status,2,c
  5169  000444  D7E7               	goto	l63
  5170  000446  0A07               	xorlw	7	; case 4
  5171  000448  B4D8               	btfsc	status,2,c
  5172  00044A  D7E6               	goto	l64
  5173  00044C  0A01               	xorlw	1	; case 5
  5174  00044E  B4D8               	btfsc	status,2,c
  5175  000450  D7E6               	goto	l65
  5176  000452  0A03               	xorlw	3	; case 6
  5177  000454  B4D8               	btfsc	status,2,c
  5178  000456  D7E5               	goto	l66
  5179  000458  0A01               	xorlw	1	; case 7
  5180  00045A  A4D8               	btfss	status,2,c
  5181  00045C  0012               	return	
  5182  00045E  D7E3               	goto	l67
  5183  000460                     __end_of_GPIO_sourceClock:
  5184                           	opt stack 0
  5185                           tosu	equ	0xFFF
  5186                           tosh	equ	0xFFE
  5187                           tosl	equ	0xFFD
  5188                           pclath	equ	0xFFA
  5189                           tblptru	equ	0xFF8
  5190                           tblptrh	equ	0xFF7
  5191                           tblptrl	equ	0xFF6
  5192                           tablat	equ	0xFF5
  5193                           prodh	equ	0xFF4
  5194                           prodl	equ	0xFF3
  5195                           postinc0	equ	0xFEE
  5196                           wreg	equ	0xFE8
  5197                           status	equ	0xFD8
  5198                           
  5199 ;; *************** function _ButtonInt_config *****************
  5200 ;; Defined at:
  5201 ;;		line 16 in file "Buttons.c"
  5202 ;; Parameters:    Size  Location     Type
  5203 ;;		None
  5204 ;; Auto vars:     Size  Location     Type
  5205 ;;		None
  5206 ;; Return value:  Size  Location     Type
  5207 ;;                  1    wreg      void 
  5208 ;; Registers used:
  5209 ;;		wreg, status,2, status,0, cstack
  5210 ;; Tracked objects:
  5211 ;;		On entry : 0/0
  5212 ;;		On exit  : 0/0
  5213 ;;		Unchanged: 0/0
  5214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5215 ;;      Params:         0       0       0       0
  5216 ;;      Locals:         0       0       0       0
  5217 ;;      Temps:          0       0       0       0
  5218 ;;      Totals:         0       0       0       0
  5219 ;;Total ram usage:        0 bytes
  5220 ;; Hardware stack levels used:    1
  5221 ;; Hardware stack levels required when called:    2
  5222 ;; This function calls:
  5223 ;;		_GPIO_dataDirectionPIN
  5224 ;; This function is called by:
  5225 ;;		_main
  5226 ;; This function uses a non-reentrant model
  5227 ;;
  5228                           
  5229                           	psect	text44
  5230  00098E                     __ptext44:
  5231                           	opt stack 0
  5232  00098E                     _ButtonInt_config:
  5233                           	opt stack 28
  5234                           
  5235                           ;Buttons.c: 19: GPIO_dataDirectionPIN(GPIO_C, 3, GPIO_INPUT);
  5236                           
  5237                           ;incstack = 0
  5238  00098E  0E03               	movlw	3
  5239  000990  0100               	movlb	0	; () banked
  5240  000992  6F84               	movwf	GPIO_dataDirectionPIN@pin& (0+255),b
  5241  000994  0E00               	movlw	0
  5242  000996  6F85               	movwf	GPIO_dataDirectionPIN@state& (0+255),b
  5243  000998  0E02               	movlw	2
  5244  00099A  EC53  F000         	call	_GPIO_dataDirectionPIN
  5245                           
  5246                           ;Buttons.c: 21: INT0IF = 0;
  5247  00099E  92F2               	bcf	intcon,1,c	;volatile
  5248                           
  5249                           ;Buttons.c: 23: INT0IE = 1;
  5250  0009A0  88F2               	bsf	intcon,4,c	;volatile
  5251                           
  5252                           ;Buttons.c: 25: GIE = 1;
  5253  0009A2  8EF2               	bsf	intcon,7,c	;volatile
  5254  0009A4  0012               	return		;funcret
  5255  0009A6                     __end_of_ButtonInt_config:
  5256                           	opt stack 0
  5257                           tosu	equ	0xFFF
  5258                           tosh	equ	0xFFE
  5259                           tosl	equ	0xFFD
  5260                           pclath	equ	0xFFA
  5261                           tblptru	equ	0xFF8
  5262                           tblptrh	equ	0xFF7
  5263                           tblptrl	equ	0xFF6
  5264                           tablat	equ	0xFF5
  5265                           prodh	equ	0xFF4
  5266                           prodl	equ	0xFF3
  5267                           intcon	equ	0xFF2
  5268                           postinc0	equ	0xFEE
  5269                           wreg	equ	0xFE8
  5270                           status	equ	0xFD8
  5271                           
  5272 ;; *************** function _GPIO_dataDirectionPIN *****************
  5273 ;; Defined at:
  5274 ;;		line 51 in file "GPIO.c"
  5275 ;; Parameters:    Size  Location     Type
  5276 ;;  portName        1    wreg     enum E3075
  5277 ;;  pin             1    0[BANK0 ] unsigned char 
  5278 ;;  state           1    1[BANK0 ] enum E3071
  5279 ;; Auto vars:     Size  Location     Type
  5280 ;;  portName        1    4[BANK0 ] enum E3075
  5281 ;; Return value:  Size  Location     Type
  5282 ;;                  1    wreg      void 
  5283 ;; Registers used:
  5284 ;;		wreg, status,2, status,0
  5285 ;; Tracked objects:
  5286 ;;		On entry : 0/0
  5287 ;;		On exit  : 0/0
  5288 ;;		Unchanged: 0/0
  5289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5290 ;;      Params:         0       2       0       0
  5291 ;;      Locals:         0       1       0       0
  5292 ;;      Temps:          0       2       0       0
  5293 ;;      Totals:         0       5       0       0
  5294 ;;Total ram usage:        5 bytes
  5295 ;; Hardware stack levels used:    1
  5296 ;; Hardware stack levels required when called:    1
  5297 ;; This function calls:
  5298 ;;		Nothing
  5299 ;; This function is called by:
  5300 ;;		_UART_init
  5301 ;;		_LCDNokia_init
  5302 ;;		_ButtonInt_config
  5303 ;; This function uses a non-reentrant model
  5304 ;;
  5305                           
  5306                           	psect	text45
  5307  0000A6                     __ptext45:
  5308                           	opt stack 0
  5309  0000A6                     _GPIO_dataDirectionPIN:
  5310                           	opt stack 28
  5311                           
  5312                           ;incstack = 0
  5313                           ;GPIO_dataDirectionPIN@portName stored from wreg
  5314  0000A6  0100               	movlb	0	; () banked
  5315  0000A8  6F88               	movwf	GPIO_dataDirectionPIN@portName& (0+255),b
  5316                           
  5317                           ;GPIO.c: 54: switch(state)
  5318  0000AA  D06C               	goto	l72
  5319  0000AC                     
  5320                           ;GPIO.c: 60: TRISA |= 1<<pin;
  5321  0000AC  C084  F086         	movff	GPIO_dataDirectionPIN@pin,??_GPIO_dataDirectionPIN
  5322  0000B0  0E01               	movlw	1
  5323  0000B2  0100               	movlb	0	; () banked
  5324  0000B4  6F87               	movwf	(??_GPIO_dataDirectionPIN+1)& (0+255),b
  5325  0000B6  2B86               	incf	??_GPIO_dataDirectionPIN& (0+255),f,b
  5326  0000B8  D002               	goto	u1054
  5327  0000BA                     u1055:
  5328  0000BA  90D8               	bcf	status,0,c
  5329  0000BC  3787               	rlcf	(??_GPIO_dataDirectionPIN+1)& (0+255),f,b
  5330  0000BE                     u1054:
  5331  0000BE  2F86               	decfsz	??_GPIO_dataDirectionPIN& (0+255),f,b
  5332  0000C0  D7FC               	goto	u1055
  5333  0000C2  0100               	movlb	0	; () banked
  5334  0000C4  5187               	movf	(??_GPIO_dataDirectionPIN+1)& (0+255),w,b
  5335  0000C6  1292               	iorwf	3986,f,c	;volatile
  5336                           
  5337                           ;GPIO.c: 61: break;
  5338  0000C8  0012               	return	
  5339  0000CA                     
  5340                           ; BSR set to: 0
  5341                           ;GPIO.c: 63: TRISB |= 1<<pin;
  5342                           
  5343                           ; BSR set to: 0
  5344  0000CA  C084  F086         	movff	GPIO_dataDirectionPIN@pin,??_GPIO_dataDirectionPIN
  5345  0000CE  0E01               	movlw	1
  5346  0000D0  6F87               	movwf	(??_GPIO_dataDirectionPIN+1)& (0+255),b
  5347  0000D2  2B86               	incf	??_GPIO_dataDirectionPIN& (0+255),f,b
  5348  0000D4  D002               	goto	u1064
  5349  0000D6                     u1065:
  5350  0000D6  90D8               	bcf	status,0,c
  5351  0000D8  3787               	rlcf	(??_GPIO_dataDirectionPIN+1)& (0+255),f,b
  5352  0000DA                     u1064:
  5353  0000DA  2F86               	decfsz	??_GPIO_dataDirectionPIN& (0+255),f,b
  5354  0000DC  D7FC               	goto	u1065
  5355  0000DE  0100               	movlb	0	; () banked
  5356  0000E0  5187               	movf	(??_GPIO_dataDirectionPIN+1)& (0+255),w,b
  5357  0000E2  1293               	iorwf	3987,f,c	;volatile
  5358                           
  5359                           ;GPIO.c: 64: break;
  5360  0000E4  0012               	return	
  5361  0000E6                     
  5362                           ; BSR set to: 0
  5363                           ;GPIO.c: 66: TRISC |= 1<<pin;
  5364                           
  5365                           ; BSR set to: 0
  5366  0000E6  C084  F086         	movff	GPIO_dataDirectionPIN@pin,??_GPIO_dataDirectionPIN
  5367  0000EA  0E01               	movlw	1
  5368  0000EC  6F87               	movwf	(??_GPIO_dataDirectionPIN+1)& (0+255),b
  5369  0000EE  2B86               	incf	??_GPIO_dataDirectionPIN& (0+255),f,b
  5370  0000F0  D002               	goto	u1074
  5371  0000F2                     u1075:
  5372  0000F2  90D8               	bcf	status,0,c
  5373  0000F4  3787               	rlcf	(??_GPIO_dataDirectionPIN+1)& (0+255),f,b
  5374  0000F6                     u1074:
  5375  0000F6  2F86               	decfsz	??_GPIO_dataDirectionPIN& (0+255),f,b
  5376  0000F8  D7FC               	goto	u1075
  5377  0000FA  0100               	movlb	0	; () banked
  5378  0000FC  5187               	movf	(??_GPIO_dataDirectionPIN+1)& (0+255),w,b
  5379  0000FE  1294               	iorwf	3988,f,c	;volatile
  5380                           
  5381                           ; BSR set to: 0
  5382                           ;GPIO.c: 70: }
  5383                           
  5384                           ; BSR set to: 0
  5385                           ;GPIO.c: 69: break;
  5386                           
  5387                           ;GPIO.c: 68: default:
  5388                           
  5389                           ;GPIO.c: 67: break;
  5390  000100  0012               	return	
  5391  000102                     
  5392                           ; BSR set to: 0
  5393  000102  0100               	movlb	0	; () banked
  5394  000104  5188               	movf	GPIO_dataDirectionPIN@portName& (0+255),w,b
  5395                           
  5396                           ; Switch size 1, requested type "space"
  5397                           ; Number of cases is 3, Range of values is 0 to 2
  5398                           ; switch strategies available:
  5399                           ; Name         Instructions Cycles
  5400                           ; simple_byte           10     6 (average)
  5401                           ;	Chosen strategy is simple_byte
  5402  000106  0A00               	xorlw	0	; case 0
  5403  000108  B4D8               	btfsc	status,2,c
  5404  00010A  D7D0               	goto	l75
  5405  00010C  0A01               	xorlw	1	; case 1
  5406  00010E  B4D8               	btfsc	status,2,c
  5407  000110  D7DC               	goto	l77
  5408  000112  0A03               	xorlw	3	; case 2
  5409  000114  A4D8               	btfss	status,2,c
  5410                           
  5411                           ; BSR set to: 0
  5412                           ;GPIO.c: 71: break;
  5413  000116  0012               	return	
  5414  000118  D7E6               	goto	l78
  5415  00011A                     
  5416                           ; BSR set to: 0
  5417                           ;GPIO.c: 76: TRISA &= (0<<pin);
  5418                           
  5419                           ; BSR set to: 0
  5420  00011A  C084  F086         	movff	GPIO_dataDirectionPIN@pin,??_GPIO_dataDirectionPIN
  5421  00011E  0E00               	movlw	0
  5422  000120  6F87               	movwf	(??_GPIO_dataDirectionPIN+1)& (0+255),b
  5423  000122  2B86               	incf	??_GPIO_dataDirectionPIN& (0+255),f,b
  5424  000124  D002               	goto	u1084
  5425  000126                     u1085:
  5426  000126  90D8               	bcf	status,0,c
  5427  000128  3787               	rlcf	(??_GPIO_dataDirectionPIN+1)& (0+255),f,b
  5428  00012A                     u1084:
  5429  00012A  2F86               	decfsz	??_GPIO_dataDirectionPIN& (0+255),f,b
  5430  00012C  D7FC               	goto	u1085
  5431  00012E  0100               	movlb	0	; () banked
  5432  000130  5187               	movf	(??_GPIO_dataDirectionPIN+1)& (0+255),w,b
  5433  000132  1692               	andwf	3986,f,c	;volatile
  5434                           
  5435                           ;GPIO.c: 77: break;
  5436  000134  0012               	return	
  5437  000136                     
  5438                           ; BSR set to: 0
  5439                           ;GPIO.c: 79: TRISB &= (0<<pin);
  5440                           
  5441                           ; BSR set to: 0
  5442  000136  C084  F086         	movff	GPIO_dataDirectionPIN@pin,??_GPIO_dataDirectionPIN
  5443  00013A  0E00               	movlw	0
  5444  00013C  6F87               	movwf	(??_GPIO_dataDirectionPIN+1)& (0+255),b
  5445  00013E  2B86               	incf	??_GPIO_dataDirectionPIN& (0+255),f,b
  5446  000140  D002               	goto	u1094
  5447  000142                     u1095:
  5448  000142  90D8               	bcf	status,0,c
  5449  000144  3787               	rlcf	(??_GPIO_dataDirectionPIN+1)& (0+255),f,b
  5450  000146                     u1094:
  5451  000146  2F86               	decfsz	??_GPIO_dataDirectionPIN& (0+255),f,b
  5452  000148  D7FC               	goto	u1095
  5453  00014A  0100               	movlb	0	; () banked
  5454  00014C  5187               	movf	(??_GPIO_dataDirectionPIN+1)& (0+255),w,b
  5455  00014E  1693               	andwf	3987,f,c	;volatile
  5456                           
  5457                           ;GPIO.c: 80: break;
  5458  000150  0012               	return	
  5459  000152                     
  5460                           ; BSR set to: 0
  5461                           ;GPIO.c: 82: TRISC &= (0<<pin);
  5462                           
  5463                           ; BSR set to: 0
  5464  000152  C084  F086         	movff	GPIO_dataDirectionPIN@pin,??_GPIO_dataDirectionPIN
  5465  000156  0E00               	movlw	0
  5466  000158  6F87               	movwf	(??_GPIO_dataDirectionPIN+1)& (0+255),b
  5467  00015A  2B86               	incf	??_GPIO_dataDirectionPIN& (0+255),f,b
  5468  00015C  D002               	goto	u1104
  5469  00015E                     u1105:
  5470  00015E  90D8               	bcf	status,0,c
  5471  000160  3787               	rlcf	(??_GPIO_dataDirectionPIN+1)& (0+255),f,b
  5472  000162                     u1104:
  5473  000162  2F86               	decfsz	??_GPIO_dataDirectionPIN& (0+255),f,b
  5474  000164  D7FC               	goto	u1105
  5475  000166  0100               	movlb	0	; () banked
  5476  000168  5187               	movf	(??_GPIO_dataDirectionPIN+1)& (0+255),w,b
  5477  00016A  1694               	andwf	3988,f,c	;volatile
  5478                           
  5479                           ; BSR set to: 0
  5480                           ;GPIO.c: 86: }
  5481                           
  5482                           ; BSR set to: 0
  5483                           ;GPIO.c: 85: break;
  5484                           
  5485                           ;GPIO.c: 84: default:
  5486                           
  5487                           ;GPIO.c: 83: break;
  5488  00016C  0012               	return	
  5489  00016E                     
  5490                           ; BSR set to: 0
  5491                           
  5492                           ; BSR set to: 0
  5493  00016E  5188               	movf	GPIO_dataDirectionPIN@portName& (0+255),w,b
  5494                           
  5495                           ; Switch size 1, requested type "space"
  5496                           ; Number of cases is 3, Range of values is 0 to 2
  5497                           ; switch strategies available:
  5498                           ; Name         Instructions Cycles
  5499                           ; simple_byte           10     6 (average)
  5500                           ;	Chosen strategy is simple_byte
  5501  000170  0A00               	xorlw	0	; case 0
  5502  000172  B4D8               	btfsc	status,2,c
  5503  000174  D7D2               	goto	l83
  5504  000176  0A01               	xorlw	1	; case 1
  5505  000178  B4D8               	btfsc	status,2,c
  5506  00017A  D7DD               	goto	l85
  5507  00017C  0A03               	xorlw	3	; case 2
  5508  00017E  A4D8               	btfss	status,2,c
  5509                           
  5510                           ; BSR set to: 0
  5511                           ;GPIO.c: 90: }
  5512                           
  5513                           ; BSR set to: 0
  5514                           ;GPIO.c: 89: break;
  5515                           
  5516                           ;GPIO.c: 88: default:
  5517                           
  5518                           ; BSR set to: 0
  5519                           ;GPIO.c: 87: break;
  5520  000180  0012               	return	
  5521  000182  D7E7               	goto	l86
  5522  000184                     l72:
  5523                           
  5524                           ; BSR set to: 0
  5525  000184  0100               	movlb	0	; () banked
  5526  000186  5185               	movf	GPIO_dataDirectionPIN@state& (0+255),w,b
  5527                           
  5528                           ; Switch size 1, requested type "space"
  5529                           ; Number of cases is 2, Range of values is 0 to 1
  5530                           ; switch strategies available:
  5531                           ; Name         Instructions Cycles
  5532                           ; simple_byte            7     4 (average)
  5533                           ;	Chosen strategy is simple_byte
  5534  000188  0A00               	xorlw	0	; case 0
  5535  00018A  B4D8               	btfsc	status,2,c
  5536  00018C  D7BA               	goto	l74
  5537  00018E  0A01               	xorlw	1	; case 1
  5538  000190  A4D8               	btfss	status,2,c
  5539  000192  0012               	return	
  5540  000194  D7EC               	goto	l82
  5541  000196                     __end_of_GPIO_dataDirectionPIN:
  5542                           	opt stack 0
  5543                           tosu	equ	0xFFF
  5544                           tosh	equ	0xFFE
  5545                           tosl	equ	0xFFD
  5546                           pclath	equ	0xFFA
  5547                           tblptru	equ	0xFF8
  5548                           tblptrh	equ	0xFF7
  5549                           tblptrl	equ	0xFF6
  5550                           tablat	equ	0xFF5
  5551                           prodh	equ	0xFF4
  5552                           prodl	equ	0xFF3
  5553                           intcon	equ	0xFF2
  5554                           postinc0	equ	0xFEE
  5555                           wreg	equ	0xFE8
  5556                           status	equ	0xFD8
  5557                           
  5558 ;; *************** function _Button1 *****************
  5559 ;; Defined at:
  5560 ;;		line 5 in file "Buttons.c"
  5561 ;; Parameters:    Size  Location     Type
  5562 ;;		None
  5563 ;; Auto vars:     Size  Location     Type
  5564 ;;		None
  5565 ;; Return value:  Size  Location     Type
  5566 ;;                  1    wreg      void 
  5567 ;; Registers used:
  5568 ;;		None
  5569 ;; Tracked objects:
  5570 ;;		On entry : 0/0
  5571 ;;		On exit  : 0/0
  5572 ;;		Unchanged: 0/0
  5573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5574 ;;      Params:         0       0       0       0
  5575 ;;      Locals:         0       0       0       0
  5576 ;;      Temps:         18       0       0       0
  5577 ;;      Totals:        18       0       0       0
  5578 ;;Total ram usage:       18 bytes
  5579 ;; Hardware stack levels used:    1
  5580 ;; This function calls:
  5581 ;;		Nothing
  5582 ;; This function is called by:
  5583 ;;		Interrupt level 2
  5584 ;; This function uses a non-reentrant model
  5585 ;;
  5586                           
  5587                           	psect	intcode
  5588  000008                     __pintcode:
  5589                           	opt stack 0
  5590  000008                     _Button1:
  5591                           	opt stack 24
  5592                           
  5593                           ; BSR set to: 0
  5594                           ;incstack = 0
  5595  000008  824E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5596  00000A  CFFA F03C          	movff	pclath,??_Button1
  5597  00000E  CFFB F03D          	movff	pclatu,??_Button1+1
  5598  000012  CFE9 F03E          	movff	fsr0l,??_Button1+2
  5599  000016  CFEA F03F          	movff	fsr0h,??_Button1+3
  5600  00001A  CFE1 F040          	movff	fsr1l,??_Button1+4
  5601  00001E  CFE2 F041          	movff	fsr1h,??_Button1+5
  5602  000022  CFD9 F042          	movff	fsr2l,??_Button1+6
  5603  000026  CFDA F043          	movff	fsr2h,??_Button1+7
  5604  00002A  CFF3 F044          	movff	prodl,??_Button1+8
  5605  00002E  CFF4 F045          	movff	prodh,??_Button1+9
  5606  000032  CFF6 F046          	movff	tblptrl,??_Button1+10
  5607  000036  CFF7 F047          	movff	tblptrh,??_Button1+11
  5608  00003A  CFF8 F048          	movff	tblptru,??_Button1+12
  5609  00003E  CFF5 F049          	movff	tablat,??_Button1+13
  5610  000042  C04E  F04A         	movff	btemp,??_Button1+14
  5611  000046  C04F  F04B         	movff	btemp+1,??_Button1+15
  5612  00004A  C050  F04C         	movff	btemp+2,??_Button1+16
  5613  00004E  C051  F04D         	movff	btemp+3,??_Button1+17
  5614                           
  5615                           ;Buttons.c: 8: if(INT0IF)
  5616  000052  B2F2               	btfsc	intcon,1,c	;volatile
  5617                           
  5618                           ;Buttons.c: 9: {
  5619                           ;Buttons.c: 11: INT0IF = 0;
  5620  000054  92F2               	bcf	intcon,1,c	;volatile
  5621  000056  C04D  F051         	movff	??_Button1+17,btemp+3
  5622  00005A  C04C  F050         	movff	??_Button1+16,btemp+2
  5623  00005E  C04B  F04F         	movff	??_Button1+15,btemp+1
  5624  000062  C04A  F04E         	movff	??_Button1+14,btemp
  5625  000066  C049  FFF5         	movff	??_Button1+13,tablat
  5626  00006A  C048  FFF8         	movff	??_Button1+12,tblptru
  5627  00006E  C047  FFF7         	movff	??_Button1+11,tblptrh
  5628  000072  C046  FFF6         	movff	??_Button1+10,tblptrl
  5629  000076  C045  FFF4         	movff	??_Button1+9,prodh
  5630  00007A  C044  FFF3         	movff	??_Button1+8,prodl
  5631  00007E  C043  FFDA         	movff	??_Button1+7,fsr2h
  5632  000082  C042  FFD9         	movff	??_Button1+6,fsr2l
  5633  000086  C041  FFE2         	movff	??_Button1+5,fsr1h
  5634  00008A  C040  FFE1         	movff	??_Button1+4,fsr1l
  5635  00008E  C03F  FFEA         	movff	??_Button1+3,fsr0h
  5636  000092  C03E  FFE9         	movff	??_Button1+2,fsr0l
  5637  000096  C03D  FFFB         	movff	??_Button1+1,pclatu
  5638  00009A  C03C  FFFA         	movff	??_Button1,pclath
  5639  00009E  924E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5640  0000A0  0011               	retfie		f
  5641  0000A2                     __end_of_Button1:
  5642                           	opt stack 0
  5643                           tosu	equ	0xFFF
  5644                           tosh	equ	0xFFE
  5645                           tosl	equ	0xFFD
  5646                           pclatu	equ	0xFFB
  5647                           pclath	equ	0xFFA
  5648                           tblptru	equ	0xFF8
  5649                           tblptrh	equ	0xFF7
  5650                           tblptrl	equ	0xFF6
  5651                           tablat	equ	0xFF5
  5652                           prodh	equ	0xFF4
  5653                           prodl	equ	0xFF3
  5654                           intcon	equ	0xFF2
  5655                           postinc0	equ	0xFEE
  5656                           fsr0h	equ	0xFEA
  5657                           fsr0l	equ	0xFE9
  5658                           wreg	equ	0xFE8
  5659                           fsr1h	equ	0xFE2
  5660                           fsr1l	equ	0xFE1
  5661                           fsr2h	equ	0xFDA
  5662                           fsr2l	equ	0xFD9
  5663                           status	equ	0xFD8
  5664                           tosu	equ	0xFFF
  5665                           tosh	equ	0xFFE
  5666                           tosl	equ	0xFFD
  5667                           pclatu	equ	0xFFB
  5668                           pclath	equ	0xFFA
  5669                           tblptru	equ	0xFF8
  5670                           tblptrh	equ	0xFF7
  5671                           tblptrl	equ	0xFF6
  5672                           tablat	equ	0xFF5
  5673                           prodh	equ	0xFF4
  5674                           prodl	equ	0xFF3
  5675                           intcon	equ	0xFF2
  5676                           postinc0	equ	0xFEE
  5677                           fsr0h	equ	0xFEA
  5678                           fsr0l	equ	0xFE9
  5679                           wreg	equ	0xFE8
  5680                           fsr1h	equ	0xFE2
  5681                           fsr1l	equ	0xFE1
  5682                           fsr2h	equ	0xFDA
  5683                           fsr2l	equ	0xFD9
  5684                           status	equ	0xFD8
  5685                           
  5686                           	psect	rparam
  5687  0000                     tosu	equ	0xFFF
  5688                           tosh	equ	0xFFE
  5689                           tosl	equ	0xFFD
  5690                           pclatu	equ	0xFFB
  5691                           pclath	equ	0xFFA
  5692                           tblptru	equ	0xFF8
  5693                           tblptrh	equ	0xFF7
  5694                           tblptrl	equ	0xFF6
  5695                           tablat	equ	0xFF5
  5696                           prodh	equ	0xFF4
  5697                           prodl	equ	0xFF3
  5698                           intcon	equ	0xFF2
  5699                           postinc0	equ	0xFEE
  5700                           fsr0h	equ	0xFEA
  5701                           fsr0l	equ	0xFE9
  5702                           wreg	equ	0xFE8
  5703                           fsr1h	equ	0xFE2
  5704                           fsr1l	equ	0xFE1
  5705                           fsr2h	equ	0xFDA
  5706                           fsr2l	equ	0xFD9
  5707                           status	equ	0xFD8
  5708                           
  5709                           	psect	temp
  5710  00004E                     btemp:
  5711                           	opt stack 0
  5712  00004E                     	ds	1
  5713  0000                     int$flags	set	btemp
  5714  0000                     wtemp6	set	btemp+1
  5715                           tosu	equ	0xFFF
  5716                           tosh	equ	0xFFE
  5717                           tosl	equ	0xFFD
  5718                           pclatu	equ	0xFFB
  5719                           pclath	equ	0xFFA
  5720                           tblptru	equ	0xFF8
  5721                           tblptrh	equ	0xFF7
  5722                           tblptrl	equ	0xFF6
  5723                           tablat	equ	0xFF5
  5724                           prodh	equ	0xFF4
  5725                           prodl	equ	0xFF3
  5726                           intcon	equ	0xFF2
  5727                           postinc0	equ	0xFEE
  5728                           fsr0h	equ	0xFEA
  5729                           fsr0l	equ	0xFE9
  5730                           wreg	equ	0xFE8
  5731                           fsr1h	equ	0xFE2
  5732                           fsr1l	equ	0xFE1
  5733                           fsr2h	equ	0xFDA
  5734                           fsr2l	equ	0xFD9
  5735                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    543
    Data        0
    BSS         95
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     18      77
    BANK0           160     17      53
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    stateTemperature@temperatureFunctions	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitTemperature(), showTemperature(), 

    stateFrequency@frequencyFunctions	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitFrequency(), showFrequency(), 

    statePhaseAngle@phaseAngleFunctions	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitPhaseAngle(), viPhaseAngle(), phPhaseAngle(), 

    statePowerFactor@powerFactorFunctions	PTR FTN(struct .,)struct . size(2) Largest target is 2
		 -> exitPowerFactor(), phPowerFactor(), 

    stateRmsVI@rmsVIFunctions	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitRmsVI(), neutralRmsVI(), phRmsVI(), 

    statePower2@power2Functions	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitPower2(), phPower2(), fhPower2(), 

    statePower1@power1Functions	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitPower1(), vectorPower1(), phPower1(), typesPower1(), 

    stateMainMenu@mainMenuFunctions	PTR FTN(struct .,)struct . size(2) Largest target is 2
		 -> viewMenu(), generalView(), initialLoad(), 

    S868PhaseTemperature$PhaseTemperature	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitTemperature(), showTemperature(), 

    phasesTemperature.PhaseTemperature	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitTemperature(), showTemperature(), 

    S844PhaseFrequency$PhaseFrequency	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitFrequency(), showFrequency(), 

    phasesFrequency.PhaseFrequency	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitFrequency(), showFrequency(), 

    S815PhasePhaseAngle$PhasePhaseAngle	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitPhaseAngle(), viPhaseAngle(), phPhaseAngle(), 

    phasesPhaseAngle.PhasePhaseAngle	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitPhaseAngle(), viPhaseAngle(), phPhaseAngle(), 

    S790PhasePowerFactor$PhasePowerFactor	PTR FTN(struct .,)struct . size(2) Largest target is 2
		 -> exitPowerFactor(), phPowerFactor(), 

    phasesPowerFactor.PhasePowerFactor	PTR FTN(struct .,)struct . size(2) Largest target is 2
		 -> exitPowerFactor(), phPowerFactor(), 

    S762PhaseRmsVI$PhaseRmsVI	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitRmsVI(), neutralRmsVI(), phRmsVI(), 

    phasesRmsVI.PhaseRmsVI	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitRmsVI(), neutralRmsVI(), phRmsVI(), 

    S732PhasePower2$PhasePower2	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitPower2(), phPower2(), fhPower2(), 

    phasesPower2.PhasePower2	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitPower2(), phPower2(), fhPower2(), 

    S697PhasePower1$PhasePower1	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitPower1(), vectorPower1(), phPower1(), typesPower1(), 

    phasesPower1.PhasePower1	PTR FTN(struct .,)struct . size(2) Largest target is 3
		 -> exitPower1(), vectorPower1(), phPower1(), typesPower1(), 

    S666PhaseMainMenu$PhaseMainMenu	PTR FTN(struct .,)struct . size(2) Largest target is 2
		 -> viewMenu(), generalView(), initialLoad(), 

    phasesMainMenu.PhaseMainMenu	PTR FTN(struct .,)struct . size(2) Largest target is 2
		 -> viewMenu(), generalView(), initialLoad(), 

    SPI_init@SPI_Config	PTR const struct . size(2) Largest target is 3
		 -> SPI_Config(CODE[3]), 

    main@mainFunctions	PTR FTN()enum E3172 size(2) Largest target is 1
		 -> stateTemperature(), stateFrequency(), statePhaseAngle(), statePowerFactor(), 
		 -> stateRmsVI(), statePower2(), statePower1(), stateMainMenu(), 

    S45State$stateFunction	PTR FTN()enum E3172 size(2) Largest target is 1
		 -> stateTemperature(), stateFrequency(), statePhaseAngle(), statePowerFactor(), 
		 -> stateRmsVI(), statePower2(), statePower1(), stateMainMenu(), 

    StateProgram.stateFunction	PTR FTN()enum E3172 size(2) Largest target is 1
		 -> stateTemperature(), stateFrequency(), statePhaseAngle(), statePowerFactor(), 
		 -> stateRmsVI(), statePower2(), statePower1(), stateMainMenu(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _Button1 in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_stateMainMenu
    _stateTemperature->_exitTemperature
    _stateTemperature->_showTemperature
    _stateRmsVI->_exitRmsVI
    _stateRmsVI->_neutralRmsVI
    _stateRmsVI->_phRmsVI
    _statePowerFactor->_exitPowerFactor
    _statePowerFactor->_phPowerFactor
    _statePower2->_exitPower2
    _statePower2->_fhPower2
    _statePower2->_phPower2
    _statePower1->_exitPower1
    _statePower1->_phPower1
    _statePower1->_typesPower1
    _statePower1->_vectorPower1
    _statePhaseAngle->_exitPhaseAngle
    _statePhaseAngle->_phPhaseAngle
    _statePhaseAngle->_viPhaseAngle
    _stateMainMenu->_generalView
    _stateMainMenu->_initialLoad
    _stateMainMenu->_viewMenu
    _initialLoad->_LCDNokia_clear
    _LCDNokia_clear->_LCDNokia_gotoXY
    _LCDNokia_gotoXY->_LCDNokia_writeByte
    _stateFrequency->_exitFrequency
    _stateFrequency->_showFrequency
    _UART_init->_GPIO_dataDirectionPIN
    _SPI_init->_SPI_enableClock
    _LCDNokia_init->_LCDNokia_writeByte
    _LCDNokia_writeByte->_GPIO_clearPIN
    _LCDNokia_writeByte->_GPIO_setPIN
    _ButtonInt_config->_GPIO_dataDirectionPIN

Critical Paths under _Button1 in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Button1 in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Button1 in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   16234
                                             14 BANK0      3     3      0
                   _ButtonInt_config
                   _GPIO_sourceClock
                     _LCDNokia_clear
                      _LCDNokia_init
                           _SPI_init
                          _UART_init
                     _stateFrequency *
                      _stateMainMenu *
                    _statePhaseAngle *
                        _statePower1 *
                        _statePower2 *
                   _statePowerFactor *
                         _stateRmsVI *
                   _stateTemperature *
 ---------------------------------------------------------------------------------
 (1) _stateTemperature                                     2     2      0     201
                                              3 BANK0      2     2      0
                    _exitTemperature *
                    _showTemperature *
 ---------------------------------------------------------------------------------
 (2) _showTemperature                                      3     0      3      34
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _exitTemperature                                      3     0      3     133
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (1) _stateRmsVI                                           2     2      0     235
                                              3 BANK0      2     2      0
                          _exitRmsVI *
                       _neutralRmsVI *
                            _phRmsVI *
 ---------------------------------------------------------------------------------
 (2) _phRmsVI                                              3     0      3      34
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _neutralRmsVI                                         3     0      3      34
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _exitRmsVI                                            3     0      3     133
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (1) _statePowerFactor                                     2     2      0     168
                                              2 BANK0      2     2      0
                    _exitPowerFactor *
                      _phPowerFactor *
 ---------------------------------------------------------------------------------
 (2) _phPowerFactor                                        2     0      2      34
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _exitPowerFactor                                      2     0      2     100
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _statePower2                                          2     2      0     235
                                              3 BANK0      2     2      0
                         _exitPower2 *
                           _fhPower2 *
                           _phPower2 *
 ---------------------------------------------------------------------------------
 (2) _phPower2                                             3     0      3      34
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _fhPower2                                             3     0      3      34
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _exitPower2                                           3     0      3     133
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (1) _statePower1                                          2     2      0     215
                                              3 BANK0      2     2      0
                         _exitPower1 *
                           _phPower1 *
                        _typesPower1 *
                       _vectorPower1 *
 ---------------------------------------------------------------------------------
 (2) _vectorPower1                                         3     0      3      23
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _typesPower1                                          3     0      3      34
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _phPower1                                             3     0      3      23
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _exitPower1                                           3     0      3     101
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (1) _statePhaseAngle                                      2     2      0     235
                                              3 BANK0      2     2      0
                     _exitPhaseAngle *
                       _phPhaseAngle *
                       _viPhaseAngle *
 ---------------------------------------------------------------------------------
 (2) _viPhaseAngle                                         3     0      3      34
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _phPhaseAngle                                         3     0      3      34
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _exitPhaseAngle                                       3     0      3     133
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (1) _stateMainMenu                                        2     2      0    4152
                                             12 BANK0      2     2      0
                        _generalView *
                        _initialLoad *
                           _viewMenu *
 ---------------------------------------------------------------------------------
 (2) _viewMenu                                             2     0      2     100
                                             10 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _initialLoad                                          2     0      2    3995
                                             10 BANK0      2     0      2
                     _LCDNokia_clear
 ---------------------------------------------------------------------------------
 (3) _LCDNokia_clear                                       2     2      0    3961
                                              8 BANK0      2     2      0
                    _LCDNokia_gotoXY
                 _LCDNokia_writeByte
 ---------------------------------------------------------------------------------
 (4) _LCDNokia_gotoXY                                      2     1      1    2021
                                              6 BANK0      2     1      1
                 _LCDNokia_writeByte
 ---------------------------------------------------------------------------------
 (2) _generalView                                          2     0      2      23
                                             10 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _stateFrequency                                       2     2      0     201
                                              3 BANK0      2     2      0
                      _exitFrequency *
                      _showFrequency *
 ---------------------------------------------------------------------------------
 (2) _showFrequency                                        3     0      3      34
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _exitFrequency                                        3     0      3     133
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (1) _UART_init                                            4     2      2    1300
                                              5 BANK0      4     2      2
              _GPIO_dataDirectionPIN
 ---------------------------------------------------------------------------------
 (1) _SPI_init                                             4     2      2     357
                                              2 BANK0      4     2      2
                    _SPI_enableClock
                     _SPI_enablePins
 ---------------------------------------------------------------------------------
 (2) _SPI_enablePins                                       1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _SPI_enableClock                                      2     1      1     152
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (1) _LCDNokia_init                                        0     0      0    3702
                      _GPIO_clearPIN
              _GPIO_dataDirectionPIN
                        _GPIO_setPIN
                 _LCDNokia_writeByte
                          _LCD_delay
 ---------------------------------------------------------------------------------
 (2) _LCD_delay                                            4     4      0      46
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _LCDNokia_writeByte                                   2     1      1    1869
                                              4 BANK0      2     1      1
                      _GPIO_clearPIN
                        _GPIO_setPIN
                          _SPI_write
 ---------------------------------------------------------------------------------
 (5) _SPI_write                                            2     2      0      29
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _GPIO_setPIN                                          4     3      1     304
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _GPIO_clearPIN                                        4     3      1     304
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _GPIO_sourceClock                                     1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ButtonInt_config                                     0     0      0    1179
              _GPIO_dataDirectionPIN
 ---------------------------------------------------------------------------------
 (2) _GPIO_dataDirectionPIN                                5     3      2    1179
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _Button1                                             18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ButtonInt_config
     _GPIO_dataDirectionPIN
   _GPIO_sourceClock
   _LCDNokia_clear
     _LCDNokia_gotoXY
       _LCDNokia_writeByte
         _GPIO_clearPIN
         _GPIO_setPIN
         _SPI_write
     _LCDNokia_writeByte
       _GPIO_clearPIN
       _GPIO_setPIN
       _SPI_write
   _LCDNokia_init
     _GPIO_clearPIN
     _GPIO_dataDirectionPIN
     _GPIO_setPIN
     _LCDNokia_writeByte
       _GPIO_clearPIN
       _GPIO_setPIN
       _SPI_write
     _LCD_delay
   _SPI_init
     _SPI_enableClock
     _SPI_enablePins
   _UART_init
     _GPIO_dataDirectionPIN
   _stateFrequency *
     _exitFrequency *
     _showFrequency *
   _stateMainMenu *
     _generalView *
     _initialLoad *
       _LCDNokia_clear
         _LCDNokia_gotoXY
           _LCDNokia_writeByte
             _GPIO_clearPIN
             _GPIO_setPIN
             _SPI_write
         _LCDNokia_writeByte
           _GPIO_clearPIN
           _GPIO_setPIN
           _SPI_write
     _viewMenu *
   _statePhaseAngle *
     _exitPhaseAngle *
     _phPhaseAngle *
     _viPhaseAngle *
   _statePower1 *
     _exitPower1 *
     _phPower1 *
     _typesPower1 *
     _vectorPower1 *
   _statePower2 *
     _exitPower2 *
     _fhPower2 *
     _phPower2 *
   _statePowerFactor *
     _exitPowerFactor *
     _phPowerFactor *
   _stateRmsVI *
     _exitRmsVI *
     _neutralRmsVI *
     _phRmsVI *
   _stateTemperature *
     _exitTemperature *
     _showTemperature *

 _Button1 (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     11      35       5       33.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     12      4D       1       81.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      82       3        0.0%
DATA                 0      0      82      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Thu May 31 14:45:59 2018

                      _LCDNokia_clear 07AE                         _LCDNokia_init 0196  
                       _stateMainMenu 06CE               __size_of_SPI_enablePins 0034  
                         _statePower1 05C8                           _statePower2 056E  
                    GPIO_clearPIN@pin 0084                       _LCDNokia_gotoXY 08A6  
            __size_of_SPI_enableClock 0042                       ??_showFrequency 0087  
                         _SSPSTATbits 000FC7                                    l61 0408  
                                  l37 03C0                                    l62 040E  
                                  l63 0414                                    l72 0184  
                                  l64 0418                                    l65 041E  
                                  l82 016E                                    l74 0102  
                                  l58 042A                                    l66 0422  
                                  l83 011A                                    l75 00AC  
                                  l67 0426                                    l59 0402  
                                  l85 0136                                    l77 00CA  
                                  l86 0152                                    l78 00E6  
              __size_of_GPIO_clearPIN 007A                                   l120 0374  
                                 l121 031E                                   l130 02A4  
                                 l210 025A                                   l123 033C  
                                 l132 02C4                                   l124 0358  
                                 l133 02E2                                   l206 0260  
                                 l207 024E                                   l160 079E  
                                 l129 0300                                   l161 0796  
                                 l209 0254                                   l170 0814  
                                 l163 079A                                   l155 0784  
                                 l171 07F6                                   l156 077C  
                                 l172 07FA                                   l181 08D2  
                                 l158 0780                                   l503 086A  
                                 l504 0876                                   l168 07FE  
                                 l169 07F0                                   l529 0850  
                                 _GIE 007F97                        _stateFrequency 0460  
                        viewMenu@data 008E                                   u934 0330  
                                 u935 032C                                   u944 034C  
                                 u945 0348                                   u954 0368  
                                 u955 0364                                   u964 02B6  
                                 u965 02B2                                   u974 02D4  
                                 u975 02D0                                   u984 02F2  
                                 u985 02EE                                   tosl 000FFD  
                                 wreg 000FE8              __size_of_showTemperature 0018  
                    phPhaseAngle@data 0084             __size_of_stateTemperature 005A  
             phPower1@currentPower1_2 000E                                  l2371 07C0  
                                l2567 0830                                  l2911 0294  
                                l2907 0280                                  l2909 028A  
                                u1000 08DE                                  u1010 08E0  
                                u1104 0162                                  u1040 07DE  
                                u1105 015E                                  u1054 00BE  
                                u1055 00BA                                  u1064 00DA  
                                u1208 04EA                                  u1065 00D6  
                                u1209 0500                                  u1074 00F6  
                                u1218 0490                                  u1075 00F2  
                                u1219 04A6                                  u1084 012A  
                                u1228 0652                                  u1085 0126  
                                u1229 0668                                  u1094 0146  
                                u1158 06FA                                  u1095 0142  
                                u1159 0710                                  u1168 05F8  
                                u1169 060E                                  u1178 059E  
                                u1179 05B4                                  u1188 0544  
                                u1189 055A                                  u1198 06A8  
                                u1278 03E2                                  u1199 06BE  
                                u1279 03F6                          ?_GPIO_setPIN 0084  
                                _main 038C    exitTemperature@currentTemperature2 0060  
                                fsr0h 000FEA                                  fsr1h 000FE2  
                                fsr2h 000FDA                                  fsr0l 000FE9  
                                fsr1l 000FE1                                  fsr2l 000FD9  
                                btemp 004E                     ??_exitTemperature 0087  
                                prodh 000FF4                                  prodl 000FF3  
                       ?_phPhaseAngle 0084                                  start 00A2  
              __end_of_LCDNokia_clear 07EA                    __size_of_LCD_delay 0034  
                     _statePhaseAngle 04BA             __size_of_statePowerFactor 0052  
                      ?_LCDNokia_init 003C                        ?_stateMainMenu 003C  
                        ___param_bank 000000                       __end_of_Button1 00A2  
      stateMainMenu@mainMenuFunctions 0090            statePower1@power1Functions 0087  
                  phRmsVI@currentRms1 007B                     ??_exitPowerFactor 0086  
                    viPhaseAngle@data 0084                __end_of_stateFrequency 04BA  
                    _ButtonInt_config 098E                                 ?_main 003C  
                               _ASCII 1DDF                                 _SPBRG 000FAF  
                               _PORTA 000F80                                 _PORTB 000F81  
                               _PORTC 000F82                __size_of_phPowerFactor 0012  
                               _TRISA 000F92                                 _TRISB 000F93  
                               _TRISC 000F94                                 _TXREG 000FAD  
                        ?_initialLoad 008E                       generalView@data 008E  
                      GPIO_setPIN@pin 0084                       __end_of_phRmsVI 092E  
                  __size_of_UART_init 0082              viewMenu@currentMainMenu3 002A  
                               pclath 000FFA                           _typesPower1 0A2A  
                               tablat 000FF5                      __end_of_SPI_init 076C  
                       _GPIO_clearPIN 029E                                 status 000FD8  
                               wtemp6 004F                        ??_phPhaseAngle 0087  
             phPower2@currentPower2_2 0081                           phRmsVI@data 0084  
           __size_of_GPIO_sourceClock 0064               __end_of_LCDNokia_gotoXY 08C8  
                     ?_LCDNokia_clear 003C                   showTemperature@data 0084  
                  __size_of_SPI_write 001E                       __initialization 0880  
                        __end_of_main 03FC                    _LCDNokia_writeByte 0852  
                     ?_stateFrequency 003C                                ??_main 0092  
                       __activetblptr 000002                   ?_LCDNokia_writeByte 0088  
      phPhaseAngle@currentPhaseAngle1 0072                     ??_SPI_enableClock 0085  
                   __end_of_LCD_delay 0852            statePower2@power2Functions 0087  
                              _ANSEL0 000FB8        exitFrequency@currentFrequency2 0066  
                      ?_GPIO_clearPIN 0084                                _INT0IE 007F94  
                              _INT0IF 007F91               __end_of_statePhaseAngle 0514  
                              _OSCCON 000FD3                                _SSPCON 000FC6  
                              _SSPBUF 000FC9                      __end_of_fhPower2 09FE  
                   ??_showTemperature 0087                  ??_LCDNokia_writeByte 0089  
              __size_of_exitFrequency 0016                       ??_LCDNokia_init 008A  
                       _phPowerFactor 0AAA                             ??_Button1 003C  
                     ??_stateMainMenu 0090                  __size_of_generalView 0012  
                    LCDNokia_gotoXY@x 008B                      LCDNokia_gotoXY@y 008A  
stateTemperature@temperatureFunctions 0087           initialLoad@currentMainMenu1 002E  
                      _SPI_enablePins 07EA                     __end_of_UART_init 029E  
      __size_of_GPIO_dataDirectionPIN 00F0         __end_of_GPIO_dataDirectionPIN 0196  
                    __end_of_phPower1 0A2A                      __end_of_phPower2 0946  
                              clear_0 0886                                clear_1 0892  
                           ??_phRmsVI 0087                   SPI_enableClock@cpol 0084  
                        __mediumconst 1DDE                      __end_of_viewMenu 0AE0  
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8                     __end_of_SPI_write 08E6  
                    _stateTemperature 0622                            __accesstop 0060  
             __end_of__initialization 0898                        ?_phPowerFactor 0084  
                       __end_of_ASCII 1FBF                         ___rparam_used 000001  
                __size_of_GPIO_setPIN 0074                      ?_LCDNokia_gotoXY 008A  
              __end_of_SPI_enablePins 081E                      _statePowerFactor 067C  
                     stateRmsVI@phase 0038                   GPIO_setPIN@portName 0087  
             neutralRmsVI@currentRms2 0078                        __pcstackCOMRAM 003C  
                        ?_statePower1 003C                          ?_statePower2 003C  
                       ?_viPhaseAngle 0084                     _phasesTemperature 1FEF  
                           ?_SPI_init 0086                         _exitFrequency 0A82  
               GPIO_clearPIN@portName 0087                  __end_of_phPhaseAngle 095E  
                     _exitTemperature 09A6                  __size_of_initialLoad 0016  
                     ??_GPIO_clearPIN 0085                          phPower1@data 0084  
                        phPower2@data 0084      exitPhaseAngle@currentPhaseAngle3 006C  
                   _phasesPowerFactor 1FF7                            __pbssBANK0 0060  
                    ?_statePhaseAngle 003C              __end_of_ButtonInt_config 09A6  
                    _GPIO_sourceClock 03FC                       _exitPowerFactor 0A98  
                  __size_of_exitRmsVI 0016    statePhaseAngle@phaseAngleFunctions 0087  
                       ?_neutralRmsVI 0084                       ?_SPI_enablePins 003C  
                      ??_viPhaseAngle 0087             __end_of_phasesTemperature 1FF3  
               __end_of_showFrequency 098E                        ?_exitFrequency 0084  
                          ??_SPI_init 0088                             ?_fhPower2 0084  
                    SPI_write@success 0084             __end_of_phasesPowerFactor 1FFB  
         LCDNokia_writeByte@DataOrCmd 0089                               _SSPSTAT 000FC7  
               stateTemperature@phase 0034                          ?_typesPower1 0084  
                    ??_LCDNokia_clear 008C                       ??_phPowerFactor 0086  
      viPhaseAngle@currentPhaseAngle2 006F                             ?_phPower1 0084  
                           ?_phPower2 0084                               _Button1 0008  
                      ??_neutralRmsVI 0087                               __Hparam 0000  
             __size_of_exitPhaseAngle 0016                               __Lparam 0000  
                    ??_stateFrequency 0087                       _SPI_enableClock 076C  
                  SPI_init@SPI_Config 0086                             ?_viewMenu 008E  
              statePower1@phasePower1 0023                   LCDNokia_clear@index 008C  
       GPIO_dataDirectionPIN@portName 0088                               __pcinit 0880  
             fhPower2@currentPower2_1 0005                            _exitPower1 09FE  
                          _exitPower2 09D2                               __ramtop 0300  
             __end_of_exitTemperature 09BC                               __ptext0 038C  
                             __ptext1 0460                               __ptext2 04BA  
                             __ptext3 067C                               __ptext4 0514  
                             __ptext5 056E                               __ptext6 05C8  
                             __ptext7 06CE                               __ptext8 0622  
                             __ptext9 09A6            typesPower1@currentPower1_1 0011  
                             _phRmsVI 0916                     __end_of_exitRmsVI 09D2  
                          ??_fhPower2 0087                       _showTemperature 08E6  
                  __end_of_SPI_Config 1FFE               __end_of_exitPowerFactor 0AAA  
                           _LCD_delay 081E                  end_of_initialization 0898  
      showFrequency@currentFrequency1 0069                     phPowerFactor@data 0084  
                          ??_phPower1 0087                            ??_phPower2 0087  
                       __Lmediumconst 1DDE                         ?_vectorPower1 0084  
                SPI_enableClock@phase 0085                stateMainMenu@phaseMain 0032  
    stateFrequency@frequencyFunctions 0087                   GPIO_sourceClock@clk 0084  
                           _RCSTAbits 000FAB                            ??_viewMenu 0090  
            __end_of_stateTemperature 067C                               postinc0 000FEE  
              statePower2@phasePower2 0020                       ??_exitFrequency 0087  
               __size_of_phPhaseAngle 0018                  __size_of_statePower1 005A  
                __size_of_statePower2 005A                             _UART_init 021C  
                __end_of_phasesPower1 1FD7                  __end_of_phasesPower2 1FE9  
                exitRmsVI@currentRms3 0075              __end_of_statePowerFactor 06CE  
      statePhaseAngle@phasePhaseAngle 001A                             _TRISCbits 000F94  
                          _stateRmsVI 0514                            ?_LCD_delay 003C  
                __end_of_viPhaseAngle 0976                             _SPI_write 08C8  
                      ??_vectorPower1 0087                         ??_generalView 0090  
                    main@currentState 0094               __end_of_SPI_enableClock 07AE  
                           _TXSTAbits 000FAC           __size_of_LCDNokia_writeByte 002E  
                        _phPhaseAngle 0946                     exitFrequency@data 0084  
               __end_of_LCDNokia_init 021C                 __end_of_stateMainMenu 0720  
    stateTemperature@phaseTemperature 0014                           ?_exitPower1 0084  
                         ?_exitPower2 0084                           _BAUDCTLbits 000FAA  
             __end_of_showTemperature 08FE                 _GPIO_dataDirectionPIN 00A6  
        stateFrequency@phaseFrequency 0017                      ?_exitTemperature 0084  
                          ?_UART_init 0089              __end_of_GPIO_sourceClock 0460  
                __end_of_neutralRmsVI 0916                   start_initialization 0880  
                   __size_of_SPI_init 004C                  stateRmsVI@phaseRmsVI 001D  
                    ?_exitPowerFactor 0084                            ?_SPI_write 003C  
            stateRmsVI@rmsVIFunctions 0087                      ??_SPI_enablePins 0084  
                       ??_GPIO_setPIN 0085                     ?_ButtonInt_config 003C  
                    _phasesPhaseAngle 1FD7                  __size_of_typesPower1 0016  
                  ??_ButtonInt_config 0089                        _exitPhaseAngle 0A56  
                   showFrequency@data 0084                  statePhaseAngle@phase 0036  
                 __end_of_generalView 0ACE                       initialLoad@data 008E  
            __size_of_LCDNokia_gotoXY 0022           generalView@currentMainMenu2 002C  
                    LCD_delay@counter 0084                         ??_initialLoad 0090  
                         __pbssCOMRAM 0001                          fhPower2@data 0084  
                       __pcstackBANK0 0084                           ?_stateRmsVI 003C  
                   __size_of_fhPower2 0016                    exitPhaseAngle@data 0084  
                         ??_LCD_delay 0084                 __end_of_GPIO_clearPIN 0318  
                    vectorPower1@data 0084                      statePower1@phase 003A  
                    statePower2@phase 0039                __end_of_exitPhaseAngle 0A6C  
                 __size_of_exitPower1 0016                   __size_of_exitPower2 0016  
                 exitPowerFactor@data 0084                      ?_SPI_enableClock 0084  
                   __size_of_phPower1 0016                     __size_of_phPower2 0018  
                            ?_Button1 003C                  SPI_enablePins@serial 0084  
                 __end_of_GPIO_setPIN 038C                         SPI_write@data 0085  
            __size_of_statePhaseAngle 005A                             __pintcode 0008  
                       __pmediumconst 1DDE                ?_GPIO_dataDirectionPIN 0084  
                    neutralRmsVI@data 0084                     __size_of_viewMenu 0012  
                    ?_showTemperature 0084                           ??_UART_init 008B  
                __end_of_vectorPower1 0A56                              ?_phRmsVI 0084  
statePowerFactor@powerFactorFunctions 0086                  __end_of_StateProgram 1FCF  
               __size_of_viPhaseAngle 0018                             _exitRmsVI 09BC  
                     typesPower1@data 0084                   __end_of_initialLoad 0A82  
                         ??_SPI_write 0084                           _generalView 0ABC  
                     ?_exitPhaseAngle 0084                   stateFrequency@phase 0035  
               __end_of_phPowerFactor 0ABC                __size_of_showFrequency 0018  
                        _phasesPower1 1FCF                          _phasesPower2 1FE3  
                   main@mainFunctions 0092                   __size_of_stateRmsVI 005A  
                   ?_stateTemperature 003C           vectorPower1@currentPower1_3 000B  
                 __end_of_phasesRmsVI 1FE3                          _viPhaseAngle 095E  
               __size_of_neutralRmsVI 0018                    ??_stateTemperature 0087  
    statePowerFactor@phasePowerFactor 0030                              _SPI_init 0720  
  showTemperature@currentTemperature1 0063                        expBASE10@value 0001  
                   ??_LCDNokia_gotoXY 008B                     ?_statePowerFactor 003C  
                          ?_exitRmsVI 0084                    ??_statePowerFactor 0086  
                     _phasesFrequency 1FF3                           _GPIO_setPIN 0318  
              LCDNokia_writeByte@data 0088                              __Hrparam 0000  
                    __size_of_Button1 009A                          _neutralRmsVI 08FE  
                            __Lrparam 0000               __size_of_LCDNokia_clear 003C  
                       ??_statePower1 0087                         ??_statePower2 0087  
                        ??_exitPower1 0087                          ??_exitPower2 0087  
               __end_of_exitFrequency 0A98                     ??_statePhaseAngle 0087  
            __end_of_phasesPhaseAngle 1FDD                         _showFrequency 0976  
             __size_of_stateFrequency 005A                     ?_GPIO_sourceClock 003C  
                            _fhPower2 09E8                      __size_of_phRmsVI 0018  
                         _initialLoad 0A6C                    ??_GPIO_sourceClock 0084  
                            __ptext10 08E6                              __ptext11 09BC  
                            __ptext20 0A14                              __ptext12 08FE  
                            __ptext21 0A2A                              __ptext13 0916  
                            __ptext30 08A6                              __ptext22 0A40  
                            __ptext14 0A98                              __ptext31 0A82  
                            __ptext23 0A56                              __ptext15 0AAA  
                            __ptext40 08C8                              __ptext32 0976  
                            __ptext24 0946                              __ptext16 09D2  
                            __ptext41 0318                              __ptext33 021C  
                            __ptext25 095E                              __ptext17 09E8  
                            __ptext42 029E                              __ptext34 0720  
                            __ptext26 0ABC                              __ptext18 092E  
                            __ptext43 03FC                              __ptext35 07EA  
                            __ptext27 0A6C                              __ptext19 09FE  
                            __ptext44 098E                              __ptext36 076C  
                            __ptext28 0ACE                              __ptext45 00A6  
                            __ptext37 0196                              __ptext29 07AE  
                            __ptext38 081E                              __ptext39 0852  
                      exitPower1@data 0084                        exitPower2@data 0084  
    phPowerFactor@currentPowerFactor1 0028    exitPowerFactor@currentPowerFactor2 0026  
          __end_of_LCDNokia_writeByte 0880                              _phPower1 0A14  
                            _phPower2 092E                         __size_of_main 0070  
                  __end_of_exitPower1 0A14                    __end_of_exitPower2 09E8  
                         _phasesRmsVI 1FDD                              _viewMenu 0ACE  
               __size_of_vectorPower1 0016                              int$flags 004E  
                 exitTemperature@data 0084             __size_of_ButtonInt_config 0018  
                      ?_showFrequency 0084                        _phasesMainMenu 1FE9  
                 __end_of_statePower1 0622                   __end_of_statePower2 05C8  
                       exitRmsVI@data 0084               __end_of_phasesFrequency 1FF7  
                        ??_stateRmsVI 0087                __size_of_LCDNokia_init 0086  
                  stateMainMenu@phase 003B             exitPower1@currentPower1_4 0008  
          GPIO_dataDirectionPIN@state 0085              __size_of_exitTemperature 0016  
              __size_of_stateMainMenu 0052                           ??_exitRmsVI 0087  
                   UART_init@baudRate 0089                         ??_typesPower1 0087  
                            intlevel2 0000                          _vectorPower1 0A40  
            __size_of_exitPowerFactor 0012                 statePowerFactor@phase 0037  
            GPIO_dataDirectionPIN@pin 0084                          _StateProgram 1FBF  
             ??_GPIO_dataDirectionPIN 0086                __end_of_phasesMainMenu 1FEF  
                  __end_of_stateRmsVI 056E                      ??_exitPhaseAngle 0087  
                        ?_generalView 008E             exitPower2@currentPower2_3 007E  
                          _SSPCONbits 000FC6                   __end_of_typesPower1 0A40  
                          _SPI_Config 1FFB  
