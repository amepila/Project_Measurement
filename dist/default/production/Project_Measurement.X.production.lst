

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Thu May 24 15:48:56 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F2331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    13                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    14  0000                     
    15                           ; Version 1.44
    16                           ; Generated 14/09/2017 GMT
    17                           ; 
    18                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution.
    32                           ; 
    33                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    34                           ;        software without specific prior written permission.
    35                           ; 
    36                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    37                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    38                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    39                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    40                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    41                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    42                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    43                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    44                           ; 
    45                           ; 
    46                           ; Code-generator required, PIC18F2331 Definitions
    47                           ; 
    48                           ; SFR Addresses
    49  0000                     
    50                           	psect	smallconst
    51  000300                     __psmallconst:
    52                           	opt stack 0
    53  000300  00                 	db	0
    54  000301                     _SPI_Config:
    55                           	opt stack 0
    56  000301  00                 	db	0
    57  000302  00                 	db	0
    58  000303  00                 	db	0
    59  000304                     __end_of_SPI_Config:
    60                           	opt stack 0
    61  0000                     _SSPBUF	set	4041
    62  0000                     _PORTCbits	set	3970
    63  0000                     _TRISCbits	set	3988
    64  0000                     _SSPSTATbits	set	4039
    65  0000                     _SSPCONbits	set	4038
    66  0000                     _SSPCON	set	4038
    67  0000                     _SSPSTAT	set	4039
    68  0000                     _ANSEL0	set	4024
    69  0000                     _TRISC	set	3988
    70  0000                     _TRISB	set	3987
    71  0000                     _TRISA	set	3986
    72  000304  00                 	db	0	; dummy byte at the end
    73  0000                     
    74                           ; #config settings
    75                           
    76                           	psect	cinit
    77  0003CE                     __pcinit:
    78                           	opt stack 0
    79  0003CE                     start_initialization:
    80                           	opt stack 0
    81  0003CE                     __initialization:
    82                           	opt stack 0
    83  0003CE                     end_of_initialization:
    84                           	opt stack 0
    85  0003CE                     __end_of__initialization:
    86                           	opt stack 0
    87  0003CE  0E00               	movlw	low (__Lmediumconst shr (0+16))
    88  0003D0  6EF8               	movwf	tblptru,c
    89  0003D2  0100               	movlb	0
    90  0003D4  EFE0  F001         	goto	_main	;jump to C main() function
    91                           tblptru	equ	0xFF8
    92                           
    93                           	psect	cstackCOMRAM
    94  000001                     __pcstackCOMRAM:
    95                           	opt stack 0
    96  000001                     SPI_enableClock@cpol:
    97                           	opt stack 0
    98  000001                     SPI_enablePins@serial:
    99                           	opt stack 0
   100                           
   101                           ; 1 bytes @ 0x0
   102  000001                     	ds	1
   103  000002                     SPI_enableClock@phase:
   104                           	opt stack 0
   105                           
   106                           ; 1 bytes @ 0x1
   107  000002                     	ds	1
   108  000003                     SPI_init@SPI_Config:
   109                           	opt stack 0
   110                           
   111                           ; 2 bytes @ 0x2
   112  000003                     	ds	2
   113  000005                     ??_SPI_init:
   114                           
   115                           ; 1 bytes @ 0x4
   116  000005                     	ds	2
   117  000007                     tblptru	equ	0xFF8
   118                           
   119                           ; 1 bytes @ 0x6
   120 ;;
   121 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   122 ;;
   123 ;; *************** function _main *****************
   124 ;; Defined at:
   125 ;;		line 16 in file "main.c"
   126 ;; Parameters:    Size  Location     Type
   127 ;;		None
   128 ;; Auto vars:     Size  Location     Type
   129 ;;		None
   130 ;; Return value:  Size  Location     Type
   131 ;;                  1    wreg      void 
   132 ;; Registers used:
   133 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   134 ;; Tracked objects:
   135 ;;		On entry : 0/0
   136 ;;		On exit  : 0/0
   137 ;;		Unchanged: 0/0
   138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   139 ;;      Params:         0       0       0       0
   140 ;;      Locals:         0       0       0       0
   141 ;;      Temps:          0       0       0       0
   142 ;;      Totals:         0       0       0       0
   143 ;;Total ram usage:        0 bytes
   144 ;; Hardware stack levels required when called:    2
   145 ;; This function calls:
   146 ;;		_SPI_init
   147 ;; This function is called by:
   148 ;;		Startup code after reset
   149 ;; This function uses a non-reentrant model
   150 ;;
   151                           
   152                           	psect	text0
   153  0003C0                     __ptext0:
   154                           	opt stack 0
   155  0003C0                     _main:
   156                           	opt stack 29
   157                           
   158                           ;main.c: 19: SPI_init(&SPI_Config);
   159                           
   160                           ;incstack = 0
   161  0003C0  0E01               	movlw	low _SPI_Config
   162  0003C2  6E03               	movwf	SPI_init@SPI_Config,c
   163  0003C4  0E03               	movlw	high _SPI_Config
   164  0003C6  6E04               	movwf	SPI_init@SPI_Config+1,c
   165  0003C8  EC83  F001         	call	_SPI_init	;wreg free
   166  0003CC                     l9:
   167                           
   168                           ;main.c: 22: {
   169                           ;main.c: 24: }
   170  0003CC  D7FF               	goto	l9
   171  0003CE                     __end_of_main:
   172                           	opt stack 0
   173                           tblptru	equ	0xFF8
   174                           
   175 ;; *************** function _SPI_init *****************
   176 ;; Defined at:
   177 ;;		line 81 in file "SPI.c"
   178 ;; Parameters:    Size  Location     Type
   179 ;;  SPI_Config      2    2[COMRAM] PTR const struct .
   180 ;;		 -> SPI_Config(3), 
   181 ;; Auto vars:     Size  Location     Type
   182 ;;		None
   183 ;; Return value:  Size  Location     Type
   184 ;;                  1    wreg      void 
   185 ;; Registers used:
   186 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   187 ;; Tracked objects:
   188 ;;		On entry : 0/0
   189 ;;		On exit  : 0/0
   190 ;;		Unchanged: 0/0
   191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   192 ;;      Params:         2       0       0       0
   193 ;;      Locals:         0       0       0       0
   194 ;;      Temps:          2       0       0       0
   195 ;;      Totals:         4       0       0       0
   196 ;;Total ram usage:        4 bytes
   197 ;; Hardware stack levels used:    1
   198 ;; Hardware stack levels required when called:    1
   199 ;; This function calls:
   200 ;;		_SPI_enableClock
   201 ;;		_SPI_enablePins
   202 ;; This function is called by:
   203 ;;		_main
   204 ;; This function uses a non-reentrant model
   205 ;;
   206                           
   207                           	psect	text1
   208  000306                     __ptext1:
   209                           	opt stack 0
   210  000306                     _SPI_init:
   211                           	opt stack 29
   212                           
   213                           ;SPI.c: 83: SPI_enableClock(SPI_Config->SPI_Polarity, SPI_Config->SPI_Phase);
   214                           
   215                           ;incstack = 0
   216  000306  0E01               	movlw	1
   217  000308  2403               	addwf	SPI_init@SPI_Config,w,c
   218  00030A  6E05               	movwf	??_SPI_init& (0+255),c
   219  00030C  0E00               	movlw	0
   220  00030E  2004               	addwfc	SPI_init@SPI_Config+1,w,c
   221  000310  6E06               	movwf	(??_SPI_init+1)& (0+255),c
   222  000312  C005  FFF6         	movff	??_SPI_init,tblptrl
   223  000316  C006  FFF7         	movff	??_SPI_init+1,tblptrh
   224  00031A                     	if	0	;tblptru may be non-zero
   225  00031A                     	endif
   226  00031A                     	if	0	;tblptru may be non-zero
   227  00031A                     	endif
   228  00031A  0008               	tblrd		*
   229  00031C  CFF5 F001          	movff	tablat,SPI_enableClock@cpol
   230  000320  C003  FFF6         	movff	SPI_init@SPI_Config,tblptrl
   231  000324  C004  FFF7         	movff	SPI_init@SPI_Config+1,tblptrh
   232  000328                     	if	0	;tblptru may be non-zero
   233  000328                     	endif
   234  000328                     	if	0	;tblptru may be non-zero
   235  000328                     	endif
   236  000328  0008               	tblrd		*
   237  00032A  50F5               	movf	tablat,w,c
   238  00032C  ECA7  F001         	call	_SPI_enableClock
   239                           
   240                           ;SPI.c: 84: SPI_enablePins(SPI_Config->SPI_Clk);
   241  000330  0E02               	movlw	2
   242  000332  2403               	addwf	SPI_init@SPI_Config,w,c
   243  000334  6E05               	movwf	??_SPI_init& (0+255),c
   244  000336  0E00               	movlw	0
   245  000338  2004               	addwfc	SPI_init@SPI_Config+1,w,c
   246  00033A  6E06               	movwf	(??_SPI_init+1)& (0+255),c
   247  00033C  C005  FFF6         	movff	??_SPI_init,tblptrl
   248  000340  C006  FFF7         	movff	??_SPI_init+1,tblptrh
   249  000344                     	if	0	;tblptru may be non-zero
   250  000344                     	endif
   251  000344                     	if	0	;tblptru may be non-zero
   252  000344                     	endif
   253  000344  0008               	tblrd		*
   254  000346  50F5               	movf	tablat,w,c
   255  000348  ECC6  F001         	call	_SPI_enablePins
   256  00034C  0012               	return		;funcret
   257  00034E                     __end_of_SPI_init:
   258                           	opt stack 0
   259                           tblptru	equ	0xFF8
   260                           tblptrh	equ	0xFF7
   261                           tblptrl	equ	0xFF6
   262                           tablat	equ	0xFF5
   263                           
   264 ;; *************** function _SPI_enablePins *****************
   265 ;; Defined at:
   266 ;;		line 49 in file "SPI.c"
   267 ;; Parameters:    Size  Location     Type
   268 ;;  serial          1    wreg     enum E3069
   269 ;; Auto vars:     Size  Location     Type
   270 ;;  serial          1    0[COMRAM] enum E3069
   271 ;; Return value:  Size  Location     Type
   272 ;;                  1    wreg      void 
   273 ;; Registers used:
   274 ;;		wreg, status,2, status,0
   275 ;; Tracked objects:
   276 ;;		On entry : 0/0
   277 ;;		On exit  : 0/0
   278 ;;		Unchanged: 0/0
   279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   280 ;;      Params:         0       0       0       0
   281 ;;      Locals:         1       0       0       0
   282 ;;      Temps:          0       0       0       0
   283 ;;      Totals:         1       0       0       0
   284 ;;Total ram usage:        1 bytes
   285 ;; Hardware stack levels used:    1
   286 ;; This function calls:
   287 ;;		Nothing
   288 ;; This function is called by:
   289 ;;		_SPI_init
   290 ;; This function uses a non-reentrant model
   291 ;;
   292                           
   293                           	psect	text2
   294  00038C                     __ptext2:
   295                           	opt stack 0
   296  00038C                     _SPI_enablePins:
   297                           	opt stack 29
   298                           
   299                           ;incstack = 0
   300                           ;SPI_enablePins@serial stored from wreg
   301  00038C  6E01               	movwf	SPI_enablePins@serial,c
   302                           
   303                           ;SPI.c: 51: switch(serial)
   304  00038E  D007               	goto	l97
   305  000390                     
   306                           ;SPI.c: 54: SSPCON &= (0x00);
   307  000390  0E00               	movlw	0
   308  000392  6EC6               	movwf	4038,c	;volatile
   309                           
   310                           ;SPI.c: 55: break;
   311  000394  D00E               	goto	l99
   312  000396                     
   313                           ;SPI.c: 57: SSPCON |= (0x01);
   314  000396  80C6               	bsf	4038,0,c	;volatile
   315                           
   316                           ;SPI.c: 58: break;
   317  000398  D00C               	goto	l99
   318  00039A                     
   319                           ;SPI.c: 60: SSPCON |= (0x02);
   320  00039A  82C6               	bsf	4038,1,c	;volatile
   321                           
   322                           ;SPI.c: 64: }
   323                           
   324                           ;SPI.c: 63: break;
   325                           
   326                           ;SPI.c: 62: default:
   327                           
   328                           ;SPI.c: 61: break;
   329  00039C  D00A               	goto	l99
   330  00039E                     l97:
   331  00039E  5001               	movf	SPI_enablePins@serial,w,c
   332                           
   333                           ; Switch size 1, requested type "space"
   334                           ; Number of cases is 3, Range of values is 0 to 2
   335                           ; switch strategies available:
   336                           ; Name         Instructions Cycles
   337                           ; simple_byte           10     6 (average)
   338                           ;	Chosen strategy is simple_byte
   339  0003A0  0A00               	xorlw	0	; case 0
   340  0003A2  B4D8               	btfsc	status,2,c
   341  0003A4  D7F5               	goto	l98
   342  0003A6  0A01               	xorlw	1	; case 1
   343  0003A8  B4D8               	btfsc	status,2,c
   344  0003AA  D7F5               	goto	l100
   345  0003AC  0A03               	xorlw	3	; case 2
   346  0003AE  B4D8               	btfsc	status,2,c
   347  0003B0  D7F4               	goto	l101
   348  0003B2                     l99:
   349                           
   350                           ;SPI.c: 67: TRISCbits.TRISC5 = 0;
   351  0003B2  9A94               	bcf	3988,5,c	;volatile
   352                           
   353                           ;SPI.c: 69: TRISCbits.TRISC4 = 1;
   354  0003B4  8894               	bsf	3988,4,c	;volatile
   355                           
   356                           ;SPI.c: 71: TRISCbits.TRISC7 = 0;
   357  0003B6  9E94               	bcf	3988,7,c	;volatile
   358                           
   359                           ;SPI.c: 73: TRISCbits.TRISC6 = 0;
   360  0003B8  9C94               	bcf	3988,6,c	;volatile
   361                           
   362                           ;SPI.c: 76: SSPCON |= (0x20);
   363  0003BA  8AC6               	bsf	4038,5,c	;volatile
   364                           
   365                           ;SPI.c: 78: PORTCbits.RC6 = 1;
   366  0003BC  8C82               	bsf	3970,6,c	;volatile
   367  0003BE  0012               	return		;funcret
   368  0003C0                     __end_of_SPI_enablePins:
   369                           	opt stack 0
   370                           tblptru	equ	0xFF8
   371                           tblptrh	equ	0xFF7
   372                           tblptrl	equ	0xFF6
   373                           tablat	equ	0xFF5
   374                           status	equ	0xFD8
   375                           
   376 ;; *************** function _SPI_enableClock *****************
   377 ;; Defined at:
   378 ;;		line 15 in file "SPI.c"
   379 ;; Parameters:    Size  Location     Type
   380 ;;  phase           1    wreg     enum E3065
   381 ;;  cpol            1    0[COMRAM] enum E3061
   382 ;; Auto vars:     Size  Location     Type
   383 ;;  phase           1    1[COMRAM] enum E3065
   384 ;; Return value:  Size  Location     Type
   385 ;;                  1    wreg      void 
   386 ;; Registers used:
   387 ;;		wreg, status,2, status,0
   388 ;; Tracked objects:
   389 ;;		On entry : 0/0
   390 ;;		On exit  : 0/0
   391 ;;		Unchanged: 0/0
   392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   393 ;;      Params:         1       0       0       0
   394 ;;      Locals:         1       0       0       0
   395 ;;      Temps:          0       0       0       0
   396 ;;      Totals:         2       0       0       0
   397 ;;Total ram usage:        2 bytes
   398 ;; Hardware stack levels used:    1
   399 ;; This function calls:
   400 ;;		Nothing
   401 ;; This function is called by:
   402 ;;		_SPI_init
   403 ;; This function uses a non-reentrant model
   404 ;;
   405                           
   406                           	psect	text3
   407  00034E                     __ptext3:
   408                           	opt stack 0
   409  00034E                     _SPI_enableClock:
   410                           	opt stack 29
   411                           
   412                           ;incstack = 0
   413                           ;SPI_enableClock@phase stored from wreg
   414  00034E  6E02               	movwf	SPI_enableClock@phase,c
   415                           
   416                           ;SPI.c: 18: SSPSTAT &= (0x3F);
   417  000350  0E3F               	movlw	63
   418  000352  16C7               	andwf	4039,f,c	;volatile
   419                           
   420                           ;SPI.c: 19: SSPCON &= (0xC0);
   421  000354  0EC0               	movlw	192
   422  000356  16C6               	andwf	4038,f,c	;volatile
   423                           
   424                           ;SPI.c: 22: SSPSTAT |= (0x40);
   425  000358  8CC7               	bsf	4039,6,c	;volatile
   426                           
   427                           ;SPI.c: 24: switch(phase)
   428  00035A  D004               	goto	l84
   429  00035C                     l85:
   430                           
   431                           ;SPI.c: 27: SSPCONbits.CKP = 0;
   432  00035C  98C6               	bcf	4038,4,c	;volatile
   433                           
   434                           ;SPI.c: 28: break;
   435  00035E  D00E               	goto	l89
   436  000360                     l87:
   437                           
   438                           ;SPI.c: 30: SSPCONbits.CKP = 1;
   439  000360  88C6               	bsf	4038,4,c	;volatile
   440                           
   441                           ;SPI.c: 34: }
   442                           
   443                           ;SPI.c: 33: break;
   444                           
   445                           ;SPI.c: 32: default:
   446                           
   447                           ;SPI.c: 31: break;
   448  000362  D00C               	goto	l89
   449  000364                     l84:
   450  000364  5002               	movf	SPI_enableClock@phase,w,c
   451                           
   452                           ; Switch size 1, requested type "space"
   453                           ; Number of cases is 2, Range of values is 0 to 1
   454                           ; switch strategies available:
   455                           ; Name         Instructions Cycles
   456                           ; simple_byte            7     4 (average)
   457                           ;	Chosen strategy is simple_byte
   458  000366  0A00               	xorlw	0	; case 0
   459  000368  B4D8               	btfsc	status,2,c
   460  00036A  D7F8               	goto	l85
   461  00036C  0A01               	xorlw	1	; case 1
   462  00036E  B4D8               	btfsc	status,2,c
   463  000370  D7F7               	goto	l87
   464                           
   465                           ;SPI.c: 36: switch(cpol)
   466  000372  D004               	goto	l89
   467  000374                     l90:
   468                           
   469                           ;SPI.c: 39: SSPSTATbits.CKE = 0;
   470  000374  9CC7               	bcf	4039,6,c	;volatile
   471                           
   472                           ;SPI.c: 40: break;
   473  000376  0012               	return	
   474  000378                     l92:
   475                           
   476                           ;SPI.c: 42: SSPSTATbits.CKE = 1;
   477  000378  8CC7               	bsf	4039,6,c	;volatile
   478                           
   479                           ;SPI.c: 46: }
   480                           
   481                           ;SPI.c: 45: break;
   482                           
   483                           ;SPI.c: 44: default:
   484                           
   485                           ;SPI.c: 43: break;
   486  00037A  0012               	return	
   487  00037C                     l89:
   488  00037C  5001               	movf	SPI_enableClock@cpol,w,c
   489                           
   490                           ; Switch size 1, requested type "space"
   491                           ; Number of cases is 2, Range of values is 0 to 1
   492                           ; switch strategies available:
   493                           ; Name         Instructions Cycles
   494                           ; simple_byte            7     4 (average)
   495                           ;	Chosen strategy is simple_byte
   496  00037E  0A00               	xorlw	0	; case 0
   497  000380  B4D8               	btfsc	status,2,c
   498  000382  D7F8               	goto	l90
   499  000384  0A01               	xorlw	1	; case 1
   500  000386  A4D8               	btfss	status,2,c
   501  000388  0012               	return	
   502  00038A  D7F6               	goto	l92
   503  00038C                     __end_of_SPI_enableClock:
   504                           	opt stack 0
   505                           tblptru	equ	0xFF8
   506                           tblptrh	equ	0xFF7
   507                           tblptrl	equ	0xFF6
   508                           tablat	equ	0xFF5
   509                           status	equ	0xFD8
   510                           tblptru	equ	0xFF8
   511                           tblptrh	equ	0xFF7
   512                           tblptrl	equ	0xFF6
   513                           tablat	equ	0xFF5
   514                           status	equ	0xFD8
   515                           
   516                           	psect	rparam
   517  0000                     tblptru	equ	0xFF8
   518                           tblptrh	equ	0xFF7
   519                           tblptrl	equ	0xFF6
   520                           tablat	equ	0xFF5
   521                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    3
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      6       6
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    SPI_init@SPI_Config	PTR const struct . size(2) Largest target is 3
		 -> SPI_Config(CODE[3]), 


Critical Paths under _main in COMRAM

    _main->_SPI_init
    _SPI_init->_SPI_enableClock

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     277
                           _SPI_init
 ---------------------------------------------------------------------------------
 (1) _SPI_init                                             4     2      2     277
                                              2 COMRAM     4     2      2
                    _SPI_enableClock
                     _SPI_enablePins
 ---------------------------------------------------------------------------------
 (2) _SPI_enablePins                                       1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SPI_enableClock                                      2     1      1     120
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SPI_init
     _SPI_enableClock
     _SPI_enablePins

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      6       6       1        6.3%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BIGRAM             2FF      0       0      10        0.0%
DATA                 0      0       0      11        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Thu May 24 15:48:56 2018

                       l9 03CC   __size_of_SPI_enablePins 0034  __size_of_SPI_enableClock 003E  
             _SSPSTATbits 000FC7                        l90 0374                        l92 0378  
                      l84 0364                        l85 035C                        l87 0360  
                      l89 037C                        l97 039E                        l98 0390  
                      l99 03B2                       l100 0396                       l101 039A  
                    _main 03C0                      start 0000              ___param_bank 000000  
                   ?_main 0001                     _TRISA 000F92                     _TRISB 000F93  
                   _TRISC 000F94                     tablat 000FF5          __end_of_SPI_init 034E  
                   status 000FD8           __initialization 03CE              __end_of_main 03CE  
                  ??_main 0007             __activetblptr 000002         ??_SPI_enableClock 0002  
                  _ANSEL0 000FB8                    _SSPCON 000FC6                    _SSPBUF 000FC9  
          _SPI_enablePins 038C       SPI_enableClock@cpol 0001              __mediumconst 0000  
                  tblptrh 000FF7                    tblptrl 000FF6                    tblptru 000FF8  
              __accesstop 0060   __end_of__initialization 03CE             ___rparam_used 000001  
  __end_of_SPI_enablePins 03C0            __pcstackCOMRAM 0001                 ?_SPI_init 0003  
         ?_SPI_enablePins 0001                ??_SPI_init 0005                   _SSPSTAT 000FC7  
                 __Hparam 0000                   __Lparam 0000           _SPI_enableClock 034E  
      SPI_init@SPI_Config 0003              __psmallconst 0300                   __pcinit 03CE  
                 __ramtop 0300                   __ptext0 03C0                   __ptext1 0306  
                 __ptext2 038C                   __ptext3 034E        __end_of_SPI_Config 0304  
    end_of_initialization 03CE             __Lmediumconst 0000      SPI_enableClock@phase 0002  
               _PORTCbits 000F82                 _TRISCbits 000F94   __end_of_SPI_enableClock 038C  
     start_initialization 03CE         __size_of_SPI_init 0048          ??_SPI_enablePins 0001  
        ?_SPI_enableClock 0001      SPI_enablePins@serial 0001               __smallconst 0300  
                _SPI_init 0306                  __Hrparam 0000                  __Lrparam 0000  
           __size_of_main 000E                _SSPCONbits 000FC6                _SPI_Config 0301  
